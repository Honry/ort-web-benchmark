{"version":3,"file":"ort.es5.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/argminmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/concat.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/expand.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gather.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/instance-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/reduce.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/resize.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/slice.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/softmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/split.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/tile.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/wasm-utils.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/../common/dist/cjs/backend-impl.js","webpack://ort/../common/dist/cjs/backend.js","webpack://ort/../common/dist/cjs/env-impl.js","webpack://ort/../common/dist/cjs/env.js","webpack://ort/../common/dist/cjs/index.js","webpack://ort/../common/dist/cjs/inference-session-impl.js","webpack://ort/../common/dist/cjs/inference-session.js","webpack://ort/../common/dist/cjs/onnx-value.js","webpack://ort/../common/dist/cjs/tensor-conversion-impl.js","webpack://ort/../common/dist/cjs/tensor-factory-impl.js","webpack://ort/../common/dist/cjs/tensor-impl.js","webpack://ort/../common/dist/cjs/tensor-utils-impl.js","webpack://ort/../common/dist/cjs/tensor.js","webpack://ort/../common/dist/cjs/version.js","webpack://ort/./node_modules/long/umd/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\n\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {cpus} from 'os';\r\n\r\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\r\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\r\n\r\n/**\r\n * This function initializes all flags for WebAssembly.\r\n *\r\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\r\n * being created, to override default value.\r\n */\r\nexport const initializeFlags = (): void => {\r\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\r\n    env.wasm.initTimeout = 0;\r\n  }\r\n\r\n  if (typeof env.wasm.simd !== 'boolean') {\r\n    env.wasm.simd = true;\r\n  }\r\n\r\n  if (typeof env.wasm.proxy !== 'boolean') {\r\n    env.wasm.proxy = false;\r\n  }\r\n\r\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\r\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\r\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\r\n  }\r\n};\r\n\r\nclass OnnxruntimeWebAssemblyBackend implements Backend {\r\n  async init(): Promise<void> {\r\n    // populate wasm flags\r\n    initializeFlags();\r\n\r\n    // init wasm\r\n    await initializeWebAssemblyInstance();\r\n  }\r\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\r\n    await handler.loadModel(pathOrBuffer, options);\r\n    return Promise.resolve(handler);\r\n  }\r\n}\r\n\r\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\r\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\r\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\r\n// So we import code inside the if-clause to allow terser remove the code safely.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend, env} from 'onnxruntime-common';\r\nimport {version} from './version';\r\n\r\nif (!BUILD_DEFS.DISABLE_WEBGL) {\r\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\r\n  registerBackend('webgl', onnxjsBackend, -10);\r\n}\r\n\r\nif (!BUILD_DEFS.DISABLE_WASM) {\r\n  const wasmBackend = require('./backend-wasm').wasmBackend;\r\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\r\n    registerBackend('webgpu', wasmBackend, 5);\r\n  }\r\n  registerBackend('cpu', wasmBackend, 10);\r\n  registerBackend('wasm', wasmBackend, 10);\r\n  registerBackend('xnnpack', wasmBackend, 9);\r\n  registerBackend('webnn', wasmBackend, 9);\r\n}\r\n\r\nenv.versions.web = version;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\n\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\nimport {decodeUtf8String, LongUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return decodeUtf8String(utf8String);\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(decodeUtf8String);\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend()\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  get async(): boolean|undefined {\r\n    return env.webgl.async;\r\n  }\r\n  set async(value: boolean|undefined) {\r\n    env.webgl.async = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n      if (typeof this.async !== 'boolean') {\r\n        this.async = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\r\n              this.async}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.inputTextureLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xy, outputValue.xy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n\r\n    const swapLastDimsSnippet = `\r\n        int lastDim = coords.${fields[outRank - 1]};\r\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\r\n        coords.${fields[outRank - 2]} = lastDim;\r\n      `;\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${swapLastDimsSnippet}\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.outputTextureLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const layout = this.context.inputTextureLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(\r\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\r\n      public outputTextureLayout: TextureLayout) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(\r\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\r\n      outputTextureLayout: TextureLayout) {\r\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {createPackProgramInfoLoader} from './ops/pack';\r\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\r\nimport {encodeAsUint8} from './ops/uint8-encode';\r\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\r\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\r\n\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\r\n      const inputs =\r\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\r\n              .join('_');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputs;\r\n      return key;\r\n    };\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  /**\r\n   * @returns [width, height]\r\n   */\r\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\r\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\r\n  }\r\n\r\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\r\n    if (inputs.length < program.inputNames.length) {\r\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\r\n    }\r\n    if (program.inputNames.length !== program.inputTypes.length) {\r\n      throw new Error('input names size does not match input types');\r\n    }\r\n\r\n    // create texture info for input\r\n    const inputTextureDatas: TextureData[] = [];\r\n    for (let i = 0; i < program.inputNames.length; ++i) {\r\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\r\n    let artifact = this.session.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // create texture info for output\r\n    const outputTextureLayout = createTextureLayoutFromTextureType(\r\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\r\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\r\n\r\n    if (!artifact) {\r\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\r\n      this.session.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\r\n    return outputTextureData;\r\n  }\r\n\r\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\r\n    const outputTextureData = this.executeProgram(program, inputs);\r\n    return outputTextureData.tensor;\r\n  }\r\n\r\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    // input should match\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\r\n        throw new Error(`input[${i}] property packed inconsistent`);\r\n      }\r\n    }\r\n\r\n    // output should match\r\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, inputs, output);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\r\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\r\n\r\n    if (!td) {\r\n      // check if we have texture data in different type\r\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\r\n      if (td) {\r\n        if (textureType === TextureType.packed) {\r\n          return this.pack(td);\r\n        } else {\r\n          return this.unpack(td);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!td) {\r\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\r\n\r\n      if (textureType === TextureType.packedLastDimension) {\r\n        const group = 1;\r\n        const channels = 4;\r\n        const shape = tensor.dims;\r\n        if (shape.length === 4) {\r\n          // pre-processing for kernel data of Conv.\r\n          //\r\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\r\n          // 1. implement texture based const-folding\r\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\r\n          // 3. run the program before dotProduct.\r\n          //\r\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\r\n          const adjustedLayout =\r\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\r\n          let buffer = tensor.numberData;\r\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\r\n            const numFeatureMaps = shape[0];\r\n            const oldRowSize = shape[1] * shape[2] * shape[3];\r\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n            const newSize = numFeatureMaps * newRowSize;\r\n            buffer = new Float32Array(newSize);\r\n            for (let f = 0; f < numFeatureMaps; ++f) {\r\n              const oldOffset = f * oldRowSize;\r\n              const newOffset = f * newRowSize + f % group * oldRowSize;\r\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n            }\r\n          }\r\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n\r\n      if (textureType === TextureType.packed) {\r\n        const unpackedTextureLayout =\r\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\r\n        const unpackedTextureData = this.createTextureData(\r\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        td = this.pack(unpackedTextureData);\r\n      } else {\r\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n      }\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureLayout: TextureLayout = {\r\n      channels: inputTD.channels,\r\n      height: inputTD.height,\r\n      width: inputTD.width,\r\n      // handle reshaping into scalar Tensors\r\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n      strides: ShapeUtil.computeStrides(reshapedDims),\r\n      unpackedShape: reshapedDims,\r\n    };\r\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\r\n\r\n    // check if the reshape is 'cheap'\r\n    if (isReshapeCheap(input.dims, reshapedDims)) {\r\n      const newTextureLayout: TextureLayout = {\r\n        channels: inputTD.channels,\r\n        height: inputTD.height,\r\n        width: inputTD.width,\r\n        // handle reshaping into scalar Tensors\r\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n        strides: ShapeUtil.computeStrides(reshapedDims),\r\n        unpackedShape: reshapedDims,\r\n        isPacked: true\r\n      };\r\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n      return newTextureData.tensor;\r\n    }\r\n\r\n    const squeezedInputShape = processDims3D(input.dims);\r\n    const squeezedOutputShape = processDims3D(reshapedDims);\r\n\r\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\r\n    const squeezedOutputTensor = this.run(\r\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\r\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\r\n    return outputTensor;\r\n  }\r\n\r\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\r\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\r\n                                                  this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\r\n    if (textureData.isPacked) {\r\n      return this.readTextureAsync(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {cast, parseCastAttributes} from './ops/cast';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\r\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\r\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\r\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\r\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\r\nimport {lrn, parseLrnAttributes} from './ops/lrn';\r\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\r\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\r\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\r\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\r\nimport {reshape} from './ops/reshape';\r\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\r\nimport {shape} from './ops/shape';\r\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\r\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\r\nimport {sum} from './ops/sum';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\r\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', unaryOps.abs],\r\n  ['Acos', '', '7+', unaryOps.acos],\r\n  ['Add', '', '7+', binaryOps.add],\r\n  ['And', '', '7+', binaryOps.and],\r\n  ['Asin', '', '7+', unaryOps.asin],\r\n  ['Atan', '', '7+', unaryOps.atan],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\r\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\r\n  ['Cast', '', '6+', cast, parseCastAttributes],\r\n  ['Ceil', '', '6+', unaryOps.ceil],\r\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\r\n  ['Clip', '', '11+', unaryOps.clipV11],\r\n  ['Concat', '', '4+', concat, parseConcatAttributes],\r\n  ['Conv', '', '1+', conv, parseConvAttributes],\r\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\r\n  ['Cos', '', '7+', unaryOps.cos],\r\n  ['Div', '', '7+', binaryOps.div],\r\n  ['Dropout', '', '7+', unaryOps.identity],\r\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\r\n  ['Equal', '', '7+', binaryOps.equal],\r\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\r\n  ['Exp', '', '6+', unaryOps.exp],\r\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\r\n  ['Floor', '', '6+', unaryOps.floor],\r\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\r\n  ['Gather', '', '1+', gather, parseGatherAttributes],\r\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\r\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\r\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\r\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\r\n  ['Greater', '', '7+', binaryOps.greater],\r\n  ['Identity', '', '1+', unaryOps.identity],\r\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\r\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\r\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\r\n  ['Less', '', '7+', binaryOps.less],\r\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\r\n  ['Log', '', '6+', unaryOps.log],\r\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\r\n  ['Mul', '', '7+', binaryOps.mul],\r\n  ['Neg', '', '6+', unaryOps.neg],\r\n  ['Not', '', '1+', unaryOps.not],\r\n  ['Or', '', '7+', binaryOps.or],\r\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\r\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\r\n  ['Pow', '', '7+', binaryOps.pow],\r\n  ['PRelu', '', '7+', binaryOps.pRelu],\r\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\r\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\r\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\r\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\r\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\r\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\r\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\r\n  ['Relu', '', '6+', unaryOps.relu],\r\n  ['Reshape', '', '5+', reshape],\r\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\r\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\r\n  ['Shape', '', '1+', shape],\r\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\r\n  ['Sin', '', '7+', unaryOps.sin],\r\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\r\n  // The \"semantic\" meaning of axis has changed in opset-13.\r\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\r\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data is split.\r\n  // When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2-12', split, parseSplitAttributes],\r\n  ['Sqrt', '', '6+', unaryOps.sqrt],\r\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\r\n  ['Squeeze', '', '13+', squeezeV13],\r\n  ['Sub', '', '7+', binaryOps.sub],\r\n  ['Sum', '', '6+', sum],\r\n  ['Tan', '', '7+', unaryOps.tan],\r\n  ['Tanh', '', '6+', unaryOps.tanh],\r\n  ['Tile', '', '6+', tile],\r\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\r\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\r\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\r\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\r\n  ['Unsqueeze', '', '13+', unsqueezeV13],\r\n  ['Xor', '', '7+', binaryOps.xor],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  momentum: number;\r\n  spatial: number;\r\n}\r\n\r\nconst batchNormalizationProgramMetadata = {\r\n  name: 'BatchNormalization',\r\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n  inputTypes:\r\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\r\n};\r\n\r\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...batchNormalizationProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\r\n    (node: Graph.Node): BatchNormalizationAttributes => {\r\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\r\n      const momentum = node.attributes.getFloat('momentum', 0.9);\r\n      const spatial = node.attributes.getInt('spatial', 1);\r\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\r\n    };\r\n\r\nconst createBatchNormalizationProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\r\n        ProgramInfo => {\r\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n          const rank = inputs[0].dims.length;\r\n          const [scaleWidth, scaleHeight] =\r\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\r\n          const shaderSource = `\r\n  float process(int[${rank}] indices) {\r\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\r\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\r\n  }`;\r\n          return {\r\n            ...batchNormalizationProgramMetadata,\r\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 5) {\r\n    throw new Error('BatchNormalization requires 5 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n  const mean = inputs[3];\r\n  const var_ = inputs[4];\r\n\r\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n      var_.dims.length !== 1) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n      var_.dims[0] !== X.dims[1]) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nconst createBinaryProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        cacheHint: cacheKey,\r\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\r\n      };\r\n    };\r\n\r\nconst createBinaryProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      let outputShape = inputs[0].dims;\r\n\r\n      const usePackedTexture = handler.session.pack;\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        const outputRank = outputShape.length;\r\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n        const glsl = getGlsl(handler.session.backend.glContext.version);\r\n        const shaderSource = usePackedTexture ? `\r\n      ${glslFunc.body}\r\n      void main() {\r\n        vec4 a = getAAtOutCoords();\r\n        vec4 b = getBAtOutCoords();\r\n        vec4 result = ${glslFunc.name}(a, b);\r\n        ${glsl.output} = result;\r\n      }` :\r\n                                                `\r\n      ${glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\r\n      }`;\r\n\r\n        return {\r\n          name: glslFunc.name,\r\n          inputNames: ['A', 'B'],\r\n          inputTypes: [textureType, textureType],\r\n          output: {dims: outputShape, type: outputTensorType, textureType},\r\n          shaderSource,\r\n          hasMain: usePackedTexture\r\n        };\r\n      }\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n    ${glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\r\n\r\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\r\n\r\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\r\n\r\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\r\n\r\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\r\n\r\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\r\n\r\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\r\n\r\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\r\n\r\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\r\n\r\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\r\n\r\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\r\n\r\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ProtoUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const cast: OperatorImplementation<Tensor.DataType> =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\r\n      validateInputs(inputs);\r\n      return [handler.cast(inputs[0], to)];\r\n    };\r\n\r\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\r\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Cast requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {ConcatAttributes} from './concat';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat (packed)',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.packed),\r\n  cacheHint\r\n});\r\n\r\nconst createPackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const coords = getChannels('coords', rank);\r\n      const dtype = getCoordsDataType(rank);\r\n      const unpackChannel = unpackFromChannel();\r\n\r\n      const shapes = inputs.map(i => i.dims);\r\n      const channels = getGlChannels(rank);\r\n      const offsets: number[] = new Array(shapes.length - 1);\r\n\r\n      offsets[0] = shapes[0][axis];\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\r\n      }\r\n\r\n      const channel = channels[axis];\r\n      const lastChannels = channels.slice(-2);\r\n      const allChannels = channels.join();\r\n\r\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n        return getChannel(\r\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n        }`;\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        const shift = offsets[i - 1];\r\n        getValueSnippet += `\r\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n              return getChannel(\r\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n            }`;\r\n      }\r\n      const lastIndex = offsets.length;\r\n      const shift = offsets[offsets.length - 1];\r\n      getValueSnippet += `\r\n            return getChannel(\r\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n      const shaderSource = `\r\n          ${unpackChannel}\r\n          float getValue(${channels.map(x => 'int ' + x)}) {\r\n            ${getValueSnippet}\r\n          }\r\n\r\n          void main() {\r\n            ${dtype} coords = getOutputCoords();\r\n            int lastDim = coords.${channels[rank - 1]};\r\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\r\n            coords.${channels[rank - 2]} = lastDim;\r\n\r\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.g = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n              result.a = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.b = getValue(${coords});\r\n            }\r\n            ${glsl.output} = result;\r\n          }\r\n        `;\r\n\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createPackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\r\n  const channelIdx = channels.indexOf(channel);\r\n  const res = channels.map((c, idx) => {\r\n    if (idx === channelIdx) {\r\n      return `${c} - ${shift}`;\r\n    } else {\r\n      return c;\r\n    }\r\n  });\r\n  return res.join();\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const concat: OperatorImplementation<ConcatAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n        const output =\r\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      } else {\r\n        const output =\r\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      }\r\n    };\r\n\r\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      let previousSum = 0;\r\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n        previousSum += inputs[i].dims[axis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n      }\r\n\r\n      let getTextureIndexWhereDataResidesMethod = '';\r\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n      if (inputs.length < 5) {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n      } else {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\r\n      }\r\n\r\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\r\n      const shaderSource = `\r\n        ${fetchDataFromCorrectTextureMethod}\r\n        ${getSizeInConcatAxisValueFromIndexMethod}\r\n        ${getTextureIndexWhereDataResidesMethod}\r\n        float process(int indices[${rank}]) {\r\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\r\n\r\n          if(textureIndex != 0) {\r\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\r\n          }\r\n\r\n          return fetchDataFromCorrectTexture(textureIndex, indices);\r\n        }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\r\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\r\n`);\r\n  return `int getTextureWhereDataResides(int index) {\r\n      ${searchAxis.join('')}\r\n    }`;\r\n};\r\n\r\n// TODO: Implement BinarySearch in GLSL\r\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\r\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n\r\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\r\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return _X${i}(indices); }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\r\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\r\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    } else if (i === sizeInConcatAxis.length - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return ${sizeInConcatAxis[i]}; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].type;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  // TODO: Support string concat\r\n  if (inputType === 'string') {\r\n    throw new Error('string tensor is not supported yet');\r\n  }\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.type !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActivationSnippet} from './fuse-utils';\r\n\r\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedGroupedConvProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n      const xShape = inputs[0].dims.slice();\r\n      const wShape = inputs[1].dims.slice();\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n      Logger.verbose(\r\n          'GroupedConv',\r\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\r\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\r\n      const outputShape =\r\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n    ivec2 xRCCorner = coords.zw * strides - pads;\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n    float value = 0.0;\r\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\r\n\r\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n          continue;\r\n        }\r\n\r\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\r\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n            continue;\r\n          }\r\n\r\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createUnpackedGroupedConvProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const conv2DPackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n    };\r\n\r\nexport const conv2DPacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n\r\n      // run im2col\r\n      const im2colOutput = inferenceHandler.run(\r\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\r\n          [inputs[0]]);\r\n\r\n      // reshape kernel\r\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\r\n\r\n      // run matmul\r\n      const matmulInputs =\r\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n\r\n      // reshape output\r\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n      return outputReshaped;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\r\n\r\nconst computeTotalPad =\r\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\r\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\r\n\r\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\r\n  const smallPad = Math.floor(totalPad / 2);\r\n  if (autoPad === 'SAME_UPPER') {\r\n    pads[head] = smallPad;\r\n    pads[tail] = totalPad - smallPad;\r\n  } else if (autoPad === 'SAME_LOWER') {\r\n    pads[head] = totalPad - smallPad;\r\n    pads[tail] = smallPad;\r\n  }\r\n};\r\n\r\nconst calculateOutputShapeAndPads =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\r\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\r\n      const spatialRank = inputShape.length - 2;\r\n      const updateShape = outputShape.length === 0;\r\n      for (let i = 0; i < spatialRank; ++i) {\r\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\r\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\r\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\r\n        if (updateShape) {\r\n          outputShape.push(\r\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\r\n              pads[i] - pads[i + spatialRank]);\r\n        }\r\n      }\r\n    };\r\n\r\nexport interface ConvTransposeAttributes extends ConvAttributes {\r\n  readonly outputPadding: readonly number[];\r\n  readonly outputShape: readonly number[];\r\n}\r\n\r\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\r\n      return convTranspose2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\r\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n    };\r\n\r\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'ConvTranspose',\r\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConvTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvTransposeAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\r\n      const xShape = inputs[0].dims;\r\n      const wShape = inputs[1].dims;\r\n      const outputChannelsPerGroup = wShape[1];\r\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\r\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n\r\n    ivec2 loc = coords.zw + pads;\r\n\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\r\n\r\n    float value = ${valueInit};\r\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\r\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\r\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\r\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\r\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\r\n          ivec2 wLoc = loc - wOff;\r\n          ivec2 wLocIn = wLoc / strides;\r\n          if (\r\n            wLocIn * strides == wLoc &&\r\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\r\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\r\n          ) {\r\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\r\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\r\n            value += xVal * wVal;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConvTransposeProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n\r\n\r\nconst convTranspose2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\r\n        Tensor => {\r\n          const result = inferenceHandler.run(\r\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n          return result;\r\n        };\r\n\r\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n\r\n  const pads = attributes.pads.slice();\r\n  const outputShape = attributes.outputShape.slice();\r\n  const inputShape = inputs[0].dims;\r\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\r\n  // Similarly, automatically infer pads if not specified\r\n  calculateOutputShapeAndPads(\r\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\r\n      attributes.outputPadding, outputShape);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\r\n    (node: Graph.Node): ConvTransposeAttributes => {\r\n      const attributes = node.attributes;\r\n      const activationAttributes = parseInternalActivationAttributes(attributes);\r\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n      const dilations = attributes.getInts('dilations', [1, 1]);\r\n      const group = attributes.getInt('group', 1);\r\n      const kernelShape = attributes.getInts('kernel_shape', []);\r\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\r\n      const outputShape = attributes.getInts('output_shape', []);\r\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n      const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[0];\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  const featureMaps = inputs[1].dims[1] * attributes.group;\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // Wrong output padding dimension\r\n  if (attributes.outputPadding.length !== spatialRank) {\r\n    throw new Error(`output_padding should be ${spatialRank}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // as with kernelShape, must have same number of spatial dims as input\r\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\r\n    throw new Error('invalid output shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('ConvTranspose input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {conv2DPacked} from './conv-pack';\r\nimport {createDotProductProgramInfoLoader} from './dot-product';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createIm2ColProgramInfoLoader} from './im2col';\r\nimport {createMatmulProgramInfoLoader} from './matmul';\r\n\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(2);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputSpatialShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n}\r\n\r\nexport const conv: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\r\n      return conv2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst conv2d: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n      const packMode = inferenceHandler.session.pack;\r\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\r\n      if (adjustedAttributes.group > 1) {\r\n        const result = inferenceHandler.run(\r\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\r\n        return [result];\r\n      } else if (isPointwise && packMode) {\r\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\r\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else {\r\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      }\r\n    };\r\n\r\nconst conv2DUnpackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\r\n    };\r\n\r\nconst conv2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const xIm2Col = inferenceHandler.run(\r\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\r\n\r\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\r\n      const output = inferenceHandler.run(\r\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\r\n      return output;\r\n    };\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\r\n  const attributes = node.attributes;\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n  const dilations = attributes.getInts('dilations', [1, 1]);\r\n  const group = attributes.getInt('group', 1);\r\n  const kernelShape = attributes.getInts('kernel_shape', []);\r\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n  const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface DepthToSpaceAttributes {\r\n  mode: 'DCR'|'CRD';\r\n  blocksize: number;\r\n}\r\n\r\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const blocksize = attributes.blocksize;\r\n      const blocksizeSqr = blocksize * blocksize;\r\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n      const firstReshapeShape = attributes.mode === 'DCR' ?\r\n          [\r\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ] :\r\n          [\r\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ];\r\n\r\n      // const transpose = new WebGLTranspose();\r\n      // const attributes = new Attribute(undefined);\r\n      // attributes.set('perm', 'ints', transposePerm);\r\n      // transpose.initialize(attributes);\r\n\r\n      // First reshape\r\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\r\n\r\n      // transpose\r\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\r\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\r\n\r\n      // Second reshape\r\n      const secondReshapeShape = [\r\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\r\n        inputs[0].dims[3] * blocksize\r\n      ];\r\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\r\n      return [result];\r\n    };\r\n\r\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\r\n    (node: Graph.Node): DepthToSpaceAttributes => {\r\n      // processing node attributes\r\n      const blocksize = node.attributes.getInt('blocksize');\r\n      if (blocksize < 1) {\r\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\r\n      }\r\n      const mode = node.attributes.getString('mode', 'DCR');\r\n      if (mode !== 'DCR' && mode !== 'CRD') {\r\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\r\n      }\r\n      return {mode, blocksize};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (inputs.length !== 1) {\r\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\r\n  }\r\n\r\n  // Input has to be a 4-D tensor\r\n  // TODO: Support string depth-to-space.\r\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\r\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {calculateIm2ColDims} from './im2col';\r\n\r\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\r\n  name: 'ConvDotProduct',\r\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.packedLastDimension],\r\n  cacheKey: attributes.activationCacheKey\r\n});\r\n\r\nconst createDotProductProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\r\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\r\n      const [kWidth, kHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\r\n\r\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\r\n      const [im2colWidth, im2colHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\r\n      const rank = outputShape.length;\r\n\r\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n${activationFunction}\r\nfloat process(int indices[${rank}]) {\r\n  int b[1];\r\n  b[0] = indices[1];\r\n  int im2col[4];\r\n  im2col[0] = indices[0];\r\n  im2col[1] = indices[2];\r\n  im2col[2] = indices[3];\r\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\r\n          im2colStrides[2]};\r\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\r\n  float value = ${initValue};\r\n  for (int i = 0; i < ${sharedDim}; ++i) {\r\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\r\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\r\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n    ++im2colOffset;\r\n    ++kernelOffset;\r\n  }\r\n  ${applyActivation}\r\n  return value;\r\n}`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createDotProductProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\r\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\r\n      return {\r\n        ...metadata,\r\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const flatten: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\r\n      validateInputs(inputs, axis);\r\n\r\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\r\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\r\n    };\r\n\r\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getInt('axis', 1);  // default axis is 1\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Flatten requires 1 input.');\r\n  }\r\n\r\n  const r = inputs[0].dims.length;\r\n  if (r === 0) {\r\n    throw new Error('scalar tensor is not supported.');\r\n  }\r\n\r\n  if (axis < -r || axis > r) {\r\n    throw new Error('Invalid axis');\r\n  }\r\n\r\n  // TODO: Support string type\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('string tensor is not supported.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {GlslValueFunction} from '../glsl-definitions';\r\n\r\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\r\n  let func: GlslValueFunction;\r\n  switch (attributes.activation) {\r\n    case 'Relu':\r\n      func = glslRelu();\r\n      break;\r\n    case 'Sigmoid':\r\n      func = glslSigmoid();\r\n      break;\r\n    case 'Clip':\r\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\r\n      break;\r\n    // TODO: adding other activations that can be fused.\r\n    default:\r\n      return {activationFunction: '', applyActivation: ''};\r\n  }\r\n\r\n  const activationName = func.name;\r\n  const activationFunction = func.body;\r\n  const applyActivation = `value = ${activationName}_(value);`;\r\n  return {activationFunction, applyActivation};\r\n}\r\n\r\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\r\n  const activation = attributes.getString('activation', '');\r\n\r\n  if (activation === 'Clip') {\r\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\r\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n  }\r\n  return {activation, activationCacheKey: activation};\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\ninterface GatherAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const gather: OperatorImplementation<GatherAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes.axis);\r\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\r\n\r\nconst gatherProgramMetadata = {\r\n  name: 'Gather',\r\n  inputNames: ['A', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const indexDataShape = inputs[1].dims.slice();\r\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\r\n      const indexCopyOps: string[] = [];\r\n      for (let i = 0; i < outputShape.length; i++) {\r\n        // outputShape is divided into three parts: A, B, C\r\n        // |0        axis|  axis + indexDataShape.length |          end|\r\n        // |     A       |             B                 |      C      |\r\n        //\r\n        // inputIdx: [A, inputs[1][B], C]\r\n        if (i < axis) {  // A\r\n          outputShape[i] = inputShape[i];\r\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n        } else {\r\n          if (i < axis + indexDataShape.length) {  // B\r\n            outputShape[i] = indexDataShape[i - axis];\r\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n          } else {                                                       // C\r\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n          }\r\n        }\r\n      }\r\n\r\n      const orank = outputShape.length || 1;\r\n      const irank = inputShape.length;\r\n      const iDrank = indexDataShape.length || 1;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createGatherProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\r\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n  const tensorRank = inputs[0].dims.length;\r\n  if (tensorRank < 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (axis < -tensorRank || axis > tensorRank - 1) {\r\n    throw new Error('Invalid axis.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n  isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n\r\nexport const gemm: OperatorImplementation<GemmAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\r\n  const transA = node.attributes.getInt('transA', 0) !== 0;\r\n  const transB = node.attributes.getInt('transB', 0) !== 0;\r\n  const alpha = node.attributes.getFloat('alpha', 1.0);\r\n  const beta = node.attributes.getFloat('beta', 1.0);\r\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\r\n};\r\n\r\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, false);\r\n\r\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, true);\r\n\r\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                                      [TextureType.unpacked, TextureType.unpacked],\r\n    key: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      let sharedDim = aShape[aShape.length - 1];\r\n      let line = '';\r\n      if (attributes.transA) {\r\n        sharedDim = aShape[0];\r\n      }\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += _A_T(a) * _B_T(b);';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += _A_T(a) * _B(b);';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += _A(a) * _B_T(b);';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += _A(a) * _B(b);';\r\n      }\r\n      const rank = outputShape.length;\r\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n      const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        variables: [\r\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\r\n        ],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n    throw new Error('Invaid input shape.');\r\n  }\r\n  if (!attributes.isOptionalC && inputs.length !== 3) {\r\n    throw new Error('Gemm requires 3 inputs');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col (packed)',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed],\r\n  cacheHint,\r\n});\r\n\r\nconst createPackedIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n      const rowDim = 2;\r\n      const colDim = 3;\r\n      const rank = outputShape.length;\r\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\r\n      const kernelSize = wshape[2] * wshape[3];\r\n      const unpackChannel = unpackFromChannel();\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      let unrolled = '';\r\n\r\n      for (let row = 0; row <= 1; row++) {\r\n        for (let col = 0; col <= 1; col++) {\r\n          unrolled += `\r\n            blockIndex = rc.x + ${col};\r\n            pos = rc.y + ${row};\r\n\r\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\r\n                ${attributes.pads[0]};\r\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\r\n                  ${attributes.pads[1]};\r\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                  ch = int(float(pos)/ ${kernelSize}.);\r\n                    innerDims = vec2(d0, d1);\r\n                    result[${row * 2 + col}] = getChannel(\r\n                      getA(0, ch, int(innerDims.x),\r\n                      int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n\r\n          `;\r\n        }\r\n      }\r\n\r\n      const shaderSource = `\r\n      ${unpackChannel}\r\n\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n          vec4 result = vec4(0.0);\r\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n          vec2 innerDims;\r\n          ${unrolled}\r\n          ${glsl.output} = result;\r\n      }\r\n            `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\n\r\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n  cacheHint,\r\n});\r\n\r\nconst createIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n\r\n      const rank = outputShape.length;\r\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\r\n\r\n      const shaderSource = `\r\n        const int XC = ${xshape[1]};\r\n        const int XH = ${xshape[2]};\r\n        const int XW = ${xshape[3]};\r\n        const int KH = ${attributes.kernelShape[0]};\r\n        const int KW = ${attributes.kernelShape[1]};\r\n        const int dilationH = ${attributes.dilations[0]};\r\n        const int dilationW = ${attributes.dilations[1]};\r\n        const int strideH = ${attributes.strides[0]};\r\n        const int strideW = ${attributes.strides[1]};\r\n        const int padH = ${attributes.pads[0]};\r\n        const int padW = ${attributes.pads[1]};\r\n        const int KHKW = KH*KW;\r\n        const int XCKHKW = XC * KHKW;\r\n        const int outputChannels = 4;\r\n        vec4 process(int indices[${rank}]) {\r\n          int b  = indices[0]; // batch size\r\n          int oh = indices[1] * strideH - padH; //output height\r\n          int ow = indices[2] * strideW - padW; //output width\r\n          int p = indices[3] * outputChannels; //patch\r\n          vec4 value = vec4(0.0);\r\n          for(int i=0; i < outputChannels; ++i) {\r\n            if(p < XCKHKW) {\r\n              int patchC = p / KHKW;\r\n              int patchH = (p - patchC*KHKW) / KW;\r\n              int patchW = (p - patchC*KHKW) - patchH * KW;\r\n              int xh2 = oh + patchH * dilationH;\r\n              int xw2 = ow + patchW * dilationW;\r\n              int x[${xshape.length}];\r\n              x[0] = b;\r\n              x[1] = patchC;\r\n              x[2] = xh2;\r\n              x[3] = xw2;\r\n              if(xh2 >= 0 &&\r\n                  xh2 < XH &&\r\n                  xw2 >= 0 &&\r\n                  xw2 < XW) {\r\n                value[i] = _X(x);\r\n              }\r\n            }\r\n            ++p;\r\n          }\r\n          return value;\r\n        }\r\n        `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n\r\n\r\nexport const calculateIm2ColDims =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\r\n        number[] =>\r\n            [outputShape[0], outputShape[2], outputShape[3],\r\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\r\n  scale: number;\r\n  bias: number[];\r\n}\r\n\r\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output =\r\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\r\n    (node: Graph.Node): ImageScalerAttributes => {\r\n      const scale = node.attributes.getFloat('scale');\r\n      const bias = node.attributes.getFloats('bias');\r\n      return createAttributeWithCacheKey({scale, bias});\r\n    };\r\n\r\nconst imageScalerProgramMetadata = {\r\n  name: 'ImageScaler',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createImageScalerProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\r\n        ProgramInfo => {\r\n          const outputShape = inputs[0].dims.slice();\r\n          const rank = outputShape.length;\r\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\r\n          const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            variables: [\r\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\r\n              {name: 'scale', type: 'float', data: attributes.scale}\r\n            ],\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst createImageScalerProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\r\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\r\n    };\r\n\r\nconst createGetBiasMethod = (numChannels: number): string => {\r\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n  for (let i = 0; i < numChannels; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (channel == ${i}) { return bias[${i}]; }`);\r\n    } else if (i === numChannels - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return bias[${i}]; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (channel == ${i}) { return bias[${i}]; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('ImageScaler requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const instanceNormalization: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\r\n      const output = inferenceHandler.run(\r\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\r\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\r\n      return [output];\r\n    };\r\n\r\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getFloat('epsilon', 1e-5);\r\n\r\nconst meanAndVarianceProgramMetadata = {\r\n  name: 'InstanceNormalization_MeanAndVariance',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\r\n  const xDims = input.dims.slice();\r\n  const channel = xDims[1];\r\n  const channelSize = xDims[2] * xDims[3];\r\n  const outputShape = [xDims[0], channel];\r\n\r\n  const shaderSource = `\r\n      vec4 process(int[2] indices) {\r\n        vec4 v = vec4(0.0);\r\n        int a[4];\r\n        a[0] = indices[0];\r\n        a[1] = indices[1];\r\n        float temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += x;\r\n          }\r\n        }\r\n        float mean = temp / float(${channelSize});\r\n        temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += (x - mean) * (x - mean);\r\n          }\r\n        }\r\n        v.r = mean;\r\n        v.g = temp / float(${channelSize});\r\n\r\n        return v;\r\n      }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\r\n  ...meanAndVarianceProgramMetadata,\r\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\r\n});\r\n\r\nconst computeOutputProgramMetadata = {\r\n  name: 'InstanceNormalization_ComputeOutput',\r\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createComputeOutputProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\r\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\r\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\r\n      const shaderSource = `\r\n      vec4 get_MeanAndVariance(int[2] mv) {\r\n        int offset = indicesToOffset_MeanAndVariance(mv);\r\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\r\n        return ${glsl.texture2D}(MeanAndVariance, coords);\r\n      }\r\n\r\n      float process(int[4] indices) {\r\n        int mv[2];\r\n        mv[0] = indices[0];\r\n        mv[1] = indices[1];\r\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n        float mean = mean_and_variance.r;\r\n        float variance = mean_and_variance.g;\r\n\r\n        int sb[1];\r\n        sb[0] = indices[1];\r\n        float scale = _Scale(sb);\r\n        float b = _B(sb);\r\n\r\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createComputeOutputProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\r\n        ProgramInfoLoader => {\r\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\r\n          return {\r\n            ...metadata,\r\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('InstanceNormalization requires 3 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n\r\n  // input should at least have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n    throw new Error('Input shapes are mismatched.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Only support 4-D input shape.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport interface LrnAttributes extends AttributeWithCacheKey {\r\n  alpha: number;\r\n  beta: number;\r\n  bias: number;\r\n  size: number;\r\n}\r\n\r\nexport const lrn: OperatorImplementation<LrnAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      // if (inferenceHandler.session.pack) {\r\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\r\n      //   inputs)];\r\n      // } else {\r\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\r\n      //}\r\n    };\r\n\r\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\r\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\r\n  const beta = node.attributes.getFloat('beta', 0.75);\r\n  const bias = node.attributes.getFloat('bias', 1.0);\r\n  const size = node.attributes.getInt('size');\r\n\r\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\r\n};\r\n\r\nconst lrnProgramMetadata = {\r\n  name: 'LRN',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\r\n  const C = inputs[0].dims[1];\r\n  const rank = inputs[0].dims.length;\r\n  const from = -Math.floor((attributes.size - 1) / 2);\r\n  const to = Math.ceil((attributes.size - 1) / 2);\r\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\r\n  const bias = `float(${attributes.bias})`;\r\n  const beta = `float(${attributes.beta})`;\r\n\r\n  const shaderSource = `\r\n    float process(int indices[${rank}]) {\r\n        int c = indices[1];\r\n        float x = _X(indices);\r\n        float square_sum = 0.0;\r\n\r\n        for (int i = ${from}; i <= ${to}; i++) {\r\n          int idx = c + i;\r\n          if (c >= 0 && c < ${C}) {\r\n            indices[1] = idx;\r\n            float j = _X(indices);\r\n            square_sum += j * j;\r\n          }\r\n        }\r\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\r\n    }`;\r\n  return {\r\n    ...lrnProgramMetadata,\r\n    cacheHint: attributes.cacheKey,\r\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\r\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('LRN requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\r\n  }\r\n  if (inputs[0].type !== 'float32') {\r\n    throw new Error('input should be float type');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {getBiasForMatmul} from './matmul';\r\n\r\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul (packed)',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\r\n                        [TextureType.packed, TextureType.packed],\r\n  cacheHint\r\n});\r\n\r\nconst createPackedMatmulProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n      const aShape = inputs[0].dims;\r\n      const bShape = inputs[1].dims;\r\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use matmul on the given tensors');\r\n      }\r\n      const sharedDim = aShape[aShape.length - 1];\r\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n      const aRank = aShape.length;\r\n      const bRank = bShape.length;\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const coordsDataType = getCoordsDataType(outputShape.length);\r\n      const outRank = outputShape.length;\r\n      const allGlChannels = getGlChannels();\r\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\r\n\r\n      const getBiasForMatmulSnippet =\r\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\r\n\r\n      const getBcastedSamplerForMatmulSnippet =\r\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\r\n\r\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\r\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\r\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\r\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\r\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\r\n      `;\r\n      const shaderSource = `\r\n            ${getBcastedSamplerForMatmulSnippet}\r\n            ${getBiasForMatmulSnippet}\r\n            ${activationFunction}\r\n            void main() {\r\n              ${getOutputCoordsSnippet}\r\n\r\n              vec4 value = vec4(0);\r\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n                vec4 a = ${getSamplerAInLoopSnippet};\r\n                vec4 b = ${getSamplerBInLoopSnippet};\r\n\r\n                value += (a.rrbb * b.rgrg);\r\n                value += (a.ggaa * b.baba);\r\n              }\r\n              ${processBias}\r\n              ${applyActivation}\r\n              ${glsl.output} = value;\r\n            }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedMatmulProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\r\n      };\r\n    };\r\n\r\nfunction getBcastSamplerForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\r\n  let unpackedACoordsSnippet = [];\r\n  let unpackedBCoordsSnippet = [];\r\n\r\n  const inAShape = inputs[0].dims;\r\n  const inBShape = inputs[1].dims;\r\n\r\n  const inARank = inAShape.length;\r\n  const inBRank = inBShape.length;\r\n\r\n  const outRank = outShape.length;\r\n  const rankADiff = outRank - inARank;\r\n  const rankBDiff = outRank - inBRank;\r\n\r\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\r\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\r\n  unpackedACoordsSnippet.join(', ');\r\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\r\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\r\n  unpackedBCoordsSnippet.join(', ');\r\n\r\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\r\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\r\n\r\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\r\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\r\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\r\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\r\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\r\n\r\n  const getBcastSamplerMatmulSource = `\r\nvec4 getAAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsASnippet}\r\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\r\n  return outputValue;\r\n}\r\n\r\nvec4 getBAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsBSnippet}\r\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\r\n  return outputValue;\r\n}`;\r\n\r\n  return getBcastSamplerMatmulSource;\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i*2';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i*2, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      if (inferenceHandler.session.pack) {\r\n        return [inferenceHandler.run(\r\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\r\n      } else {\r\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\r\n      }\r\n    };\r\n\r\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\r\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nfunction createMatmulProgramInfo(\r\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\r\n  const aShape = inputs[0].dims;\r\n  const bShape = inputs[1].dims;\r\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n  if (!outputShape) {\r\n    throw new Error('Can\\'t use matmul on the given tensors');\r\n  }\r\n  const coordsDataType = getCoordsDataType(outputShape.length);\r\n  const allGlChannels = getGlChannels();\r\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\r\n\r\n  const hasBias = inputs.length > 2;\r\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n  const getBiasForMatmulSnippet =\r\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\r\n\r\n  const rank = outputShape.length;\r\n  const arank = aShape.length;\r\n  const brank = bShape.length;\r\n  const sharedDim = aShape[aShape.length - 1];\r\n  const shaderSource = `\r\n    ${activationFunction}\r\n    ${getBiasForMatmulSnippet}\r\n    float process(int indices[${rank}]) {\r\n        int a[${arank}];\r\n        int b[${brank}];\r\n        bcastMatmulIndices_A(indices, a);\r\n        bcastMatmulIndices_B(indices, b);\r\n\r\n        float value;\r\n        for (int k=0; k<${sharedDim}; ++k) {\r\n            a[${arank - 1}] = k;\r\n            b[${brank - 2}] = k;\r\n            value += _A(a) * _B(b);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        return value;\r\n    }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createMatmulProgramInfoLoader(\r\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\r\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n\r\n  if (inputs[0].type !== inputs[1].type) {\r\n    throw new Error('inputs types should match');\r\n  }\r\n};\r\n\r\nexport function getBiasForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\r\n    isPacked: boolean): string {\r\n  let unpackedCoordsSnippet = '';\r\n  const inRank = inShape.length;\r\n  const outRank = outShape.length;\r\n  const rankDiff = outRank - inRank;\r\n  if (outRank < 2 && inRank > 0) {\r\n    unpackedCoordsSnippet = 'coords';\r\n  } else {\r\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\r\n  }\r\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\r\n  const inSize = ShapeUtil.size(inShape);\r\n  const isInputScalar = inSize === 1;\r\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\r\n  if (isInputScalar) {\r\n    output = 'vec4(outputValue.x)';\r\n  }\r\n  const getBiasForMatmulSource = isPacked ? `\r\nvec4 getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\r\n  return ${output};\r\n}` :\r\n                                            `\r\nfloat getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  return getBias(coords.x);\r\n}`;\r\n\r\n  return getBiasForMatmulSource;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nconst packProgramMetadata = {\r\n  name: 'pack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpackedReversed]\r\n};\r\n\r\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const inputShape = input.dims;\r\n\r\n  const inputRank = inputShape.length;\r\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\r\n  const outputRank = input.dims.length;\r\n\r\n  const coordsDataType = getCoordsDataType(outputRank);\r\n  const channels = getChannels('rc', outputRank);\r\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n  let reversedInputWH;\r\n  if (inputRank === 0) {\r\n    reversedInputWH = [1, 1];\r\n  } else if (inputRank === 1) {\r\n    reversedInputWH = [inputShape[0], 1];\r\n  } else {\r\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n  }\r\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n  const output = getOutput(inputShape, channels);\r\n\r\n  const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n  return {\r\n    ...packProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 0) {\r\n    return 'false';\r\n  }\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlChannels} from '../utils';\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return getGlChannels(rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface PadAttributes extends AttributeWithCacheKey {\r\n  readonly mode: string;\r\n  readonly pads: number[];\r\n  readonly value: number;\r\n}\r\n\r\nconst padProgramMetadata = {\r\n  name: 'Pad',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const padV2: OperatorImplementation<PadAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\r\n      validateInputsV2(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...padProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\r\n  const mode = node.attributes.getString('mode', 'constant');\r\n  const value = node.attributes.getFloat('value', 0.0);\r\n  const pads = node.attributes.getInts('pads');\r\n  return createAttributeWithCacheKey({mode, value, pads});\r\n};\r\n\r\nexport const padV11: OperatorImplementation<string> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\r\n      validateInputsV11(inputs);\r\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\r\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\r\n    };\r\n\r\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\r\n    node.attributes.getString('mode', 'constant');\r\n\r\nconst generatePadAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\r\n        throw new Error('dynamic pad attributes are not allowed');\r\n      }\r\n\r\n      const pads = Array.from(inputs[1].integerData);\r\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\r\n\r\n      return createAttributeWithCacheKey({mode, pads, value});\r\n    };\r\n\r\nconst createPadProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\r\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\r\n      const rank = outputShape.length;\r\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\r\n      const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n      return {\r\n        name: 'Pad',\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputsV2 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pad requires 1 input');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst validateInputsV11 = (inputs: Tensor[]): void => {\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Pad requires 2 or 3 inputs');\r\n  }\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n  const strides = ShapeUtil.computeStrides(input.dims);\r\n\r\n  switch (attributes.mode) {\r\n    case 'constant':\r\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\r\n    case 'reflect':\r\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\r\n    case 'edge':\r\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n};\r\n\r\nconst getPadConstant =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\r\n     value: number): string => {\r\n      const rank = shape.length;\r\n      let block = '';\r\n      for (let i = rank - 1; i >= 0; --i) {\r\n        block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  return constant;\r\n        if (k >= ${shape[i]}) return constant;\r\n        offset += k * ${strides[i]};\r\n        `;\r\n      }\r\n      return `\r\n      float padA(int m[${rank}]) {\r\n        const float constant = float(${value});\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n    };\r\n\r\nconst getPadReflect =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n\r\nconst getPadEdge =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  k = 0;\r\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n        offset += k * ${strides[i]};\r\n      `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly countIncludePad: boolean;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n\r\n      // TODO: support attribute 'ceil_mode'\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\r\n    };\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n          const op1 = 'value += _X(x);';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= float(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= float(${kernelSize} - pad);`;\r\n          }\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\r\n          const shaderSource = `\r\n        ${poolingCode}\r\n      `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata = {\r\n        name: 'GlobalAveragePool',\r\n        inputNames: ['X'],\r\n        inputTypes: [TextureType.unpacked],\r\n        cacheHint: `${attributes.countIncludePad}`\r\n      };\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      return createAttributeWithCacheKey(\r\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\r\n    };\r\n\r\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\r\n    (node: Graph.Node): MaxPoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n      const storageOrder = node.attributes.getInt('storage_order', 0);\r\n      const dilations = node.attributes.getInts('dilations', []);\r\n\r\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n      if (storageOrder !== 0) {\r\n        throw new Error('column major storage order is not yet supported for MaxPool');\r\n      }\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\r\n    };\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(_X(x), value);\r\n    `;\r\n          const op2 = '';\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\r\n          const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape =\r\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\r\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\r\n          const inputShape = inputs[0].dims.slice();\r\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n          const kernelShape = attributes.kernelShape.slice();\r\n          const strides = attributes.strides.slice();\r\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n          const pads = attributes.pads.slice();\r\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\r\n\r\n          const outputShape = PoolConvUtil.computePoolOutputShape(\r\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n          const newAttributes = Object.assign({}, attributes);\r\n          if (hasDilations) {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n          } else {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n          }\r\n          return [newAttributes, outputShape];\r\n        };\r\n\r\nconst globalMaxPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nconst globalMaxPoolMetadata = {\r\n  name: 'GlobalMaxPool',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...globalMaxPoolMetadata,\r\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\r\n      },\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst generatePoolingCode =\r\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\r\n        string => {\r\n          const rank = inputDims.length;\r\n          if (attributes.kernelShape.length <= 2) {\r\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n            const sw = attributes.strides[attributes.strides.length - 1];\r\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n            const dimW = inputDims[rank - 1];\r\n            let codeW = '';\r\n            let codeH = '';\r\n            let codeHEnd = '';\r\n            if (pwStart + pwEnd !== 0) {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n              pad++;\r\n              continue;\r\n            }\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            ${op1}\r\n          }`;\r\n            }\r\n\r\n            if (attributes.kernelShape.length === 2) {\r\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n              const sh = attributes.strides[attributes.strides.length - 2];\r\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n              const phEnd = attributes.pads[attributes.pads.length - 2];\r\n              const dimH = inputDims[rank - 2];\r\n              if (phStart + phEnd !== 0) {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                pad+= ${kw};\r\n                continue;\r\n              }\r\n          `;\r\n              } else {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n            `;\r\n              }\r\n              codeHEnd = `\r\n          }\r\n        `;\r\n            }\r\n\r\n            const poolingCode = `\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          ${codeH}\r\n          ${codeW}\r\n          ${codeHEnd}\r\n          ${op2}\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          } else {\r\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n            const stridesRank = kernelStrides.length;\r\n            const padsRank = attributes.pads.length;\r\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n            const copyInputDims = copyArray(inputDims, 'inputDims');\r\n            const copyPads = copyArray(attributes.pads, 'pads');\r\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n            const copyStrides = copyArray(attributes.strides, 'strides');\r\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n            let padCode = '';\r\n            if (hasPads) {\r\n              padCode = `\r\n            if (x[j] >= inputDims[j] || x[j] < 0) {\r\n              pad++;\r\n              isPad = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isPad) {\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              padCode = `\r\n          }\r\n          ${op1}\r\n        `;\r\n            }\r\n            const poolingCode = `\r\n        ${offsetToIndicesFunction}\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n          int offset[${stridesRank}];\r\n          int pads[${padsRank}];\r\n          int inputDims[${rank}];\r\n          int kernelStrides[${stridesRank}];\r\n          int strides[${stridesRank}];\r\n          ${copyPads}\r\n          ${copyInputDims}\r\n          ${copyStrides}\r\n          ${copyKernelStrides}\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          bool isPad = false;\r\n          for (int i = 0; i < ${kernelSize}; i++) {\r\n            offsetToIndices(i, kernelStrides, offset);\r\n            isPad = false;\r\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n              ${padCode}\r\n          }\r\n          ${op2}\r\n\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          }\r\n        };\r\n\r\nconst copyArray = (array: readonly number[], arrayName: string): string => {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n};\r\n\r\nconst offsetToIndices = (rank: number): string => `\r\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n    if (${rank} == 0) {\r\n      return;\r\n    }\r\n    for (int i = 0; i < ${rank} - 1; ++i) {\r\n      indices[i] = offset / strides[i];\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[${rank} - 1] = offset;\r\n  }`;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly keepDims: boolean;\r\n}\r\n\r\n// return [init ops, reduce ops, final ops]\r\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\r\n\r\nconst reduce =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\r\n     reduceOp: ReduceOp): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const reduceProgramMetadata = {\r\n        name,\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n      };\r\n\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...reduceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () =>\r\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\r\n  const axes = node.attributes.getInts('axes', []);\r\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\r\n  return createAttributeWithCacheKey({axes, keepDims});\r\n};\r\n\r\nconst createReduceProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\r\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const iRank = inputs[0].dims.length || 1;\r\n\r\n      const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\r\n      const ops = reduceOp(inputs, axes);\r\n      let reduceOps = ops[1];\r\n\r\n      for (let k = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n          if (attributes.keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { remove the axis from outputShape; }\r\n\r\n          // loop over the d-th axis\r\n          reduceOps = `\r\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n            inputIdx[${k}] = j${k};\r\n            ${reduceOps}\r\n          }`;\r\n        } else {\r\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n          outputShape.push(inputs[0].dims[k]);\r\n        }\r\n      }\r\n\r\n      const oRank = outputShape.length || 1;\r\n\r\n      const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n      return {\r\n        ...reduceProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  // TODO: support Reduce* operators with 2 inputs.\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Reduce op requires 1 input.');\r\n  }\r\n\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\r\n    };\r\n\r\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        let size = 1.0;\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            size *= inputs[0].dims[k];\r\n          }\r\n        }\r\n\r\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\r\n    };\r\n\r\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\r\n    };\r\n\r\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\r\n    };\r\n\r\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\r\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\r\n\r\nconst createPackedReshape3DProgramInfo =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\r\n        ProgramInfo => {\r\n          const inputShape3D = input3D.dims as [number, number, number];\r\n          const squeezedOutputShape = outputShape3D as [number, number, number];\r\n\r\n          let mainLoop = '';\r\n          for (let i = 0; i < 4; i++) {\r\n            let outputCoords = '';\r\n            switch (i) {\r\n              case 0:\r\n                outputCoords = 'outputCoords = rc;';\r\n                break;\r\n              case 1:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n                break;\r\n              case 2:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n                break;\r\n              case 3:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n                break;\r\n              default:\r\n                throw new Error();\r\n            }\r\n\r\n            mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n          }\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n          const shaderSource = `\r\n      ${getReshapedInputCoords(inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n          return {\r\n            ...metadata,\r\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\r\n            shaderSource,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nexport const createPackedReshape3DProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\r\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\r\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\r\n    };\r\n\r\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  let batch = 1;\r\n  for (let i = 0; i < shape.length - 2; ++i) {\r\n    batch *= shape[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\n\r\n// For packed reshape, we need to re-arrange texel data for output shape.\r\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n// for the reshaped new tensor, we just need to re-arrange the last h and\r\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n// first convert it to 3D by collapsing other dimension to batch dim, then\r\n// process with the last two dimensions.\r\n// Note: we only need the shape tensor to calculate output shape, so the\r\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n// the same between input shape and output shape, the packed reshape can be\r\n// treated as no-op.\r\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\r\n  let isCheapReshape = false;\r\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\r\n    isCheapReshape = true;\r\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\r\n  } else {  // 2D +\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\r\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\r\n  }\r\n\r\n  return isCheapReshape;\r\n}\r\n\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n  if (handler.session.pack) {\r\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\r\n  } else {\r\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\r\n\r\nconst resizeProgramMetadata = {\r\n  name: 'Resize',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const resize: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...resizeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\r\n\r\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\r\n\r\nconst createPackedResizeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\r\n\r\n      const isSame =\r\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\r\n      if (isSame) {\r\n        return {\r\n          ...resizeProgramMetadata,\r\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n          hasMain: true,\r\n          shaderSource: `void main() {\r\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n                    ${glsl.output} = v;\r\n                }`\r\n        };\r\n      }\r\n\r\n      const dim = outputShape.length;\r\n      if (dim < 2) {\r\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n      }\r\n\r\n      const outputHeight = outputShape[dim - 2];\r\n      const outputWidth = outputShape[dim - 1];\r\n\r\n      const inputShape = inputs[0].dims;\r\n      if (dim !== inputShape.length) {\r\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n      }\r\n      const inputHeight = inputShape[dim - 2];\r\n      const inputWidth = inputShape[dim - 1];\r\n\r\n      const scalesHeight = scales[dim - 2];\r\n      const scalesWidth = scales[dim - 1];\r\n\r\n      let getSourceFracIndex = '';\r\n\r\n      if (attributes.mode !== 'linear') {\r\n        // TODO: support other modes\r\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\r\n      }\r\n      switch (attributes.coordinateTransformMode) {\r\n        case 'asymmetric':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return vec4(coords) / scaleWHWH;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'pytorch_half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 fcoords = vec4(coords);\r\n                        return vec4(\r\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\r\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\r\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\r\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\r\n                          );\r\n                    }\r\n                `;\r\n          break;\r\n        case 'align_corners':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\r\n                            ${outputHeight}.0 - 1.0);\r\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\r\n                            ${inputHeight}.0 - 1.0);\r\n                        vec4 new_scale = original / resized;\r\n                        return vec4(coords) * new_scale;\r\n                    }\r\n                `;\r\n          break;\r\n        default:\r\n          // TODO:supporting other coordinateTransformModes\r\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\r\n                                '${attributes.coordinateTransformMode}'`);\r\n      }\r\n\r\n      const coordsDataType = getCoordsDataType(dim);\r\n      const unpackChannel = unpackFromChannel();\r\n      const shaderSource = `\r\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\r\n          scalesWidth}));\r\n            ${unpackChannel}\r\n            ${getSourceFracIndex}\r\n            float getAValue(int x10, int r, int c, int d) {\r\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n            }\r\n            void main() {\r\n                ${coordsDataType} rc = getOutputCoords();\r\n\r\n                int batch = rc[0];\r\n                int depth = rc[1];\r\n\r\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n                // calculate the source index in fraction\r\n                vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n                bool hasNextRow = rc.w < ${outputHeight - 1};\r\n                bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n                vec4 topLeft = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n                vec4 topRight = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n                vec4 bottomLeft = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n                vec4 bottomRight = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n                // calculate the interpolation fraction on u and v direction\r\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n                ${glsl.output} = vec4(newValue);\r\n            }\r\n        `;\r\n      return {\r\n        ...resizeProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n\r\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\r\n  const x = inputs[0];\r\n  const xDims = x.dims;\r\n\r\n  let scales = attributes.scales;\r\n  let outputSizes: number[]|undefined;\r\n  if (scales.length === 0) {\r\n    const scalesTensor = inputs[attributes.scalesInputIdx];\r\n    if (scalesTensor && scalesTensor.size !== 0) {\r\n      if (inputs[attributes.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\r\n    } else {\r\n      const sizesTensor = inputs[attributes.sizesInputIdx];\r\n      if (!sizesTensor || sizesTensor.size === 0) {\r\n        throw new Error('Either scales or sizes MUST be provided as input.');\r\n      }\r\n\r\n      outputSizes = Array.from(sizesTensor.integerData);\r\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\r\n    }\r\n  } else {\r\n    if (inputs[attributes.sizesInputIdx]) {\r\n      throw new Error('Only one of scales or sizes must be provided as input.');\r\n    }\r\n  }\r\n\r\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\r\n\r\n  return [scales, yDims];\r\n};\r\n\r\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidation(scales, mode, isResize);\r\n  return scales;\r\n};\r\n\r\nconst parseScalesDataFromOutputSize =\r\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\r\n      const length = xDims.length;\r\n      const scales = new Array<number>(length);\r\n\r\n      for (let i = 0, end = length; i < end; i++) {\r\n        if (xDims[i] === 0) {\r\n          if (yDims[i] !== 0) {\r\n            throw new Error('Input dim is zero but required output dim is non-zero.');\r\n          }\r\n          scales[i] = 1;\r\n        } else {\r\n          scales[i] = yDims[i] / xDims[i];\r\n        }\r\n      }\r\n      scalesValidation(scales, mode, isResize);\r\n      return scales;\r\n    };\r\n\r\n// roi data is not used yet. but leave here for future usage.\r\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\r\n//     let roi: number[] = [];\r\n//     if (attributes.needRoiInput) {\r\n//         if (attributes.roiInputIdx <= 0) {\r\n//             throw new Error('Invalid roi input index.');\r\n//         }\r\n//         const roiTensor = inputs[attributes.roiInputIdx];\r\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\r\n//     } else {\r\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\r\n//     }\r\n//     return roi;\r\n// };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Shape requires 1 input.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly ends: number[];\r\n  readonly starts: number[];\r\n}\r\n\r\nconst sliceProgramMetadata = {\r\n  name: 'Slice',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const slice: OperatorImplementation<SliceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...sliceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\r\n  const starts = node.attributes.getInts('starts');\r\n  const ends = node.attributes.getInts('ends');\r\n  const axes = node.attributes.getInts('axes', []);\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n\r\nconst createSliceProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\r\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\r\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\r\n      const starts = attributes.starts.map((start, i) => {\r\n        if (start > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\r\n      });\r\n      const ends = attributes.ends.map((end, i) => {\r\n        if (end > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\r\n      });\r\n\r\n      const outputShape = input.dims.slice();\r\n\r\n      const sliceOps: string[] = [];\r\n      for (let i = 0; i < normalizedAxes.length; i++) {\r\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\r\n        if (starts[i] > 0) {\r\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\r\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n      return {\r\n        ...sliceProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Slice requires 1 input.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV10(inputs);\r\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...sliceProgramMetadata,\r\n        cacheHint: attributes.cacheKey,\r\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n      },\r\n      [inputs[0]]);\r\n  return [output];\r\n};\r\n\r\nconst generateSliceAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\r\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\r\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\r\n        throw new Error('dynamic slice attributes are not allowed');\r\n      }\r\n\r\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n        throw new Error('currently non-1 steps is not supported for Slice');\r\n      }\r\n\r\n      const starts = Array.from(inputs[1].integerData);\r\n      const ends = Array.from(inputs[2].integerData);\r\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n      const cacheKey = `${axes};${starts};${ends}`;\r\n      return {starts, ends, axes, cacheKey};\r\n    };\r\n\r\nconst validateInputsV10 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n    throw new Error('Invalid input number.');\r\n  }\r\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst softmaxComputeMaxProgramMetadata = {\r\n  name: 'SoftmaxComputeMax',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst softmaxComputeScaleProgramMetadata = {\r\n  name: 'SoftmaxComputeScale',\r\n  inputNames: ['A', 'Max'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst softmaxProgramMetadata = {\r\n  name: 'SoftMax',\r\n  inputNames: ['A', 'Max', 'Norm'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n\r\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\r\n      return output;\r\n    };\r\n\r\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\r\n\r\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\r\n\r\n// The \"semantic\" meaning of axis has changed in opset-13.\r\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\r\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\r\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\r\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\r\n// the innermost dim\r\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const rank = inputShape.length;\r\n\r\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\r\n      const transposedInputShape: number[] = [];\r\n      let perm: number[] = [];\r\n      let transposedInputs: Tensor[] = [];\r\n      let transposeAttribute: TransposeAttributes;\r\n\r\n      if (isTransposeRequired) {\r\n        perm = Array.from({length: rank}).map((_, i) => i);\r\n\r\n        // swap the innermost dim with the dim corresponding to axis\r\n        perm[axis] = rank - 1;\r\n        perm[rank - 1] = axis;\r\n\r\n        perm.map(p => transposedInputShape.push(inputShape[p]));\r\n\r\n        transposeAttribute = createAttributeWithCacheKey({perm});\r\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\r\n      }\r\n\r\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\r\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\r\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\r\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\r\n\r\n      const output = computeSoftmax(\r\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\r\n\r\n      if (isTransposeRequired) {\r\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\r\n        return reversedOutput;\r\n      } else {\r\n        return output;\r\n      }\r\n    };\r\n\r\nconst computeSoftmax =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\r\n     featureCount: number): Tensor[] => {\r\n      const computeMaxProgramInfo =\r\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\r\n      const max = inferenceHandler.run(\r\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\r\n          inputs);\r\n\r\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          [logicalRowCount]);\r\n      const scale = inferenceHandler.run(\r\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\r\n          [inputs[0], max]);\r\n\r\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          computeScaleProgramInfo.output.dims);\r\n      const output = inferenceHandler.run(\r\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\r\n          [inputs[0], max, scale]);\r\n      return [output];\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the maximum value of each of the 'N' rows\r\n */\r\nconst createComputeMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\r\n        ${textureHeight} )));\r\n        for(int i=1; i<${featureCount}; ++i)\r\n        {\r\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight})));\r\n          if(current > max)\r\n          max = current;\r\n        }\r\n\r\n        return max;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeMaxProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the normalization factor for each of the 'N' rows\r\n */\r\nconst createComputScaleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float norm_factor = 0.0;\r\n        float max = _Max(indices);\r\n        for(int i=0; i<${featureCount}; ++i)\r\n        {\r\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight}))) - max);\r\n        }\r\n\r\n        return norm_factor;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeScaleProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createSoftMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = input.dims.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${featureCount};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n      return {\r\n        ...softmaxProgramMetadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly split: number[];\r\n  readonly numOutputs: number;\r\n}\r\n\r\nconst splitProgramMetadata = {\r\n  name: 'Split',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const split: OperatorImplementation<SplitAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\r\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        output.push(inferenceHandler.run(\r\n            {\r\n              ...splitProgramMetadata,\r\n              cacheHint: `${attributes.cacheKey};${i}`,\r\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\r\n            },\r\n            inputs));\r\n      }\r\n\r\n      return output;\r\n    };\r\n\r\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\r\n  const axis = node.attributes.getInt('axis', 0);\r\n  const split = node.attributes.getInts('split', []);\r\n  const numOutputs = node.outputs.length;\r\n  return createAttributeWithCacheKey({axis, split, numOutputs});\r\n};\r\n\r\nconst getProgramCount =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\r\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\r\n      return offsets.length;\r\n    };\r\n\r\nconst createSplitProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\r\n        ProgramInfo => {\r\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\r\n          const offset = offsets[index];\r\n          const outputShape = shapes[index];\r\n          const rank = outputShape.length;\r\n          const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }\r\n    `;\r\n          return {\r\n            ...splitProgramMetadata,\r\n            cacheHint: `${attributes.cacheKey}:${index}`,\r\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Split requires one input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const squeeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Squeeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Squeeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const sumProgramMetadata = {\r\n    name: 'Sum',\r\n    inputNames: inputs.map((v, i) => `X${i}`),\r\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\r\n  return [output];\r\n};\r\n\r\nconst createSumProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const outputShape = inputs[0].dims.slice();\r\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n      const shaderSource = `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n      return {\r\n        ...sumProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length === 0) {\r\n    throw new Error('Sum requires inputs.');\r\n  }\r\n\r\n  const length = inputs[0].dims.length;\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (length !== inputs[i].dims.length) {\r\n      throw new Error('Input shapes are mismatched.');\r\n    }\r\n\r\n    for (let j = 0; j < length; j++) {\r\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n        throw new Error('Input shapes are not matched.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (inputs[0].type !== inputs[i].type) {\r\n      throw new Error('Input types are not matched.');\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {NUMBER_TYPES} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const tileProgramMetadata = {\r\n    name: 'Tile',\r\n    inputNames: ['A'],\r\n    inputTypes: [TextureType.unpacked],\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst createTileProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const outputShape = new Array(inputShape.length);\r\n\r\n      const tileOps: string[] = [];\r\n      for (let i = 0; i < inputShape.length; i++) {\r\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        int inputIdx[${rank}];\r\n        ${tileOps.join('\\n')}\r\n        return _A(inputIdx);\r\n      }\r\n    `;\r\n      return {\r\n        ...tileProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 input.');\r\n  }\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('The second input shape must 1 dimension.');\r\n  }\r\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invalid repeat type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nconst transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const transpose: OperatorImplementation<TransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\r\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\r\n\r\nconst createTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\r\n      const inputShape = input.dims;\r\n      perm = getAdjustedPerm(inputShape, perm);\r\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\r\n      const rank = inputShape.length;\r\n      // A dims=[${inputs[0].dims.toString()}]\r\n      // out Dims=[${unpackedOutputShape.toString()}]\r\n      // based on perm=[${perm.toString()}]\r\n      const shaderSource = `\r\n      ${getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n      return {\r\n        ...transposeProgramMetadata,\r\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\r\n  if (perm && perm.length !== inputShape.length) {\r\n    perm = [...(inputShape.keys())].reverse();\r\n  }\r\n  return perm;\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\r\n  perm = getAdjustedPerm(inputShape, perm);\r\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\r\n};\r\n\r\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n  }\r\n  reverseFunc.push('\\t}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('input should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureType} from '../types';\r\n\r\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\r\n  const outputShape = input.shape;\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  /**\r\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n   */\r\n  const shaderSource = `\r\n    const float FLOAT_MAX = 1.70141184e38;\r\n    const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n    bool isNaN(float val) {\r\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n    }\r\n\r\n    highp vec4 encodeAsUint8(highp float v) {\r\n      if (isNaN(v)) {\r\n        return vec4(255, 255, 255, 255);\r\n      }\r\n\r\n      highp float av = abs(v);\r\n\r\n      if(av < FLOAT_MIN) {\r\n        return vec4(0.0, 0.0, 0.0, 0.0);\r\n      } else if(v > FLOAT_MAX) {\r\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n      } else if(v < -FLOAT_MAX) {\r\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n      }\r\n\r\n      highp vec4 c = vec4(0,0,0,0);\r\n\r\n      highp float e = floor(log2(av));\r\n      highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n      c[2] = floor(128.0 * m);\r\n      m -= c[2] / 128.0;\r\n      c[1] = floor(32768.0 * m);\r\n      m -= c[1] / 32768.0;\r\n      c[0] = floor(8388608.0 * m);\r\n\r\n      highp float ebias = e + 127.0;\r\n      c[3] = floor(ebias / 2.0);\r\n      ebias -= c[3] * 2.0;\r\n      c[2] += floor(ebias) * 128.0;\r\n\r\n      c[3] += 128.0 * step(0.0, -v);\r\n\r\n      return c / 255.0;\r\n    }\r\n\r\n    void main() {\r\n      float value = ${glsl.texture2D}(X,TexCoords).r;\r\n      ${glsl.output} = encodeAsUint8(value);\r\n    }`;\r\n  const programInfo = {\r\n    name: 'Uint8Encode',\r\n    inputTypes: [TextureType.unpacked],\r\n    inputNames: ['X'],\r\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\r\n    shaderSource,\r\n    hasMain: true\r\n  };\r\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {Tensor} from '../../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslElu(alpha: number): GlslValueFunction {\r\n  const name = 'elu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslClip(min: number, max: number): GlslValueFunction {\r\n  const name = 'clip';\r\n  const body = `\r\n  const float min = float(${min});\r\n  const float max = float(${max});\r\n\r\n  float ${name}_(float a) {\r\n    return clamp(a, min, max);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return clamp(v, min, max);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\r\n  const name = 'leakyRelu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a < 0.0 ? a * alpha : a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}_(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}_(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return ${name}(a);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return ${name}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\n/////\r\n/////\r\n/////\r\n\r\nconst createElementwiseProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\r\n        ProgramInfo => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n          return {\r\n            ...metadata,\r\n            output: {dims: input.dims, type: input.type, textureType},\r\n            shaderSource: `\r\n     ${glslFunc.body}\r\n     void main() {\r\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n       v = ${glslFunc.name}_(v);\r\n       ${glsl.output} = v;\r\n     }\r\n     `,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\r\n        ProgramInfoLoader => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\r\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\r\n        };\r\n\r\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\r\n\r\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\r\n\r\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\r\n\r\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clip =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(\r\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\r\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\r\n\r\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\r\n  return clip(handler, [inputs[0]], attributes);\r\n};\r\n\r\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\r\n  if (inputs.length >= 3 &&\r\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\r\n    throw new Error('dynamic clip attributes are not allowed');\r\n  }\r\n\r\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\r\n\r\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\r\n\r\nexport interface EluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const elu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\r\n\r\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\r\n\r\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\r\n\r\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\r\n\r\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const leakyRelu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\r\n\r\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\r\n\r\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\r\n\r\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\r\n\r\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\r\n\r\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\r\n\r\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\r\n\r\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\r\n\r\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\r\n\r\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst unpackProgramMetadata = {\r\n  name: 'unpack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const rank = input.dims.length;\r\n\r\n  const channels = getChannels('rc', rank);\r\n  const innerDims = channels.slice(-2);\r\n  const coordsDataType = getCoordsDataType(rank);\r\n  const unpackChannel = unpackFromChannel();\r\n  const isScalar = (input.dims.length === 0);\r\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n       // Sample the texture with the coords to get the rgba channel value.\r\n       vec4 packedInput = getA(${sourceCoords});\r\n\r\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n     }\r\n   `;\r\n\r\n  return {\r\n    ...unpackProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\r\n\r\nfunction getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const unsqueeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Unsqueeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Unsqueeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\r\n  readonly opset: number;\r\n  readonly isResize: boolean;\r\n  readonly mode: string;\r\n  readonly scales: number[];\r\n  readonly extrapolationValue: number;\r\n  readonly coordinateTransformMode: string;\r\n  readonly useExtrapolation: boolean;\r\n  readonly needRoiInput: boolean;\r\n  readonly nearestMode: string;\r\n  readonly cubicCoefficientA: number;\r\n  readonly excludeOutside: boolean;\r\n  readonly useNearest2xOptimization: boolean;\r\n  readonly roiInputIdx: number;\r\n  readonly scalesInputIdx: number;\r\n  readonly sizesInputIdx: number;\r\n}\r\n\r\nconst upsampleProgramMetadata = {\r\n  name: 'Upsample',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...upsampleProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\r\n\r\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\r\n\r\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\r\n  const isResize = (opset >= 10);\r\n\r\n  // processing node attributes\r\n  const mode = node.attributes.getString('mode', 'nearest');\r\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\r\n    throw new Error(`unrecognized mode: ${mode}`);\r\n  }\r\n\r\n  let scales: number[] = [];\r\n  if (opset < 9) {\r\n    scales = node.attributes.getFloats('scales');\r\n    scalesValidation(scales, mode, isResize);\r\n  }\r\n\r\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n  const coordinateTransformMode =\r\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n  if ([\r\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\r\n      ].indexOf(coordinateTransformMode) === -1) {\r\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\r\n  }\r\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\r\n  const useExtrapolation = needRoiInput;\r\n\r\n  const nearestMode =\r\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\r\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\r\n  }\r\n\r\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\r\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\r\n  if (excludeOutside && mode !== 'cubic') {\r\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n  }\r\n\r\n  const useNearest2xOptimization =\r\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\r\n\r\n  let roiInputIdx = 0;\r\n  let scalesInputIdx = 0;\r\n  let sizesInputIdx = 0;\r\n\r\n  if (opset > 10) {\r\n    // handle when roiInput is not given\r\n    if (node.inputs.length > 2) {\r\n      roiInputIdx = 1;\r\n      scalesInputIdx = 2;\r\n      sizesInputIdx = 3;\r\n    } else {\r\n      scalesInputIdx = 1;\r\n      sizesInputIdx = 2;\r\n    }\r\n  } else if (opset === 9) {\r\n    scalesInputIdx = 1;\r\n  }\r\n\r\n  return createAttributeWithCacheKey({\r\n    opset,\r\n    isResize,\r\n    mode,\r\n    scales,\r\n    extrapolationValue,\r\n    coordinateTransformMode,\r\n    useExtrapolation,\r\n    needRoiInput,\r\n    nearestMode,\r\n    cubicCoefficientA,\r\n    excludeOutside,\r\n    useNearest2xOptimization,\r\n    roiInputIdx,\r\n    scalesInputIdx,\r\n    sizesInputIdx\r\n  });\r\n};\r\n\r\nconst createUpsampleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [inputWidth, inputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\r\n\r\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\r\n      const [outputWidth, outputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\r\n      const dim = outputShape.length;\r\n\r\n      const outputPitches = new Array<number>(dim);\r\n      const inputPitches = new Array<number>(dim);\r\n      let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n      for (let d = dim - 1; d >= 0; d--) {\r\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n        precalculatedPitches += `\r\n        output_pitches[${d}] = ${outputPitches[d]};\r\n        input_pitches[${d}] = ${inputPitches[d]};\r\n        `;\r\n      }\r\n      const getInputFloatFunction = `\r\n      float getInputFloat(int index) {\r\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\r\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n        return value;\r\n      }\r\n      `;\r\n\r\n      const shaderSource = attributes.mode === 'nearest' ?\r\n          // nearest\r\n          `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[${dim}]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int d, m;\r\n      for (int dim = 0; dim < ${dim}; ++dim) {\r\n        d = output_index / output_pitches[dim];\r\n        m = output_index - d * output_pitches[dim];\r\n        output_index = m;\r\n\r\n        if (scales[dim] != 1 && d > 0) {\r\n          int d2 = d / scales[dim];\r\n          m = d - d2 * scales[dim];\r\n          d = d2;\r\n        }\r\n        input_index += input_pitches[dim] * d;\r\n      }\r\n\r\n      return getInputFloat(input_index);\r\n    }` :\r\n          dim === 4 ?\r\n          // bilinear 4D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[4]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m / output_pitches[1];\r\n      m = m - index_of_dim1 * output_pitches[1];\r\n      index_of_dim2 = m / output_pitches[2];\r\n      m = m - index_of_dim2 * output_pitches[2];\r\n      index_of_dim3 = m;\r\n\r\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n      index_of_input_dim2 = index_of_dim2 / scales[2];\r\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n      index_of_input_dim3 = index_of_dim3 / scales[3];\r\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n      input_index = index_of_dim0 * input_pitches[0] +\r\n            index_of_dim1 * input_pitches[1] +\r\n            index_of_input_dim2 * input_pitches[2] +\r\n            index_of_input_dim3;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim2 = false;\r\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n        // It's the end in dimension 2\r\n        x01 = x00;\r\n        end_of_dim2 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[2]);\r\n      }\r\n\r\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n        // It's the end in dimension 3\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n    }` :\r\n              // bilinear 2D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[2]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m;\r\n\r\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n      index_of_input_dim0 = index_of_dim0 / scales[0];\r\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n      index_of_input_dim1 = index_of_dim1 / scales[1];\r\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim0 = false;\r\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n        // It's the end in dimension 0\r\n        x01 = x00;\r\n        end_of_dim0 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[0]);\r\n      }\r\n\r\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n        // It's the end in dimension 1\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n    }`;\r\n      return {\r\n        ...upsampleProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        variables: [{\r\n          name: 'scales',\r\n          type: 'int',\r\n          arrayLength: attributes.scales.length,\r\n          data: attributes.scales.map(x => Math.ceil(x))\r\n        }]\r\n      };\r\n    };\r\n\r\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\r\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\r\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\r\n      (attribute.opset >= 11 && inputs.length < 2)) {\r\n    throw new Error('invalid inputs.');\r\n  }\r\n\r\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input tensor types.');\r\n  }\r\n};\r\n\r\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\r\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\r\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(output);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.glContext.draw();\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\r\n      void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      const value = variables.find(v => v.name === name)?.data;\r\n      if (type !== 'sampler2D' && !value) {\r\n        throw new Error(`variable '${name}' does not have data defined in program info`);\r\n      }\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1f(location, value as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1i(location, value as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n    if (prefs && prefs.reverseWH) {\r\n      return [wh[1], wh[0]];\r\n    }\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureLayout, TextureType} from './types';\r\n\r\nexport const createTextureLayoutFromTextureType =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\r\n     textureType: TextureType): TextureLayout => {\r\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\r\n      const isPacked = textureType === TextureType.packed;\r\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\r\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\r\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\r\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\r\n          undefined;\r\n      return createTextureLayoutFromShape(\r\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\r\n    };\r\n\r\nexport const calculateTextureWidthAndHeight =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\r\n        [number, number] => {\r\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\r\n          return [layout.width, layout.height];\r\n        };\r\n\r\n/**\r\n * Create a TextureLayout object from shape.\r\n */\r\nexport const createTextureLayoutFromShape =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\r\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\r\n      const isPacked = !!(prefs && prefs.isPacked);\r\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n      const rank = shape.length;\r\n      let inferredDims = shape.slice(0);\r\n      if (rank === 0) {\r\n        inferredDims = [1];\r\n      }\r\n      if (channels === 1) {\r\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n        unpackedShape = shape;\r\n      } else if (isPacked) {\r\n        if (channels !== 4) {\r\n          throw new Error('a packed texture must be 4-channel');\r\n        }\r\n        unpackedShape = shape;\r\n        if (rank > 0) {\r\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n        }\r\n        if (rank > 1) {\r\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n        }\r\n      } else if (!unpackedShape) {\r\n        throw new Error('Unpacked shape is needed when using channels > 1');\r\n      }\r\n      return {\r\n        width,\r\n        height,\r\n        channels,\r\n        isPacked,\r\n        shape: inferredDims,\r\n        strides: ShapeUtil.computeStrides(inferredDims),\r\n        unpackedShape,\r\n        reversedWH: (prefs && prefs.reverseWH)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\r\n    const dataId = td.tensor.dataId;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (this.pendingRead.has(dataId)) {\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\r\n      this.pendingRead.set(dataId, []);\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      // add a fence waiting for the data to be ready\r\n      await this.glContext.createAndWaitForFence();\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      const tensorData = this.toTensorData(dataType, data);\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      this.pendingRead.delete(dataId);\r\n      subscribers?.forEach(resolve => resolve(tensorData));\r\n      return tensorData;\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../tensor';\r\n\r\n/**\r\n * Layout info is used for mapping n-dimensional array to 2D textures\r\n * The layout is created by the TextureLayoutStrategy based on\r\n * the Tensor's dimensions and strides\r\n */\r\nexport interface TextureLayout {\r\n  width: number;\r\n  height: number;\r\n  /**\r\n   * specify the number of value that encoded in a single pixel\r\n   */\r\n  channels: 1|2|3|4;\r\n  /**\r\n   * whether in packed mode or not\r\n   */\r\n  isPacked?: boolean;\r\n  /**\r\n   * the normalized shape\r\n   */\r\n  shape: readonly number[];\r\n  /**\r\n   * the stride of each dimensions, calculated according to shape\r\n   */\r\n  strides: readonly number[];\r\n  /**\r\n   * the original shape(dims) of the corresponding tensor\r\n   */\r\n  unpackedShape: readonly number[];\r\n\r\n  reversedWH?: boolean;\r\n}\r\nexport interface TextureData extends TextureLayout {\r\n  tensor: Tensor;\r\n  texture: WebGLTexture;\r\n}\r\n\r\nexport enum TextureType {\r\n  unpacked,              // <-- normal unpacked texture\r\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\r\n  packed,                // <-- normal packed texture\r\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\r\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  type: Tensor.DataType;\r\n  textureType: TextureType;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * A set of metadata of a shader program.\r\n */\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n  /**\r\n   * texture types for each input\r\n   */\r\n  inputTypes: TextureType[];\r\n  /**\r\n   * names of each input\r\n   */\r\n  inputNames: string[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for output\r\n   */\r\n  output: TensorInfo;\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  shaderSource: string;\r\n  /**\r\n   * whether the shader source contains a customized main function implementation\r\n   */\r\n  hasMain?: boolean;\r\n}\r\n\r\nexport interface VariableInfo {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * Information of uniforms that shader uses\r\n */\r\nexport interface UniformInfo {\r\n  type: 'sampler2D'|VariableInfo['type'];\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface UniformLocation extends UniformInfo {\r\n  location: WebGLUniformLocation;\r\n}\r\n\r\n/**\r\n * Artifact is the result of compilation\r\n * It does not contain input of output data\r\n * However anything that could be run as a \"program\"\r\n */\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  program: WebGLProgram;\r\n  uniformLocations: UniformLocation[];\r\n  attribLocations: {position: number; textureCoord: number};\r\n}\r\nexport declare namespace Artifact {\r\n  type UniformLocations = Artifact['uniformLocations'];\r\n  type AttribLocations = Artifact['attribLocations'];\r\n}\r\n\r\nexport interface UniformData {\r\n  [name: string]: number|number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n\r\nexport function getGlChannels(rank = 6): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  if (!context) {\r\n    try {\r\n      // try to create webgl context from an offscreen canvas\r\n      const offscreenCanvas = createOffscreenCanvas();\r\n      context = createNewWebGLContext(offscreenCanvas, contextId);\r\n    } catch (e) {\r\n      // if failed, fallback to try to use a normal canvas element\r\n      const canvas = createCanvas();\r\n      context = createNewWebGLContext(canvas, contextId);\r\n    }\r\n  }\r\n\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  if (typeof document === 'undefined') {\r\n    throw new TypeError('failed to create canvas: document is not supported');\r\n  }\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n\r\nfunction createOffscreenCanvas(): HTMLCanvasElement {\r\n  if (typeof OffscreenCanvas === 'undefined') {\r\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\r\n  }\r\n  return new OffscreenCanvas(1, 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\nexport interface FenceContext {\r\n  query: WebGLSync|null;\r\n  isFencePassed(): boolean;\r\n}\r\n\r\ntype PollItem = {\r\n  isDoneFn: () => boolean; resolveFn: () => void;\r\n};\r\n\r\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\r\n  let i = 0;\r\n  for (; i < arr.length; ++i) {\r\n    const isDone = arr[i]();\r\n    if (!isDone) {\r\n      break;\r\n    }\r\n  }\r\n  return i - 1;\r\n}\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n\r\n  public async createAndWaitForFence(): Promise<void> {\r\n    const fenceContext = this.createFence(this.gl);\r\n    return this.pollFence(fenceContext);\r\n  }\r\n\r\n  private createFence(gl: WebGLRenderingContext): FenceContext {\r\n    let isFencePassed: () => boolean;\r\n    const gl2 = gl as WebGL2RenderingContext;\r\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n    gl.flush();\r\n    if (query === null) {\r\n      isFencePassed = () => true;\r\n    } else {\r\n      isFencePassed = () => {\r\n        const status = gl2.clientWaitSync(query, 0, 0);\r\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\r\n      };\r\n    }\r\n    return {query, isFencePassed};\r\n  }\r\n\r\n  async pollFence(fenceContext: FenceContext) {\r\n    return new Promise<void>(resolve => {\r\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\r\n    });\r\n  }\r\n\r\n  private itemsToPoll: PollItem[] = [];\r\n\r\n  pollItems(): void {\r\n    // Find the last query that has finished.\r\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\r\n    for (let i = 0; i <= index; ++i) {\r\n      const {resolveFn} = this.itemsToPoll[i];\r\n      resolveFn();\r\n    }\r\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\r\n  }\r\n\r\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\r\n    this.itemsToPoll.push({isDoneFn, resolveFn});\r\n    if (this.itemsToPoll.length > 1) {\r\n      // We already have a running loop that polls.\r\n      return;\r\n    }\r\n    // Start a new loop that polls.\r\n    await repeatedTry(() => {\r\n      this.pollItems();\r\n      // End the loop if no more items to poll.\r\n      return this.itemsToPoll.length === 0;\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event(\r\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\r\n        const outputIndex = this.graph.getOutputIndices()[i];\r\n        const outputTensor = this._values[outputIndex];\r\n        if (outputTensor === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        if (outputIndex === 0) {\r\n          await outputTensor.getData();\r\n        } else {\r\n          // eslint-disable-next-line no-unused-expressions\r\n          outputTensor.data;\r\n        }\r\n        output.push(outputTensor);\r\n      }\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    fuseConvActivationNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          // handle exception when opset > 9 and roi / scales not given\r\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\r\n              nodeProto.opType === 'Resize') {\r\n            continue;\r\n          }\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n    this.fuseConvActivationNodes();\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    // The graph is represented using these two arrays\r\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\r\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\r\n    // newIndices - remapping the graph after reading the flag 'executeNode'\r\n    const newIndices = new Array<number>(this._nodes.length, 0);\r\n    let nodePossition = 0;\r\n\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      // giving new indexes to the nodes based on execution flag\r\n      newIndices[i] = nodePossition;\r\n      if (this._nodes[i].executeNode) {\r\n        if (nodePossition !== i) {\r\n          this._nodes[nodePossition] = this._nodes[i];\r\n        }\r\n        nodePossition++;\r\n\r\n      } else {\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n      }\r\n    }\r\n\r\n    // removing the unused nodes\r\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\r\n\r\n    // Updating this._allData according to the new this._nodes\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      const currentData = this._allData[i];\r\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\r\n        currentData._from = newIndices[currentData._from];\r\n      }\r\n\r\n      for (let j = 0; j < currentData._to.length; j++) {\r\n        if (currentData._to[j] >= 0) {\r\n          currentData._to[j] = newIndices[currentData._to[j]];\r\n        } else {\r\n          throw new Error('Trying to update a removed node');\r\n        }\r\n      }\r\n    }\r\n\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\r\n   * An input validation must be done before calling this function.\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    for (let i = 0; i < node.inputs.length; i++) {\r\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\r\n      // should not happen\r\n      if (delIndex === -1) {\r\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n      }\r\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\r\n    }\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n      case 'Clip':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          const child = this._nodes[next[0]];\r\n          if (child.opType === 'Clip') {\r\n            if (child.inputs.length === 1) {\r\n              try {\r\n                node.attributes.set(\r\n                    'activation_params', 'floats',\r\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\r\n              } catch (e) {\r\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\r\n              }\r\n            } else if (\r\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\r\n                this._allData[child.inputs[2]].tensor !== undefined) {\r\n              node.attributes.set('activation_params', 'floats', [\r\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\r\n              ]);\r\n            } else {\r\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\r\n              continue;\r\n            }\r\n          }\r\n          node.attributes.set('activation', 'string', (child.opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  async end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {LongUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\r\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\r\n\r\nexport interface Operator {\r\n  readonly impl: OperatorImplementation<unknown>;\r\n  readonly context: Graph.Node|unknown;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {OperatorImplementation, OperatorInitialization} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\nexport declare namespace OpSet {\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\r\n  /**\r\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\r\n   * operatorInitialization (optional)\r\n   */\r\n  type ResolveRule = [\r\n    string, Domain, string, OperatorImplementation<Graph.Node>\r\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opImpl = rule[3];\r\n    const opInit = rule[4];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return {opImpl, opInit};\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16,\r\n    FLOAT8E4M3FN = 17,\r\n    FLOAT8E4M3FNUZ = 18,\r\n    FLOAT8E5M2 = 19,\r\n    FLOAT8E5M2FNUZ = 20,\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\n\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(buf, isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\n\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n    int64: BigInt64Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        this.cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        value.data[i] = decodeUtf8String(str);\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'int64':\r\n      return BigInt64Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]) as number, b.get([]) as number));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]) as number;\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]) as number;\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA) as number;\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB) as number;\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\r\n  // which values are signed integers.\r\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\r\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n\r\nexport function decodeUtf8String(buffer: Uint8Array): string {\r\n  return new TextDecoder().decode(buffer);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// This file is generated by /js/scripts/update-version.ts\r\n// Do not modify file content manually.\r\n\r\nexport const version = '1.16.0';\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {configureLogger, LOG_DEBUG} from './log';\r\nimport {TensorView} from './tensor';\r\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\r\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\r\nimport {ProgramManager} from './webgpu/program-manager';\r\nimport {ComputeContext, GpuData, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\r\n\r\n/**\r\n * get a unique key representing the program from the program info, input shapes and types.\r\n *\r\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\r\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\r\n *\r\n */\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensors: readonly TensorView[]): string => {\r\n      // final key format:\r\n      // <PROGRAM_NAME>[<PROGRAM_CUSTOM_CACHE_HINT>]:<INPUTS_INFO_0>|<INPUTS_INFO_1>|...\r\n      const inputInfos = inputTensors.map(tensor => `${tensor.dataType};${tensor.dims.join(',')}`).join('|');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputInfos;\r\n      return key;\r\n    };\r\n\r\n/**\r\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\r\n * the first parameter so that it is stored for future use.\r\n */\r\nexport class WebGpuBackend {\r\n  device: GPUDevice;\r\n  /**\r\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\r\n   */\r\n  gpuDataManager: GpuDataManager;\r\n  /**\r\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\r\n   * artifacts mapping\r\n   */\r\n  programManager: ProgramManager;\r\n\r\n  /**\r\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\r\n   * `null` means no kernel is being computed.\r\n   * only one kernel can be computed at a moment.\r\n   */\r\n  currentKernelId: number|null = null;\r\n  /**\r\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\r\n   */\r\n  private temporaryData: GpuData[];\r\n  /**\r\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\r\n   */\r\n  private kernelPersistentData: Map<number, GpuData[]>;\r\n  /**\r\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\r\n   */\r\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\r\n  /**\r\n   * get the custom data of the current kernel\r\n   */\r\n  get currentKernelCustomData(): {[key: string]: unknown} {\r\n    if (this.currentKernelId === null) {\r\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\r\n    }\r\n\r\n    let data = this.kernelCustomData.get(this.currentKernelId);\r\n    if (!data) {\r\n      data = {};\r\n      this.kernelCustomData.set(this.currentKernelId, data);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\r\n   */\r\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\r\n\r\n  commandEncoder: GPUCommandEncoder|null = null;\r\n  computePassEncoder: GPUComputePassEncoder|null = null;\r\n  pendingDispatchNumber = 0;\r\n\r\n  supportTimestampQuery = false;\r\n  profilingQuerySet: GPUQuerySet;\r\n  profilingQueryData: GpuData;\r\n  profilingTimeBase?: bigint;\r\n\r\n  env: Env;\r\n\r\n  async initialize(env: Env): Promise<void> {\r\n    if (!navigator.gpu) {\r\n      // WebGPU is not available.\r\n      throw new Error('WebGpuBackend: WebGPU is not available.');\r\n    }\r\n\r\n    const adapter = await navigator.gpu.requestAdapter();\r\n    if (!adapter) {\r\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\r\n    }\r\n\r\n    this.env = env;\r\n    const deviceDescriptor: GPUDeviceDescriptor = {\r\n      requiredLimits: {\r\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\r\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\r\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\r\n        maxBufferSize: adapter.limits.maxBufferSize,\r\n        maxComputeInvocationsPerWorkgroup: adapter.limits.maxComputeInvocationsPerWorkgroup,\r\n        maxComputeWorkgroupSizeX: adapter.limits.maxComputeWorkgroupSizeX,\r\n        maxComputeWorkgroupSizeY: adapter.limits.maxComputeWorkgroupSizeY,\r\n        maxComputeWorkgroupSizeZ: adapter.limits.maxComputeWorkgroupSizeZ,\r\n      },\r\n    };\r\n    // WebGPU Spec: Timestamp Queries Inside Passes\r\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\r\n    if (adapter.features.has('timestamp-query-inside-passes')) {\r\n      this.supportTimestampQuery = true;\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\r\n    }\r\n\r\n    this.device = await adapter.requestDevice(deviceDescriptor);\r\n    this.gpuDataManager = createGpuDataManager(this);\r\n    this.programManager = new ProgramManager(this);\r\n    this.kernels = new Map();\r\n    this.kernelPersistentData = new Map();\r\n    this.kernelCustomData = new Map();\r\n\r\n    // set up flags for logger\r\n    configureLogger(env.logLevel!, !!env.debug);\r\n\r\n    // TODO: set up flags\r\n\r\n    this.device.onuncapturederror = ev => {\r\n      if (ev.error instanceof GPUValidationError) {\r\n        // eslint-disable-next-line no-console\r\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\r\n      }\r\n    };\r\n\r\n    if (this.supportTimestampQuery) {\r\n      this.profilingQuerySet = this.device.createQuerySet({\r\n        type: 'timestamp',\r\n        count: 2,\r\n      });\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\r\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\r\n    //\r\n    // revisit this place if we get real requirement to dispose the instance.\r\n  }\r\n\r\n  getCommandEncoder(): GPUCommandEncoder {\r\n    if (!this.commandEncoder) {\r\n      this.commandEncoder = this.device.createCommandEncoder();\r\n    }\r\n    return this.commandEncoder;\r\n  }\r\n\r\n  getComputePassEncoder(): GPUComputePassEncoder {\r\n    if (!this.computePassEncoder) {\r\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\r\n    }\r\n    return this.computePassEncoder;\r\n  }\r\n\r\n  endComputePass(): void {\r\n    if (this.computePassEncoder) {\r\n      this.computePassEncoder.end();\r\n      this.computePassEncoder = null;\r\n    }\r\n  }\r\n\r\n  flush(): void {\r\n    this.endComputePass();\r\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\r\n    this.gpuDataManager.refreshPendingBuffers();\r\n    this.commandEncoder = null;\r\n    this.pendingDispatchNumber = 0;\r\n  }\r\n\r\n  /**\r\n   * run a WebGPU program.\r\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\r\n   * can be called and return a ProgramInfo instance\r\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\r\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\r\n   * index to the kernel's output.\r\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\r\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\r\n   * or persistent (owned by the current kernel)\r\n   * @returns a TensorView array representing the result.\r\n   */\r\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\r\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\r\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\r\n    if (inputs.length !== program.inputTypes.length) {\r\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\r\n    }\r\n\r\n    // create info for inputs\r\n    const inputDatas: GpuData[] = [];\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\r\n      if (!gpuData) {\r\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\r\n      }\r\n      inputDatas[i] = gpuData;\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputs);\r\n    let artifact = this.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // check output indices\r\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\r\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\r\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\r\n    }\r\n\r\n    // create info for outputs\r\n    const outputTensorViews: TensorView[] = [];\r\n    const outputDatas: GpuData[] = [];\r\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\r\n      // value -1 and -2 are used for creating temporary and persistent outputs.\r\n      // value -3 is used for placeholder output. So -3, -2, -1 and 0, 1, 2, ... are valid\r\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\r\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -3 ||\r\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\r\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\r\n      }\r\n      if (validatedOutputIndices[i] === -3) {\r\n        continue;\r\n      }\r\n      const isTemporary = validatedOutputIndices[i] === -1;\r\n      const isPersistent = validatedOutputIndices[i] === -2;\r\n      const tensorView = (isTemporary || isPersistent) ?\r\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\r\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\r\n      const gpuData = this.gpuDataManager.get(tensorView.data);\r\n      if (!gpuData) {\r\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\r\n      }\r\n      if (isTemporary) {\r\n        this.temporaryData.push(gpuData);\r\n      }\r\n      if (isPersistent) {\r\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\r\n        if (!persistentData) {\r\n          persistentData = [];\r\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\r\n        }\r\n        persistentData.push(gpuData);\r\n      }\r\n      outputTensorViews.push(tensorView);\r\n      outputDatas.push(gpuData);\r\n    }\r\n\r\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\r\n\r\n    if (!artifact) {\r\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\r\n      this.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    LOG_DEBUG(\r\n        'info',\r\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\r\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\r\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\r\n\r\n    return outputTensorViews;\r\n  }\r\n\r\n  upload(gpuDataId: number, data: Uint8Array): void {\r\n    this.gpuDataManager.upload(gpuDataId, data);\r\n  }\r\n\r\n  memcpy(src: number, dst: number): void {\r\n    this.gpuDataManager.memcpy(src, dst);\r\n  }\r\n\r\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\r\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\r\n\r\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\r\n    // the buffer is up-to-date.\r\n    const data = getTargetBuffer();\r\n    data.set(new Uint8Array(arrayBuffer, 0, data.byteLength));\r\n  }\r\n\r\n  alloc(size: number): number {\r\n    return this.gpuDataManager.create(size).id;\r\n  }\r\n\r\n  free(ptr: number): number {\r\n    return this.gpuDataManager.release(ptr);\r\n  }\r\n\r\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\r\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\r\n    if (!op) {\r\n      throw new Error(`kernel not implemented: ${name}`);\r\n    }\r\n\r\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\r\n  }\r\n\r\n  releaseKernel(kernelId: number): void {\r\n    const persistentData = this.kernelPersistentData.get(kernelId);\r\n    if (persistentData) {\r\n      for (const data of persistentData) {\r\n        this.gpuDataManager.release(data.id);\r\n      }\r\n      this.kernelPersistentData.delete(kernelId);\r\n    }\r\n\r\n    this.kernelCustomData.delete(kernelId);\r\n    this.kernels.delete(kernelId);\r\n  }\r\n\r\n  computeKernel(kernelId: number, context: ComputeContext): number {\r\n    const kernel = this.kernels.get(kernelId);\r\n    if (!kernel) {\r\n      throw new Error(`kernel not created: ${kernelId}`);\r\n    }\r\n    const [name, kernelEntry, attributes] = kernel;\r\n    if (this.currentKernelId !== null) {\r\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\r\n    }\r\n    this.currentKernelId = kernelId;\r\n\r\n    // parse attributes if necessary\r\n    if (attributes[0]) {\r\n      attributes[1] = attributes[0](attributes[1]);\r\n      attributes[0] = undefined;\r\n    }\r\n\r\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\r\n\r\n    this.temporaryData = [];\r\n    try {\r\n      kernelEntry(context, attributes[1]);\r\n      return 0;  // ORT_OK\r\n    } catch (e) {\r\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\r\n      return 1;  // ORT_FAIL\r\n    } finally {\r\n      for (const data of this.temporaryData) {\r\n        this.gpuDataManager.release(data.id);\r\n      }\r\n      this.temporaryData = [];\r\n      this.currentKernelId = null;\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {OrtWasmModule} from '../binding/ort-wasm';\r\nimport {DataType, getTensorElementSize} from '../wasm-common';\r\n\r\nimport {WebGpuBackend} from './backend-webgpu';\r\nimport {LOG_DEBUG} from './log';\r\nimport {TensorView} from './tensor';\r\nimport {ShapeUtil} from './util';\r\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\r\n\r\n/* eslint-disable no-bitwise */\r\n\r\nclass TensorViewImpl implements TensorView {\r\n  constructor(\r\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\r\n      public readonly dims: readonly number[]) {}\r\n\r\n  getFloat32Array(): Float32Array {\r\n    if (this.dataType !== DataType.float) {\r\n      throw new Error('Invalid data type');\r\n    }\r\n    const elementCount = ShapeUtil.size(this.dims);\r\n    return elementCount === 0 ? new Float32Array() :\r\n                                new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\r\n  }\r\n\r\n  getBigInt64Array(): BigInt64Array {\r\n    if (this.dataType !== DataType.int64) {\r\n      throw new Error('Invalid data type');\r\n    }\r\n    const elementCount = ShapeUtil.size(this.dims);\r\n    return elementCount === 0 ? new BigInt64Array() :\r\n                                new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\r\n  }\r\n\r\n  getInt32Array(): Int32Array {\r\n    if (this.dataType !== DataType.int32) {\r\n      throw new Error('Invalid data type');\r\n    }\r\n    const elementCount = ShapeUtil.size(this.dims);\r\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\r\n  }\r\n\r\n  reshape(newDims: readonly number[]): TensorView {\r\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\r\n      throw new Error('Invalid new shape');\r\n    }\r\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\r\n  }\r\n}\r\n\r\nclass ComputeContextImpl implements ComputeContext {\r\n  readonly opKernelContext: number;\r\n  readonly inputs: readonly TensorView[];\r\n  readonly outputCount: number;\r\n  get kernelCustomData(): {[key: string]: unknown} {\r\n    return this.backend.currentKernelCustomData;\r\n  }\r\n  get customDataBuffer(): Uint8Array {\r\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\r\n  }\r\n  private customDataOffset = 0;\r\n  private customDataSize = 0;\r\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\r\n    const heapU32 = module.HEAPU32;\r\n\r\n    // extract context data\r\n    let dataIndex = (contextDataOffset >> 2);\r\n    this.opKernelContext = heapU32[dataIndex++];\r\n    const inputCount = heapU32[dataIndex++];\r\n    this.outputCount = heapU32[dataIndex++];\r\n    this.customDataOffset = heapU32[dataIndex++];\r\n    this.customDataSize = heapU32[dataIndex++];\r\n\r\n    const inputs: TensorView[] = [];\r\n    for (let i = 0; i < inputCount; i++) {\r\n      const dataType = heapU32[dataIndex++];\r\n      const data = heapU32[dataIndex++];\r\n      const dim = heapU32[dataIndex++];\r\n      const dims: number[] = [];\r\n      for (let d = 0; d < dim; d++) {\r\n        dims.push(heapU32[dataIndex++]);\r\n      }\r\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\r\n    }\r\n    this.inputs = inputs;\r\n  }\r\n\r\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\r\n      TensorView[] {\r\n    // prepare inputs. inputs should always be valid data.\r\n    const mappedInputs =\r\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\r\n    // prepare outputs.\r\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\r\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\r\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\r\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\r\n      const elementSize = getTensorElementSize(dataType);\r\n      if (!elementSize) {\r\n        throw new Error(`Unsupported data type: ${dataType}`);\r\n      }\r\n      const bufferSize = elementSize * ShapeUtil.size(dims);\r\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\r\n    };\r\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\r\n  }\r\n\r\n  output(index: number, dims: readonly number[]): number {\r\n    const stack = this.module.stackSave();\r\n    try {\r\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\r\n      let offset = data >> 2;\r\n      this.module.HEAPU32[offset++] = dims.length;\r\n      for (let i = 0; i < dims.length; i++) {\r\n        this.module.HEAPU32[offset++] = dims[i];\r\n      }\r\n      return this.module._JsepOutput(this.opKernelContext, index, data);\r\n    } finally {\r\n      this.module.stackRestore(stack);\r\n    }\r\n  }\r\n}\r\n\r\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\r\n  const init = module.jsepInit;\r\n  if (init && navigator.gpu) {\r\n    if (!env.wasm.simd) {\r\n      throw new Error(\r\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\r\n    }\r\n    const backend = new WebGpuBackend();\r\n    await backend.initialize(env);\r\n\r\n    init(\r\n        // backend\r\n        {backend},\r\n\r\n        // jsepAlloc()\r\n        (size: number) => backend.alloc(size),\r\n\r\n        // jsepFree()\r\n        (ptr: number) => backend.free(ptr),\r\n\r\n        // jsepCopy(src, dst, size, isSourceGpu)\r\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\r\n          if (isSourceGpu) {\r\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\r\n            backend.memcpy(src, dst);\r\n          } else {\r\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\r\n            const data = module.HEAPU8.subarray(src, src + size);\r\n            backend.upload(dst, data);\r\n          }\r\n        },\r\n\r\n        // jsepCopyAsync(src, dst, size)\r\n        async(gpuDataId: number, dataOffset: number, size: number):\r\n            Promise<void> => {\r\n              LOG_DEBUG(\r\n                  'verbose',\r\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\r\n\r\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\r\n            },\r\n\r\n        // jsepCreateKernel\r\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\r\n\r\n        // jsepReleaseKernel\r\n        (kernel: number) => backend.releaseKernel(kernel),\r\n\r\n        // jsepRun\r\n        (kernel: number, contextDataOffset: number) => {\r\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\r\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\r\n          return backend.computeKernel(kernel, context);\r\n        });\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {logLevelStringToEnum} from '../wasm-common';\r\n\r\ntype LogLevel = NonNullable<Env['logLevel']>;\r\ntype MessageString = string;\r\ntype MessageFunction = () => string;\r\ntype Message = MessageString|MessageFunction;\r\n\r\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\r\n\r\nconst doLog = (level: number, message: string): void => {\r\n  // eslint-disable-next-line no-console\r\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\r\n};\r\n\r\nlet configLogLevel: LogLevel|undefined;\r\nlet debug: boolean|undefined;\r\n\r\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\r\n  configLogLevel = $configLogLevel;\r\n  debug = $debug;\r\n};\r\n\r\n/**\r\n * A simple logging utility to log messages to the console.\r\n */\r\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\r\n  const messageLevel = logLevelStringToEnum(logLevel);\r\n  const configLevel = logLevelStringToEnum(configLogLevel);\r\n  if (messageLevel >= configLevel) {\r\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\r\n  }\r\n};\r\n\r\n/**\r\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\r\n */\r\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\r\n  if (debug) {\r\n    LOG(...args);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable no-param-reassign */\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\nexport class ShapeUtil {\r\n  /**\r\n   * calculate the size (number of elements)\r\n   */\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  /**\r\n   * calculate the size (number of elements) from the given axis (inclusive)\r\n   */\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  /**\r\n   * calculate the size (number of elements) to the given axis (exclusive)\r\n   */\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  /**\r\n   * calculate the size (number of elements) from and to the given axis [start, end)\r\n   */\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be negative.\r\n      if (dims[i] < 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]): void {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\r\n          dim + inputDims.length - 2, autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\n/**\r\n * create a new object from the given attribute, and add a cacheKey property to it\r\n */\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGpuBackend} from '../backend-webgpu';\r\nimport {LOG_DEBUG} from '../log';\r\n\r\nimport {GpuData, GpuDataId, GpuDataType} from './types';\r\n\r\n/**\r\n * manages GpuDataId -> GpuBuffer\r\n */\r\nexport interface GpuDataManager {\r\n  /**\r\n   * copy data from CPU to GPU.\r\n   */\r\n  upload(id: GpuDataId, data: Uint8Array): void;\r\n  /**\r\n   * copy data from GPU to GPU.\r\n   */\r\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\r\n  /**\r\n   * create new data on GPU.\r\n   */\r\n  create(size: number, usage?: number): GpuData;\r\n  /**\r\n   * get GPU data by ID.\r\n   */\r\n  get(id: GpuDataId): GpuData|undefined;\r\n  /**\r\n   * release the data on GPU by ID.\r\n   *\r\n   * @return size of the data released\r\n   */\r\n  release(id: GpuDataId): number;\r\n  /**\r\n   * copy data from GPU to CPU.\r\n   */\r\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\r\n\r\n  /**\r\n   * refresh the buffers that marked for release.\r\n   *\r\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\r\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\r\n   * actually released.\r\n   */\r\n  refreshPendingBuffers(): void;\r\n\r\n  /**\r\n   * destroy all gpu buffers. Call this when the session.release is called.\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\ninterface StorageCacheValue {\r\n  gpuData: GpuData;\r\n  originalSize: number;\r\n}\r\n\r\ninterface DownloadCacheValue {\r\n  data: Promise<ArrayBufferLike>;\r\n}\r\n\r\n/**\r\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\r\n */\r\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\r\n\r\nlet guid = 0;\r\nconst createNewGpuDataId = () => guid++;\r\n\r\nclass GpuDataManagerImpl implements GpuDataManager {\r\n  // GPU Data ID => GPU Data ( storage buffer )\r\n  storageCache: Map<GpuDataId, StorageCacheValue>;\r\n\r\n  // GPU Data ID => GPU Data ( read buffer )\r\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\r\n\r\n  // pending buffers for uploading ( data is unmapped )\r\n  private buffersForUploadingPending: GPUBuffer[];\r\n  // pending buffers for computing\r\n  private buffersPending: GPUBuffer[];\r\n\r\n  // The reusable storage buffers for computing.\r\n  private freeBuffers: Map<number, GPUBuffer[]>;\r\n\r\n  constructor(private backend: WebGpuBackend) {\r\n    this.storageCache = new Map();\r\n    this.downloadCache = new Map();\r\n    this.freeBuffers = new Map();\r\n    this.buffersForUploadingPending = [];\r\n    this.buffersPending = [];\r\n  }\r\n\r\n  upload(id: GpuDataId, data: Uint8Array): void {\r\n    const srcArrayBuffer = data.buffer;\r\n    const srcOffset = data.byteOffset;\r\n    const srcLength = data.byteLength;\r\n    const size = calcNormalizedBufferSize(srcLength);\r\n\r\n    // get destination gpu buffer\r\n    const gpuDataCache = this.storageCache.get(id);\r\n    if (!gpuDataCache) {\r\n      throw new Error('gpu data for uploading does not exist');\r\n    }\r\n    if (gpuDataCache.originalSize !== srcLength) {\r\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\r\n    }\r\n\r\n    // create gpu buffer\r\n    const gpuBufferForUploading = this.backend.device.createBuffer(\r\n        // eslint-disable-next-line no-bitwise\r\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\r\n\r\n    // copy (upload) data\r\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\r\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\r\n    gpuBufferForUploading.unmap();\r\n\r\n\r\n    // GPU copy\r\n    const commandEncoder = this.backend.getCommandEncoder();\r\n    this.backend.endComputePass();\r\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\r\n\r\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\r\n\r\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\r\n  }\r\n\r\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\r\n    // get source gpu buffer\r\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\r\n    if (!sourceGpuDataCache) {\r\n      throw new Error('source gpu data for memcpy does not exist');\r\n    }\r\n    // get destination gpu buffer\r\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\r\n    if (!destinationGpuDataCache) {\r\n      throw new Error('destination gpu data for memcpy does not exist');\r\n    }\r\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\r\n      throw new Error('inconsistent source and destination gpu data size');\r\n    }\r\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\r\n\r\n    // GPU copy\r\n    const commandEncoder = this.backend.getCommandEncoder();\r\n    this.backend.endComputePass();\r\n    commandEncoder.copyBufferToBuffer(\r\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\r\n  }\r\n\r\n  // eslint-disable-next-line no-bitwise\r\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\r\n    const bufferSize = calcNormalizedBufferSize(size);\r\n\r\n    let gpuBuffer;\r\n    // Currently, only storage buffers are reused.\r\n    // eslint-disable-next-line no-bitwise\r\n    if ((usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\r\n      let buffers = this.freeBuffers.get(bufferSize);\r\n      if (!buffers) {\r\n        buffers = [];\r\n        this.freeBuffers.set(bufferSize, buffers);\r\n      }\r\n      if (buffers.length > 0) {\r\n        gpuBuffer = buffers.pop() as GPUBuffer;\r\n      } else {\r\n        // create gpu buffer\r\n        gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\r\n      }\r\n    } else {\r\n      // create gpu buffer\r\n      gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\r\n    }\r\n\r\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\r\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\r\n\r\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\r\n    return gpuData;\r\n  }\r\n\r\n  get(id: GpuDataId): GpuData|undefined {\r\n    return this.storageCache.get(id)?.gpuData;\r\n  }\r\n\r\n  release(id: GpuDataId): number {\r\n    const cachedData = this.storageCache.get(id);\r\n    if (!cachedData) {\r\n      throw new Error('releasing data does not exist');\r\n    }\r\n\r\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\r\n\r\n    this.storageCache.delete(id);\r\n    this.buffersPending.push(cachedData.gpuData.buffer);\r\n    // cachedData.gpuData.buffer.destroy();\r\n\r\n    const downloadingData = this.downloadCache.get(id);\r\n    if (downloadingData) {\r\n      this.downloadCache.delete(id);\r\n    }\r\n\r\n    return cachedData.originalSize;\r\n  }\r\n\r\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\r\n    const downloadData = this.downloadCache.get(id);\r\n    if (downloadData) {\r\n      return downloadData.data;\r\n    }\r\n\r\n    const cachedData = this.storageCache.get(id);\r\n    if (!cachedData) {\r\n      throw new Error('data does not exist');\r\n    }\r\n\r\n    const commandEncoder = this.backend.getCommandEncoder();\r\n    this.backend.endComputePass();\r\n    const bufferSize = calcNormalizedBufferSize(cachedData.originalSize);\r\n    const gpuReadBuffer = this.backend.device.createBuffer(\r\n        // eslint-disable-next-line no-bitwise\r\n        {size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\r\n    commandEncoder.copyBufferToBuffer(\r\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\r\n        0 /* destination offset */, bufferSize /* size */\r\n    );\r\n    this.backend.flush();\r\n\r\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\r\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\r\n        const data = gpuReadBuffer.getMappedRange().slice(0);\r\n        gpuReadBuffer.destroy();\r\n        resolve(data);\r\n      });\r\n    });\r\n\r\n    this.downloadCache.set(id, {data: readDataPromise});\r\n\r\n    return readDataPromise;\r\n  }\r\n\r\n  refreshPendingBuffers(): void {\r\n    for (const buffer of this.buffersForUploadingPending) {\r\n      // upload buffer is only useful in the session creation time. So we don't need to reuse them in session running.\r\n      buffer.destroy();\r\n    }\r\n    this.buffersForUploadingPending = [];\r\n    for (const buffer of this.buffersPending) {\r\n      // eslint-disable-next-line no-bitwise\r\n      if ((buffer.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\r\n        // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\r\n        this.freeBuffers.get(buffer.size)!.push(buffer);\r\n      } else {\r\n        buffer.destroy();\r\n      }\r\n    }\r\n    this.buffersPending = [];\r\n  }\r\n\r\n  dispose() {\r\n    this.freeBuffers.forEach((buffers) => {\r\n      buffers.forEach(buffer => {\r\n        buffer.destroy();\r\n      });\r\n    });\r\n\r\n    this.storageCache.forEach((storage) => {\r\n      storage.gpuData.buffer.destroy();\r\n    });\r\n\r\n    this.storageCache = new Map();\r\n    this.downloadCache = new Map();\r\n    this.freeBuffers = new Map();\r\n  }\r\n}\r\n\r\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\r\n    new GpuDataManagerImpl(...args);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {argMax, argMin, parseArgMinMaxAttributes} from './ops/argminmax';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\r\nimport {expand} from './ops/expand';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributes} from './ops/gemm';\r\nimport {instanceNorm, parseInstanceNormAttributes} from './ops/instance-norm';\r\nimport {layerNorm, parseLayerNormAttributes} from './ops/layer-norm';\r\nimport {matMul} from './ops/matmul';\r\nimport * as pool from './ops/pool';\r\nimport {parseReduceAttributes, reduceL1, reduceL2, reduceLogSum, reduceLogSumExp, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum, reduceSumSquare} from './ops/reduce';\r\nimport {parseResizeAttributes, resize} from './ops/resize';\r\nimport {parseSkipLayerNormAttributes, skipLayerNorm} from './ops/skip-layer-norm';\r\nimport {parseSliceAttributes, slice} from './ops/slice';\r\nimport {parseSoftmaxAttributes, softmax} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {ComputeContext} from './types';\r\n\r\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\r\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\r\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\r\n\r\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\r\n  ['Abs', [unaryOps.abs]],\r\n  ['Acos', [unaryOps.acos]],\r\n  ['Acosh', [unaryOps.acosh]],\r\n  ['Add', [binaryOps.add]],\r\n  ['ArgMax', [argMax, parseArgMinMaxAttributes]],\r\n  ['ArgMin', [argMin, parseArgMinMaxAttributes]],\r\n  ['Asin', [unaryOps.asin]],\r\n  ['Asinh', [unaryOps.asinh]],\r\n  ['Atan', [unaryOps.atan]],\r\n  ['Atanh', [unaryOps.atanh]],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\r\n  ['Cast', [unaryOps.cast, unaryOps.parseCastAttributes]],\r\n  ['Ceil', [unaryOps.ceil]],\r\n  ['ClipV10', [unaryOps.clipV10]],\r\n  ['Clip', [unaryOps.clip]],\r\n  ['Concat', [concat, parseConcatAttributes]],\r\n  ['Conv', [conv, parseConvAttributes]],\r\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\r\n  ['Cos', [unaryOps.cos]],\r\n  ['Cosh', [unaryOps.cosh]],\r\n  ['Div', [binaryOps.div]],\r\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\r\n  ['Erf', [unaryOps.erf]],\r\n  ['Exp', [unaryOps.exp]],\r\n  ['Expand', [expand]],\r\n  ['Floor', [unaryOps.floor]],\r\n  ['Gather', [gather, parseGatherAttributes]],\r\n  ['Gelu', [unaryOps.gelu]],\r\n  ['Gemm', [gemm, parseGemmAttributes]],\r\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\r\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\r\n  ['InstanceNormalization', [instanceNorm, parseInstanceNormAttributes]],\r\n  ['LayerNormalization', [layerNorm, parseLayerNormAttributes]],\r\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\r\n  ['Log', [unaryOps.log]],\r\n  ['MatMul', [matMul]],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\r\n  ['Mul', [binaryOps.mul]],\r\n  ['Neg', [unaryOps.neg]],\r\n  ['Pow', [binaryOps.pow]],\r\n  ['Reciprocal', [unaryOps.reciprocal]],\r\n  ['ReduceMin', [reduceMin, parseReduceAttributes]],\r\n  ['ReduceMean', [reduceMean, parseReduceAttributes]],\r\n  ['ReduceMax', [reduceMax, parseReduceAttributes]],\r\n  ['ReduceSum', [reduceSum, parseReduceAttributes]],\r\n  ['ReduceProd', [reduceProd, parseReduceAttributes]],\r\n  ['ReduceL1', [reduceL1, parseReduceAttributes]],\r\n  ['ReduceL2', [reduceL2, parseReduceAttributes]],\r\n  ['ReduceLogSum', [reduceLogSum, parseReduceAttributes]],\r\n  ['ReduceLogSumExp', [reduceLogSumExp, parseReduceAttributes]],\r\n  ['ReduceSumSquare', [reduceSumSquare, parseReduceAttributes]],\r\n  ['Relu', [unaryOps.relu]],\r\n  ['Resize', [resize, parseResizeAttributes]],\r\n  ['Sigmoid', [unaryOps.sigmoid]],\r\n  ['Sin', [unaryOps.sin]],\r\n  ['Sinh', [unaryOps.sinh]],\r\n  ['Slice', [slice, parseSliceAttributes]],\r\n  ['SkipLayerNormalization', [skipLayerNorm, parseSkipLayerNormAttributes]],\r\n  ['Split', [split, parseSplitAttributes]],\r\n  ['Sqrt', [unaryOps.sqrt]],\r\n  ['Softmax', [softmax, parseSoftmaxAttributes]],\r\n  ['Sub', [binaryOps.sub]],\r\n  ['Tan', [unaryOps.tan]],\r\n  ['Tanh', [unaryOps.tanh]],\r\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\r\n  ['Tile', [tile]],\r\n  ['Transpose', [transpose, parseTransposeAttributes]],\r\n]);\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid' | 'gelu';\r\n\r\nexport const typeSnippet = (component: number) => {\r\n  switch (component) {\r\n    case 1:\r\n      return 'f32';\r\n    case 2:\r\n      return 'vec2<f32>';\r\n    case 3:\r\n      return 'vec3<f32>';\r\n    case 4:\r\n      return 'vec4<f32>';\r\n    default:\r\n      throw new Error(`${component}-component is not supported.`);\r\n  }\r\n};\r\n\r\nexport const activationFnSnippet =\r\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\r\n      if (!activation) {\r\n        return '';\r\n      }\r\n\r\n      // TODO: add implementations\r\n      return '';\r\n    };\r\n\r\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\r\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\r\n      ${activation ? 'value = activation(value, coords);' : ''}\r\n      `;\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nimport {LOG_DEBUG} from '../../../log';\r\nimport {TensorView} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\r\nimport {ConvAttributes} from '../conv';\r\n\r\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\r\nimport {utilFunctions} from './conv_util';\r\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\r\n\r\nconst conv2dCommonSnippet =\r\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\r\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\r\n     innerElementSize = 4): string => {\r\n      const getXSnippet = (innerElementSize: number) => {\r\n        switch (innerElementSize) {\r\n          case 1:\r\n            return 'resData = x[xIndex];';\r\n          case 3:\r\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\r\n          case 4:\r\n            return 'resData = x[xIndex / 4];';\r\n          default:\r\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\r\n        }\r\n      };\r\n      const getWSnippet = (innerElementSize: number) => {\r\n        switch (innerElementSize) {\r\n          case 1:\r\n            return 'return w[row * wShape[3] + colIn];';\r\n          case 4:\r\n            return 'return w[row * wShape[3] / 4 + colIn];';\r\n          default:\r\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\r\n        }\r\n      };\r\n      const coordASnippet = isChannelsLast ? `\r\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\r\n    ` :\r\n                                             `\r\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\r\n    `;\r\n\r\n      const coordResSnippet = isChannelsLast ? `\r\n    let coords = vec4<i32>(\r\n      batch,\r\n      row / outWidth,\r\n      row % outWidth,\r\n      col);\r\n    ` :\r\n                                               `\r\n    let coords = vec4<i32>(\r\n      batch,\r\n      row,\r\n      col / outWidth,\r\n      col % outWidth);\r\n    `;\r\n\r\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\r\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\r\n      const row = isChannelsLast ? 'row' : 'col';\r\n      const col = isChannelsLast ? 'col' : 'row';\r\n      const readXSnippet = `\r\n    let inChannels = wShape[2];\r\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\r\n    let outRow = ${row} / outWidth;\r\n    let outCol = ${row} % outWidth;\r\n\r\n    let WRow = ${col} / (filterDims[1] * inChannels);\r\n    let WCol = ${col} / inChannels % filterDims[1];\r\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\r\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\r\n    let xCh = ${col} % inChannels;\r\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\r\n    // The bounds checking is always needed since we use it to pad zero for\r\n    // the 'same' padding type.\r\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\r\n      ${coordASnippet}\r\n      let xIndex = getIndexFromCoords4D(coord, xShape);\r\n      ${getXSnippet(innerElementSizeX)}\r\n    }\r\n    return resData;`;\r\n\r\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\r\n    let col = colIn * ${innerElementSizeX};\r\n    ${readXSnippet}` :\r\n                                                                `\r\n    let col = colIn * ${innerElementSizeX};\r\n    if (row < dimAOuter && col < dimInner) {\r\n      ${readXSnippet}\r\n    }\r\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\r\n                                       (fitInner && fitBOuter ? `\r\n    let col = colIn * ${innerElementSizeX};\r\n    ${readXSnippet}` :\r\n                                                                `\r\n    let col = colIn * ${innerElementSizeX};\r\n    if (row < dimInner && col < dimBOuter) {\r\n      ${readXSnippet}\r\n    }\r\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\r\n\r\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\r\n\r\n      const resType = typeSnippet(innerElementSize);\r\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\r\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\r\n      const userCode = `\r\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\r\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\r\n      ${isChannelsLast ? sampleX : sampleW}\r\n    }\r\n\r\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\r\n      ${isChannelsLast ? sampleW : sampleX}\r\n    }\r\n\r\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\r\n      let col = colIn * ${innerElementSize};\r\n      if (row < dimAOuter && col < dimBOuter)\r\n      {\r\n      var value = valueIn;\r\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\r\n      ${coordResSnippet}\r\n      ${biasActivationSnippet(addBias, activation)}\r\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\r\n      }\r\n    }`;\r\n      return userCode;\r\n    };\r\n\r\nexport const createConv2DMatMulProgramInfo =\r\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\r\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\r\n     sequentialAccessByThreads: boolean): ProgramInfo => {\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\r\n      const batchSize = outputShape[0];\r\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\r\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\r\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\r\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\r\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\r\n          outChannels % 4 === 0;\r\n\r\n      // TODO: fine tune size\r\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\r\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\r\n      const workGroupSize: [number, number, number] =\r\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\r\n      const elementsPerThread =\r\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\r\n      const dispatch = [\r\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\r\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\r\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\r\n      ];\r\n\r\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\r\n\r\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\r\n\r\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\r\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\r\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\r\n\r\n      const fitAOuter = dimAOuter % tileAOuter === 0;\r\n      const fitBOuter = dimBOuter % tileBOuter === 0;\r\n      const fitInner = dimInner % tileInner === 0;\r\n\r\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\r\n\r\n      const declareInputs = [\r\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\r\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\r\n      ];\r\n      let declareFunctions = `\r\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\r\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\r\n      }\r\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\r\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\r\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\r\n      }`;\r\n      if (hasBias) {\r\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\r\n        declareFunctions += `\r\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\r\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\r\n        }`;\r\n      }\r\n\r\n      return {\r\n        ...metadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\r\n        getShaderSource: () => `\r\n        ${utilFunctions}\r\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\r\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\r\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\r\n        ${declareInputs.join('')}\r\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\r\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\r\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\r\n\r\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\r\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\r\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\r\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\r\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\r\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\r\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\r\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\r\n        const dimAOuter : i32 = ${dimAOuter};\r\n        const dimBOuter : i32 = ${dimBOuter};\r\n        const dimInner : i32 = ${dimInner};\r\n        ${declareFunctions}\r\n        ${\r\n            conv2dCommonSnippet(\r\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\r\n                elementsSize[1], elementsSize[2])}\r\n            ${\r\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\r\n                     makeMatMulPackedSource(\r\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\r\n                         sequentialAccessByThreads)}`\r\n      };\r\n    };\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\r\n\r\nimport {LOG_DEBUG} from '../../../log';\r\nimport {TensorView} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\r\nimport {inputVariable, outputVariable, ShaderHelper} from '../common';\r\nimport {ConvTransposeAttributes} from '../conv-transpose';\r\n\r\nconst createConvTranspose2DOpProgramShaderSource =\r\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\r\n     outputShape: readonly number[], hasBias: boolean, elementsPerThread: readonly number[]): string => {\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      const rowDim = isChannelsLast ? 1 : 2;\r\n      const colDim = isChannelsLast ? 2 : 3;\r\n      const channelDim = isChannelsLast ? 3 : 1;\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\r\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\r\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\r\n      const workPerThread = isVec4 ? 2 : 1;\r\n\r\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\r\n\r\n      const declareInputs = [\r\n        `@group(0) @binding(0) var<storage, read> Dy: array<${\r\n            isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\r\n        `@group(0) @binding(1) var<storage, read> W: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\r\n      ];\r\n      let declareFunctions = `\r\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\r\n    result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\r\n  }`;\r\n      if (hasBias) {\r\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\r\n        declareFunctions += `\r\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\r\n      return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\r\n    }`;\r\n      }\r\n      const w = inputVariable('W', inputs[1].dataType, inputs[1].dims);\r\n      const dy = inputVariable('Dy', inputs[0].dataType, inputs[0].dims);\r\n      const output = outputVariable('result', inputs[0].dataType, outputShape);\r\n      const codeSnippet4 = `{\r\n        let batch: u32 = global_id.z / outShape[1];\r\n        let r = global_id.z % outShape[1];\r\n        let c = global_id.y * ${workPerThread};\r\n        let d1: u32 = global_id.x * 4;\r\n\r\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\r\n\r\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        var dotProd: array<vec4<f32>, ${workPerThread}>;\r\n        for (var i = 0; i < ${workPerThread}; i++) {\r\n          dotProd[i] = vec4<f32>(0.0);\r\n        }\r\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\r\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\r\n          let wRPerm: u32= filterDims[0] - 1 - wR;\r\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\r\n              fract(dyR) > 0.0) {\r\n            continue;\r\n          }\r\n          let idyR: u32 = u32(dyR);\r\n\r\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\r\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\r\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\r\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\r\n            var bDyCVal = true;\r\n            var bDyCVal2 = true;\r\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\r\n                fract(dyC) > 0.0) {\r\n              bDyCVal = false;\r\n            }\r\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\r\n                fract(dyC2) > 0.0) {\r\n              bDyCVal2 = false;\r\n            }\r\n\r\n            let idyC: u32 = u32(dyC);\r\n            let idyC2: u32 = u32(dyC2);\r\n            if (bDyCVal && bDyCVal2) {\r\n              let d2Length = outBackprop[3];\r\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\r\n                let wValue0 = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                let wValue1 = ${w.get('d2', 'd1 + 1', 'wRPerm', 'wCPerm')};\r\n                let wValue2 = ${w.get('d2', 'd1 + 2', 'wRPerm', 'wCPerm')};\r\n                let wValue3 = ${w.get('d2', 'd1 + 3', 'wRPerm', 'wCPerm')};\r\n\r\n                var xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let tmpval = vec4<f32>(xValue * wValue0,\r\n                                      xValue * wValue1,\r\n                                      xValue * wValue2,\r\n                                      xValue * wValue3);\r\n                dotProd[0] = dotProd[0] + tmpval;\r\n\r\n                xValue =  ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC2', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC2')};\r\n\r\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\r\n                                                    xValue * wValue1,\r\n                                                    xValue * wValue2,\r\n                                                    xValue * wValue3);\r\n              }\r\n            } else if (bDyCVal) {\r\n              let d2Length = outBackprop[3];\r\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\r\n                let wValue0 = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                let wValue1 = ${w.get('d2', 'd1 + 1', 'wRPerm', 'wCPerm')};\r\n                let wValue2 = ${w.get('d2', 'd1 + 2', 'wRPerm', 'wCPerm')};\r\n                let wValue3 = ${w.get('d2', 'd1 + 3', 'wRPerm', 'wCPerm')};\r\n\r\n                var xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let tmpval = vec4<f32>(xValue * wValue0,\r\n                                      xValue * wValue1,\r\n                                      xValue * wValue2,\r\n                                      xValue * wValue3);\r\n                dotProd[0] = dotProd[0] + tmpval;\r\n              }\r\n            } else if (bDyCVal2) {\r\n              let d2Length = outBackprop[3];\r\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\r\n                let wValue0 = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                let wValue1 = ${w.get('d2', 'd1 + 1', 'wRPerm', 'wCPerm')};\r\n                let wValue2 = ${w.get('d2', 'd1 + 2', 'wRPerm', 'wCPerm')};\r\n                let wValue3 = ${w.get('d2', 'd1 + 3', 'wRPerm', 'wCPerm')};\r\n\r\n                var xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let tmpval = vec4<f32>(xValue * wValue0,\r\n                                      xValue * wValue1,\r\n                                      xValue * wValue2,\r\n                                      xValue * wValue3);\r\n                dotProd[1] = dotProd[1] + tmpval;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\r\n          ${output.set('batch', 'r', 'c+i', 'd1', 'dotProd[i]')};\r\n        }\r\n      }`;\r\n      const codeSnippet = `\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n          let batch = outputIndices[0];\r\n          let d1 = outputIndices[${channelDim}];\r\n          let dyCorner = vec2<i32>(i32(outputIndices[${rowDim}]), i32(outputIndices[${colDim}])) - pads;\r\n          let dyRCorner = dyCorner.x;\r\n          let dyCCorner = dyCorner.y;\r\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\r\n          // ? = to be determined. : = across all values in that axis.\r\n          var dotProd = 0.0;\r\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\r\n            if (wR % dilations.x != 0) {\r\n              continue;\r\n            }\r\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\r\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\r\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\r\n                wRPerm < 0) {\r\n              continue;\r\n            }\r\n            let idyR: u32 = u32(dyR);\r\n\r\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\r\n              if (wC % dilations.y != 0) {\r\n                continue;\r\n              }\r\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\r\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\r\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\r\n                  fract(dyC) > 0.0 || wCPerm < 0) {\r\n                continue;\r\n              }\r\n              let idyC: u32 = u32(dyC);\r\n\r\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\r\n                let xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let wValue = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                dotProd = dotProd + xValue * wValue;\r\n              }\r\n            }\r\n          }\r\n          ${output.setByOffset('global_idx', 'dotProd')};\r\n        `;\r\n\r\n      const shader = `\r\n  ${declareFunctions}\r\n  ${declareInputs.join('\\n')}\r\n  @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;\r\n  const outShape : vec4<u32> = vec4<u32>(${outputShape.join(',')});\r\n  const outBackprop : vec4<u32> = vec4<u32>(${inputs[0].dims.join(',')});\r\n  const strides : vec2<u32> = vec2<u32>(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const filterDims : vec2<u32> = vec2<u32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${\r\n          attributes.kernelShape[isChannelsLast ? 2 : 3]});\r\n  const dilations : vec2<u32> = vec2<u32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\r\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\r\n          ${\r\n          attributes.dilations[0] <= 1 ?\r\n              0 :\r\n              (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\r\n          ${\r\n          attributes.dilations[1] <= 1 ?\r\n              0 :\r\n              (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\r\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\r\n                                     i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\r\n    ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)};\r\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\r\n\r\n      // TODO: use shaderHelper.declareVariables() to declare variables so that those impl() calls can be removed.\r\n      return `  ${w.impl()}\r\n  ${dy.impl()}\r\n  ${output.impl()}\r\n  ${shader}`;\r\n    };\r\n\r\nexport const createConvTranspose2DProgramInfo =\r\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvTransposeAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      const outputShape = attributes.outputShape;\r\n      const batchSize = outputShape[0];\r\n      const outWidth = outputShape[isChannelsLast ? 1 : 2];\r\n      const outHeight = outputShape[isChannelsLast ? 2 : 3];\r\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\r\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\r\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\r\n\r\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\r\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\r\n      const workGroupSize: [number, number, number] =\r\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\r\n      const elementsPerThread =\r\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\r\n      const dispatch = [\r\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\r\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\r\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\r\n      ];\r\n      LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\r\n\r\n      return {\r\n        ...metadata,\r\n        outputs: [{\r\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\r\n          dataType: inputs[0].dataType,\r\n          gpuDataType: GpuDataType.default\r\n        }],\r\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\r\n        getShaderSource: (shaderHelper: ShaderHelper) => createConvTranspose2DOpProgramShaderSource(\r\n            shaderHelper, inputs, attributes, outputShape, hasBias, elementsPerThread),\r\n      };\r\n    };\r\n","/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nexport const utilFunctions = `\r\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\r\n  return dot(coords, vec4<i32>(\r\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\r\n}\r\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\r\n  return dot(coords, vec4<i32>(\r\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\r\n}\r\n`;\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\r\n  if (transpose) {\r\n    return `\r\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n          kStart + inputRow,\r\n          globalRowStart / innerElementSize + inputCol);\r\n        `;\r\n\r\n  } else {\r\n    return `\r\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n          globalRow + innerRow,\r\n          kStart / innerElementSize + inputCol);\r\n        `;\r\n  }\r\n};\r\n\r\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\r\n  if (transposeA) {\r\n    return `\r\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\r\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\r\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\r\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\r\n        for (var i = 0; i < rowPerThread; i = i + 1) {\r\n          acc[i] = BCached0 * ACached0[i] + acc[i];\r\n          acc[i] = BCached1 * ACached1[i] + acc[i];\r\n          acc[i] = BCached2 * ACached2[i] + acc[i];\r\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\r\n        }`;\r\n  } else {\r\n    return `\r\n        for (var i = 0; i < rowPerThread; i = i + 1) {\r\n          let ACached = mm_Asub[tileRow + i][k];\r\n          acc[i] = BCached0 * ACached.x + acc[i];\r\n          acc[i] = BCached1 * ACached.y + acc[i];\r\n          acc[i] = BCached2 * ACached.z + acc[i];\r\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\r\n        }`;\r\n  }\r\n};\r\n\r\nexport const makeMatMulPackedVec4Source =\r\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\r\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\r\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\r\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\r\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\r\n      const tileAHight = transposeA ? tileInner : tileAOuter;\r\n      const innerElementSize = tileAWidth / workgroupSize[0];\r\n      const rowPerThreadB = tileInner / workgroupSize[1];\r\n\r\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\r\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\r\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\r\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\r\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\r\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\r\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\r\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\r\n            workPerThread[0]} must be 4.`);\r\n      }\r\n      return `\r\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\r\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\r\n\r\nconst rowPerThread = ${workPerThread[1]};\r\nconst colPerThread = ${workPerThread[0]};\r\nconst innerElementSize = ${innerElementSize};\r\nconst tileInner = ${tileInner};\r\n\r\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\r\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\r\n        @builtin(global_invocation_id) globalId : vec3<u32>,\r\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\r\n  let localRow = i32(localId.y);\r\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\r\n  let tileCol = i32(localId.x);\r\n\r\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\r\n  let globalCol = i32(globalId.x);\r\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\r\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\r\n\r\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\r\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\r\n\r\n  var acc: array<vec4<f32>, rowPerThread>;\r\n\r\n  // Loop over shared dimension.\r\n  let tileRowB = localRow * ${rowPerThreadB};\r\n  for (var t = 0; t < numTiles; t = t + 1) {\r\n      // Load one tile of A into local memory.\r\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n          let inputRow = tileRow + innerRow;\r\n          let inputCol = tileCol;\r\n          ${writeDataToSubAVec4Snippet(transposeA)}\r\n      }\r\n\r\n      // Load one tile of B into local memory.\r\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\r\n          let inputRow = tileRowB + innerRow;\r\n          let inputCol = tileCol;\r\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\r\n      }\r\n      kStart = kStart + tileInner;\r\n      workgroupBarrier();\r\n\r\n      // Compute acc values for a single thread.\r\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\r\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\r\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\r\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\r\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\r\n\r\n          ${calculateResultSnippet(transposeA, innerElementSize)}\r\n      }\r\n\r\n      workgroupBarrier();\r\n  }\r\n\r\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\r\n  }\r\n}`;\r\n    };\r\n\r\nconst writeDataToSubASnippet = (transpose: boolean) => {\r\n  if (transpose) {\r\n    return `\r\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n              kStart + inputRow,\r\n              globalRowStart + inputCol);\r\n            `;\r\n\r\n  } else {\r\n    return `\r\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n              globalRowStart + inputRow,\r\n              kStart + inputCol);\r\n            `;\r\n  }\r\n};\r\n\r\nconst readDataFromSubASnippet = (transposeA: boolean) =>\r\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\r\n\r\n// sequentialAccessByThreads means sequential data in memory is accessed by\r\n// threads, instead of a single thread (default behavior).\r\nexport const makeMatMulPackedSource =\r\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\r\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\r\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\r\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\r\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\r\n      const tileAHight = transposeA ? tileInner : tileAOuter;\r\n\r\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\r\n            tileInner % workgroupSize[1] === 0)) {\r\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\r\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\r\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\r\n      }\r\n      const rowPerThreadA = tileAHight / workgroupSize[1];\r\n      const colPerThreadA = tileAWidth / workgroupSize[0];\r\n      const rowPerThreadB = tileInner / workgroupSize[1];\r\n      const matmulSnippet = sequentialAccessByThreads ?\r\n          `\r\n    let localRow = i32(localId.y);\r\n    let localCol = i32(localId.x);\r\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\r\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\r\n\r\n    // Loop over shared dimension.\r\n    for (var t = 0; t < numTiles; t = t + 1) {\r\n      // Load one tile of A into local memory.\r\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\r\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\r\n          ${writeDataToSubASnippet(transposeA)}\r\n        }\r\n      }\r\n      // Load one tile of B into local memory.\r\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\r\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\r\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\r\n            kStart + inputRow,\r\n            globalColStart + inputCol);\r\n        }\r\n      }\r\n      kStart = kStart + tileInner;\r\n      workgroupBarrier();\r\n\r\n      // Compute acc values for a single thread.\r\n      var BCached : array<f32, colPerThread>;\r\n      for (var k = 0; k < tileInner; k = k + 1) {\r\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\r\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\r\n        }\r\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n          let ACached = ${\r\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\r\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\r\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\r\n                ACached * BCached[innerCol];\r\n          }\r\n        }\r\n      }\r\n      workgroupBarrier();\r\n    }\r\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\r\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\r\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\r\n      }\r\n    }\r\n    ` :\r\n          `\r\nlet tileRow = i32(localId.y) * rowPerThread;\r\nlet tileCol = i32(localId.x) * colPerThread;\r\n\r\nlet globalRow = i32(globalId.y) * rowPerThread;\r\nlet globalCol = i32(globalId.x) * colPerThread;\r\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\r\n\r\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\r\nlet tileColA = i32(localId.x) * ${colPerThreadA};\r\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\r\n// Loop over shared dimension.\r\nfor (var t = 0; t < numTiles; t = t + 1) {\r\n  // Load one tile of A into local memory.\r\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\r\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\r\n      let inputRow = tileRowA + innerRow;\r\n      let inputCol = tileColA + innerCol;\r\n      ${writeDataToSubASnippet(transposeA)}\r\n    }\r\n  }\r\n\r\n  // Load one tile of B into local memory.\r\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\r\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n      let inputRow = tileRowB + innerRow;\r\n      let inputCol = tileCol + innerCol;\r\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\r\n        kStart + inputRow,\r\n        globalCol + innerCol);\r\n    }\r\n  }\r\n  kStart = kStart + tileInner;\r\n  workgroupBarrier();\r\n\r\n  // Compute acc values for a single thread.\r\n  var BCached : array<f32, colPerThread>;\r\n  for (var k = 0; k < tileInner; k = k + 1) {\r\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\r\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\r\n    }\r\n\r\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      ${readDataFromSubASnippet(transposeA)}\r\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\r\n      }\r\n    }\r\n  }\r\n\r\n  workgroupBarrier();\r\n}\r\n\r\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\r\n        acc[innerRow][innerCol]);\r\n  }\r\n}\r\n`;\r\n\r\n      return `\r\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\r\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\r\n  const rowPerThread = ${workPerThread[1]};\r\n  const colPerThread = ${workPerThread[0]};\r\n  const tileInner = ${tileInner};\r\n\r\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\r\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\r\n        @builtin(global_invocation_id) globalId : vec3<u32>,\r\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\r\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\r\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\r\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\r\n\r\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\r\n\r\n    // Without this initialization strange values show up in acc.\r\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n        acc[innerRow][innerCol] = 0.0;\r\n      }\r\n    }\r\n    ${matmulSnippet}\r\n  }\r\n`;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// TODO: this is the same naive implementation we use for reduce that has\r\n// performance limitations when the reduced axis is long. Need to add\r\n// a optimized codepath for this.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {createReduceProgramInfo, ReduceOp} from './reduce';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\r\n    throw new Error('ArgMinMaxOp op requires 1 or 2 inputs.');\r\n  }\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport interface ArgMinMaxAttributes extends AttributeWithCacheKey {\r\n  keepDims: boolean;\r\n  axis: number;\r\n  selectLastIndex: number;\r\n}\r\n\r\nconst createArgMinMaxAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: ArgMinMaxAttributes): ArgMinMaxAttributes =>\r\n        createAttributeWithCacheKey(\r\n            {axis: attributes.axis, keepDims: attributes.keepDims, selectLastIndex: attributes.selectLastIndex});\r\n\r\nconst createArgMinMaxProgramInfoLoader =\r\n    (inputs: readonly TensorView[], name: string, attributes: ArgMinMaxAttributes, reduceOp: ReduceOp):\r\n        ProgramInfoLoader => {\r\n          const updatedAttributes: ArgMinMaxAttributes =\r\n              inputs.length === 1 ? attributes : createArgMinMaxAttributesFromInputs(inputs, attributes);\r\n          const cacheHint = updatedAttributes.cacheKey + inputs.map(x => x.dims.toString()).join('_');\r\n          const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint};\r\n          return {\r\n            ...metadata,\r\n            get: () => createReduceProgramInfo(\r\n                metadata, [inputs[0]], reduceOp, [updatedAttributes.axis], DataType.int64, updatedAttributes.keepDims)\r\n          };\r\n        };\r\n\r\n\r\nexport const argMin = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n    return [\r\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\r\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '<=' : '<'} value) {\r\n         value = ${input.getByOffset('inputOffset')};\r\n         bestIndex = i32(lastIndex);\r\n       }`,\r\n      '', output.setByOffset('global_idx', 'bestIndex')\r\n    ];\r\n  };\r\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'ArgMin', attributes, argMinMaxOp), {inputs: [0]});\r\n};\r\n\r\nexport const argMax = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n    return [\r\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\r\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '>=' : '>'} value) {\r\n         value = ${input.getByOffset('inputOffset')};\r\n         bestIndex = i32(lastIndex);\r\n       }`,\r\n      '', output.setByOffset('global_idx', 'bestIndex')\r\n    ];\r\n  };\r\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'argMax', attributes, argMinMaxOp), {inputs: [0]});\r\n};\r\n\r\nexport const parseArgMinMaxAttributes = (attributes: Record<string, unknown>): ArgMinMaxAttributes =>\r\n    createAttributeWithCacheKey(attributes as Omit<ArgMinMaxAttributes, keyof AttributeWithCacheKey>);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\ntype BuiltinFunctionName = string;\r\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\r\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\r\n  scalar: BinaryCustomExpression;\r\n  vector: BinaryCustomExpression;\r\n};\r\n\r\nconst createBinaryOpProgramShader =\r\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\r\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, typeA: number, typeB: number,\r\n     typeOutput: number, additionalImplementation?: string) => {\r\n      const outputSize = ShapeUtil.size(dimsOutput);\r\n      const vecSize = Math.ceil(outputSize / 4);\r\n\r\n      let expressionScalar: BinaryCustomExpression;\r\n      let expressionVector: BinaryCustomExpression;\r\n      if (typeof funcCall === 'string') {\r\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\r\n      } else if (typeof funcCall === 'function') {\r\n        expressionScalar = expressionVector = funcCall;\r\n      } else {\r\n        expressionScalar = funcCall.scalar;\r\n        expressionVector = funcCall.vector;\r\n      }\r\n\r\n      let broadcastImpl = '';\r\n      const output = outputVariable('outputData', typeOutput, dimsOutput, 4);\r\n      const a = inputVariable('aData', typeA, dimsA, 4);\r\n      const b = inputVariable('bData', typeB, dimsB, 4);\r\n      if (doBroadcast) {\r\n        const calcOffsetImpl = (dims: readonly number[]) => {\r\n          const strides = ShapeUtil.computeStrides(dims);\r\n          const offsets: string[] = [];\r\n          for (let i = dims.length - 1; i >= 0; i--) {\r\n            const idx = dimsOutput.length === 0 ? '0u' :\r\n                (dimsOutput.length === 1)       ? 'outputIndices' :\r\n                                                  `outputIndices[${i + dimsOutput.length - dims.length}]`;\r\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\r\n          }\r\n          return offsets.length > 0 ? offsets.join('+') : '0u';\r\n        };\r\n\r\n        broadcastImpl = `\r\n  fn calcOffsetA(outputIndices: ${output.type.indices}) -> u32 {\r\n    return ${calcOffsetImpl(dimsA)};\r\n  }\r\n\r\n  fn calcOffsetB(outputIndices: ${output.type.indices}) -> u32 {\r\n    return ${calcOffsetImpl(dimsB)};\r\n  }\r\n  `;\r\n      }\r\n\r\n      let assignment: string;\r\n      if (vectorize) {\r\n        if (doBroadcast) {\r\n          assignment = `\r\n      let outputIndices = ${output.offsetToIndices('global_idx * 4u')};\r\n      let offsetA = calcOffsetA(outputIndices);\r\n      let offsetB = calcOffsetB(outputIndices);\r\n      ${\r\n              output.setByOffset(\r\n                  'global_idx', expressionVector(a.getByOffset('offsetA / 4u'), b.getByOffset('offsetB / 4u')))}`;\r\n        } else {\r\n          assignment = output.setByOffset(\r\n              'global_idx', expressionVector(a.getByOffset('global_idx'), b.getByOffset('global_idx')));\r\n        }\r\n      } else {\r\n        if (!doBroadcast) {\r\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\r\n        }\r\n        const singleAssignment = (x: number) => {\r\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\r\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\r\n          return `\r\n      let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\r\n      let offsetA${x} = calcOffsetA(outputIndices${x});\r\n      let offsetB${x} = calcOffsetB(outputIndices${x});\r\n      let indexA${x} = offsetA${x} / 4u;\r\n      let indexB${x} = offsetB${x} / 4u;\r\n      let componentA${x} = offsetA${x} % 4u;\r\n      let componentB${x} = offsetB${x} % 4u;\r\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\r\n        };\r\n\r\n        assignment = `\r\n      ${singleAssignment(0)}\r\n      ${singleAssignment(1)}\r\n      ${singleAssignment(2)}\r\n      ${singleAssignment(3)}`;\r\n      }\r\n\r\n      return `\r\n  ${shaderHelper.declareVariables(a, b, output)}\r\n\r\n  ${additionalImplementation ?? ''}\r\n  ${broadcastImpl}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\r\n    ${assignment}\r\n  }`;\r\n    };\r\n\r\nconst createBinaryOpProgramInfo =\r\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\r\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\r\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\r\n      let outputShape = a.dims;\r\n      let outputSize = ShapeUtil.size(a.dims);\r\n\r\n      let vectorize = false;\r\n\r\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        outputSize = ShapeUtil.size(outputShape);\r\n\r\n        // check whether vectorize can be enabled\r\n        let sharedDimension = 1;\r\n        for (let i = 0; i < outputShape.length; i++) {\r\n          const dimA = a.dims[a.dims.length - i] ?? 1;\r\n          const dimB = b.dims[b.dims.length - i] ?? 1;\r\n          if (dimA === dimB) {\r\n            sharedDimension *= dimA;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        if (sharedDimension % 4 === 0) {\r\n          vectorize = true;\r\n        }\r\n      } else {\r\n        // element-wise\r\n        vectorize = true;\r\n      }\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\r\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, a.dataType, b.dataType,\r\n            outputDataType, additionalImplementation),\r\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () =>\r\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\r\n      };\r\n    };\r\n\r\nconst createBinaryOpProgramInfoLoader =\r\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\r\n     cacheKey?: string): ProgramInfoLoader => {\r\n      const metadata:\r\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\r\n      return {\r\n        ...metadata,\r\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\r\n      };\r\n    };\r\n\r\nexport const add = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\r\n};\r\n\r\nexport const div = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\r\n};\r\n\r\nexport const mul = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\r\n};\r\n\r\nexport const pow = (context: ComputeContext): void => {\r\n  const type = inputVariable('input', context.inputs[0].dataType, context.inputs[0].dims).type.value;\r\n  const roundStr = type === 'i32' ? 'round' : '';\r\n  context.compute(createBinaryOpProgramInfoLoader(\r\n      context.inputs, 'Pow',\r\n      ({scalar: (a, b) => `pow_custom(${a},${b})`, vector: (a, b) => `pow_vector_custom(${a},${b})`}),\r\n      `\r\n    fn pow_custom(a : ${type}, b : ${type}) -> ${type} {\r\n      if (b == ${type}(0.0)) {\r\n        return ${type}(1.0);\r\n      } else if (a < ${type}(0.0) && f32(b) != floor(f32(b))) {\r\n        return ${type}(pow(f32(a), f32(b))); // NaN\r\n      }\r\n      return select(sign(a), ${type}(1.0), round(f32(abs(b) % ${type}(2.0))) != 1.0) * ${type}(${\r\n          roundStr}(pow(f32(abs(a)), f32(b))));\r\n    }\r\n    fn pow_vector_custom(a : vec4<${type}>, b : vec4<${type}>) -> vec4<${type}> {\r\n      // TODO: implement vectorized pow\r\n      return vec4<${type}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\r\n    }\r\n      `));\r\n};\r\n\r\nexport const sub = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {ShapeUtil} from '../../util';\r\n\r\n/**\r\n * constant value for a workgroup size.\r\n *\r\n * We definitely can do further optimization in future, but for now we use 64.\r\n *\r\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\r\n *                needs something different.\r\n *\r\n * from: https://surma.dev/things/webgpu/\r\n **/\r\nexport const WORKGROUP_SIZE = 64;\r\n\r\ninterface IndicesHelperTypes {\r\n  /**\r\n   * WGSL type of indices expression\r\n   */\r\n  readonly indices: string;\r\n\r\n  /**\r\n   * WGSL type of a value\r\n   */\r\n  readonly value: string;\r\n\r\n  /**\r\n   * WGSL type of storage type representing a value\r\n   *\r\n   * This is usually the same to `value`, but for some type (eg. bool), we need to use `u32` as storage type for\r\n   * value type `vec4<bool>`\r\n   */\r\n  readonly storage: string;\r\n\r\n  /**\r\n   * tensor type as represented in TensorView\r\n   */\r\n  readonly tensor: number;\r\n}\r\n\r\n/**\r\n * A helper class for generating WGSL code for manipulating indices and data for a shader's input or output.\r\n *\r\n * This class is designed to offer a unified way to generate WGSL code for manipulating indices and data for a shader's\r\n * input or output.\r\n *\r\n * The following is a list of terminologies used in this class:\r\n * - `offset`: a uint32 value representing the offset of an element in the data buffer.\r\n * - `indices`: an abstraction of a multi-dimensional array's indices representing the data's index on each dimension.\r\n * - `value`: a value of a data element.\r\n *\r\n * Users are expected to create an instance of this class for each shader's input or output, and use the instance to\r\n * generate WGSL code for manipulating indices and data. The following 2 exported functions are for users to call to\r\n * create an instance of an indices helper:\r\n * - `inputVariable()`: create an indices helper instance for an input.\r\n * - `outputVariable()`: create an indices helper instance for an output.\r\n *\r\n * An indices helper instance contains helper functions for the following operations:\r\n * - access readonly basic information, including: `name`(the name of the input or output), `usage`(whether it's an\r\n * input or an output) and `shape`(the passed in shape).\r\n * - `type`: access readonly type information, including: `indices`(the type of indices), `value`(the type of value at\r\n * runtime), `storage`(the type of value at storage) and `tensor`(the tensor type as represented in TensorView).\r\n * - generate WGSL code for getting indices from offset. Use `offsetToIndices()` for WGSL code snippet to calculate\r\n * indices from offset, and use `indicesToOffset()` for WGSL code snippet to calculate offset from indices.\r\n * - to manipulate an instance of indices, use `setIndices()` and `getIndices()` to set and get the indices on an\r\n * indices variable.\r\n * - to manipulate data, use `set()`/`get()` to access data at the given indices from parameter list, use\r\n * `setByIndices()`/`getByIndices()` to access data at the given indices from an indices variable, and use\r\n * `setByOffset()`/`getByOffset()` to access data at the given offset.\r\n * - `impl`: get WGSL code of function implementation for the util functions mentioned above.\r\n */\r\nexport interface IndicesHelper {\r\n  /**\r\n   * get WGSL code of function implementation for the util functions.\r\n   *\r\n   */\r\n  readonly impl: () => string;\r\n\r\n  /**\r\n   * get type info\r\n   */\r\n  readonly type: IndicesHelperTypes;\r\n\r\n  /**\r\n   * WGSL code of a expression for getting indices from offset.\r\n   *\r\n   * @param varOffset - a u32 expression representing the offset.\r\n   *\r\n   * @returns an `type.indices` expression\r\n   */\r\n  readonly offsetToIndices: (varOffset: string) => string;\r\n\r\n  /**\r\n   * WGSL code of an `u32` expression for getting offset from indices.\r\n   *\r\n   * @param varIndices - a `type.indices` expression representing the indices.\r\n   *\r\n   * @returns an `u32` expression\r\n   */\r\n  readonly indicesToOffset: (varIndices: string) => string;\r\n\r\n  /**\r\n   * WGSL code of generating an indices literal\r\n   *\r\n   * @param init - initial value.\r\n   */\r\n  readonly indices: (...init: ReadonlyArray<number|string>) => string;\r\n\r\n  /**\r\n   * WGSL code of a statement for setting indices.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   * @param idx - the index of the indices to set. can be a number or a string (WGSL `u32` expression).\r\n   * @param value - the value to set. can be a number or a string (WGSL `u32` expression).\r\n   *\r\n   * @returns a WGSL statement\r\n   */\r\n  readonly indicesSet: (varIndices: string, idx: number|string, value: number|string) => void;\r\n\r\n  /**\r\n   * WGSL code of an `u32` expression for getting indices.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   * @param idx - the index of the indices to get. can be a number or a string (WGSL `u32` expression).\r\n   *\r\n   * @returns an `u32` expression\r\n   */\r\n  readonly indicesGet: (varIndices: string, idx: number|string) => string;\r\n\r\n  /**\r\n   * WGSL code for a statement for setting data at the given indices.\r\n   *\r\n   * @param indicesAndValue - an array of numbers or strings (WGSL `u32` expression) representing the indices, followed\r\n   *     by the value to set. This array should have exactly `shape.length + 1` elements.\r\n   */\r\n  readonly set: (...indicesAndValue: ReadonlyArray<number|string>) => string;\r\n\r\n  /**\r\n   * WGSL code for a statement for setting data at the given indices variable.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   * @param value - the value to set. should be a WGSL expression.\r\n   */\r\n  readonly setByIndices: (varIndices: string, value: string) => string;\r\n\r\n  /**\r\n   * WGSL code for a statement for setting data at the given offset.\r\n   *\r\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\r\n   * @param value - the value to set. should be a WGSL expression.\r\n   */\r\n  readonly setByOffset: (offset: number|string, value: string) => string;\r\n\r\n  /**\r\n   * WGSL code for an expression for getting data at the given indices.\r\n   *\r\n   * @param indices - an array of numbers or strings (WGSL `u32` expression) representing the indices.\r\n   */\r\n  readonly get: (...indices: ReadonlyArray<number|string>) => string;\r\n\r\n  /**\r\n   * WGSL code for an expression for getting data at the given indices variable.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   */\r\n  readonly getByIndices: (varIndices: string) => string;\r\n\r\n  /**\r\n   * WGSL code for an expression for getting data at the given offset.\r\n   *\r\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\r\n   */\r\n  readonly getByOffset: (offset: number|string) => string;\r\n\r\n  /**\r\n   * name of the data variable\r\n   */\r\n  readonly name: string;\r\n\r\n  /**\r\n   * whether the helper is for an input or an output.\r\n   */\r\n  readonly usage: 'input'|'output';\r\n\r\n  /**\r\n   * the shape of the input or output.\r\n   */\r\n  readonly shape: readonly number[];\r\n}\r\n\r\nconst getWgslMappedType = (type: number, components: 1|2|3|4): string|[string, string] => {\r\n  // return type is [ storage type, runtime type ] or a single string for both\r\n  switch (type) {\r\n    // TODO: enable after \"shader-f16\" WSGL extension release\r\n    // case DataType.float16:\r\n    //   return components > 1 ? `vec${components}<f16>` : 'f16';\r\n    case DataType.float:\r\n      return components > 1 ? `vec${components}<f32>` : 'f32';\r\n    case DataType.int32:\r\n      return components > 1 ? `vec${components}<i32>` : 'i32';\r\n    case DataType.uint32:\r\n      return components > 1 ? `vec${components}<u32>` : 'u32';\r\n    case DataType.int64:\r\n      if (components > 1) {\r\n        throw new Error('currently not supported vecX of uint64 yet');\r\n      }\r\n      return ['vec2<u32>', 'i32'];\r\n    case DataType.uint64:\r\n      if (components > 1) {\r\n        throw new Error('currently not supported vecX of uint64 yet');\r\n      }\r\n      return ['vec2<u32>', 'u32'];\r\n    case DataType.bool:\r\n      if (components !== 4) {\r\n        throw new Error('bool must be vec4');\r\n      }\r\n      return ['u32', 'vec4<bool>'];\r\n\r\n    default:\r\n      throw new Error(`Unknown data type: ${type}`);\r\n  }\r\n};\r\n\r\nexport const tensorTypeToWsglStorageType = (type: DataType, components: 1|2|3|4 = 1) => {\r\n  const mappedType = getWgslMappedType(type, components);\r\n  return typeof mappedType === 'string' ? mappedType : mappedType[0];\r\n};\r\n\r\n/**\r\n * A helper function to get a IndicesHelper for a given input or output.\r\n *\r\n * @param name - the name of the input or output.\r\n * @param tensorType - the tensor type of the input or output.\r\n * @param shape - the tensor shape of the input or output.\r\n * @param isInput - whether the helper is for an input or an output.\r\n * @param components - indicates the number of components of each element. 1 for scalar, 2 for vec2, 3 for vec3, 4 for\r\n *    vec4.\r\n */\r\nconst createIndicesHelper =\r\n    (name: string, tensorType: number, shape: readonly number[], isInput: boolean,\r\n     components: 1|2|3|4): IndicesHelper => {\r\n      const rank = shape.length;\r\n      const indicesType = rank < 2 ? 'u32' : rank <= 4 ? `vec${rank}<u32>` : `array<u32, ${rank}>`;\r\n      const mappedType = getWgslMappedType(tensorType, components);\r\n      const valueType = typeof mappedType === 'string' ? mappedType : mappedType[1];\r\n      const storageType = typeof mappedType === 'string' ? mappedType : mappedType[0];\r\n      const type = {indices: indicesType, value: valueType, storage: storageType, tensor: tensorType};\r\n\r\n      const normalizeDim = (dim: number|string): string => typeof dim === 'string' ? dim : `${dim}u`;\r\n\r\n      const implementationUsed = {\r\n        offsetToIndices: false,\r\n        indicesToOffset: false,\r\n        set: false,\r\n        setByIndices: false,\r\n        get: false,\r\n        getByIndices: false,\r\n      };\r\n\r\n      const strides = ShapeUtil.computeStrides(shape);\r\n      let o2iSnippet = '';\r\n      for (let i = 0; i < rank - 1; i++) {\r\n        o2iSnippet += `\r\n    let dim${i} = current / ${strides[i]}u;\r\n    let rest${i} = current % ${strides[i]}u;\r\n    indices[${i}] = dim${i};\r\n    current = rest${i};\r\n    `;\r\n      }\r\n      o2iSnippet += `indices[${rank - 1}] = current;`;\r\n\r\n      const offsetToIndicesImplementation = rank < 2 ? '' : `\r\n  fn o2i_${name}(offset: u32) -> ${type.indices} {\r\n    var indices: ${type.indices};\r\n    var current = offset;\r\n    ${o2iSnippet}\r\n    return indices;\r\n  }`;\r\n\r\n      const offsetToIndices = (varOffset: string) => {\r\n        implementationUsed.offsetToIndices = true;\r\n        return rank < 2 ? varOffset : `o2i_${name}(${varOffset})`;\r\n      };\r\n\r\n      const offsets: string[] = [];\r\n      if (rank >= 2) {\r\n        for (let i = rank - 1; i >= 0; i--) {\r\n          offsets.push(`${strides[i]}u * (indices[${i}])`);\r\n        }\r\n      }\r\n\r\n      const indicesToOffsetImplementation = rank < 2 ? '' : `\r\n  fn i2o_${name}(indices: ${type.indices}) -> u32 {\r\n    return ${offsets.join('+')};\r\n  }`;\r\n\r\n      const indicesToOffset = (varIndices: string) => {\r\n        implementationUsed.indicesToOffset = true;\r\n        return rank < 2 ? varIndices : `i2o_${name}(${varIndices})`;\r\n      };\r\n\r\n      const indices = (...init: ReadonlyArray<number|string>) =>\r\n          rank === 0 ? '0u' : `${type.indices}(${init.map(normalizeDim).join(',')})`;\r\n\r\n      const indicesGet = (varIndices: string, idx: number|string) => {\r\n        if (rank < 2) {\r\n          return `${varIndices}`;\r\n        } else {\r\n          return `${varIndices}[${idx}]`;\r\n        }\r\n      };\r\n\r\n      const indicesSet = (varIndices: string, idx: number|string, value: string) => {\r\n        if (rank < 2) {\r\n          return `${varIndices}=${value};`;\r\n        } else {\r\n          return `${varIndices}[${idx}]=${value};`;\r\n        }\r\n      };\r\n\r\n      const setByOffset = (offset: number|string, value: string) => (() => {\r\n        if (type.storage === type.value) {\r\n          return `${name}[${offset}]=${value};`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\r\n          // int64, components === 1\r\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), select(0u, 0xFFFFFFFFu, ${value} < 0));`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\r\n          // uint64, components === 1\r\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), 0u);`;\r\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\r\n          // bool, components === 4\r\n          return `${name}[${offset}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${value}));`;\r\n        } else {\r\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\r\n        }\r\n      })();\r\n\r\n      const getByOffset = (offset: number|string) => (() => {\r\n        if (type.storage === type.value) {\r\n          return `${name}[${offset}]`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\r\n          // int64, components === 1\r\n          return `i32(${name}[${offset}].x)`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\r\n          // uint64, components === 1\r\n          return `u32(${name}[${offset}].x)`;\r\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\r\n          // bool, components === 4\r\n          return `vec4<bool>(bool(${name}[${offset}] & 0xFFu), bool(${name}[${offset}] & 0xFF00u), bool(${name}[${\r\n              offset}] & 0xFF0000u), bool(${name}[${offset}] & 0xFF000000u))`;\r\n        } else {\r\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\r\n        }\r\n      })();\r\n\r\n      const getByIndicesImplementation = rank < 2 ? '' : `\r\n  fn get_${name}ByIndices(indices: ${type.indices}) -> ${valueType} {\r\n    return ${name}[i2o_${name}(indices)];\r\n  }`;\r\n\r\n      const getImplementation = rank < 2 ? '' : (() => {\r\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\r\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\r\n        return `\r\n  fn get_${name}(${params}) -> ${valueType} {\r\n    return get_${name}ByIndices(${indices(dims)});\r\n  }`;\r\n      })();\r\n\r\n      const get = (...indices: ReadonlyArray<number|string>) => {\r\n        if (indices.length !== rank) {\r\n          throw new Error(`indices length must be ${rank}`);\r\n        }\r\n\r\n        const normalizedIndices = indices.map(normalizeDim).join(',');\r\n\r\n        if (rank === 0) {\r\n          return getByOffset('0u');\r\n        } else if (rank === 1) {\r\n          return getByOffset(normalizedIndices[0]);\r\n        } else {\r\n          implementationUsed.get = true;\r\n          implementationUsed.getByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `get_${name}(${normalizedIndices})`;\r\n        }\r\n      };\r\n\r\n      const getByIndices = (varIndices: string) => {\r\n        if (rank < 2) {\r\n          return getByOffset(varIndices);\r\n        } else {\r\n          implementationUsed.getByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `get_${name}ByIndices(${varIndices})`;\r\n        }\r\n      };\r\n\r\n      const setByIndicesImplementation = rank < 2 ? '' : `\r\n  fn set_${name}ByIndices(indices: ${type.indices}, value: ${valueType}) {\r\n    ${setByOffset(`i2o_${name}(indices)`, 'value')}\r\n  }`;\r\n\r\n      const setImplementation = rank < 2 ? '' : (() => {\r\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\r\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\r\n        return `\r\n  fn set_${name}(${params}, value: ${valueType}) {\r\n    set_${name}ByIndices(${indices(dims)}, value);\r\n  }`;\r\n      })();\r\n\r\n      const set = (...indicesAndValue: ReadonlyArray<number|string>) => {\r\n        if (indicesAndValue.length !== rank + 1) {\r\n          throw new Error(`indices length must be ${rank}`);\r\n        }\r\n        const value = indicesAndValue[rank];\r\n        if (typeof value !== 'string') {\r\n          throw new Error('value must be string');\r\n        }\r\n\r\n        const normalizedIndices = indicesAndValue.slice(0, rank).map(normalizeDim).join(',');\r\n\r\n        if (rank === 0) {\r\n          return setByOffset('0u', value);\r\n        } else if (rank === 1) {\r\n          return setByOffset(normalizedIndices[0], value);\r\n        } else {\r\n          implementationUsed.set = true;\r\n          implementationUsed.setByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `set_${name}(${normalizedIndices}, ${value})`;\r\n        }\r\n      };\r\n\r\n      const setByIndices = (varIndices: string, value: string) => {\r\n        if (rank < 2) {\r\n          return setByOffset(varIndices, value);\r\n        } else {\r\n          implementationUsed.setByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `set_${name}ByIndices(${varIndices}, ${value});`;\r\n        }\r\n      };\r\n\r\n      const impl = () => {\r\n        const impls = [];\r\n        if (implementationUsed.offsetToIndices) {\r\n          impls.push(offsetToIndicesImplementation);\r\n        }\r\n        if (implementationUsed.indicesToOffset) {\r\n          impls.push(indicesToOffsetImplementation);\r\n        }\r\n        if (implementationUsed.set) {\r\n          impls.push(setImplementation);\r\n        }\r\n        if (implementationUsed.setByIndices) {\r\n          impls.push(setByIndicesImplementation);\r\n        }\r\n        if (implementationUsed.get) {\r\n          impls.push(getImplementation);\r\n        }\r\n        if (implementationUsed.getByIndices) {\r\n          impls.push(getByIndicesImplementation);\r\n        }\r\n        return impls.join('\\n');\r\n      };\r\n\r\n      return {\r\n        impl,\r\n        type,\r\n        offsetToIndices,\r\n        indicesToOffset,\r\n        indices,\r\n        indicesGet,\r\n        indicesSet,\r\n        set,\r\n        setByOffset,\r\n        setByIndices,\r\n        get,\r\n        getByOffset,\r\n        getByIndices,\r\n        // isVec4,\r\n        usage: isInput ? 'input' : 'output',\r\n        name,\r\n        shape\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a IndicesHelper for an input.\r\n *\r\n * @param name - the name of the input.\r\n * @param type - the tensor type of the input.\r\n * @param shape - the tensor shape of the input.\r\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\r\n * @returns an IndicesHelper for the input.\r\n */\r\nexport const inputVariable =\r\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\r\n        createIndicesHelper(name, type, shape, true, components);\r\n\r\n/**\r\n * Create a IndicesHelper for an output.\r\n *\r\n * @param name - the name of the output.\r\n * @param type - the tensor type of the output.\r\n * @param shape - the tensor shape of the output.\r\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\r\n * @returns an IndicesHelper for the output.\r\n */\r\nexport const outputVariable =\r\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\r\n        createIndicesHelper(name, type, shape, false, components);\r\n\r\n/**\r\n * A ShaderHelper is a helper class for generating WGSL code.\r\n */\r\nexport interface ShaderHelper {\r\n  /**\r\n   * A helper function to generate the start of main function in WGSL source code.\r\n   *\r\n   * @example\r\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n   *  ...\r\n   *\r\n   *  ${shaderHelper.mainStart()}\r\n   *    // your code here inside main() function\r\n   *    ...\r\n   *  }\r\n   * `;\r\n   *\r\n   * @param workgroupSize - an optional workgroup size. default is WORKGROUP_SIZE.\r\n   */\r\n  mainStart(workgroupSize?: number|[number, number, number]): string;\r\n\r\n  /**\r\n   * A helper function to generate the code snippet for guarding against out-of-bounds size.\r\n   *\r\n   * @example\r\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n   *  ...\r\n   *\r\n   *  ${shaderHelper.mainStart()}\r\n   *    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n   *\r\n   *    // your code here inside main() function\r\n   *    ...\r\n   *  }\r\n   * `;\r\n   *\r\n   * @param size - the size of the data to guard against. can be a number or a string (WGSL `u32` expression).\r\n   */\r\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\r\n\r\n  /**\r\n   * A helper function to generate the code snippet for declaring multiple inputs or outputs.\r\n   *\r\n   * @param variables - an array of IndicesHelper for the variables.\r\n   */\r\n  declareVariables(...variables: IndicesHelper[]): string;\r\n\r\n  /**\r\n   * Get additional implementation that needs to be added to the shader source.\r\n   */\r\n  readonly additionalImplementations: string;\r\n}\r\n\r\nclass ShaderHelperImpl implements ShaderHelper {\r\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\r\n\r\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\r\n    // Guard against out-of-bounds work group sizes\r\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\r\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\r\n  }\r\n\r\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\r\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\r\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\r\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\r\n\r\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\r\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\r\n                                             `@builtin(local_invocation_index) local_index : u32,\r\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\r\n    const globalIdxDefinition = is1DimensionDispatch ?\r\n        'let global_idx = global_id.x;' :\r\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\r\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\r\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\r\n\r\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\r\n  fn main(${paramList}) {\r\n    ${globalIdxDefinition}\r\n  `;\r\n  }\r\n\r\n  declareVariable(variable: IndicesHelper, bindingIndex: number): string {\r\n    this.indicesHelpers.push(variable);\r\n    const access = variable.usage === 'input' ? 'read' : 'read_write';\r\n    const storageType = variable.type.storage;\r\n    return `@group(0) @binding(${bindingIndex}) var<storage, ${access}> ${variable.name}: array<${storageType}>;`;\r\n  }\r\n\r\n  declareVariables(...variables: IndicesHelper[]): string {\r\n    let i = 0;\r\n    return variables.filter(v => ShapeUtil.size(v.shape) > 0).map(v => this.declareVariable(v, i++)).join('\\n');\r\n  }\r\n\r\n  private indicesHelpers: IndicesHelper[] = [];\r\n\r\n  get additionalImplementations(): string {\r\n    return this.indicesHelpers.map(i => i.impl()).join('\\n');\r\n  }\r\n}\r\n\r\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\r\n    new ShaderHelperImpl(dispatchGroup);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].dataType;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.dataType !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n\r\nconst createConcatProgramMetadata = (inputCount: number, cacheHint: string) =>\r\n    ({name: 'Concat', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\r\n\r\nconst calculateInputIndexImpl = (numberOfTensors: number): string => `\r\n  fn calculateInputIndex(index: u32) -> u32 {\r\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\r\n      if (index < sizeInConcatAxis[i]) {\r\n        return i;\r\n      }\r\n    }\r\n    return ${numberOfTensors}u;\r\n  }`;\r\n\r\nconst assignOutputData = (inputs: readonly IndicesHelper[], output: IndicesHelper) => {\r\n  const numberOfTensors = inputs.length;\r\n\r\n  const codeLines: string[] = [];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    const returnSnippet = output.setByOffset('global_idx', inputs[i].getByIndices('indices'));\r\n    if (numberOfTensors === 1) {\r\n      codeLines.push(returnSnippet);\r\n    } else if (i === 0) {\r\n      codeLines.push(`if (inputIndex == ${i}u) { ${returnSnippet} }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(`else { ${returnSnippet} }`);\r\n    } else {\r\n      codeLines.push(`else if (inputIndex == ${i}) { ${returnSnippet} }`);\r\n    }\r\n  }\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst createConcatProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === adjustedAxis) {\r\n            outputShape[adjustedAxis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      const inputVars = new Array<IndicesHelper>(inputs.length);\r\n      const dataType = inputs[0].dataType;\r\n\r\n      let previousSum = 0;\r\n      for (let i = 0; i < inputs.length; ++i) {\r\n        previousSum += inputs[i].dims[adjustedAxis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n\r\n        inputVars[i] = inputVariable(`input${i}`, dataType, inputs[i].dims);\r\n      }\r\n\r\n      const output = outputVariable('output', dataType, outputShape);\r\n\r\n      const indicesAxis = output.indicesGet('indices', adjustedAxis);\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  ${shaderHelper.declareVariables(...inputVars, output)}\r\n\r\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\r\n  ${calculateInputIndexImpl(sizeInConcatAxis.length)}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    var indices = ${output.offsetToIndices('global_idx')};\r\n\r\n    let inputIndex = calculateInputIndex(${indicesAxis});\r\n    if (inputIndex != 0u) {\r\n      ${indicesAxis} -= sizeInConcatAxis[inputIndex - 1u];\r\n    }\r\n\r\n    ${assignOutputData(inputVars, output)}\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createConcatProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createConcatProgramInfo(metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute(createConcatProgramInfoLoader(context.inputs, attributes));\r\n};\r\n\r\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis as number});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nconst createGroupedConvProgramInfo =\r\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\r\n      const xShape = inputs[0].dims;\r\n      const wShape = inputs[1].dims;\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n\r\n      const isChannelLast = attributes.format === 'NHWC';\r\n      const outputShape = calculateOutputShape(\r\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\r\n      const x = inputVariable('x', inputs[0].dataType, xShape);\r\n      const w = inputVariable('w', inputs[1].dataType, wShape);\r\n      const inputVars = [x, w];\r\n      if (hasBias) {\r\n        inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims));\r\n      }\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\r\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\r\n\r\n  ${shaderHelper.declareVariables(...inputVars, output)}\r\n\r\n  ${activationFunction}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let outputIndices = ${output.offsetToIndices('global_idx')};\r\n    let batch: u32 = outputIndices[0];\r\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\r\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\r\n          isChannelLast ? 2 : 3}]) * strides - pads;\r\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\r\n\r\n    var value: ${output.type.value} = ${output.type.value}(0);\r\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\r\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\r\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\r\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\r\n\r\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\r\n          continue;\r\n        }\r\n\r\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\r\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\r\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\r\n            continue;\r\n          }\r\n\r\n          let xVal = ${\r\n          isChannelLast ? x.get('batch', 'xHeight', 'xWidth', 'input_channel') :\r\n                          x.get('batch', 'input_channel', 'xHeight', 'xWidth')};\r\n          let wVal = ${w.get('output_channel', 'wInChannel', 'wHeight', 'wWidth')};\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${output.setByOffset('global_idx', 'value')}\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [{\r\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\r\n          dataType: inputs[0].dataType,\r\n          gpuDataType: GpuDataType.default\r\n        }],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\n/**\r\n * naive grouped conv implementation, supports 1d/2d conv\r\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\r\n */\r\nexport const createGroupedConvProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\r\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {createConvTranspose2DProgramInfo} from './3rd-party/conv_backprop_webgpu';\r\nimport {ConvAttributes} from './conv';\r\nimport {parseInternalActivationAttributes} from './fuse-utils';\r\n\r\nconst computeTotalPad =\r\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\r\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\r\n\r\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\r\n  const smallPad = Math.floor(totalPad / 2);\r\n  if (autoPad === 'SAME_UPPER') {\r\n    pads[head] = smallPad;\r\n    pads[tail] = totalPad - smallPad;\r\n  } else if (autoPad === 'SAME_LOWER') {\r\n    pads[head] = totalPad - smallPad;\r\n    pads[tail] = smallPad;\r\n  }\r\n};\r\n\r\nconst calculateOutputShapeAndPads =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\r\n     group: number, pads: number[], strides: readonly number[], isChannelLast: boolean, outputPadding: number[],\r\n     outputShape: number[]) => {\r\n      const spatialRank = inputShape.length - 2;\r\n      const updateOutputShape = outputShape.length === 0;\r\n      if (outputPadding.length === 0) {\r\n        for (let i = 0; i < spatialRank; ++i) {\r\n          outputPadding.push(0);\r\n        }\r\n      }\r\n      const batchSize = inputShape[0];\r\n      const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\r\n      for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\r\n        const inSize = inputShape[j];\r\n        const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\r\n        const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\r\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\r\n        if (updateOutputShape) {\r\n          outputShape.push(\r\n              strides[i] * (inSize - 1) + outputPadding[i] + (kernelShape[j] - 1) * dilations[i] + 1 - pads[i] -\r\n              pads[i + spatialRank]);\r\n        }\r\n      }\r\n      outputShape.splice(0, 0, batchSize);\r\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\r\n    };\r\n\r\nexport interface ConvTransposeAttributes extends ConvAttributes {\r\n  readonly outputPadding: readonly number[];\r\n  readonly outputShape: readonly number[];\r\n}\r\n\r\n\r\nconst getAdjustedConvTransposeAttributes =\r\n    <T extends ConvTransposeAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\r\n      const kernelShape = attributes.kernelShape.slice();\r\n      // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n      if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 0) === 0) {\r\n        kernelShape.length = 0;\r\n        for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n          kernelShape.push(inputs[1].dims[i]);\r\n        }\r\n      }\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      kernelShape.splice(0, 0, inputs[1].dims[0]);\r\n      kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\r\n\r\n      const pads = attributes.pads.slice();\r\n      const outputShape = attributes.outputShape.slice();\r\n      const outputPadding = attributes.outputPadding.slice();\r\n      const inputShape = inputs[0].dims;\r\n      let dilations = attributes.dilations.slice();\r\n      if (dilations.reduce((a, b) => a + b, 0) === 0) {\r\n        const spatialRank = inputs[0].dims.length - 2;\r\n        dilations = new Array(spatialRank).fill(1);\r\n      }\r\n      let strides = attributes.strides.slice();\r\n      if (strides.reduce((a, b) => a + b, 0) === 0) {\r\n        const spatialRank = inputs[0].dims.length - 2;\r\n        strides = new Array(spatialRank).fill(1);\r\n      }\r\n      // If outputShape is not specified in the attributes of this op, infer it from the parameters\r\n      // Similarly, automatically infer pads if not specified\r\n      calculateOutputShapeAndPads(\r\n          inputShape, kernelShape, dilations, attributes.autoPad, attributes.group, pads, strides, isChannelsLast,\r\n          outputPadding, outputShape);\r\n\r\n      // always return a new object so does not modify the original attributes\r\n      const newAttributes: T = Object.assign({}, attributes);\r\n      Object.assign(\r\n          newAttributes,\r\n          {kernelShape, pads, outputPadding, outputShape, dilations, strides, cacheKey: attributes.cacheKey});\r\n      return newAttributes;\r\n    };\r\n\r\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const format = attributes.format as 'NHWC' | 'NCHW';\r\n  const autoPad =\r\n      ['NOTSET', 'VALID', 'SAME_UPPER',\r\n       'SAME_LOWER'][typeof attributes.autoPad == 'undefined' ? 0 : attributes.autoPad as number];\r\n  const dilations = attributes.dilations as [number, number];\r\n  const group = attributes.group as number;\r\n  const kernelShape = attributes.kernelShape as [number, number];\r\n  const pads = attributes.pads as [number, number, number, number];\r\n  const strides = attributes.strides as [number, number];\r\n  const wIsConst = (attributes.wIsConst as () => boolean)();\r\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\r\n  const outputShape = attributes.outputShape as [number, number];\r\n  return createAttributeWithCacheKey({\r\n    autoPad,\r\n    format,\r\n    dilations,\r\n    group,\r\n    kernelShape,\r\n    outputPadding,\r\n    outputShape,\r\n    pads,\r\n    strides,\r\n    wIsConst,\r\n    ...activationAttributes\r\n  });\r\n};\r\n\r\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\r\n    throw new Error('filter does not have same dimension as input');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\r\n  const filterInChannel = inputs[1].dims[0];\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  const featureMaps = inputs[1].dims[1] * attributes.group;\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\r\n  // wrong dilations dimension\r\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\r\n  // Wrong strides dimension\r\n  if (stridesSet && attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\r\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // Wrong output padding dimension\r\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\r\n    throw new Error(`output_padding should be ${spatialRank}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\r\n  if (kernelShapeSet && attributes.kernelShape.length !== 0 &&\r\n      attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // as with kernelShape, must have same number of spatial dims as input\r\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\r\n    throw new Error('invalid output shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\r\n    throw new Error('ConvTranspose input(bias) should be float tensor');\r\n  }\r\n};\r\n\r\nconst createConvTranspose2DProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'ConvTranspose2D',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nconst createConvTranspose2DProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\r\n      const hasBias = inputs.length === 3;\r\n      const metadata = createConvTranspose2DProgramMetadata(hasBias, attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createConvTranspose2DProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\r\n      };\r\n    };\r\n\r\nconst convTranspose2d =\r\n    (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\r\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\r\n\r\n      context.compute(createConvTranspose2DProgramInfoLoader(inputs, adjustedAttributes));\r\n    };\r\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\r\n  // extend the input to 2D by adding H dimension\r\n  const isChannelLast = attributes.format === 'NHWC';\r\n\r\n  const inputs = [\r\n    context.inputs[0].reshape(\r\n        isChannelLast ?\r\n            // [N, W, C] -> [N, H=1, W, C]\r\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\r\n            // [N, C, W] -> [N, C, H=1, W]\r\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\r\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\r\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\r\n  ];\r\n  if (inputs.length === 3) {\r\n    inputs.push(context.inputs[2]);\r\n  }\r\n  let kernelShape = attributes.kernelShape;\r\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\r\n    kernelShape = [context.inputs[1].dims[2]];\r\n  }\r\n  let dilations = attributes.dilations;\r\n  if (dilations.length === 0 || dilations[0] === 0) {\r\n    dilations = [1];\r\n  }\r\n  let strides = attributes.strides;\r\n  if (strides.length === 0 || strides[0] === 0) {\r\n    strides = [1];\r\n  }\r\n  let pads = attributes.pads;\r\n  if (pads.length === 0) {\r\n    pads = [0, 0];\r\n  }\r\n  pads = [0, pads[0], 0, pads[1]];\r\n  strides = [1].concat(strides);\r\n  dilations = [1].concat(dilations);\r\n  kernelShape = [1].concat(kernelShape);\r\n  const adjustedAttributes =\r\n      getAdjustedConvTransposeAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\r\n  context.compute(createConvTranspose2DProgramInfoLoader(\r\n      inputs, adjustedAttributes,\r\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] :\r\n                                     [outputShape[0], outputShape[1], outputShape[3]]));\r\n};\r\n\r\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\r\n  validateInputs(context.inputs, attributes);\r\n  if (context.inputs[0].dims.length === 3) {\r\n    convTranspose1d(context, attributes);\r\n  } else {\r\n    convTranspose2d(context, context.inputs, attributes);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {PoolConvUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext} from '../types';\r\n\r\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      outputShape.splice(0, 0, batchSize);\r\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly format: 'NHWC'|'NCHW';\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly wIsConst: boolean;\r\n}\r\n\r\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\r\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\r\n\r\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\r\n    throw new Error('currently only support conv 1D and 2D');\r\n  }\r\n\r\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\r\n    throw new Error('filter does not have same dimension as input');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n    if (kernelShape[i - 2] === 0) {\r\n      kernelShape[i - 2] = inputs[1].dims[i];\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\r\n      attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const format = attributes.format as 'NHWC' | 'NCHW';\r\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\r\n  const dilations = attributes.dilations as [number, number];\r\n  const group = attributes.group as number;\r\n  const kernelShape = attributes.kernel_shape as [number, number];\r\n  const pads = attributes.pads as [number, number, number, number];\r\n  const strides = attributes.strides as [number, number];\r\n  const wIsConst = (attributes.w_is_const as () => boolean)();\r\n\r\n  return createAttributeWithCacheKey(\r\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\r\n};\r\n\r\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\r\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n\r\n  // check attributes\r\n\r\n  const hasBias = inputs.length === 3;\r\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\r\n  const isChannelsLast = attributes.format === 'NHWC';\r\n\r\n  // const batchSize = context.inputs[0].dims[0];\r\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\r\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\r\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\r\n  const weightHeight = inputs[1].dims[2];\r\n  const weightWidth = inputs[1].dims[3];\r\n\r\n  const outputShape = calculateOutputShape(\r\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\r\n      isChannelsLast);\r\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\r\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\r\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\r\n\r\n  const sameSize =\r\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\r\n  if (sameSize ||\r\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\r\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\r\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\r\n        attributes.autoPad === 'VALID'))) {\r\n    // TODO: implement conv2dByMatMul()\r\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\r\n    return;\r\n  }\r\n\r\n  if (!isChannelsLast || attributes.group !== 1) {\r\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\r\n    return;\r\n  }\r\n\r\n  // TODO: implement conv2dWithIm2Col()\r\n\r\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\r\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\r\n  const dimInner = weightHeight * weightWidth * inputChannels;\r\n\r\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\r\n\r\n  // STEP.1: transpose weight\r\n  const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\r\n      context.compute(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: weightTransposeAttribute.cacheKey,\r\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\r\n          },\r\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\r\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\r\n    context.kernelCustomData.wT = transposedWeight;\r\n  }\r\n\r\n  // STEP.2: prepare reshaped inputs\r\n  const convInputs = [inputs[0], transposedWeight];\r\n  if (hasBias) {\r\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\r\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\r\n    } else {\r\n      convInputs.push(inputs[2]);\r\n    }\r\n  }\r\n\r\n  // STEP.3: compute matmul\r\n  context.compute(\r\n      createConv2DMatMulProgramInfoLoader(\r\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\r\n          sequentialAccessByThreads),\r\n      {inputs: convInputs});\r\n};\r\n\r\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\r\n  // extend the input to 2D by adding H dimension\r\n  const isChannelLast = attributes.format === 'NHWC';\r\n  const inputs = [\r\n    context.inputs[0].reshape(\r\n        isChannelLast ?\r\n            // [N, W, C] -> [N, H=1, W, C]\r\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\r\n            // [N, C, W] -> [N, C, H=1, W]\r\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\r\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\r\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\r\n  ];\r\n  if (context.inputs.length === 3) {\r\n    inputs.push(context.inputs[2]);\r\n  }\r\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\r\n  const strides = [1].concat(attributes.strides);\r\n  const dilations = [1].concat(attributes.dilations);\r\n  const kernelShape = [1].concat(attributes.kernelShape);\r\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\r\n  context.compute(createGroupedConvProgramInfoLoader(\r\n      inputs, adjustedAttributes,\r\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\r\n};\r\n\r\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\r\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\r\n  if (context.inputs[0].dims.length === 3) {\r\n    conv1d(context, attributes);\r\n  } else {\r\n    conv2d(context, context.inputs, attributes);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\r\nimport {ConvAttributes} from './conv';\r\n\r\n\r\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'Conv2DMatMul',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nexport const createConv2DMatMulProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\r\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\r\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createConv2DMatMulProgramInfo(\r\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\r\n            sequentialAccessByThreads)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport const expandProgramMetadata = {\r\n  name: 'Expand',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Expand requires 2 input.');\r\n  }\r\n  const inputShape = inputs[0].dims;\r\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\r\n\r\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\r\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\r\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\r\n    if (shape[shapeIndex] !== inputShape[inputShapeIndex] && shape[shapeIndex] !== 1 &&\r\n        inputShape[inputShapeIndex] !== 1) {\r\n      throw new Error('Expand requires shape to be broadcastable to input');\r\n    }\r\n  }\r\n};\r\n\r\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\r\n  const diff = shape1.length - shape2.length;\r\n  const shape: number[] = [];\r\n  for (let i = 0; i < diff; ++i) {\r\n    shape.push(shape1[i]);\r\n  }\r\n  for (let i = 0; i < shape2.length; ++i) {\r\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\r\n  }\r\n  return shape;\r\n};\r\n\r\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\r\n    (inputShape.length > shape.length) ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\r\n\r\n\r\nconst createExpandProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\r\n  const inputShape = inputs[0].dims;\r\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\r\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n\r\n  const dataType = inputs[0].dataType;\r\n  const input = inputVariable('input', dataType, inputShape);\r\n  const output = outputVariable('output', dataType, outputShape);\r\n\r\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const inputShape = ${input.indices(...inputShape)};\r\n  ${shaderHelper.declareVariables(input, output)}\r\n  ${shaderHelper.mainStart()}\r\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n    let outputIndices = ${output.offsetToIndices('global_idx')};\r\n    var inputIndices: ${input.type.indices};\r\n    for (var i = 0; i < ${inputShape.length}; i++) {\r\n      if (${input.indicesGet('inputShape', 'i')} == 1) {\r\n        ${input.indicesSet('inputIndices', 'i', 0)}\r\n      } else {\r\n        ${\r\n      input.indicesSet(\r\n          'inputIndices', 'i', output.indicesGet('outputIndices', `i + ${outputShape.length - inputShape.length}`))}\r\n      }\r\n    }\r\n    ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\r\n  }`;\r\n  return {\r\n    ...metadata,\r\n    getShaderSource,\r\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n  };\r\n};\r\n\r\nexport const expand = (context: ComputeContext): void => {\r\n  validateInputs(context.inputs);\r\n  const outputShape = Array.from(context.inputs[1].getBigInt64Array(), Number);\r\n  const cacheHint = outputShape.toString();\r\n  context.compute(\r\n      {...expandProgramMetadata, cacheHint, get: () => createExpandProgramInfo(expandProgramMetadata, context.inputs)},\r\n      {inputs: [0]});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport const getActicationSnippet =\r\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\r\n      switch (attributes.activation) {\r\n        case 'Relu':\r\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\r\n        case 'Sigmoid':\r\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\r\n        case 'Clip':\r\n          return {\r\n            activationFunction:\r\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\r\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\r\n          };\r\n          // TODO: adding other activations that can be fused.\r\n        default:\r\n          return {activationFunction: '', applyActivation: ''};\r\n      }\r\n    };\r\n\r\nexport const parseInternalActivationAttributes =\r\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\r\n      const activation = attributes?.activation as string || '';\r\n\r\n      if (activation === 'Clip') {\r\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\r\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n      }\r\n      return {activation, activationCacheKey: activation};\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\n\r\nexport interface GatherAttributes extends AttributeWithCacheKey {\r\n  axis: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GatherAttributes): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const indicesShape = inputs[1].dims;\r\n\r\n      const inputRank = inputShape.length;\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\r\n\r\n      const outputShape = inputShape.slice(0);\r\n      outputShape.splice(axis, 1, ...indicesShape);\r\n\r\n      const inputDataType = inputs[0].dataType;\r\n      const block = ShapeUtil.sizeFromDimension(inputShape, axis + 1);\r\n      const elementSize = [DataType.int64, DataType.uint64, DataType.double].includes(inputDataType) ? 2 : 1;\r\n      const indicesElementSize = inputs[1].dataType === DataType.int64 ? 2 : 1;\r\n      const blockSize = elementSize * block;\r\n      const M = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const N = ShapeUtil.size(indicesShape);\r\n      const dataBatchElements = ShapeUtil.sizeFromDimension(inputShape, axis) * elementSize;\r\n      const gatheredBatchElements = N * block * elementSize;\r\n      const axisDimLimit = inputShape[axis];\r\n\r\n      const inputSize = ShapeUtil.size(inputShape) * elementSize;\r\n      const outputSize = ShapeUtil.size(outputShape) * elementSize;\r\n\r\n      const totalGathers = M * N;\r\n      // int64 indices would be treated as little endian i32 with assumption they fall in i32 limits\r\n      // That assumption is safe as it's not possible to allocate >2gb buffer for input tensor\r\n      // Input data will be treated as u32 or two u32 for 8-byte tensors\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const N: u32 = ${N};\r\n  const elementSize: u32 = ${elementSize};\r\n  const indicesElementSize: u32 = ${indicesElementSize};\r\n\r\n  @group(0) @binding(0) var<storage, read> input : array<u32>;\r\n  @group(0) @binding(1) var<storage, read> inputIndices : array<i32>;\r\n  @group(0) @binding(2) var<storage, read_write> output: array<u32>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let batch: u32 = global_idx / N;\r\n    let i: u32 = global_idx % N;\r\n\r\n    let srcOffsetBatch: u32 = batch * ${dataBatchElements};\r\n    let dstOffsetBatch: u32 = batch * ${gatheredBatchElements};\r\n    var idx = inputIndices[i * indicesElementSize];\r\n    if (idx < 0) {\r\n        idx = idx + ${axisDimLimit};\r\n    }\r\n\r\n    let srcOffset = srcOffsetBatch + u32(idx) * ${blockSize};\r\n    let dstOffset = dstOffsetBatch + i * ${blockSize};\r\n    if (srcOffset >= ${inputSize}) {\r\n        return;\r\n    }\r\n    if (dstOffset >= ${outputSize}) {\r\n        return;\r\n    }\r\n    for (var j: u32 = 0; j < ${blockSize}; j++) {\r\n        output[dstOffset + j] = input[srcOffset + j];\r\n    }\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [\r\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n        ],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(totalGathers / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const parseGatherAttributes = (attributes: Record<string, unknown>): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis as number});\r\n\r\nexport const gather = (context: ComputeContext, attributes: GatherAttributes): void => {\r\n  const inputs = context.inputs;\r\n  validateInputs(inputs);\r\n\r\n  const metadata = {\r\n    name: 'Gather',\r\n    inputTypes: [GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey,\r\n  };\r\n\r\n  context.compute(createGatherProgramInfo(metadata, context.inputs, attributes));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {GemmUtil, ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (inputs.length < 2 || inputs.length > 3) {\r\n    throw new Error('Invaid input number.');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 0, 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\r\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\r\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n}\r\n\r\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\r\n  if (dims.length === 0) {\r\n    return '0u';\r\n  }\r\n\r\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\r\n  const broadcastN = dims[dims.length - 1] !== n;\r\n\r\n  let offset = '0u';\r\n  if (!broadcastM) {\r\n    offset += `+ m * ${dims[dims.length - 1]}u`;\r\n  }\r\n  if (!broadcastN) {\r\n    offset += '+n';\r\n  }\r\n\r\n  return offset;\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      let line = '';\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += a[k * M + m] * b[n * K + k];';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += a[k * M + m] * b[k * N + n];';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += a[m * K + k] * b[n * K + k];';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += a[m * K + k] * b[k * N + n];';\r\n      }\r\n\r\n      const dataType = 'f32';  // TODO: support other data type\r\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\r\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\r\n      const inputStorageBuffersDeclarations = [\r\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\r\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\r\n      ];\r\n      if (inputs.length === 3) {\r\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\r\n      }\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const M: u32 = ${M}u;\r\n  const N: u32 = ${N}u;\r\n  const K: u32 = ${K}u;\r\n  const alpha = ${dataType}(${attributes.alpha});\r\n  const beta = ${dataType}(${attributes.beta});\r\n\r\n  ${inputStorageBuffersDeclarations.join('\\n')}\r\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let m = global_id.x / N;\r\n    let n = global_id.x % N;\r\n\r\n    var value = ${dataType}(0);\r\n    for (var k: u32 = 0u; k<${K}u; k++) {\r\n      ${line}\r\n    }\r\n\r\n    ${calculateAlpha}\r\n    ${calculateC}\r\n    output[global_id.x] = value;\r\n\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                                      [GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\r\n};\r\n\r\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\r\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\r\n\r\nexport interface InstanceNormAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  format: 'NHWC'|'NCHW';\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('instanceNorm requires 3 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n};\r\n\r\nconst createInstanceNormProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\r\n      const xShape = inputs[0].dims;\r\n      const scale = inputs[1];\r\n      const bias = inputs[2];\r\n\r\n      const outputShape = xShape;\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const axis = 2;\r\n      const normCount = ShapeUtil.sizeToDimension(xShape, axis);\r\n      const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\r\n      const C = xShape[1];\r\n\r\n      const scaleSize = ShapeUtil.size(scale.dims);\r\n      const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\r\n      if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\r\n        throw new Error(`Size of X.shape()[axis:] == ${normSize}.\r\n             Size of scale and bias (if provided) must match this. \r\n             Got scale size of ${scaleSize} and bias size of ${biasSize}`);\r\n      }\r\n\r\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const C: u32 = ${C};\r\n  const normSize: u32 = ${normSize};\r\n  const normSizeTyped: ${dataType} = ${normSize};\r\n  const epsilon: f32 = ${attributes.epsilon};\r\n\r\n  @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\r\n  @group(0) @binding(1) var<storage, read> scale : array<${dataType}>;\r\n  @group(0) @binding(2) var<storage, read> bias : array<${dataType}>;\r\n  @group(0) @binding(3) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let offset = global_idx * normSize;\r\n    if (offset + normSize >= ${outputSize}) { return; }\r\n    var mean: ${dataType} = 0;\r\n\r\n    for (var h: u32 = 0u; h < normSize; h++) {\r\n        mean = mean + x[h + offset];\r\n    }\r\n    mean = mean / normSizeTyped;\r\n\r\n    var squaredNorm: ${dataType} = 0;\r\n    for (var h: u32 = 0u; h < normSize; h++) {\r\n        let deviation: f32 = x[h + offset] - mean;\r\n        squaredNorm = squaredNorm + deviation * deviation;\r\n    }\r\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\r\n    let channelScale = invStdDev * scale[global_idx % C];\r\n    let channelShift = bias[global_idx % C] - mean * channelScale;\r\n    for (var j: u32 = 0; j < normSize; j++) {\r\n        output[j + offset] = x[j + offset] * channelScale + channelShift;\r\n    }\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [\r\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n        ],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createInstanceNormNHWCProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\r\n      const xShape = inputs[0].dims;\r\n      const outputShape = xShape;\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const N = xShape[0];\r\n      const C = xShape[xShape.length - 1];\r\n      const H = ShapeUtil.sizeFromDimension(xShape, 1) / C;\r\n\r\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n\r\n      const normCount = C * N;\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const N: u32 = ${N};\r\n  const H: u32 = ${H};\r\n  const C: u32 = ${C};\r\n  const normSizeTyped: ${dataType} = ${H};\r\n  const imageSize: u32 = ${H * C};\r\n  const epsilon: f32 = ${attributes.epsilon};\r\n\r\n  @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\r\n  @group(0) @binding(1) var<storage, read> scale : array<${dataType}>;\r\n  @group(0) @binding(2) var<storage, read> bias : array<${dataType}>;\r\n  @group(0) @binding(3) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let currentImageNumber = global_idx / C;\r\n    let currentChannelNumber = global_idx % C;\r\n    \r\n    // offset is channel num * N\r\n    let offset = currentImageNumber * imageSize;\r\n    if (offset >= ${outputSize}) { return; }\r\n    var mean: ${dataType} = 0;\r\n\r\n    for (var i: u32 = 0u; i < H; i++) {\r\n        mean = mean + x[offset + i * C + currentChannelNumber];\r\n    }\r\n    mean = mean / normSizeTyped;\r\n\r\n    var squaredNorm: ${dataType} = 0;\r\n    for (var i: u32 = 0u; i < H; i++) {\r\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\r\n        squaredNorm = squaredNorm + deviation * deviation;\r\n    }\r\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\r\n    let channelScale = invStdDev * scale[currentChannelNumber];\r\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\r\n    for (var i: u32 = 0u; i < H; i++) {\r\n        let currentOffset = offset + i * C + currentChannelNumber;\r\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\r\n    }\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [\r\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n        ],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const parseInstanceNormAttributes = (attributes: InstanceNormAttributes): InstanceNormAttributes =>\r\n    createAttributeWithCacheKey({epsilon: attributes.epsilon, format: attributes.format});\r\n\r\nexport const instanceNorm = (context: ComputeContext, attributes: InstanceNormAttributes): void => {\r\n  validateInputs(context.inputs);\r\n\r\n  const metadata = {\r\n    name: 'InstanceNormalization',\r\n    inputTypes: [GpuDataType.default, GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey,\r\n  };\r\n\r\n  if (attributes.format === 'NHWC') {\r\n    context.compute(createInstanceNormNHWCProgramInfo(metadata, context.inputs, attributes));\r\n  } else {\r\n    context.compute(createInstanceNormProgramInfo(metadata, context.inputs, attributes));\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\r\n\r\nexport interface LayerNormAttributes extends AttributeWithCacheKey {\r\n  axis: number;\r\n  epsilon: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 2) {\r\n    throw new Error('layerNorm requires at least 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n};\r\n\r\nconst createLayerNormProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: LayerNormAttributes, outputCount: number):\r\n        ProgramInfo => {\r\n          const xShape = inputs[0].dims;\r\n          const scale = inputs[1];\r\n          const bias = inputs[2];\r\n\r\n          const outputShape = xShape;\r\n          const outputSize = ShapeUtil.size(outputShape);\r\n          const axis = ShapeUtil.normalizeAxis(attributes.axis, xShape.length);\r\n          const normCount = ShapeUtil.sizeToDimension(xShape, axis);\r\n          const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\r\n\r\n          const scaleSize = ShapeUtil.size(scale.dims);\r\n          const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\r\n          if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\r\n            throw new Error(`Size of X.shape()[axis:] == ${normSize}.\r\n       Size of scale and bias (if provided) must match this.\r\n       Got scale size of ${scaleSize} and bias size of ${biasSize}`);\r\n          }\r\n\r\n          const meanInvStdDevDim = [];\r\n          for (let i = 0; i < xShape.length; ++i) {\r\n            if (i < axis) {\r\n              meanInvStdDevDim.push(xShape[i]);\r\n            } else {\r\n              meanInvStdDevDim.push(1);\r\n            }\r\n          }\r\n\r\n          const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n\r\n          const hasMeanDataOutput = outputCount > 1;\r\n          const hasInvStdOutput = outputCount > 2;\r\n          let bindingIndex = 0;\r\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const normSize: u32 = ${normSize};\r\n  const normSizeTyped: ${dataType} = ${normSize};\r\n  const epsilon: f32 = ${attributes.epsilon};\r\n\r\n  @group(0) @binding(${bindingIndex++}) var<storage, read> x : array<${dataType}>;\r\n  @group(0) @binding(${bindingIndex++}) var<storage, read> scale : array<${dataType}>;\r\n  ${bias ? `@group(0) @binding(${bindingIndex++}) var<storage, read> bias : array<${dataType}>;` : ''}\r\n  @group(0) @binding(${bindingIndex++}) var<storage, read_write> output : array<${dataType}>;\r\n  ${\r\n              hasMeanDataOutput ?\r\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> meanDataOutput : array<${dataType}>` :\r\n                  ''};\r\n  ${\r\n              hasInvStdOutput ?\r\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> invStdOutput : array<${dataType}>` :\r\n                  ''};\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let offset = global_idx * normSize;\r\n    if (offset >= ${outputSize}) { return; }\r\n    var mean: ${dataType} = 0;\r\n    var meanSquare: ${dataType} = 0;\r\n\r\n    for (var h: u32 = 0u; h < normSize; h++) {\r\n      mean = mean + x[h + offset];\r\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\r\n    }\r\n    mean = mean / normSizeTyped;\r\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\r\n\r\n    for (var j: u32 = 0; j < normSize; j++) {\r\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] ${bias ? '+ bias[j]' : ''};\r\n    }\r\n\r\n    ${hasMeanDataOutput ? 'meanDataOutput[global_idx] = mean' : ''};\r\n    ${hasInvStdOutput ? 'invStdOutput[global_idx] = 1 / meanSquare' : ''};\r\n  }`;\r\n          const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\r\n          if (hasMeanDataOutput) {\r\n            outputs.push(\r\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n            );\r\n          }\r\n          if (hasInvStdOutput) {\r\n            outputs.push(\r\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n            );\r\n          }\r\n\r\n          return {\r\n            ...metadata,\r\n            outputs,\r\n            getShaderSource,\r\n            dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const parseLayerNormAttributes = (attributes: LayerNormAttributes): LayerNormAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis, epsilon: attributes.epsilon});\r\n\r\nexport const layerNorm = (context: ComputeContext, attributes: LayerNormAttributes): void => {\r\n  validateInputs(context.inputs);\r\n\r\n  const metadata = {\r\n    name: 'LayerNormalization',\r\n    inputTypes: context.inputs.length === 2 ? [GpuDataType.default, GpuDataType.default] :\r\n                                              [GpuDataType.default, GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey + context.outputCount.toString(10) + context.inputs.length.toString(10),\r\n  };\r\n\r\n  context.compute(createLayerNormProgramInfo(metadata, context.inputs, attributes, context.outputCount));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\n\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nconst createMatmulProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\r\n        ProgramInfo => {\r\n          const aShape = inputs[0].dims;\r\n          const bShape = inputs[1].dims;\r\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n          if (!outputShape) {\r\n            throw new Error('Can\\'t use matmul on the given tensors');\r\n          }\r\n          const outputSize = ShapeUtil.size(outputShape);\r\n          // TODO: support broadcasting\r\n\r\n          const dataType = 'f32';  // TODO: support other data type\r\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n          const M = outputShape[outputShape.length - 2];\r\n          const K = aShape[aShape.length - 1];\r\n          const N = outputShape[outputShape.length - 1];\r\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const M: u32 = ${M}u;\r\n  const N: u32 = ${N}u;\r\n  const K: u32 = ${K}u;\r\n\r\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\r\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\r\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${activationFunction}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let stack = global_idx / (M * N);\r\n    let mn = global_idx % (M * N);\r\n    let n = global_idx % N;\r\n    let m = mn / N;\r\n\r\n    let offsetA = stack * (M * K);\r\n    let offsetB = stack * (K * N);\r\n\r\n    var value = ${dataType}(0);\r\n    for (var k: u32 = 0u; k<${K}u; k++) {\r\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\r\n    }\r\n    ${applyActivation}\r\n    output[global_idx] = value;\r\n  }`;\r\n          return {\r\n            ...metadata,\r\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n            getShaderSource,\r\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const createMatmulProgramInfoLoader =\r\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n    };\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n};\r\n\r\nexport const matMul = (context: ComputeContext): void => {\r\n  validateInputs(context.inputs);\r\n\r\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\n// TODO: support:\r\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\r\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\r\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\r\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Pool ops supports 2-D inputs only for now.');\r\n  }\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\r\n    input: TensorView, attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\r\n  const isChannelsLast = attributes.format === 'NHWC';\r\n  const inputShapeAsChannelFirst =\r\n      isChannelsLast ? [input.dims[0], input.dims[3], input.dims[1], input.dims[2]] : input.dims.slice();\r\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  const strides = attributes.strides.slice();\r\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\r\n\r\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\r\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  const newAttributes = Object.assign({}, attributes);\r\n  if (hasDilations) {\r\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n  } else {\r\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n  }\r\n  return [\r\n    newAttributes,\r\n    isChannelsLast ?\r\n        [\r\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\r\n          outputShapeAsChannelFirst[1]\r\n        ] :\r\n        outputShapeAsChannelFirst\r\n  ];\r\n};\r\n\r\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\r\n    shaderHelper: ShaderHelper, x: IndicesHelper, outputShape: readonly number[], attributes: AttributeType,\r\n    op1: string, op2: string, start: string): string => {\r\n  const isChannelsLast = attributes.format === 'NHWC';\r\n  const inputDims = x.shape;\r\n  const dataType = x.type.value;\r\n  const rank = inputDims.length;\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n  const output = outputVariable('output', x.type.tensor, outputShape);\r\n\r\n  if (attributes.kernelShape.length <= 2) {\r\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n    const sw = attributes.strides[attributes.strides.length - 1];\r\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\r\n    let codeW = '';\r\n    let codeH = '';\r\n    let codeHEnd = '';\r\n    if (pwStart + pwEnd !== 0) {\r\n      codeW = `\r\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\r\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\r\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\r\n                  pad++;\r\n                  continue;\r\n                }\r\n                let x_val = x[${x.indicesToOffset('xIndices')}];\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      codeW = `\r\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\r\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\r\n                let x_val = x[${x.indicesToOffset('xIndices')}];\r\n                ${op1}\r\n              }`;\r\n    }\r\n\r\n    if (attributes.kernelShape.length === 2) {\r\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n      const sh = attributes.strides[attributes.strides.length - 2];\r\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n      const phEnd = attributes.pads[attributes.pads.length - 2];\r\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\r\n      const dimH = inputDims[dimIdxH];\r\n      if (phStart + phEnd !== 0) {\r\n        codeH = `\r\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\r\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\r\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\r\n                    pad+= ${kw};\r\n                    continue;\r\n                  }\r\n              `;\r\n      } else {\r\n        codeH = `\r\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\r\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\r\n                `;\r\n      }\r\n      codeHEnd = `\r\n              }\r\n            `;\r\n    }\r\n\r\n    const poolingCode = `\r\n            ${shaderHelper.declareVariables(x, output)}\r\n\r\n            ${shaderHelper.mainStart()}\r\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n              let indices = ${output.offsetToIndices('global_idx')};\r\n              var xIndices = ${output.offsetToIndices('global_idx')};\r\n\r\n              var value: ${dataType} = ${dataType}(${start});\r\n              var pad = 0;\r\n              ${codeH}\r\n              ${codeW}\r\n              ${codeHEnd}\r\n              ${op2}\r\n\r\n              output[global_idx] = value;\r\n            }`;\r\n    return poolingCode;\r\n  } else {\r\n    if (isChannelsLast) {\r\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\r\n    }\r\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n    const stridesRank = kernelStrides.length;\r\n    const padsRank = attributes.pads.length;\r\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n    let padCode = '';\r\n    if (hasPads) {\r\n      padCode = `\r\n                if (xIndices[j] >= inputDims[j]) {\r\n                  pad++;\r\n                  isPad = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!isPad) {\r\n                let x_val = x[${x.indicesToOffset('xIndices')}];\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      padCode = `\r\n              }\r\n              let x_val = x[${x.indicesToOffset('xIndices')}];\r\n              ${op1}\r\n            `;\r\n    }\r\n    const poolingCode = `\r\n            ${shaderHelper.declareVariables(x, output)}\r\n\r\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\r\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\r\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\r\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\r\n\r\n            ${shaderHelper.mainStart()}\r\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n              let indices = ${output.offsetToIndices('global_idx')};\r\n              let xIndices = ${output.offsetToIndices('global_idx')};\r\n\r\n              var offsets: array<u32, ${stridesRank}>;\r\n\r\n              var value = ${output.type.value}(${start});\r\n              var pad = 0;\r\n              var isPad = false;\r\n\r\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\r\n                var offset = i;\r\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\r\n                  offsets[j] = offset / kernelStrides[j];\r\n                  offset -= offsets[j] * kernelStrides[j];\r\n                }\r\n                offsets[${stridesRank - 1}] = offset;\r\n\r\n                isPad = false;\r\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\r\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\r\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\r\n                  ${padCode}\r\n              }\r\n              ${op2}\r\n\r\n              output[global_idx] = value;\r\n            }`;\r\n    return poolingCode;\r\n  }\r\n};\r\n\r\nexport interface FormatAttributes {\r\n  readonly format: 'NHWC'|'NCHW';\r\n}\r\n\r\nexport interface PoolCommonAttributes extends FormatAttributes {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\r\n  format: attributes.format as FormatAttributes['format'],\r\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\r\n  ceilMode: attributes.ceil_mode as number,\r\n  kernelShape: attributes.kernel_shape as [number, number],\r\n  strides: attributes.strides as [number, number],\r\n  pads: attributes.pads as [number, number, number, number]\r\n});\r\n\r\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\r\n  readonly countIncludePad: boolean;\r\n}\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n\r\n          const x = inputVariable('x', input.dataType, input.dims);\r\n          const dataType = 'f32';\r\n\r\n          const op1 = 'value += x_val;';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= ${dataType}(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= ${dataType}(${kernelSize} - pad);`;\r\n          }\r\n          return {\r\n            ...metadata,\r\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\r\n            getShaderSource: shaderHelper =>\r\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '0.0'),\r\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\r\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\r\n\r\n  const attr = parsePoolCommonAttributes(attributes);\r\n  // TODO: support attribute 'ceil_mode'\r\n  if (attr.ceilMode !== 0) {\r\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n  }\r\n\r\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\r\n};\r\n\r\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute(\r\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, false, attributes)});\r\n};\r\n\r\nconst globalPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\r\n  const format = attributes.format as FormatAttributes['format'];\r\n  return {format, ...globalPoolAttributes, cacheKey: format};\r\n};\r\n\r\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute(\r\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, true, attributes)});\r\n};\r\n\r\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(x_val, value);\r\n    `;\r\n          const op2 = '';\r\n          const x = inputVariable('x', input.dataType, input.dims);\r\n          return {\r\n            ...metadata,\r\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\r\n            getShaderSource: shaderHelper =>\r\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '-1e5'),\r\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, false, attributes)});\r\n};\r\n\r\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\r\n  const storageOrder = attributes.storage_order as number;\r\n  const dilations = attributes.dilations as [number, number];\r\n\r\n  const attr = parsePoolCommonAttributes(attributes);\r\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n  if (storageOrder !== 0) {\r\n    throw new Error('column major storage order is not yet supported for MaxPool');\r\n  }\r\n  if (attr.ceilMode !== 0) {\r\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n  }\r\n\r\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\r\n};\r\n\r\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\r\n  const format = attributes.format as FormatAttributes['format'];\r\n  return {format, ...globalPoolAttributes, cacheKey: format};\r\n};\r\n\r\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, true, attributes)});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\r\n    throw new Error('Reduce op requires 1 or 2 inputs.');\r\n  }\r\n\r\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid axes input dims.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  keepDims: boolean;\r\n  noopWithEmptyAxes: boolean;\r\n  axes: number[];\r\n}\r\n\r\nexport type ReduceOp =\r\n    (input: IndicesHelper, output: IndicesHelper,\r\n     axes: readonly number[]) => [string, string, string, string, ...string[]];\r\n\r\nconst noOp: ReduceOp = (input) => ['', '', `var value = ${input.getByOffset('inputOffset')};`, ''];\r\nexport const createReduceProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], reduceOp: ReduceOp, axesInput: number[],\r\n     outputDataType: DataType, keepDims = false, noopWithEmptyAxes = false): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const inputShape = inputs[0].dims;\r\n\r\n      const axes = ShapeUtil.normalizeAxes(axesInput, inputs[0].dims.length);\r\n      const reduceOnAllAxes = !noopWithEmptyAxes && axes.length === 0;\r\n      inputShape.forEach((d, i) => {\r\n        if (reduceOnAllAxes || axes.indexOf(i) >= 0) {\r\n          if (keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { // skip this axis}\r\n        } else {\r\n          outputShape.push(d);\r\n        }\r\n      });\r\n\r\n      const idxCopy: string[] = [];  // copy output indexes to input indexes\r\n\r\n      const input = inputVariable('_A', inputs[0].dataType, inputShape);\r\n      const output = outputVariable('output', outputDataType, outputShape);\r\n      const ops = reduceOp(input, output, axes);\r\n      const inputOffsetAssignment = `inputOffset = ${input.indicesToOffset('inputIndices')};`;\r\n      const initinputOffsetLet = `let ${inputOffsetAssignment};`;\r\n      const initinputOffsetVar = `var ${inputOffsetAssignment};`;\r\n      const initinputOffset = (ops[1] === '') ? '' : initinputOffsetVar;\r\n      let reduceOps = ((ops[1] === '') ? initinputOffsetLet : inputOffsetAssignment) + '\\n' + ops[2];\r\n\r\n      for (let k = 0, l = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\r\n          if (keepDims) {\r\n            l++;\r\n          }\r\n          // loop over the d-th axis\r\n          reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n                ${ops[2].includes('lastIndex') ? `let lastIndex = j${k};` : ''}\r\n                ${input.indicesSet('inputIndices', k, `j${k}`)}\r\n                ${reduceOps}\r\n              }`;\r\n        } else {\r\n          idxCopy.push(`${input.indicesSet('inputIndices', k, output.indicesGet('outputIndices', l))};`);\r\n          l++;\r\n        }\r\n      }\r\n\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n        ${shaderHelper.declareVariables(input, output)}\r\n\r\n        ${shaderHelper.mainStart()}\r\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n          var inputIndices: ${input.type.indices};\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n\r\n          ${idxCopy.join('\\n')}\r\n          ${ops[0]}       // init ops for reduce max/min\r\n          ${initinputOffset}\r\n          ${ops[1]}\r\n          ${reduceOps}\r\n          ${ops[3]}\r\n          ${ops.length === 4 ? output.setByOffset('global_idx', 'value') : ops.slice(4).join('\\n')}\r\n        }`;\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createReduceAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: ReduceAttributes): ReduceAttributes => {\r\n      const axes: number[] = [];\r\n      if (inputs[1].dims[0] > 0) {\r\n        inputs[1].getBigInt64Array().forEach(v => axes.push(Number(v)));\r\n      }\r\n      return createAttributeWithCacheKey(\r\n          {axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes});\r\n    };\r\n\r\nconst createReduceProgramInfoLoader =\r\n    (inputs: readonly TensorView[], name: string, attributes: ReduceAttributes,\r\n     reduceOp: ReduceOp): ProgramInfoLoader => {\r\n      const updatedAttributes: ReduceAttributes =\r\n          inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\r\n      const metadata: ProgramMetadata = {\r\n        name,\r\n        inputTypes: [GpuDataType.default],\r\n        cacheHint: updatedAttributes.cacheKey + '_' + inputs[0].dims.map(d => d.toString()).join(',')\r\n      };\r\n      return {\r\n        ...metadata,\r\n        get: () => createReduceProgramInfo(\r\n            metadata, [inputs[0]],\r\n            updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp,\r\n            updatedAttributes.axes, inputs[0].dataType, updatedAttributes.keepDims, updatedAttributes.noopWithEmptyAxes)\r\n      };\r\n    };\r\n\r\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += ${input.getByOffset('inputOffset')};`,\r\n       'value = log(value);',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceLogSum', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += abs(${input.getByOffset('inputOffset')});`,\r\n       '',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL1', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var t = f32(0); var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `t = ${input.getByOffset('inputOffset')}; value += (t * t);`,\r\n       'value = sqrt(value);',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL2', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += exp(${input.getByOffset('inputOffset')});`,\r\n       'value = log(value);',\r\n  ];\r\n  context.compute(\r\n      createReduceProgramInfoLoader(context.inputs, 'ReduceLogSumExp', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, _output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(input.indicesSet('inputIndices', k, 0));\r\n      }\r\n    }\r\n\r\n    return [\r\n      `${idxZero.join('\\n')}`,\r\n      `var value = ${input.getByOffset('inputOffset')};`,\r\n      `value = max(value, ${input.getByOffset('inputOffset')});`,\r\n      '',\r\n    ];\r\n  };\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMax', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output, axes) => {\r\n    let size = 1.0;\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        size *= input.shape[k];\r\n      }\r\n    }\r\n\r\n    return [\r\n      `var value = ${output.type.storage}(0);`,\r\n      '',\r\n      `value += ${input.getByOffset('inputOffset')};`,\r\n      `value = value / ${size}.;`,\r\n    ];\r\n  };\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMean', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, _output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [\r\n      `${idxZero.join('\\n')}`,\r\n      `var value = ${input.getByOffset('inputOffset')};`,\r\n      `value = min(value, ${input.getByOffset('inputOffset')});`,\r\n      '',\r\n    ];\r\n  };\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMin', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(1);`,\r\n       '',\r\n       `value *= ${input.getByOffset('inputOffset')};`,\r\n       '',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceProd', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += ${input.getByOffset('inputOffset')};`,\r\n       '',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceSum', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var t = f32(0); var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `t = ${input.getByOffset('inputOffset')}; value += t * t;`,\r\n       '',\r\n  ];\r\n  context.compute(\r\n      createReduceProgramInfoLoader(context.inputs, 'ReduceSumSquare', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const parseReduceAttributes = (attributes: Record<string, unknown>): ReduceAttributes =>\r\n    createAttributeWithCacheKey(attributes as Omit<ReduceAttributes, keyof AttributeWithCacheKey>);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\ntype CoordinateTransformMode = 'half_pixel'|'asymmetric'|'pytorch_half_pixel'|'tf_half_pixel_for_nn'|'align_corners'|\r\n    'tf_crop_and_resize'|'half_pixel_symmetric';\r\n\r\ntype KeepAspectRatioPolicy = 'stretch'|'not_smaller'|'not_larger';\r\n\r\ntype Mode = 'nearest'|'linear'|'cubic';\r\n\r\ntype NearestMode = 'round_prefer_floor'|'round_prefer_ceil'|'floor'|'ceil'|'simple';\r\n\r\nexport interface ResizeAttributes extends AttributeWithCacheKey {\r\n  antialias: number;\r\n  axes: number[];\r\n  coordinateTransformMode: CoordinateTransformMode;\r\n  cubicCoeffA: number;\r\n  excludeOutside: boolean;\r\n  extrapolationValue: number;\r\n  keepAspectRatioPolicy: KeepAspectRatioPolicy;\r\n  mode: Mode;\r\n  nearestMode: NearestMode;\r\n}\r\n\r\nconst validateScales = (scales: number[], attributes: ResizeAttributes): void => {\r\n  scales.every((value) => value > 0 || (() => {\r\n                            throw new Error('Resize requires scales input values to be positive');\r\n                          }));\r\n  // Check scales dims based on mode: LINEAR, CUBIC\r\n  if (scales.length > 0) {\r\n    if (attributes.mode === 'linear') {\r\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\r\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\r\n        throw new Error('Resize requires scales input size to be 2 or 4 for linear mode');\r\n      }\r\n    } else if (attributes.mode === 'cubic') {\r\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\r\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\r\n        throw new Error('Resize requires scales input size to be 2 or 4 for cubic mode');\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst updateScales = (scales: readonly number[], axes: readonly number[], rank: number): number[] => {\r\n  axes.every((value) => value >= 0 && value < rank || (() => {\r\n                          throw new Error('Resize requires axes input values to be positive and less than rank');\r\n                        }));\r\n  const newScales = new Array(rank).fill(1.0);\r\n  axes.forEach((value, index) => newScales[value] = scales[index]);\r\n  return newScales;\r\n};\r\n\r\nconst validateInputs =\r\n    (inputs: readonly TensorView[], attributes: ResizeAttributes, opsetVersion: number, scales: number[],\r\n     sizes: number[], roi: number[]): void => {\r\n      const [roiInputIndex, scalesInputIndex, sizesInputIndex] =\r\n          (opsetVersion > 10) ? [1, 2, 3] : [-1, (inputs.length > 1) ? 1 : -1, -1];\r\n      const rank = inputs[0].dims.length;\r\n      if (roiInputIndex > 0 && inputs.length > roiInputIndex && inputs[roiInputIndex].dims.length > 0) {\r\n        inputs[roiInputIndex].getFloat32Array().forEach((value) => roi.push(value));\r\n\r\n      } else if (attributes.coordinateTransformMode === 'tf_crop_and_resize') {\r\n        throw new Error('Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize');\r\n      }\r\n\r\n      if (scalesInputIndex > 0 && inputs.length > scalesInputIndex && inputs[scalesInputIndex].dims.length > 0) {\r\n        inputs[scalesInputIndex].getFloat32Array().forEach((value) => scales.push(value));\r\n        if (scales.length !== 0 &&\r\n            (scales.length !== rank && (opsetVersion >= 18 && scales.length !== attributes.axes.length))) {\r\n          throw new Error(\r\n              'Resize requires scales input size to be same as input rank or axes size for opset 18 and up');\r\n        }\r\n        validateScales(scales, attributes);\r\n        if (attributes.axes.length > 0) {\r\n          updateScales(scales, attributes.axes, rank).forEach((value, index) => scales[index] = value);\r\n        }\r\n      }\r\n      if (sizesInputIndex > 0 && inputs.length > sizesInputIndex) {\r\n        inputs[sizesInputIndex].getBigInt64Array().forEach((value) => sizes.push(Number(value)));\r\n        if (sizes.length !== rank || (opsetVersion >= 18 && sizes.length === attributes.axes.length)) {\r\n          throw new Error('Resize requires sizes input size to be same as input rank or axes size for opset 18 and up');\r\n        }\r\n      }\r\n\r\n      if (attributes.axes.length > 0) {\r\n        if (scales.length !== attributes.axes.length) {\r\n          throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\r\n        }\r\n        if (sizes.length !== attributes.axes.length) {\r\n          throw new Error(\r\n              'Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\r\n        }\r\n      }\r\n      if (typeof scales !== 'undefined' && typeof sizes !== 'undefined' && scales.length > 0 && sizes.length > rank) {\r\n        throw new Error('Resize requires only of scales or sizes to be specified');\r\n      }\r\n    };\r\n\r\nconst getOriginalCoordinateFromResizedCoordinate = (coordinateTransferMode: CoordinateTransformMode): string =>\r\n    'fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,\\\r\n    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { ' +\r\n    (() => {\r\n      switch (coordinateTransferMode) {\r\n        case 'asymmetric':\r\n          return 'return xResized / xScale;';\r\n        case 'pytorch_half_pixel':\r\n          return 'if (lengthResized > 1) { \\\r\n                    return (xResized + 0.5) / xScale - 0.5; \\\r\n                  } else { \\\r\n                    return 0.0; \\\r\n                  }';\r\n        case 'tf_half_pixel_for_nn':\r\n          return 'return (xResized + 0.5) / xScale;';\r\n        case 'align_corners':\r\n          return 'if (lengthResized == 1) { \\\r\n                    return 0.0; \\\r\n                  } else { \\\r\n                    return xResized * (lengthOriginal - 1) / (lengthResized - 1); \\\r\n                  }';\r\n        case 'tf_crop_and_resize':\r\n          return 'if (lengthResized > 1) { \\\r\n                    return roiStart * (lengthOriginal - 1) + \\\r\n                          (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1); \\\r\n                  } else { \\\r\n                    return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1); \\\r\n                  }';\r\n        case 'half_pixel_symmetric':\r\n          return [\r\n            'const outputWidth = xScale * lengthResized;', 'const adjustment = lengthResized / outputWidth;',\r\n            'const center = lengthOriginal / 2;', 'const offset = center * (1 - adjustment);',\r\n            'return offset + ((xResized + 0.5) / xScale) - 0.5;'\r\n          ].join('\\n');\r\n        case 'half_pixel':\r\n          return 'return ((xResized + 0.5) / xScale) - 0.5;';\r\n        default:\r\n          throw new Error(`Coordinate transform mode ${coordinateTransferMode} is not supported`);\r\n      }\r\n    })() +\r\n    '}';\r\n\r\nconst getNearestPixelFromOriginal = (nearestMode: NearestMode, opsetVersion: number): string =>\r\n    'fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {' + (() => {\r\n      switch (nearestMode) {\r\n        case 'round_prefer_ceil':\r\n          return 'if (fract(xOriginal) == 0.5) { \\\r\n            return ceil(xOriginal); \\\r\n          } else { \\\r\n            return round(xOriginal); \\\r\n          }';\r\n        case 'floor':\r\n          return 'return floor(xOriginal);';\r\n        case 'ceil':\r\n          return 'return ceil(xOriginal);';\r\n        case 'round_prefer_floor':\r\n          return 'if (fract(xOriginal) == 0.5) { \\\r\n                    return floor(xOriginal); \\\r\n                  } else { \\\r\n                    return round(xOriginal); \\\r\n                  }';\r\n        case 'simple':\r\n        default:\r\n          if (opsetVersion < 11) {\r\n            return 'if (isDownSample) \\\r\n                    { \\\r\n                      return ceil(xOriginal); \\\r\n                    } else { \\\r\n                      return xOriginal; \\\r\n                    }';\r\n          }\r\n          throw new Error(`Nearest mode ${nearestMode} is not supported`);\r\n      }\r\n    })() +\r\n    '}';\r\n\r\nconst updateRoI = (roi: readonly number[], axes: readonly number[], rank: number): number[] => {\r\n  const roiTmp = new Array(rank).fill(0).concat(new Array(rank).fill(1));\r\n  const roiLocal = roi.length === 0 ? roiTmp : roi.slice();\r\n  if (axes.length > 0) {\r\n    axes.forEach((v, i) => {\r\n      roiTmp[v] = roiLocal[i];\r\n      roiTmp[i + rank] = roiLocal[axes.length + i];\r\n    });\r\n    return roiTmp;\r\n  }\r\n  return roiLocal;\r\n};\r\n\r\nconst initOutputShape =\r\n    (inputShape: readonly number[], scales: readonly number[], sizes: readonly number[], axes: readonly number[]):\r\n        number[] => {\r\n          let outputShape: number[] = [];\r\n          if (sizes.length > 0) {\r\n            if (axes.length > 0) {\r\n              inputShape.forEach((v) => outputShape.push(v));\r\n              if (Math.max(...axes) > inputShape.length) {\r\n                throw new Error('axes is out of bound');\r\n              }\r\n              axes.forEach((v, i) => outputShape[v] = sizes[i]);\r\n            } else {\r\n              sizes.forEach((v) => outputShape.push(v));\r\n            }\r\n          } else {\r\n            if (scales.length === 0) {\r\n              throw new Error('Resize requires either scales or sizes.');\r\n            } else {\r\n              outputShape = inputShape.map((value, index) => Math.round(value * scales[index]));\r\n            }\r\n          }\r\n          return outputShape;\r\n        };\r\n\r\nconst adjustOutputShape =\r\n    (inputShape: readonly number[], outputShape: readonly number[], scales: number[], attributes: ResizeAttributes):\r\n        number[] => {\r\n          const scaleInPolicy = (() => {\r\n            switch (attributes.keepAspectRatioPolicy) {\r\n              case 'not_larger':\r\n                return attributes.axes.length > 0 ? Math.min(...attributes.axes.map(i => scales[i]), Number.MAX_VALUE) :\r\n                                                    Math.min(...scales, Number.MAX_VALUE);\r\n              case 'not_smaller':\r\n                return attributes.axes.length > 0 ? Math.max(...attributes.axes.map(i => scales[i]), Number.MIN_VALUE) :\r\n                                                    Math.max(...scales, Number.MIN_VALUE);\r\n              default:\r\n                throw new Error(`Keep aspect ratio policy ${attributes.keepAspectRatioPolicy} is not supported`);\r\n            }\r\n          })();\r\n          scales.fill(1.0, 0, scales.length);\r\n          const adjustedOutputShape = inputShape.slice();\r\n          if (attributes.axes.length > 0) {\r\n            attributes.axes.forEach((v) => scales[v] = scaleInPolicy);\r\n            attributes.axes.forEach((v) => adjustedOutputShape[v] = Math.round(inputShape[v] * scales[v]));\r\n          } else {\r\n            scales.fill(scaleInPolicy, 0, scales.length);\r\n            adjustedOutputShape.forEach((v, i) => adjustedOutputShape[i] = Math.round(v * scales[i]));\r\n          }\r\n          return adjustedOutputShape;\r\n        };\r\n\r\nconst calculateOriginalIndicesFromOutputIndices =\r\n    (output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[], scales: readonly number[],\r\n     roi: readonly number[]): string => `\r\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> array<f32, ${\r\n        outputShape.length}> {\r\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n      const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\r\n      const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\r\n      const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\r\n      var originalIndices: array<f32, ${outputShape.length}>;\r\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\r\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\r\n        if (scales[i] == 1.0) {\r\n          originalIndices[i] = f32(outputIndex);\r\n        } else {\r\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\r\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\r\n        }\r\n      }\r\n      return originalIndices;\r\n    }`;\r\n\r\nconst calculateInputIndicesFromOutputIndices =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\r\n     scales: readonly number[], roi: readonly number[], useExtrapolation: boolean): string => `\r\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\r\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n        const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\r\n        const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\r\n        const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\r\n        var inputIndices: ${input.type.indices};\r\n        for (var i:u32 = 0; i < ${outputShape.length}; i++) {\r\n          var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\r\n          var inputIndex: u32;\r\n          if (scales[i] == 1.0) {\r\n            inputIndex = outputIndex;\r\n          } else {\r\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\r\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\r\n            if (!${useExtrapolation} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\r\n              if (original_idx < 0) {\r\n                inputIndex = 0;\r\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\r\n                inputIndex = inputShape[i] - 1;\r\n              } else {\r\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\r\n              }\r\n            } else {\r\n              inputIndex = u32(original_idx);\r\n            }\r\n          }\r\n          ${input.indicesSet('inputIndices', 'i', 'inputIndex')}\r\n        }\r\n        return inputIndices;\r\n    }`;\r\n\r\nconst checkInputIndices = (input: IndicesHelper, inputShape: readonly number[]): string => `\r\n    fn checkInputIndices(inputIndices: ${input.type.indices}) -> bool {\r\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n      for (var i:u32 = 0; i < ${inputShape.length}; i++) {\r\n        var inputIndex = ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'};\r\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }`;\r\n\r\nconst bilinearInterpolation =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\r\n     scales: readonly number[], useExtrapolation: boolean, extrapolationValue: number): string => {\r\n      const [batchIdx, heightIdx, widthIdx, channelIdx] =\r\n          inputShape.length === 2 ? [-1, 0, 1, -1] : (scales[1] === 1.0 ? [0, 2, 3, 1] : [0, 1, 2, 3]);\r\n      return `\r\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\r\n      var inputIndices: ${input.type.indices};\r\n      inputIndices[${heightIdx}] = max(0, min(row, ${inputShape[heightIdx]} - 1));\r\n      inputIndices[${widthIdx}] = max(0, min(col, ${inputShape[widthIdx]} - 1));\r\n      if (${inputShape.length} > 2) {\r\n        inputIndices[${channelIdx}] = channel;\r\n        inputIndices[${batchIdx}] = batch;\r\n      };\r\n      return input[${input.indicesToOffset('inputIndices')}];\r\n    }\r\n\r\n    fn bilinearInterpolation(outputIndices: ${output.type.indices}) -> f32 {\r\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\r\n      var row:f32 = originalIndices[${heightIdx}];\r\n      var col:f32 = originalIndices[${widthIdx}];\r\n      if (${useExtrapolation} && (row < 0 || row > (${inputShape[heightIdx]} - 1) || col < 0 || col > ${\r\n          inputShape[widthIdx]} - 1)) {\r\n        return ${extrapolationValue};\r\n      }\r\n      row = max(0, min(row, ${inputShape[heightIdx]} - 1));\r\n      col = max(0, min(col, ${inputShape[widthIdx]} - 1));\r\n      var row1: u32 = u32(row);\r\n      var col1: u32 = u32(col);\r\n      var row2: u32 = u32(row + 1);\r\n      var col2: u32 = u32(col + 1);\r\n      var channel: u32 = 0;\r\n      var batch: u32 = 0;\r\n      if (${inputShape.length > 2}) {\r\n        channel = u32(originalIndices[${channelIdx}]);\r\n        batch = u32(originalIndices[${batchIdx}]);\r\n      }\r\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\r\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\r\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\r\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\r\n      var dx1: f32 = row - f32(row1);\r\n      var dx2: f32 = f32(row2 ) - row;\r\n      var dy1 = col - f32(col1);\r\n      var dy2 = f32(col2) - col;\r\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\r\n    }`;\r\n    };\r\n\r\nconst bicubicInterpolation =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\r\n     scales: readonly number[], roi: readonly number[], cubicCoeffA: number, useExtrapolation: boolean,\r\n     extrapolationValue: number, excludeOutside: boolean): string => {\r\n      const [heightIdx, widthIdx] = inputShape.length === 2 ? [0, 1] : (scales[1] === 1.0) ? [2, 3] : [1, 2];\r\n\r\n      const createCubicInterpolationFunction = (idx: number): string => {\r\n        const direction = idx === heightIdx ? 'row' : 'col';\r\n        return `\r\n      fn ${direction}CubicInterpolation(inputIndices: ${input.type.indices}, outputIndices: ${\r\n            output.type.indices}) -> f32 {\r\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : `outputIndices[${idx}]`};\r\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${scales[idx]},\r\n        f32(${outputShape[idx]}), f32(${inputShape[idx]}), ${roi[idx]}, ${roi[idx]} + ${inputShape.length});\r\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\r\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\r\n\r\n        if (${useExtrapolation} && (originalIdx < 0 || originalIdx > (${inputShape[idx]} - 1))) {\r\n          return ${extrapolationValue};\r\n        }\r\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\r\n        for (var i: i32 = -1; i < 3; i++) {\r\n          var ${direction}: f32 = originalIdx + f32(i);\r\n          if (${direction} < 0 || ${direction} >= ${inputShape[idx]}) {\r\n            if (${excludeOutside}) {\r\n              coefs[i + 1] = 0.0;\r\n              continue;\r\n            } else if (${useExtrapolation}) {\r\n              return ${extrapolationValue};\r\n            } else {\r\n              ${direction} = max(0, min(${direction}, ${inputShape[idx]} - 1));\r\n            }\r\n          }\r\n          var inputIndicesCopy: ${input.type.indices} = inputIndices;\r\n          inputIndicesCopy[${idx}] = u32(${direction});\r\n          data[i + 1] = ${idx === heightIdx ? `input[${input.indicesToOffset('inputIndicesCopy')}];` : `\r\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\r\n        }\r\n        return cubicInterpolation1D(data, coefs);\r\n      }`;\r\n      };\r\n\r\n      return `\r\n    ${createCubicInterpolationFunction(heightIdx)};\r\n    ${createCubicInterpolationFunction(widthIdx)};\r\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\r\n    var absS = abs(s);\r\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\r\n    var oneMinusAbsS: f32 = 1.0 - absS;\r\n    var twoMinusAbsS: f32 = 2.0 - absS;\r\n    var onePlusAbsS: f32 = 1.0 + absS;\r\n    coeffs[0] = ((${cubicCoeffA} * onePlusAbsS - 5 * ${cubicCoeffA}) * onePlusAbsS + 8 * ${\r\n          cubicCoeffA}) * onePlusAbsS - 4 * ${cubicCoeffA};\r\n    coeffs[1] = ((${cubicCoeffA} + 2) * absS - (${cubicCoeffA} + 3)) * absS * absS + 1;\r\n    coeffs[2] = ((${cubicCoeffA} + 2) * oneMinusAbsS - (${cubicCoeffA} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\r\n    coeffs[3] = ((${cubicCoeffA} * twoMinusAbsS - 5 * ${cubicCoeffA}) * twoMinusAbsS + 8 * ${\r\n          cubicCoeffA}) * twoMinusAbsS - 4 * ${cubicCoeffA};\r\n    return coeffs;\r\n  }\r\n\r\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\r\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\r\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\r\n  }\r\n\r\n  fn bicubicInterpolation(outputIndices: ${output.type.indices}) -> f32 {\r\n    var inputIndices: ${input.type.indices} = outputIndices;\r\n    return colCubicInterpolation(inputIndices, outputIndices);\r\n  }\r\n    `;\r\n    };\r\n\r\nconst createResizeProgramInfo =\r\n    (metadata: ProgramMetadata, inputTensor: TensorView, attributes: ResizeAttributes, opsetVersion: number,\r\n     scalesInput: readonly number[], sizes: readonly number[], roiInput: readonly number[]): ProgramInfo => {\r\n      const inputShape = inputTensor.dims;\r\n      const roi = updateRoI(roiInput, attributes.axes, inputShape.length);\r\n\r\n      let outputShape = initOutputShape(inputShape, scalesInput, sizes, attributes.axes);\r\n      let scales = scalesInput.slice();\r\n      if (scalesInput.length === 0) {\r\n        scales = inputShape.map((value, index) => value === 0 ? 1.0 : outputShape[index] / value);\r\n        if (attributes.keepAspectRatioPolicy !== 'stretch') {\r\n          outputShape = adjustOutputShape(inputShape, outputShape, scales, attributes);\r\n        }\r\n      }\r\n      const output = outputVariable('output', inputTensor.dataType, outputShape);\r\n      const input = inputVariable('input', inputTensor.dataType, inputShape);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const noScale = inputShape.length === outputShape.length && inputShape.every((d, i) => d === outputShape[i]);\r\n      const useExtrapolation = attributes.coordinateTransformMode === 'tf_crop_and_resize';\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      ${getOriginalCoordinateFromResizedCoordinate(attributes.coordinateTransformMode)};\r\n      ${(() => {\r\n        switch (attributes.mode) {\r\n          case 'nearest':\r\n            return `\r\n              ${checkInputIndices(input, inputShape)};\r\n              ${getNearestPixelFromOriginal(attributes.nearestMode, opsetVersion)};\r\n              ${\r\n                calculateInputIndicesFromOutputIndices(\r\n                    input, output, inputShape, outputShape, scales, roi, useExtrapolation)};\r\n              `;\r\n          case 'linear':\r\n            return `\r\n              ${calculateOriginalIndicesFromOutputIndices(output, inputShape, outputShape, scales, roi)};\r\n              ${\r\n                bilinearInterpolation(\r\n                    input, output, inputShape, outputShape, scales, useExtrapolation, attributes.extrapolationValue)};\r\n              `;\r\n          case 'cubic':\r\n            return `\r\n            ${\r\n                bicubicInterpolation(\r\n                    input, output, inputShape, outputShape, scales, roi, attributes.cubicCoeffA, useExtrapolation,\r\n                    attributes.extrapolationValue, attributes.excludeOutside)};\r\n            `;\r\n          default:\r\n            throw Error('Invalid resize mode');\r\n        }\r\n      })()};\r\n      ${shaderHelper.declareVariables(input, output)}\r\n      ${shaderHelper.mainStart()}\r\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n        if (${noScale}) {\r\n          output[global_idx] = input[global_idx];\r\n        } else {\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n          var inputIndices: ${input.type.indices};\r\n          ${(() => {\r\n        switch (attributes.mode) {\r\n          case 'nearest':\r\n            return `inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\r\n                  if (checkInputIndices(inputIndices)) {\r\n                    output[global_idx] = input[${input.indicesToOffset('inputIndices')}];\r\n                  } else {\r\n                    output[global_idx] = ${attributes.extrapolationValue};\r\n                  }`;\r\n          case 'linear':\r\n            return 'output[global_idx] = bilinearInterpolation(outputIndices);';\r\n          case 'cubic':\r\n            return 'output[global_idx] = bicubicInterpolation(outputIndices);';\r\n          default:\r\n            throw Error(`Unsupported resize mode: ${attributes.mode}`);\r\n        }\r\n      })()};\r\n        }\r\n      }`;\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const createResizeProgramInfoLoader =\r\n    (input: TensorView, attributes: ResizeAttributes, opsetVersion: number, scales: readonly number[],\r\n     sizes: readonly number[], roi: readonly number[]): ProgramInfoLoader => {\r\n      const metadata: ProgramMetadata = {\r\n        name: 'Resize',\r\n        inputTypes: [GpuDataType.default],\r\n        cacheHint: attributes.cacheKey + opsetVersion.toString() +\r\n            (scales.length > 0 ? '_scales_' + scales.toString() : '') +\r\n            (sizes.length > 0 ? '_sizes_' + sizes.toString() : ''),\r\n      };\r\n      return {\r\n        ...metadata,\r\n        get: () => createResizeProgramInfo(metadata, input, attributes, opsetVersion, scales, sizes, roi)\r\n      };\r\n    };\r\n\r\nconst getOpsetVersionFromCustomDataBuffer = (context: ComputeContext): number => {\r\n  const customDataBuffer = context.customDataBuffer;\r\n  const customDataBuffer32 = new Uint32Array(customDataBuffer, customDataBuffer.byteOffset, 1);\r\n  const opsetVersion = customDataBuffer32[0];\r\n  return opsetVersion;\r\n};\r\n\r\nexport const resize = (context: ComputeContext, attributes: ResizeAttributes): void => {\r\n  const scales: number[] = [];\r\n  const sizes: number[] = [];\r\n  const roi: number[] = [];\r\n  const opsetVersion = getOpsetVersionFromCustomDataBuffer(context);\r\n  validateInputs(context.inputs, attributes, opsetVersion, scales, sizes, roi);\r\n  context.compute(\r\n      createResizeProgramInfoLoader(context.inputs[0], attributes, opsetVersion, scales, sizes, roi), {inputs: [0]});\r\n};\r\n\r\nexport const parseResizeAttributes = (attributes: Record<string, unknown>): ResizeAttributes => {\r\n  const antialias = attributes.antialias as number;\r\n  const axes = attributes.axes as number[];\r\n  const coordinateTransformMode: CoordinateTransformMode =\r\n      attributes.coordinateTransformMode as CoordinateTransformMode;\r\n  const cubicCoeffA = attributes.cubicCoeffA as number;\r\n  const excludeOutside = attributes.excludeOutside as number !== 0;\r\n  const extrapolationValue = attributes.extrapolationValue as number;\r\n  const keepAspectRatioPolicy: KeepAspectRatioPolicy = attributes.keepAspectRatioPolicy as KeepAspectRatioPolicy;\r\n  const mode: Mode = attributes.mode as Mode;\r\n  // If nearestMode is not specified, use simple mode.\r\n  const nearestMode: NearestMode = (attributes.nearestMode === '' ? 'simple' : attributes.nearestMode) as NearestMode;\r\n  return createAttributeWithCacheKey({\r\n    antialias,\r\n    axes,\r\n    coordinateTransformMode,\r\n    cubicCoeffA,\r\n    excludeOutside,\r\n    extrapolationValue,\r\n    keepAspectRatioPolicy,\r\n    mode,\r\n    nearestMode\r\n  });\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\r\n\r\nexport interface SkipLayerNormAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 3) {\r\n    throw new Error('layerNorm requires at least 3 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n  const input: TensorView = inputs[0];\r\n  const skip: TensorView = inputs[1];\r\n  const gamma: TensorView = inputs[2];\r\n\r\n  if (input.dataType !== skip.dataType || input.dataType !== gamma.dataType) {\r\n    throw new Error('All inputs must have the same data type');\r\n  }\r\n\r\n  if (input.dims.length !== 3 && input.dims.length !== 2) {\r\n    throw new Error('Input must be 2D or 3D');\r\n  }\r\n\r\n  if (skip.dims.length !== 3 && skip.dims.length !== 2) {\r\n    throw new Error('Skip must be 2D or 3D');\r\n  }\r\n\r\n  const hiddenSize = input.dims[input.dims.length - 1];\r\n  const sequenceLength = input.dims[input.dims.length - 2];\r\n  if (skip.dims[skip.dims.length - 1] !== hiddenSize) {\r\n    throw new Error('Skip must have the same hidden size as input');\r\n  }\r\n  if (skip.dims[skip.dims.length - 2] !== sequenceLength) {\r\n    throw new Error('Skip must have the same sequence length as input');\r\n  }\r\n\r\n  if (gamma.dims.length !== 1) {\r\n    throw new Error('Gamma must be 1D');\r\n  }\r\n  if (gamma.dims[gamma.dims.length - 1] !== hiddenSize) {\r\n    throw new Error('Gamma must have the same hidden size as input');\r\n  }\r\n  if (inputs.length > 3) {\r\n    const beta: TensorView = inputs[3];\r\n    if (beta.dims.length !== 1) {\r\n      throw new Error('Beta must be 1D');\r\n    }\r\n    if (beta.dims[beta.dims.length - 1] !== hiddenSize) {\r\n      throw new Error('Beta must have the same hidden size as input');\r\n    }\r\n  }\r\n\r\n  if (inputs.length > 4) {\r\n    const bias: TensorView = inputs[4];\r\n    if (bias.dims.length !== 1) {\r\n      throw new Error('Bias must be 1D');\r\n    }\r\n    if (bias.dims[bias.dims.length - 1] !== hiddenSize) {\r\n      throw new Error('Bias must have the same hidden size as input');\r\n    }\r\n  }\r\n};\r\n\r\nconst createSkipLayerNormProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number,\r\n     isTraining: boolean): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const inputSize = ShapeUtil.size(inputShape);\r\n      const outputShape = inputShape;\r\n      const outputSize = inputSize;\r\n      const hiddenSize = inputShape.slice(-1)[0];\r\n      const meanInvStdDevDim = isTraining ? inputShape.slice(0, -1).concat(1) : [];\r\n      const hasBetaInput = inputs.length > 3;\r\n      const hasBiasInput = inputs.length > 4;\r\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n      const hasMeanOutput = isTraining && outputCount > 1;\r\n      const hasInvStdDevOutput = isTraining && outputCount > 2;\r\n      const hasInputSkipBiasSumOutput = outputCount > 3;\r\n      let bindingNumber = 0;\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      const hiddenSize: u32 = ${hiddenSize};\r\n      const epsilon: f32 = ${attributes.epsilon};\r\n\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read> x : array<${dataType}>;\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read> skip : array<${dataType}>;\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read> gamma : array<${dataType}>;\r\n      ${hasBetaInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> beta : array<${dataType}>;` : ''}\r\n      ${hasBiasInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> bias : array<${dataType}>;` : ''}\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read_write> output : array<${dataType}>;\r\n      ${\r\n          hasMeanOutput ?\r\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> meanOutput : array<${dataType}>;` :\r\n              ''}\r\n      ${\r\n          hasInvStdDevOutput ?\r\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> invStdOutput : array<${dataType}>;` :\r\n              ''}\r\n      ${\r\n          hasInputSkipBiasSumOutput ?\r\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> inputSkipBiasSum : array<${dataType}>;` :\r\n              ''}\r\n\r\n      ${shaderHelper.mainStart()}\r\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize / hiddenSize)}\r\n        let offset = global_idx * hiddenSize;\r\n        var sum: f32 = 0.0;\r\n        var squareSum: f32 = 0.0;\r\n        for (var i: u32 = 0; i < hiddenSize; i++) {\r\n          let skipValue = skip[offset + i];\r\n          let biasValue = ${hasBiasInput ? 'bias[i]' : '0.0'};\r\n          let inputValue = x[offset + i];\r\n          let value = inputValue + skipValue + biasValue;\r\n          ${hasInputSkipBiasSumOutput ? 'inputSkipBiasSum[offset + i] = value;' : ''}\r\n          output[offset + i] = value;\r\n          sum += value;\r\n          squareSum += value * value;\r\n        }\r\n        let mean: f32 = sum / f32(hiddenSize);\r\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\r\n        ${hasMeanOutput ? 'meanOutput[global_idx] = mean;' : ''}\r\n        ${hasInvStdDevOutput ? 'invStdOutput[global_idx] = 1.0 / variance;' : ''}\r\n        for (var i: u32 = 0; i < hiddenSize; i++) {\r\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + ${hasBetaInput ? 'beta[i]' : '0.0'};\r\n        }\r\n      }`;\r\n      const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\r\n      if (outputCount > 1) {\r\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n      if (outputCount > 2) {\r\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n      if (outputCount > 3) {\r\n        outputs.push({dims: inputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / hiddenSize / 64)})\r\n      };\r\n    };\r\n\r\nconst createSkipLayerNormProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number, isTraining: boolean):\r\n        ProgramInfoLoader => {\r\n          const inputTypes = new Array(inputs.length).fill(GpuDataType.default);\r\n          const metadata: ProgramMetadata = {\r\n            name: 'SkipLayerNormalization',\r\n            inputTypes,\r\n            cacheHint: attributes.cacheKey,\r\n          };\r\n          return {\r\n            ...metadata,\r\n            get: () => createSkipLayerNormProgramInfo(metadata, inputs, attributes, outputCount, isTraining)\r\n          };\r\n        };\r\n\r\nexport const skipLayerNorm = (context: ComputeContext, attributes: SkipLayerNormAttributes): void => {\r\n  // TODO: initialize isTraining from ComputeContext\r\n  const isTraining = false;\r\n  validateInputs(context.inputs);\r\n  // Mean and InvStdDev are only used in training mode and are not required for inference.\r\n  // They are added here for completeness only.\r\n  const outputs = [0];\r\n  if (context.outputCount > 1) {\r\n    outputs.push(isTraining ? 1 : -3);\r\n  }\r\n  if (context.outputCount > 2) {\r\n    outputs.push(isTraining ? 2 : -3);\r\n  }\r\n  if (context.outputCount > 3) {\r\n    outputs.push(3);\r\n  }\r\n  context.compute(\r\n      createSkipLayerNormProgramInfoLoader(context.inputs, attributes, context.outputCount, isTraining), {outputs});\r\n};\r\n\r\nexport const parseSkipLayerNormAttributes = (attributes: Record<string, unknown>): SkipLayerNormAttributes => {\r\n  const epsilon = attributes.epsilon as number;\r\n  return createAttributeWithCacheKey({epsilon});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly starts: number[];\r\n  readonly ends: number[];\r\n  readonly axes: number[];\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n  if (attributes.axes.length !== 0) {\r\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\r\n      throw new Error('axes, starts and ends must have the same length');\r\n    }\r\n  } else if (attributes.starts.length !== attributes.ends.length) {\r\n    throw new Error('starts and ends must have the same length');\r\n  }\r\n  inputs.slice(1).forEach((_, idx) => {\r\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\r\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\r\n    }\r\n  });\r\n};\r\n\r\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\r\n  const input: number[] = [];\r\n  if (inputs.length > idx) {\r\n    if (inputs[idx].dataType === DataType.int64) {\r\n      inputs[idx].getBigInt64Array().forEach(v => input.push(Number(v)));\r\n    } else if (inputs[idx].dataType === DataType.int32) {\r\n      inputs[idx].getInt32Array().forEach(v => input.push(Number(v)));\r\n    } else {\r\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\r\n    }\r\n  }\r\n  return input;\r\n};\r\n\r\nconst createSliceAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: SliceAttributes): SliceAttributes => {\r\n      if (inputs.length > 1) {\r\n        const starts: number[] = readInput(inputs, 1);\r\n        const ends: number[] = readInput(inputs, 2);\r\n        let axes: number[] = readInput(inputs, 3);\r\n        if (axes.length === 0) {\r\n          axes = [...Array(inputs[0].dims.length).keys()];\r\n        }\r\n        return createAttributeWithCacheKey({starts, ends, axes});\r\n      } else {\r\n        return attributes;\r\n      }\r\n    };\r\n\r\nconst fixStartEndValues =\r\n    (value: number, index: number, inputShape: readonly number[], axes: readonly number[], steps: readonly number[]):\r\n        number => {\r\n          let newValue = value;\r\n          if (value < 0) {\r\n            newValue += inputShape[axes[index]];\r\n          }\r\n          if (steps[index] < 0) {\r\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\r\n          } else {\r\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\r\n          }\r\n        };\r\n\r\nconst calculateInputIndicesImpl =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[]):\r\n        string => `fn calculateInputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\r\n          var inputIndices: ${input.type.indices};\r\n          var carry = 0u;\r\n          for (var i = ${inputShape.length}; i >= 0; i--) {\r\n            var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\r\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\r\n            carry = inputIndex / inputShape[i];\r\n            inputIndex = inputIndex % inputShape[i];\r\n            if (signs[i] < 0) {\r\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\r\n            }\r\n            ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'} = inputIndex;\r\n          }\r\n          return inputIndices;\r\n      }`;\r\n\r\nconst createSliceProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const inputSize = ShapeUtil.size(inputShape);\r\n      const axes = (attributes.axes.length > 0) ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length) :\r\n                                                  [...Array(inputShape.length).keys()];\r\n      let steps = readInput(inputs, 4);\r\n      steps.forEach((step) => step !== 0 || (() => {\r\n                                throw new Error('step cannot be 0');\r\n                              }));\r\n      if (steps.length === 0) {\r\n        steps = Array(axes.length).fill(1);\r\n      }\r\n      const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\r\n\r\n      const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\r\n\r\n      if (axes.length !== inputShape.length) {\r\n        for (let i = 0; i < inputShape.length; ++i) {\r\n          if (!axes.includes(i)) {\r\n            starts.splice(i, 0, 0);\r\n            ends.splice(i, 0, inputShape[i]);\r\n            steps.splice(i, 0, 1);\r\n          }\r\n        }\r\n      }\r\n      const signs = steps.map(step => Math.sign(step));\r\n      // Convert negative steps to positive steps and reverse starts and ends\r\n      steps.forEach((step, i, array) => {\r\n        if (step < 0) {\r\n          const numSteps = (ends[i] - starts[i]) / step;\r\n          const newEnd = starts[i];\r\n          const newStart = newEnd + numSteps * steps[i];\r\n          starts[i] = newStart;\r\n          ends[i] = newEnd;\r\n          array[i] = -step;\r\n        }\r\n      });\r\n\r\n      const outputShape = inputShape.slice(0);\r\n      axes.forEach((axis, _) => {\r\n        outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\r\n      });\r\n\r\n      const outputTensorInfo:\r\n          TensorInfo = {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default};\r\n\r\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\r\n      const input = inputVariable('input', inputs[0].dataType, inputShape);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      ${shaderHelper.declareVariables(input, output)}\r\n        const signs = array<i32, ${signs.length}>(${signs.map(i => `${i}i`).join(',')});\r\n        const starts = array<u32, ${starts.length}>(${starts.map(i => `${i}u`).join(',')});\r\n        const ends = array<u32, ${ends.length}>(${ends.map(i => `${i}u`).join(',')});\r\n        const steps = array<u32, ${steps.length}>(${steps.map(i => `${i}u`).join(',')});\r\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n\r\n        ${calculateInputIndicesImpl(input, output, inputShape, outputShape)}\r\n        ${shaderHelper.mainStart()}\r\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n          let inputIndices = calculateInputIndices(outputIndices);\r\n          ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: [outputTensorInfo],\r\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createSliceProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfoLoader => {\r\n      const updatedAttributes = createSliceAttributesFromInputs(inputs, attributes);\r\n      const metadata: ProgramMetadata = {\r\n        name: 'Slice',\r\n        inputTypes: [GpuDataType.default],\r\n        cacheHint: updatedAttributes.cacheKey + (inputs.length > 4 ? 'steps_' + inputs[4].dims.toString() : '')\r\n      };\r\n      return {...metadata, get: () => createSliceProgramInfo(metadata, inputs, updatedAttributes)};\r\n    };\r\n\r\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\r\n  validateInputs(context.inputs, attributes);\r\n  const programInfoLoader = createSliceProgramInfoLoader(context.inputs, attributes);\r\n  const program = programInfoLoader.get();\r\n  if (ShapeUtil.size(program.outputs[0].dims) > 0) {\r\n    context.compute(programInfoLoader, {inputs: [0]});\r\n  } else {\r\n    // TODO: support empty output\r\n    throw new Error('slice: output size is 0');\r\n  }\r\n};\r\n\r\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\r\n  const starts = attributes.starts as number[];\r\n  const ends = attributes.ends as number[];\r\n  const axes = attributes.axes as number[];\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// TODO: this is the same naive implementation we use for reduce that has\r\n// performance limitations when the reduced axis is long. Need to add\r\n// a optimized codepath for this.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax op requires 1 input.');\r\n  }\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Softmax input needs to be float.');\r\n  }\r\n};\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const softmaxProgramMetadata = {\r\n  name: 'Softmax',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\n\r\nconst createSoftmaxProgramInfo = (input: TensorView, attributes: SoftmaxAttributes): ProgramInfo => {\r\n  const dataType = 'f32';\r\n  const shape = input.dims;\r\n  const outputSize = ShapeUtil.size(shape);\r\n  const WG = 64;\r\n  let axis = attributes.axis;\r\n  if (axis < 0) {\r\n    axis = shape.length + axis;\r\n  }\r\n  if (axis < shape.length - 1) {\r\n    throw new Error('softmax only supports last axis for now.');\r\n  }\r\n\r\n  const cols = shape[axis];\r\n  const rows = outputSize / cols;\r\n\r\n  const getShaderSource = (_shaderHelper: ShaderHelper) => `\r\n      var<workgroup> rowMaxShared : ${dataType};\r\n      var<workgroup> rowSumShared : ${dataType};\r\n      var<workgroup> threadShared : array<${dataType}, ${WG}>;\r\n\r\n      @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\r\n      @group(0) @binding(1) var<storage, read_write> result : array<${dataType}>;\r\n\r\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${dataType} {\r\n        let index = row * row_stride + col;\r\n        return x[index];\r\n      }\r\n\r\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${dataType}) {\r\n        let index = row * row_stride + col;\r\n        result[index] = value;\r\n      }\r\n\r\n      @compute @workgroup_size(${WG}, 1, 1)\r\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\r\n        let gindex = i32(global_id.x);\r\n        let lindex = i32(local_id.x);\r\n        const wg = ${WG};\r\n        let row = gindex / wg;\r\n        let cols = ${cols};\r\n        let row_stride : i32 = ${cols};\r\n\r\n        // find the rows max\r\n        var threadMax = -3.402823e+38f; // 6.2.4 in wgsl spec\r\n        for (var col = lindex; col < cols; col += wg) {\r\n          let value = getValue(row, col, row_stride);\r\n          threadMax = max(threadMax, value);\r\n        }\r\n        if (lindex < cols) {\r\n          threadShared[lindex] = threadMax;\r\n        }\r\n        workgroupBarrier();\r\n\r\n        var reduceSize = min(cols, wg);\r\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\r\n          reduceSize = currSize + (reduceSize & 1);\r\n          if (lindex < currSize) {\r\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\r\n          }\r\n          workgroupBarrier();\r\n        }\r\n        if (lindex == 0) {\r\n          rowMaxShared = threadShared[0];\r\n        }\r\n        workgroupBarrier();\r\n\r\n        // find the rows sum\r\n        var threadSum = 0.0;\r\n        for (var col = lindex; col < cols; col += wg) {\r\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\r\n          threadSum += subExp;\r\n        }\r\n        threadShared[lindex] = threadSum;\r\n        workgroupBarrier();\r\n\r\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\r\n          if (lindex < currSize) {\r\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\r\n          }\r\n          workgroupBarrier();\r\n        }\r\n        if (lindex == 0) {\r\n          rowSumShared = threadShared[0];\r\n        }\r\n        workgroupBarrier();\r\n\r\n        // calculate final value for each element in the row\r\n        for (var col = lindex; col < cols; col += wg) {\r\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\r\n          setValue(row, col, row_stride, value);\r\n        }\r\n      }`;\r\n  return {\r\n    ...softmaxProgramMetadata,\r\n    outputs: [{dims: shape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\r\n    getShaderSource,\r\n    dispatchGroup: () => ({x: rows})\r\n  };\r\n};\r\n\r\n\r\nexport const softmax = (context: ComputeContext, attributes: SoftmaxAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute({\r\n    ...softmaxProgramMetadata,\r\n    cacheHint: attributes.cacheKey,\r\n    get: () => createSoftmaxProgramInfo(context.inputs[0], attributes)\r\n  });\r\n};\r\n\r\nexport const parseSoftmaxAttributes = (attributes: Record<string, unknown>): SoftmaxAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis as number});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly numOutputs: number;\r\n  readonly splitSizes: number[];\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n};\r\n\r\nconst createSplitAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: SplitAttributes): SplitAttributes => {\r\n      const splitSizes: number[] = [];\r\n      let numOutputs: number = attributes.numOutputs;\r\n      if (inputs[1].dims[0] > 0) {\r\n        inputs[1].getBigInt64Array().forEach(v => splitSizes.push(Number(v)));\r\n        numOutputs = splitSizes.length;\r\n      }\r\n      return createAttributeWithCacheKey({numOutputs, axis: attributes.axis, splitSizes});\r\n    };\r\n\r\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\r\nfn calculateOutputIndex(index: u32) -> u32 {\r\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\r\n    if (index < sizeInConcatAxis[i]) {\r\n        return i;\r\n    }\r\n    }\r\n    return ${numberOfTensors}u;\r\n}`;\r\nconst writeBufferDataImpl = (outputs: readonly IndicesHelper[]) => {\r\n  const numberOfTensors = outputs.length;\r\n  const codeLines: string[] = [];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    const returnSnippet = outputs[i].setByIndices('indices', 'input[global_idx]');\r\n    if (numberOfTensors === 1) {\r\n      codeLines.push(returnSnippet);\r\n    } else if (i === 0) {\r\n      codeLines.push(`if (outputNumber == ${i}u) { ${returnSnippet} }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(`else { ${returnSnippet} }`);\r\n    } else {\r\n      codeLines.push(`else if (outputNumber == ${i}) { ${returnSnippet} }`);\r\n    }\r\n  }\r\n  return `\r\n      fn writeBufferData(outputNumber: u32, indices: ${outputs[0].type.indices}, global_idx: u32) {\r\n        ${codeLines.join('\\n')}\r\n      }`;\r\n};\r\n\r\nconst createSplitProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const inputSize = ShapeUtil.size(inputShape);\r\n      const dataType = inputs[0].dataType;\r\n      const rank = inputShape.length;\r\n      const axis = attributes.axis;\r\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\r\n      const outputs = new Array<IndicesHelper>(attributes.numOutputs);\r\n      const input = inputVariable('input', dataType, inputShape);\r\n      const sizeInConcatAxis = new Array<number>(attributes.numOutputs);\r\n      const outputsTensorInfo: TensorInfo[] = [];\r\n      const outputShapes: number[][] = [];\r\n      let previousSum = 0;\r\n      for (let i = 0; i < attributes.numOutputs; i++) {\r\n        previousSum += attributes.splitSizes[i];\r\n        sizeInConcatAxis[i] = previousSum;\r\n        const outputShape = inputShape.slice();\r\n        outputShape[attributes.axis] = attributes.splitSizes[i];\r\n        outputShapes.push(outputShape);\r\n        outputs[i] = outputVariable(`output${i}`, dataType, outputShapes[i]);\r\n        outputsTensorInfo.push({dims: outputShapes[i], dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n      const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  ${shaderHelper.declareVariables(input, ...outputs)}\r\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\r\n  ${calculateOutputIndexImpl(sizeInConcatAxis.length)}\r\n  ${writeBufferDataImpl(outputs)}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(inputSize)}\r\n\r\n    var indices = ${input.offsetToIndices('global_idx')};\r\n    let outputNumber = calculateOutputIndex(${indicesAxis});\r\n    if (outputNumber != 0) {\r\n        ${indicesAxis} -= sizeInConcatAxis[outputNumber - 1u];\r\n    }\r\n    writeBufferData(outputNumber, indices, global_idx);\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: outputsTensorInfo,\r\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createSplitProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfoLoader => {\r\n      const updatedAttributes = inputs.length === 1 ? attributes : createSplitAttributesFromInputs(inputs, attributes);\r\n      const metadata:\r\n          ProgramMetadata = {name: 'Split', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\r\n      return {...metadata, get: () => createSplitProgramInfo(metadata, [inputs[0]], updatedAttributes)};\r\n    };\r\n\r\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute(createSplitProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\r\n};\r\n\r\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\r\n  const axis = attributes.axis as number;\r\n  const splitSizes: number[] = attributes.splitSizes as number[];\r\n  const numOutputs = attributes.numOutputs as number < 0 ? splitSizes.length : attributes.numOutputs as number;\r\n  if (numOutputs !== splitSizes.length) {\r\n    throw new Error('numOutputs and splitSizes lengh must be equal');\r\n  }\r\n  return createAttributeWithCacheKey({axis, numOutputs, splitSizes});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport const tileProgramMetadata = {\r\n  name: 'Tile',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\nconst getRepeats = (repeatsTensorView: TensorView): readonly number[] =>\r\n    Array.from(repeatsTensorView.getBigInt64Array(), Number);\r\n\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.int32 &&\r\n      inputs[0].dataType !== DataType.uint32) {\r\n    throw new Error('Tile only support float, int32, and uint32 data types');\r\n  }\r\n\r\n  if (inputs[1].dataType !== DataType.int64) {\r\n    throw new Error('Tile `repeats` input should be of int64 data type');\r\n  }\r\n\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('Tile `repeats` input should be 1-D');\r\n  }\r\n\r\n  const repeats: readonly number[] = getRepeats(inputs[1]);\r\n\r\n  if (repeats.length !== inputs[0].dims.length) {\r\n    throw new Error('Tile `repeats` input should have same number of elements as rank of input data tensor');\r\n  }\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], repeats: readonly number[]): readonly number[] => {\r\n  const outputShape: number[] = [];\r\n\r\n  for (let i = 0; i < inputShape.length; ++i) {\r\n    outputShape.push(inputShape[i] * repeats[i]);\r\n  }\r\n\r\n  return outputShape;\r\n};\r\n\r\nexport const createTileProgramInfo =\r\n    (tileProgramMetadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const repeats: readonly number[] = getRepeats(inputs[1]);\r\n      const outputShape = getOutputShape(inputShape, repeats);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const dataType = inputs[0].dataType;\r\n      const input = inputVariable('input', dataType, inputShape);\r\n      const output = outputVariable('output', dataType, outputShape);\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      const inputShape = ${input.indices(...inputShape)};\r\n      ${shaderHelper.declareVariables(input, output)}\r\n      ${shaderHelper.mainStart()}\r\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n      let outputIndices = ${output.offsetToIndices('global_idx')};\r\n      var inputIndices: ${input.type.indices};\r\n      for (var i = 0; i < ${inputShape.length}; i++) {\r\n        let inputDimValue = ${output.indicesGet('outputIndices', 'i')}  % ${input.indicesGet('inputShape', 'i')};\r\n\r\n        ${input.indicesSet('inputIndices', 'i', 'inputDimValue')}\r\n      }\r\n      ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\r\n    }`;\r\n\r\n      return {\r\n        ...tileProgramMetadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const tile = (context: ComputeContext): void => {\r\n  validateInputs(context.inputs);\r\n  const repeats: readonly number[] = getRepeats(context.inputs[1]);\r\n  const cacheHint = repeats.toString();\r\n  context.compute(\r\n      {...tileProgramMetadata, cacheHint, get: () => createTileProgramInfo(tileProgramMetadata, context.inputs)},\r\n      {inputs: [0]});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nexport const transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.int32 &&\r\n      inputs[0].dataType !== DataType.uint32) {\r\n    throw new Error('Transpose only support float, int32, and uint32 data types');\r\n  }\r\n};\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\r\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\r\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\r\n\r\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\r\n    var a: ${input.type.indices};`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(input.indicesSet('a', perm[i], `i[${i}]`));\r\n  }\r\n  reverseFunc.push('return a;}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nexport const createTransposeProgramInfo = (inputTensor: TensorView, permAttr: number[]): ProgramInfo => {\r\n  const dataType = inputTensor.dataType;\r\n  const inputShape = inputTensor.dims;\r\n  const perm = getAdjustedPerm(inputShape, permAttr);\r\n  const outputShape = getOutputShape(inputShape, perm);\r\n  const rank = inputShape.length;\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n  // A dims=[${inputs[0].dims.toString()}]\r\n  // out Dims=[${unpackedOutputShape.toString()}]\r\n  // based on perm=[${perm.toString()}]\r\n\r\n  const output = outputVariable('output', dataType, outputShape);\r\n  const input = inputVariable('a', dataType, inputShape);\r\n\r\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  ${shaderHelper.declareVariables(input, output)}\r\n\r\n  ${permFunctionBody(perm, rank, input, output)}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let indices = ${output.offsetToIndices('global_idx')};\r\n    let aIndices = perm(indices);\r\n\r\n    ${output.setByOffset('global_idx', input.getByIndices('aIndices'))}\r\n  }`;\r\n  return {\r\n    ...transposeProgramMetadata,\r\n    outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\r\n    getShaderSource,\r\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n  };\r\n};\r\n\r\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute({\r\n    ...transposeProgramMetadata,\r\n    cacheHint: attributes.cacheKey,\r\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\r\n  });\r\n};\r\n\r\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\r\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\ntype BuiltinFunctionName = string;\r\ntype ElementwiseCustomExpression = (expression: string) => string;\r\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\r\n\r\nconst createElementwiseProgramShader =\r\n    (shaderHelper: ShaderHelper, datasize: number, inputDataType: number, outputDataType: number,\r\n     funcCall: ElementwiseFunctionCall, additionalImplementation?: string): string => {\r\n      const vecSize = Math.ceil(datasize / 4);\r\n\r\n      let expression = '';\r\n      if (typeof funcCall === 'string') {\r\n        expression = `${funcCall}(a)`;\r\n      } else {\r\n        expression = funcCall('a');\r\n      }\r\n\r\n      const input = inputVariable('inputData', inputDataType, [vecSize], 4);\r\n      const output = outputVariable('outputData', outputDataType, [vecSize], 4);\r\n\r\n      return `\r\n  ${shaderHelper.declareVariables(input, output)}\r\n\r\n  ${additionalImplementation ?? ''}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\r\n\r\n    let a = ${input.getByOffset('global_idx')};\r\n    ${output.setByOffset('global_idx', expression)}\r\n  }`;\r\n    };\r\n\r\nconst createElementwiseProgramInfo =\r\n    (metadata: ProgramMetadata, input: TensorView, outputDataType: number, funcCall: ElementwiseFunctionCall,\r\n     additionalImplementation?: string): ProgramInfo => ({\r\n      ...metadata,\r\n      getShaderSource: shaderHelper => createElementwiseProgramShader(\r\n          shaderHelper, ShapeUtil.size(input.dims), input.dataType, outputDataType, funcCall, additionalImplementation),\r\n      outputs: [{dims: input.dims, dataType: outputDataType, gpuDataType: GpuDataType.default}],\r\n      dispatchGroup: (inputTensors) =>\r\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\r\n    });\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\r\n     cacheKey?: string, outputDataType: number = input.dataType): ProgramInfoLoader => {\r\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\r\n      return {\r\n        ...metadata,\r\n        get: () => createElementwiseProgramInfo(metadata, input, outputDataType, funcCall, additionalImplementation)\r\n      };\r\n    };\r\n\r\nexport const abs = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\r\n};\r\n\r\nexport const acos = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\r\n};\r\n\r\nexport const acosh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\r\n};\r\n\r\nexport const asin = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\r\n};\r\n\r\nexport const asinh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\r\n};\r\n\r\nexport const atan = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\r\n};\r\nexport const atanh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\r\n};\r\n\r\nexport interface CastAttributes extends AttributeWithCacheKey {\r\n  readonly to: number;\r\n  readonly saturate?: boolean;\r\n}\r\n\r\nexport const parseCastAttributes = (attributes: Record<string, unknown>): CastAttributes =>\r\n    createAttributeWithCacheKey(attributes as {to: number});\r\n\r\n\r\nexport const cast = (context: ComputeContext, attributes: CastAttributes): void => {\r\n  let func: ElementwiseFunctionCall;\r\n  switch (attributes.to) {\r\n    case DataType.float:\r\n      func = 'vec4<f32>';\r\n      break;\r\n    case DataType.uint32:\r\n      func = 'vec4<u32>';\r\n      break;\r\n    case DataType.int32:\r\n      func = 'vec4<i32>';\r\n      break;\r\n    case DataType.bool:\r\n      func = 'vec4<bool>';\r\n      break;\r\n    default:\r\n      throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${attributes.to}`);\r\n  }\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Cast', func, undefined, attributes.cacheKey, attributes.to));\r\n};\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\r\n  context.compute(\r\n      createElementwiseProgramInfoLoader(\r\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\r\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\r\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\r\n`,\r\n          attributes.cacheKey),\r\n      {inputs: [0]});\r\n};\r\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\r\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const clip = (context: ComputeContext): void => {\r\n  const attributes = generateClipAttributesFromInputs(context.inputs);\r\n  clipV10(context, attributes);\r\n};\r\n\r\nexport const ceil = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\r\n};\r\n\r\nexport const cos = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\r\n};\r\n\r\nexport const cosh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\r\n};\r\n\r\nexport interface AlphaAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\r\n    createAttributeWithCacheKey(attributes as {alpha: number});\r\n\r\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\r\n  const elu_alpha_: f32 = f32(${attributes.alpha});\r\n\r\n  fn elu_f32(a: f32) -> f32 {\r\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\r\n  }\r\n\r\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\r\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\r\n  }`,\r\n      attributes.cacheKey));\r\n};\r\n\r\nexport const erfImpl = (dataType: string) => `\r\nconst r0: f32 = 0.3275911;\r\nconst r1: f32 = 0.254829592;\r\nconst r2: f32 = -0.284496736;\r\nconst r3: f32 = 1.421413741;\r\nconst r4: f32 = -1.453152027;\r\nconst r5: f32 = 1.061405429;\r\n\r\nfn erf_vf32(v: ${dataType}) -> ${dataType} {\r\n  let absv = abs(v);\r\n  let x = 1.0 / (1.0 + r0 * absv);\r\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\r\n}`;\r\n\r\nexport const erf = (context: ComputeContext): void => {\r\n  context.compute(\r\n      createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, erfImpl('vec4<f32>')));\r\n};\r\n\r\nexport const exp = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\r\n};\r\n\r\nexport const floor = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\r\n};\r\n\r\nexport const gelu = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Gelu', a => `0.5 * ${a} * (1.0 + erf_vf32(${a} * 0.7071067811865475))`,\r\n      erfImpl('vec4<f32>')));\r\n};\r\n\r\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\r\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\r\n};\r\n\r\nexport const neg = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\r\n};\r\n\r\nexport const reciprocal = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\r\n};\r\n\r\nexport const relu = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\r\n};\r\n\r\nexport const sigmoid = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\r\n};\r\n\r\nexport const sin = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\r\n};\r\n\r\nexport const sinh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\r\n};\r\n\r\nexport const sqrt = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\r\n};\r\n\r\nexport const tan = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\r\n};\r\n\r\nexport const tanh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\r\n};\r\n\r\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\r\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\r\n  return 0;\r\n};\r\n\r\nexport const log = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Log', 'log'));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGpuBackend} from '../backend-webgpu';\r\nimport {LOG_DEBUG} from '../log';\r\n\r\nimport {createShaderHelper} from './ops/common';\r\nimport {Artifact, GpuData, ProgramInfo} from './types';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  attributesBound: boolean;\r\n\r\n  constructor(private backend: WebGpuBackend) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\r\n    const device = this.backend.device;\r\n    const computePassEncoder = this.backend.getComputePassEncoder();\r\n    const profilingEnabled = this.backend.supportTimestampQuery && this.backend.env.webgpu.profilingMode === 'default';\r\n    if (profilingEnabled) {\r\n      // profiling write start timestamp\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\r\n    }\r\n\r\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\r\n    const entries = [];\r\n    for (const input of inputs) {\r\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\r\n    }\r\n    for (const output of outputs) {\r\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\r\n    }\r\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\r\n    computePassEncoder.setBindGroup(0, bindGroup);\r\n\r\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\r\n\r\n    this.backend.pendingDispatchNumber++;\r\n\r\n    if (profilingEnabled) {\r\n      // profiling write end timestamp\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\r\n      if (this.backend.profilingQueryData == null) {\r\n        this.backend.profilingQueryData =\r\n            // eslint-disable-next-line no-bitwise\r\n            this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\r\n      }\r\n      // eslint-disable-next-line no-bitwise\r\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\r\n\r\n      this.backend.endComputePass();\r\n      this.backend.getCommandEncoder().resolveQuerySet(\r\n          this.backend.profilingQuerySet, 0, 2, this.backend.profilingQueryData.buffer, 0);\r\n      this.backend.getCommandEncoder().copyBufferToBuffer(\r\n          this.backend.profilingQueryData.buffer, 0, syncData.buffer, 0, 16);\r\n      this.backend.flush();\r\n\r\n      const kernelId = this.backend.currentKernelId!;\r\n      const kernelName = this.backend.kernels.get(kernelId)![0];\r\n\r\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\r\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\r\n        const startTimeU64 = mappedData[0];\r\n        const endTimeU64 = mappedData[1];\r\n\r\n        syncData.buffer.unmap();\r\n\r\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\r\n          this.backend.profilingTimeBase = startTimeU64;\r\n        }\r\n\r\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\r\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\r\n\r\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\r\n          throw new RangeError('incorrect timestamp range');\r\n        }\r\n\r\n        this.backend.gpuDataManager.release(syncData.id);\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\r\n      });\r\n    }\r\n\r\n    if (this.backend.pendingDispatchNumber >= 16) {\r\n      this.backend.flush();\r\n    }\r\n  }\r\n  dispose(): void {\r\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\r\n    const device = this.backend.device;\r\n\r\n    const shaderHelper = createShaderHelper(normalizedDispatchGroupSize);\r\n    const userCode = programInfo.getShaderSource(shaderHelper);\r\n    const code = `${shaderHelper.additionalImplementations}\\n${userCode}`;\r\n    const shaderModule = device.createShaderModule({code});\r\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\r\n\r\n    const computePipeline =\r\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\r\n\r\n    return {programInfo, computePipeline};\r\n  }\r\n\r\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\r\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\r\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\r\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\r\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\r\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\r\n      return [x, y, z];\r\n    }\r\n    const size = x * y * z;\r\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\r\n    if (dispatchAverage > limitPerDimension) {\r\n      dispatchAverage = Math.ceil(Math.cbrt(size));\r\n      if (dispatchAverage > limitPerDimension) {\r\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\r\n      }\r\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\r\n    } else {\r\n      return [dispatchAverage, dispatchAverage, 1];\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor, TensorView} from '../tensor';\r\n\r\nimport {ShaderHelper} from './ops/common';\r\n\r\nexport enum GpuDataType {\r\n  default = 0,\r\n  upload = 1,\r\n  profile = 2\r\n}\r\nexport type GpuDataId = number;\r\n\r\nexport interface GpuData {\r\n  type: GpuDataType;\r\n  id: GpuDataId;\r\n  buffer: GPUBuffer;\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  dataType: number;\r\n  gpuDataType: GpuDataType;\r\n}\r\n\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * gpu data types for each input\r\n   */\r\n  inputTypes: GpuDataType[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for outputs\r\n   */\r\n  outputs: TensorInfo[];\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\r\n  /**\r\n   * default is \"main\"\r\n   */\r\n  // entryPoint: string;\r\n\r\n  dispatchGroup: (inputs: readonly TensorView[]) => {\r\n    x: number;\r\n    y?: number;\r\n    z?: number;\r\n  };\r\n}\r\n\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  computePipeline: GPUComputePipeline;\r\n}\r\n\r\nexport interface ComputeContextInputsOutputsMapping {\r\n  /**\r\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\r\n   * - if it's a number, it's the index of the kernel's input\r\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\r\n   *\r\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\r\n   */\r\n  readonly inputs?: ReadonlyArray<TensorView|number>;\r\n  /**\r\n   * specify the mapping to the program's outputs. the value must be a number.\r\n   * - if it's a non-negative number, it's the index of the kernel's output\r\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\r\n   * the kernel is executed.\r\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\r\n   * kernel is released.\r\n   *\r\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\r\n   */\r\n  readonly outputs?: readonly number[];\r\n}\r\n\r\n/**\r\n * A ComputeContext instance carries the states that representing the current running of a kernel.\r\n */\r\nexport interface ComputeContext {\r\n  /**\r\n   * stores the pointer to OpKernelContext\r\n   */\r\n  readonly opKernelContext: number;\r\n\r\n  /**\r\n   * a list of inputs, each input is an instance of TensorView\r\n   */\r\n  readonly inputs: readonly TensorView[];\r\n\r\n  /**\r\n   * a custom data object that can be used to store any data that is needed by the kernel\r\n   */\r\n  readonly kernelCustomData: {[key: string]: unknown};\r\n\r\n  /**\r\n   * a buffer that can be used to access custom data created each time the kernel is executed\r\n   */\r\n  readonly customDataBuffer: Uint8Array;\r\n\r\n  /**\r\n   * a number of outputs for the node\r\n   */\r\n  readonly outputCount: number;\r\n\r\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\r\n      TensorView[];\r\n  output(index: number, dims: readonly number[]): number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport * as core from './wasm-core-impl';\r\nimport {initializeWebAssembly} from './wasm-factory';\r\n\r\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\r\nlet proxyWorker: Worker|undefined;\r\nlet initializing = false;\r\nlet initialized = false;\r\nlet aborted = false;\r\n\r\n// resolve; reject\r\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\r\n\r\nlet initWasmCallbacks: PromiseCallbacks;\r\nlet initOrtCallbacks: PromiseCallbacks;\r\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\r\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\r\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\r\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\r\n\r\nconst ensureWorker = (): void => {\r\n  if (initializing || !initialized || aborted || !proxyWorker) {\r\n    throw new Error('worker not ready');\r\n  }\r\n};\r\n\r\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\r\n  switch (ev.data.type) {\r\n    case 'init-wasm':\r\n      initializing = false;\r\n      if (ev.data.err) {\r\n        aborted = true;\r\n        initWasmCallbacks[1](ev.data.err);\r\n      } else {\r\n        initialized = true;\r\n        initWasmCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'init-ort':\r\n      if (ev.data.err) {\r\n        initOrtCallbacks[1](ev.data.err);\r\n      } else {\r\n        initOrtCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'create_allocate':\r\n      if (ev.data.err) {\r\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'create_finalize':\r\n      if (ev.data.err) {\r\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'create':\r\n      if (ev.data.err) {\r\n        createSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'release':\r\n      if (ev.data.err) {\r\n        releaseSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        releaseSessionCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    case 'run':\r\n      if (ev.data.err) {\r\n        runCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        runCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'end-profiling':\r\n      if (ev.data.err) {\r\n        endProfilingCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        endProfilingCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    default:\r\n  }\r\n};\r\n\r\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\r\n\r\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    if (initialized) {\r\n      return;\r\n    }\r\n    if (initializing) {\r\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\r\n    }\r\n    if (aborted) {\r\n      throw new Error('previous call to \\'initWasm()\\' failed.');\r\n    }\r\n\r\n    initializing = true;\r\n\r\n    // overwrite wasm filepaths\r\n    if (env.wasm.wasmPaths === undefined) {\r\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\r\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\r\n      }\r\n    }\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      proxyWorker?.terminate();\r\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\r\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\r\n      proxyWorker.onmessage = onProxyWorkerMessage;\r\n      initWasmCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\r\n      proxyWorker.postMessage(message);\r\n    });\r\n\r\n  } else {\r\n    return initializeWebAssembly(env.wasm);\r\n  }\r\n};\r\n\r\nexport const initializeRuntime = async(env: Env): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      initOrtCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    await core.initRuntime(env);\r\n  }\r\n};\r\n\r\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableModeldata>((resolve, reject) => {\r\n      createSessionAllocateCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSessionAllocate(model);\r\n  }\r\n};\r\n\r\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\r\n    Promise<SerializableSessionMetadata> => {\r\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n        ensureWorker();\r\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n          createSessionFinalizeCallbacks.push([resolve, reject]);\r\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\r\n          proxyWorker!.postMessage(message);\r\n        });\r\n      } else {\r\n        return core.createSessionFinalize(modeldata, options);\r\n      }\r\n    };\r\n\r\nexport const createSession =\r\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n      createSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSession(model, options);\r\n  }\r\n};\r\n\r\nexport const releaseSession = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      releaseSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.releaseSession(sessionId);\r\n  }\r\n};\r\n\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\r\n      runCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\r\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\r\n    });\r\n  } else {\r\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\r\n  }\r\n};\r\n\r\nexport const endProfiling = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      endProfilingCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.endProfiling(sessionId);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\r\n\r\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let runOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const runOptions: InferenceSession.RunOptions = options || {};\r\n\r\n  try {\r\n    if (options?.logSeverityLevel === undefined) {\r\n      runOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      runOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.terminate === undefined) {\r\n      runOptions.terminate = false;\r\n    }\r\n\r\n    let tagDataOffset = 0;\r\n    if (options?.tag !== undefined) {\r\n      tagDataOffset = allocWasmString(options.tag, allocs);\r\n    }\r\n\r\n    runOptionsHandle = wasm._OrtCreateRunOptions(\r\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\r\n    if (runOptionsHandle === 0) {\r\n      checkLastError('Can\\'t create run options.');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [runOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    allocs.forEach(alloc => wasm._free(alloc));\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {promisify} from 'util';\r\n\r\nimport {SerializableModeldata} from './proxy-messages';\r\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\r\n\r\nlet runtimeInitialized: boolean;\r\n\r\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\r\n  private sessionId: number;\r\n\r\n  inputNames: string[];\r\n  outputNames: string[];\r\n\r\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\r\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\r\n    // response is freed once we return\r\n    const response = await fetch(path);\r\n    if (response.status !== 200) {\r\n      throw new Error(`failed to load model: ${path}`);\r\n    }\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\r\n  }\r\n\r\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\r\n    if (!runtimeInitialized) {\r\n      await initializeRuntime(env);\r\n      runtimeInitialized = true;\r\n    }\r\n\r\n    if (typeof pathOrBuffer === 'string') {\r\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\r\n        // node\r\n        const model = await promisify(readFile)(pathOrBuffer);\r\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\r\n      } else {\r\n        // browser\r\n        // fetch model and move to wasm heap.\r\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\r\n        // create the session\r\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\r\n      }\r\n    } else {\r\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\r\n    }\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    return releaseSession(this.sessionId);\r\n  }\r\n\r\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\r\n      Promise<SessionHandler.ReturnType> {\r\n    const inputArray: Tensor[] = [];\r\n    const inputIndices: number[] = [];\r\n    Object.entries(feeds).forEach(kvp => {\r\n      const name = kvp[0];\r\n      const tensor = kvp[1];\r\n      const index = this.inputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid input '${name}'`);\r\n      }\r\n      inputArray.push(tensor);\r\n      inputIndices.push(index);\r\n    });\r\n\r\n    const outputIndices: number[] = [];\r\n    Object.entries(fetches).forEach(kvp => {\r\n      const name = kvp[0];\r\n      // TODO: support pre-allocated output\r\n      const index = this.outputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid output '${name}'`);\r\n      }\r\n      outputIndices.push(index);\r\n    });\r\n\r\n    const outputs =\r\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\r\n\r\n    const result: SessionHandler.ReturnType = {};\r\n    for (let i = 0; i < outputs.length; i++) {\r\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  startProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n\r\n  endProfiling(): void {\r\n    void endProfiling(this.sessionId);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\r\n\r\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\r\n  switch (graphOptimizationLevel) {\r\n    case 'disabled':\r\n      return 0;\r\n    case 'basic':\r\n      return 1;\r\n    case 'extended':\r\n      return 2;\r\n    case 'all':\r\n      return 99;\r\n    default:\r\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\r\n  }\r\n};\r\n\r\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\r\n  switch (executionMode) {\r\n    case 'sequential':\r\n      return 0;\r\n    case 'parallel':\r\n      return 1;\r\n    default:\r\n      throw new Error(`unsupported execution mode: ${executionMode}`);\r\n  }\r\n};\r\n\r\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\r\n  if (!options.extra) {\r\n    options.extra = {};\r\n  }\r\n  if (!options.extra.session) {\r\n    options.extra.session = {};\r\n  }\r\n  const session = options.extra.session as Record<string, string>;\r\n  if (!session.use_ort_model_bytes_directly) {\r\n    // eslint-disable-next-line camelcase\r\n    session.use_ort_model_bytes_directly = '1';\r\n  }\r\n\r\n  // if using JSEP with WebGPU, always disable memory pattern\r\n  if (options.executionProviders &&\r\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\r\n    options.enableMemPattern = false;\r\n  }\r\n};\r\n\r\nconst setExecutionProviders =\r\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\r\n     allocs: number[]): void => {\r\n      for (const ep of executionProviders) {\r\n        let epName = typeof ep === 'string' ? ep : ep.name;\r\n\r\n        // check EP name\r\n        switch (epName) {\r\n          case 'xnnpack':\r\n            epName = 'XNNPACK';\r\n            break;\r\n          case 'webnn':\r\n            epName = 'WEBNN';\r\n            if (typeof ep !== 'string') {\r\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\r\n              if (webnnOptions?.deviceType) {\r\n                const keyDataOffset = allocWasmString('deviceType', allocs);\r\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\r\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\r\n                    0) {\r\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\r\n                }\r\n              }\r\n              if (webnnOptions?.powerPreference) {\r\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\r\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\r\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\r\n                    0) {\r\n                  checkLastError(\r\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          case 'webgpu':\r\n            epName = 'JS';\r\n            break;\r\n          case 'wasm':\r\n          case 'cpu':\r\n            continue;\r\n          default:\r\n            throw new Error(`not supported execution provider: ${epName}`);\r\n        }\r\n\r\n        const epNameDataOffset = allocWasmString(epName, allocs);\r\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\r\n          checkLastError(`Can't append execution provider: ${epName}.`);\r\n        }\r\n      }\r\n    };\r\n\r\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let sessionOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\r\n  appendDefaultOptions(sessionOptions);\r\n\r\n  try {\r\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\r\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\r\n    const logIdDataOffset =\r\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\r\n\r\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\r\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\r\n    }\r\n\r\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\r\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\r\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\r\n    }\r\n\r\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\r\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\r\n        0;\r\n\r\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\r\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\r\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\r\n        optimizedModelFilePathOffset);\r\n    if (sessionOptionsHandle === 0) {\r\n      checkLastError('Can\\'t create session options.');\r\n    }\r\n\r\n    if (sessionOptions.executionProviders) {\r\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\r\n    }\r\n\r\n    if (sessionOptions.extra !== undefined) {\r\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [sessionOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (sessionOptionsHandle !== 0) {\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n    }\r\n    allocs.forEach(alloc => wasm._free(alloc));\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from 'onnxruntime-common';\r\n\r\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\r\n\r\n/**\r\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\r\n */\r\nexport const enum DataType {\r\n  undefined = 0,\r\n  float = 1,\r\n  uint8 = 2,\r\n  int8 = 3,\r\n  uint16 = 4,\r\n  int16 = 5,\r\n  int32 = 6,\r\n  int64 = 7,\r\n  string = 8,\r\n  bool = 9,\r\n  float16 = 10,\r\n  double = 11,\r\n  uint32 = 12,\r\n  uint64 = 13,\r\n  complex64 = 14,\r\n  complex128 = 15,\r\n  bfloat16 = 16\r\n}\r\n\r\n/**\r\n * Map string tensor data to enum value\r\n */\r\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\r\n  switch (type) {\r\n    case 'int8':\r\n      return DataType.int8;\r\n    case 'uint8':\r\n      return DataType.uint8;\r\n    case 'bool':\r\n      return DataType.bool;\r\n    case 'int16':\r\n      return DataType.int16;\r\n    case 'uint16':\r\n      return DataType.uint16;\r\n    case 'int32':\r\n      return DataType.int32;\r\n    case 'uint32':\r\n      return DataType.uint32;\r\n    case 'float16':\r\n      return DataType.float16;\r\n    case 'float32':\r\n      return DataType.float;\r\n    case 'float64':\r\n      return DataType.double;\r\n    case 'string':\r\n      return DataType.string;\r\n    case 'int64':\r\n      return DataType.int64;\r\n    case 'uint64':\r\n      return DataType.uint64;\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Map enum value to string tensor data\r\n */\r\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\r\n  switch (typeProto) {\r\n    case DataType.int8:\r\n      return 'int8';\r\n    case DataType.uint8:\r\n      return 'uint8';\r\n    case DataType.bool:\r\n      return 'bool';\r\n    case DataType.int16:\r\n      return 'int16';\r\n    case DataType.uint16:\r\n      return 'uint16';\r\n    case DataType.int32:\r\n      return 'int32';\r\n    case DataType.uint32:\r\n      return 'uint32';\r\n    case DataType.float16:\r\n      return 'float16';\r\n    case DataType.float:\r\n      return 'float32';\r\n    case DataType.double:\r\n      return 'float64';\r\n    case DataType.string:\r\n      return 'string';\r\n    case DataType.int64:\r\n      return 'int64';\r\n    case DataType.uint64:\r\n      return 'uint64';\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${typeProto}`);\r\n  }\r\n};\r\n\r\n/**\r\n * get tensor element size in bytes by the given data type\r\n * @returns size in integer or undefined if the data type is not supported\r\n */\r\nexport const getTensorElementSize = (dateType: number): number|\r\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\r\n\r\n/**\r\n * get typed array constructor by the given tensor type\r\n */\r\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\r\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\r\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\r\n      switch (type) {\r\n        case 'float16':\r\n          return Uint16Array;\r\n        case 'float32':\r\n          return Float32Array;\r\n        case 'uint8':\r\n          return Uint8Array;\r\n        case 'int8':\r\n          return Int8Array;\r\n        case 'uint16':\r\n          return Uint16Array;\r\n        case 'int16':\r\n          return Int16Array;\r\n        case 'int32':\r\n          return Int32Array;\r\n        case 'bool':\r\n          return Uint8Array;\r\n        case 'float64':\r\n          return Float64Array;\r\n        case 'uint32':\r\n          return Uint32Array;\r\n        case 'int64':\r\n          return BigInt64Array;\r\n        case 'uint64':\r\n          return BigUint64Array;\r\n        default:\r\n          throw new Error(`unsupported type: ${type}`);\r\n      }\r\n    };\r\n\r\n/**\r\n * Map string log level to integer value\r\n */\r\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\r\n  switch (logLevel) {\r\n    case 'verbose':\r\n      return 0;\r\n    case 'info':\r\n      return 1;\r\n    case 'warning':\r\n      return 2;\r\n    case 'error':\r\n      return 3;\r\n    case 'fatal':\r\n      return 4;\r\n    default:\r\n      throw new Error(`unsupported logging level: ${logLevel}`);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\r\n\r\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport {setRunOptions} from './run-options';\r\nimport {setSessionOptions} from './session-options';\r\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError} from './wasm-utils';\r\n\r\n/**\r\n * get the input/output count of the session.\r\n * @param sessionHandle the handle representing the session. should be non-zero.\r\n * @returns a tuple including 2 numbers, representing the input count and output count.\r\n */\r\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\r\n  const wasm = getInstance();\r\n  const stack = wasm.stackSave();\r\n  try {\r\n    const dataOffset = wasm.stackAlloc(8);\r\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\r\n    if (errorCode !== 0) {\r\n      checkLastError('Can\\'t get session input/output count.');\r\n    }\r\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\r\n  } finally {\r\n    wasm.stackRestore(stack);\r\n  }\r\n};\r\n\r\n/**\r\n * initialize ORT environment.\r\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\r\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\r\n */\r\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\r\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\r\n  if (errorCode !== 0) {\r\n    checkLastError('Can\\'t initialize onnxruntime.');\r\n  }\r\n};\r\n\r\n/**\r\n * intialize runtime environment.\r\n * @param env passed in the environment config object.\r\n */\r\nexport const initRuntime = async(env: Env): Promise<void> => {\r\n  // init ORT\r\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\r\n\r\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\r\n    // init JSEP if available\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\r\n    const initJsep = require('./jsep/init').init;\r\n    await initJsep(getInstance(), env);\r\n  }\r\n};\r\n\r\n/**\r\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\r\n */\r\ntype SessionMetadata = [number, number[], number[]];\r\n\r\nconst activeSessions = new Map<number, SessionMetadata>();\r\n\r\n/**\r\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\r\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\r\n */\r\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\r\n  const wasm = getInstance();\r\n  const modelDataOffset = wasm._malloc(model.byteLength);\r\n  if (modelDataOffset === 0) {\r\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\r\n  }\r\n  wasm.HEAPU8.set(model, modelDataOffset);\r\n  return [modelDataOffset, model.byteLength];\r\n};\r\n\r\n/**\r\n * create an inference session using the prepared buffer containing the model data.\r\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\r\n * @param options an optional session options object.\r\n * @returns a 3-elements tuple containing [session handle, input names, output names]\r\n */\r\nexport const createSessionFinalize =\r\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const wasm = getInstance();\r\n\r\n      let sessionHandle = 0;\r\n      let sessionOptionsHandle = 0;\r\n      let allocs: number[] = [];\r\n      const inputNamesUTF8Encoded = [];\r\n      const outputNamesUTF8Encoded = [];\r\n\r\n      try {\r\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\r\n\r\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\r\n        if (sessionHandle === 0) {\r\n          checkLastError('Can\\'t create a session.');\r\n        }\r\n\r\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\r\n\r\n        const inputNames = [];\r\n        const outputNames = [];\r\n        for (let i = 0; i < inputCount; i++) {\r\n          const name = wasm._OrtGetInputName(sessionHandle, i);\r\n          if (name === 0) {\r\n            checkLastError('Can\\'t get an input name.');\r\n          }\r\n          inputNamesUTF8Encoded.push(name);\r\n          inputNames.push(wasm.UTF8ToString(name));\r\n        }\r\n        for (let i = 0; i < outputCount; i++) {\r\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\r\n          if (name === 0) {\r\n            checkLastError('Can\\'t get an output name.');\r\n          }\r\n          outputNamesUTF8Encoded.push(name);\r\n          outputNames.push(wasm.UTF8ToString(name));\r\n        }\r\n\r\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\r\n        return [sessionHandle, inputNames, outputNames];\r\n      } catch (e) {\r\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n\r\n        if (sessionHandle !== 0) {\r\n          wasm._OrtReleaseSession(sessionHandle);\r\n        }\r\n        throw e;\r\n      } finally {\r\n        wasm._free(modelData[0]);\r\n        if (sessionOptionsHandle !== 0) {\r\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n        }\r\n        allocs.forEach(alloc => wasm._free(alloc));\r\n      }\r\n    };\r\n\r\n\r\n/**\r\n * create an instance of InferenceSession.\r\n * @returns the metadata of InferenceSession. 0-value handle for failure.\r\n */\r\nexport const createSession =\r\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const modelData: SerializableModeldata = createSessionAllocate(model);\r\n      return createSessionFinalize(modelData, options);\r\n    };\r\n\r\nexport const releaseSession = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\r\n  }\r\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\r\n\r\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n  wasm._OrtReleaseSession(sessionHandle);\r\n  activeSessions.delete(sessionId);\r\n};\r\n\r\n/**\r\n * perform inference run\r\n */\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\r\n  }\r\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\r\n\r\n  const inputCount = inputIndices.length;\r\n  const outputCount = outputIndices.length;\r\n\r\n  let runOptionsHandle = 0;\r\n  let runOptionsAllocs: number[] = [];\r\n\r\n  const inputValues: number[] = [];\r\n  const inputAllocs: number[] = [];\r\n\r\n  try {\r\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\r\n\r\n    // create input tensors\r\n    for (let i = 0; i < inputCount; i++) {\r\n      const dataType = inputs[i][0];\r\n      const dims = inputs[i][1];\r\n      const data = inputs[i][2];\r\n\r\n      let dataOffset: number;\r\n      let dataByteLength: number;\r\n\r\n      if (Array.isArray(data)) {\r\n        // string tensor\r\n        dataByteLength = 4 * data.length;\r\n        dataOffset = wasm._malloc(dataByteLength);\r\n        inputAllocs.push(dataOffset);\r\n        let dataIndex = dataOffset / 4;\r\n        for (let i = 0; i < data.length; i++) {\r\n          if (typeof data[i] !== 'string') {\r\n            throw new TypeError(`tensor data at index ${i} is not a string`);\r\n          }\r\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\r\n        }\r\n      } else {\r\n        dataByteLength = data.byteLength;\r\n        dataOffset = wasm._malloc(dataByteLength);\r\n        inputAllocs.push(dataOffset);\r\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\r\n      }\r\n\r\n      const stack = wasm.stackSave();\r\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n      try {\r\n        let dimIndex = dimsOffset / 4;\r\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\r\n        const tensor = wasm._OrtCreateTensor(\r\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\r\n        if (tensor === 0) {\r\n          checkLastError(`Can't create tensor for input[${i}].`);\r\n        }\r\n        inputValues.push(tensor);\r\n      } finally {\r\n        wasm.stackRestore(stack);\r\n      }\r\n    }\r\n\r\n    const beforeRunStack = wasm.stackSave();\r\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n\r\n    try {\r\n      let inputValuesIndex = inputValuesOffset / 4;\r\n      let inputNamesIndex = inputNamesOffset / 4;\r\n      let outputValuesIndex = outputValuesOffset / 4;\r\n      let outputNamesIndex = outputNamesOffset / 4;\r\n      for (let i = 0; i < inputCount; i++) {\r\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\r\n      }\r\n      for (let i = 0; i < outputCount; i++) {\r\n        wasm.HEAPU32[outputValuesIndex++] = 0;\r\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\r\n      }\r\n\r\n      // support RunOptions\r\n      let errorCode = wasm._OrtRun(\r\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\r\n          outputValuesOffset, runOptionsHandle);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const runPromise = wasm.jsepRunPromise;\r\n      if (runPromise && typeof runPromise.then !== 'undefined') {\r\n        errorCode = await runPromise;\r\n      }\r\n\r\n      const output: SerializableTensor[] = [];\r\n\r\n      if (errorCode !== 0) {\r\n        checkLastError('failed to call OrtRun().');\r\n      }\r\n\r\n      for (let i = 0; i < outputCount; i++) {\r\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n\r\n        const beforeGetTensorDataStack = wasm.stackSave();\r\n        // stack allocate 4 pointer value\r\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n\r\n        let type: Tensor.Type|undefined, dataOffset = 0;\r\n        try {\r\n          errorCode = wasm._OrtGetTensorData(\r\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n          if (errorCode !== 0) {\r\n            checkLastError(`Can't access output tensor data on index ${i}.`);\r\n          }\r\n          let tensorDataIndex = tensorDataOffset / 4;\r\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\r\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\r\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n          const dims = [];\r\n          for (let i = 0; i < dimsLength; i++) {\r\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\r\n          }\r\n          wasm._OrtFree(dimsOffset);\r\n\r\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\r\n          type = tensorDataTypeEnumToString(dataType);\r\n          if (type === 'string') {\r\n            const stringData: string[] = [];\r\n            let dataIndex = dataOffset / 4;\r\n            for (let i = 0; i < size; i++) {\r\n              const offset = wasm.HEAPU32[dataIndex++];\r\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\r\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\r\n            }\r\n            output.push([type, dims, stringData]);\r\n          } else {\r\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\r\n            const data = new typedArrayConstructor(size);\r\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\r\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\r\n            output.push([type, dims, data]);\r\n          }\r\n        } finally {\r\n          wasm.stackRestore(beforeGetTensorDataStack);\r\n          if (type === 'string' && dataOffset) {\r\n            wasm._free(dataOffset);\r\n          }\r\n          wasm._OrtReleaseTensor(tensor);\r\n        }\r\n      }\r\n\r\n      return output;\r\n    } finally {\r\n      wasm.stackRestore(beforeRunStack);\r\n    }\r\n  } finally {\r\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\r\n    inputAllocs.forEach(p => wasm._free(p));\r\n\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    runOptionsAllocs.forEach(p => wasm._free(p));\r\n  }\r\n};\r\n\r\n/**\r\n * end profiling\r\n */\r\nexport const endProfiling = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error('invalid session id');\r\n  }\r\n  const sessionHandle = session[0];\r\n\r\n  // profile file name is not used yet, but it must be freed.\r\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\r\n  if (profileFileName === 0) {\r\n    checkLastError('Can\\'t get an profile file name.');\r\n  }\r\n  wasm._OrtFree(profileFileName);\r\n};\r\n\r\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\r\n  const buffers: ArrayBufferLike[] = [];\r\n  for (const tensor of tensors) {\r\n    const data = tensor[2];\r\n    if (!Array.isArray(data) && data.buffer) {\r\n      buffers.push(data.buffer);\r\n    }\r\n  }\r\n  return buffers;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\nimport * as path from 'path';\r\n\r\nimport {OrtWasmModule} from './binding/ort-wasm';\r\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\r\n\r\n/* eslint-disable @typescript-eslint/no-require-imports */\r\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\r\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\r\n\r\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\r\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\r\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\r\n    ortWasmFactory;\r\n/* eslint-enable @typescript-eslint/no-require-imports */\r\n\r\nlet wasm: OrtWasmModule|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\nlet aborted = false;\r\n\r\nconst isMultiThreadSupported = (): boolean => {\r\n  try {\r\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\r\n    if (typeof SharedArrayBuffer === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    // Test for transferability of SABs (for browsers. needed for Firefox)\r\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n    if (typeof MessageChannel !== 'undefined') {\r\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n    }\r\n\r\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing threaded instructions.\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\r\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isSimdSupported = (): boolean => {\r\n  try {\r\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing SIMD instructions.\r\n\r\n    // The binary data is generated from the following code by wat2wasm:\r\n    //\r\n    // (module\r\n    //   (type $t0 (func))\r\n    //   (func $f0 (type $t0)\r\n    //     (drop\r\n    //       (i32x4.dot_i16x8_s\r\n    //         (i8x16.splat\r\n    //           (i32.const 0))\r\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\r\n\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\r\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\r\n  if (useThreads) {\r\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\r\n  } else {\r\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\r\n  }\r\n};\r\n\r\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n  }\r\n  if (aborted) {\r\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  // wasm flags are already initialized\r\n  const timeout = flags.initTimeout!;\r\n  const numThreads = flags.numThreads!;\r\n  const simd = flags.simd!;\r\n\r\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\r\n  const useSimd = simd && isSimdSupported();\r\n\r\n  const wasmPaths = flags.wasmPaths;\r\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\r\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\r\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\r\n\r\n  let isTimeout = false;\r\n\r\n  const tasks: Array<Promise<void>> = [];\r\n\r\n  // promise for timeout\r\n  if (timeout > 0) {\r\n    tasks.push(new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        isTimeout = true;\r\n        resolve();\r\n      }, timeout);\r\n    }));\r\n  }\r\n\r\n  // promise for module initialization\r\n  tasks.push(new Promise((resolve, reject) => {\r\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\r\n    const config: Partial<OrtWasmModule> = {\r\n      locateFile: (fileName: string, scriptDirectory: string) => {\r\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\r\n            typeof Blob !== 'undefined') {\r\n          return URL.createObjectURL(new Blob(\r\n              [\r\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                require('./binding/ort-wasm-threaded.worker.js')\r\n              ],\r\n              {type: 'text/javascript'}));\r\n        }\r\n\r\n        if (fileName.endsWith('.wasm')) {\r\n          if (wasmPathOverride) {\r\n            return wasmPathOverride;\r\n          }\r\n\r\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\r\n\r\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\r\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\r\n              return prefix + 'ort-wasm-simd.jsep.wasm';\r\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\r\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\r\n            }\r\n          }\r\n\r\n          return prefix + wasmFileName;\r\n        }\r\n\r\n        return scriptDirectory + fileName;\r\n      }\r\n    };\r\n\r\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\r\n      if (typeof Blob === 'undefined') {\r\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n      } else {\r\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\r\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\r\n      }\r\n    }\r\n\r\n    factory(config).then(\r\n        // wasm module initialized successfully\r\n        module => {\r\n          initializing = false;\r\n          initialized = true;\r\n          wasm = module;\r\n          resolve();\r\n        },\r\n        // wasm module failed to initialize\r\n        (what) => {\r\n          initializing = false;\r\n          aborted = true;\r\n          reject(what);\r\n        });\r\n  }));\r\n\r\n  await Promise.race(tasks);\r\n\r\n  if (isTimeout) {\r\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\r\n  }\r\n};\r\n\r\nexport const getInstance = (): OrtWasmModule => {\r\n  if (initialized && wasm) {\r\n    return wasm;\r\n  }\r\n\r\n  throw new Error('WebAssembly is not initialized yet.');\r\n};\r\n\r\nexport const dispose = (): void => {\r\n  if (initialized && !initializing && !aborted) {\r\n    initializing = true;\r\n\r\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\r\n    wasm = undefined;\r\n\r\n    initializing = false;\r\n    initialized = false;\r\n    aborted = true;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const allocWasmString = (data: string, allocs: number[]): number => {\r\n  const wasm = getInstance();\r\n\r\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n  const dataOffset = wasm._malloc(dataLength);\r\n  wasm.stringToUTF8(data, dataOffset, dataLength);\r\n  allocs.push(dataOffset);\r\n\r\n  return dataOffset;\r\n};\r\n\r\ninterface ExtraOptionsHandler {\r\n  (name: string, value: string): void;\r\n}\r\n\r\nexport const iterateExtraOptions =\r\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\r\n     handler: ExtraOptionsHandler): void => {\r\n      if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n          throw new Error('Circular reference in options');\r\n        } else {\r\n          seen.add(options);\r\n        }\r\n      }\r\n\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        const name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\r\n        } else if (typeof value === 'string' || typeof value === 'number') {\r\n          handler(name, value.toString());\r\n        } else if (typeof value === 'boolean') {\r\n          handler(name, (value) ? '1' : '0');\r\n        } else {\r\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\r\n        }\r\n      });\r\n    };\r\n\r\n/**\r\n * check web assembly API's last error and throw error if any error occurred.\r\n * @param message a message used when an error occurred.\r\n */\r\nexport const checkLastError = (message: string): void => {\r\n  const wasm = getInstance();\r\n\r\n  const stack = wasm.stackSave();\r\n  try {\r\n    const paramsOffset = wasm.stackAlloc(8);\r\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\r\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\r\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\r\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\r\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\r\n  } finally {\r\n    wasm.stackRestore(stack);\r\n  }\r\n};\r\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={3838:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WebGpuBackend=void 0;var c=n(4955),u=n(7771),s=n(8510),l=n(8305),f=function(){function e(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.supportTimestampQuery=!1}return Object.defineProperty(e.prototype,\\\"currentKernelCustomData\\\",{get:function(){if(null===this.currentKernelId)throw new Error(\\\"currentKernelCustomData(): currentKernelId is null. (should not happen)\\\");var e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e},enumerable:!1,configurable:!0}),e.prototype.initialize=function(e){return r(this,void 0,void 0,(function(){var t,n,r;return a(this,(function(a){switch(a.label){case 0:if(!navigator.gpu)throw new Error(\\\"WebGpuBackend: WebGPU is not available.\\\");return[4,navigator.gpu.requestAdapter()];case 1:if(!(t=a.sent()))throw new Error(\\\"WebGpuBackend: Failed to get GPU adapter.\\\");return this.env=e,n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ}},t.features.has(\\\"timestamp-query-inside-passes\\\")&&(this.supportTimestampQuery=!0,n.requiredFeatures=[\\\"timestamp-query-inside-passes\\\"]),r=this,[4,t.requestDevice(n)];case 2:return r.device=a.sent(),this.gpuDataManager=(0,u.createGpuDataManager)(this),this.programManager=new l.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,c.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=function(e){e.error instanceof GPUValidationError&&console.error(\\\"An uncaught WebGPU validation error was raised: \\\".concat(e.error.message))},this.supportTimestampQuery&&(this.profilingQuerySet=this.device.createQuerySet({type:\\\"timestamp\\\",count:2})),[2]}}))}))},e.prototype.dispose=function(){},e.prototype.getCommandEncoder=function(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder},e.prototype.getComputePassEncoder=function(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder},e.prototype.endComputePass=function(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)},e.prototype.flush=function(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0},e.prototype.run=function(e,t,n,r,a){if(t.length!==e.inputTypes.length)throw new Error(\\\"Input size must be equal to \\\".concat(e.inputTypes.length,\\\".\\\"));for(var o=[],i=0;i<t.length;++i){if(!(h=this.gpuDataManager.get(t[i].data)))throw new Error(\\\"no GPU data for input: \\\".concat(t[i].data));o[i]=h}var u=function(e,t){var n=t.map((function(e){return\\\"\\\".concat(e.dataType,\\\";\\\").concat(e.dims.join(\\\",\\\"))})).join(\\\"|\\\"),r=e.name;return e.cacheHint&&(r+=\\\"[\\\"+e.cacheHint+\\\"]\\\"),r+\\\":\\\"+n}(e,t),s=this.programManager.getArtifact(u),l=s?s.programInfo:\\\"function\\\"==typeof e.get?e.get():e,f=0===n.length?l.outputs.map((function(e,t){return t})):n;if(f.length!==l.outputs.length)throw new Error(\\\"Output size \\\".concat(f.length,\\\" must be equal to \\\").concat(l.outputs.length,\\\".\\\"));var p=[],d=[];for(i=0;i<l.outputs.length;++i){if(!Number.isInteger(f[i])||f[i]<-3||f[i]>=l.outputs.length)throw new Error(\\\"Invalid output index: \\\".concat(f[i]));if(-3!==f[i]){var h,g=-1===f[i],m=-2===f[i],v=g||m?a(l.outputs[i].dataType,l.outputs[i].dims):r(f[i],l.outputs[i].dataType,l.outputs[i].dims);if(!(h=this.gpuDataManager.get(v.data)))throw new Error(\\\"no GPU data for output: \\\".concat(v.data));if(g&&this.temporaryData.push(h),m){var y=this.kernelPersistentData.get(this.currentKernelId);y||(y=[],this.kernelPersistentData.set(this.currentKernelId,y)),y.push(h)}p.push(v),d.push(h)}}var b=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return s||(s=this.programManager.build(l,b),this.programManager.setArtifact(u,s)),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[ProgramManager] run \\\"'.concat(l.name,'\\\" (key=').concat(u,\\\") with \\\").concat(b[0],\\\"x\\\").concat(b[1],\\\"x\\\").concat(b[2])})),this.programManager.run(s,o,d,b),p},e.prototype.upload=function(e,t){this.gpuDataManager.upload(e,t)},e.prototype.memcpy=function(e,t){this.gpuDataManager.memcpy(e,t)},e.prototype.download=function(e,t){return r(this,void 0,void 0,(function(){var n,r;return a(this,(function(a){switch(a.label){case 0:return[4,this.gpuDataManager.download(e)];case 1:return n=a.sent(),(r=t()).set(new Uint8Array(n,0,r.byteLength)),[2]}}))}))},e.prototype.alloc=function(e){return this.gpuDataManager.create(e).id},e.prototype.free=function(e){return this.gpuDataManager.release(e)},e.prototype.createKernel=function(e,t,n){var r=s.WEBGPU_OP_RESOLVE_RULES.get(e);if(!r)throw new Error(\\\"kernel not implemented: \\\".concat(e));this.kernels.set(t,[e,r[0],[r[1],n]])},e.prototype.releaseKernel=function(e){var t,n,r=this.kernelPersistentData.get(e);if(r){try{for(var a=o(r),i=a.next();!i.done;i=a.next()){var c=i.value;this.gpuDataManager.release(c.id)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)},e.prototype.computeKernel=function(e,t){var n,r,a=this.kernels.get(e);if(!a)throw new Error(\\\"kernel not created: \\\".concat(e));var u=i(a,3),s=u[0],l=u[1],f=u[2];if(null!==this.currentKernelId)throw new Error('kernel \\\"'.concat(s,'\\\" is not allowed to be called recursively'));this.currentKernelId=e,f[0]&&(f[1]=f[0](f[1]),f[0]=void 0),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[WebGPU] Start to run kernel \\\"'.concat(s,'\\\"...')})),this.temporaryData=[];try{return l(t,f[1]),0}catch(e){return(0,c.LOG_DEBUG)(\\\"warning\\\",'[WebGPU] Kernel \\\"'.concat(s,'\\\" failed. Error: ').concat(e)),1}finally{try{for(var p=o(this.temporaryData),d=p.next();!d.done;d=p.next()){var h=d.value;this.gpuDataManager.release(h.id)}}catch(e){n={error:e}}finally{try{d&&!d.done&&(r=p.return)&&r.call(p)}finally{if(n)throw n.error}}this.temporaryData=[],this.currentKernelId=null}},e}();t.WebGpuBackend=f},7675:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.init=void 0;var o=n(7917),i=n(3838),c=n(4955),u=n(6952),s=function(){function e(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}return e.prototype.getFloat32Array=function(){if(1!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getBigInt64Array=function(){if(7!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getInt32Array=function(){if(6!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.reshape=function(t){if(u.ShapeUtil.size(t)!==u.ShapeUtil.size(this.dims))throw new Error(\\\"Invalid new shape\\\");return new e(this.module,this.dataType,this.data,t)},e}(),l=function(){function e(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0;var r=e.HEAPU32,a=n>>2;this.opKernelContext=r[a++];var o=r[a++];this.outputCount=r[a++],this.customDataOffset=r[a++],this.customDataSize=r[a++];for(var i=[],c=0;c<o;c++){for(var u=r[a++],l=r[a++],f=r[a++],p=[],d=0;d<f;d++)p.push(r[a++]);i.push(new s(e,u,l,p))}this.inputs=i}return Object.defineProperty(e.prototype,\\\"kernelCustomData\\\",{get:function(){return this.backend.currentKernelCustomData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\\\"customDataBuffer\\\",{get:function(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)},enumerable:!1,configurable:!0}),e.prototype.compute=function(e,t){var n,r,a,i=this,c=null!==(r=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map((function(e){return\\\"number\\\"==typeof e?i.inputs[e]:e})))&&void 0!==r?r:this.inputs,l=null!==(a=null==t?void 0:t.outputs)&&void 0!==a?a:[];return this.backend.run(e,c,l,(function(e,t,n){return new s(i.module,t,i.output(e,n),n)}),(function(e,t){var n=(0,o.getTensorElementSize)(e);if(!n)throw new Error(\\\"Unsupported data type: \\\".concat(e));var r=n*u.ShapeUtil.size(t);return new s(i.module,e,i.backend.gpuDataManager.create(r).id,t)}))},e.prototype.output=function(e,t){var n=this.module.stackSave();try{var r=this.module.stackAlloc(4*(1+t.length)),a=r>>2;this.module.HEAPU32[a++]=t.length;for(var o=0;o<t.length;o++)this.module.HEAPU32[a++]=t[o];return this.module._JsepOutput(this.opKernelContext,e,r)}finally{this.module.stackRestore(n)}},e}();t.init=function(e,t){return r(void 0,void 0,void 0,(function(){var n,o;return a(this,(function(u){switch(u.label){case 0:if(!(n=e.jsepInit)||!navigator.gpu)return[3,2];if(!t.wasm.simd)throw new Error(\\\"Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP\\\");return[4,(o=new i.WebGpuBackend).initialize(t)];case 1:u.sent(),n({backend:o},(function(e){return o.alloc(e)}),(function(e){return o.free(e)}),(function(t,n,r,a){if(void 0===a&&(a=!1),a)(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToGpu: src=\\\".concat(t,\\\", dst=\\\").concat(n,\\\", size=\\\").concat(r)})),o.memcpy(t,n);else{(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyCpuToGpu: dataOffset=\\\".concat(t,\\\", gpuDataId=\\\").concat(n,\\\", size=\\\").concat(r)}));var i=e.HEAPU8.subarray(t,t+r);o.upload(n,i)}}),(function(t,n,i){return r(void 0,void 0,void 0,(function(){return a(this,(function(r){switch(r.label){case 0:return(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToCpu: gpuDataId=\\\".concat(t,\\\", dataOffset=\\\").concat(n,\\\", size=\\\").concat(i)})),[4,o.download(t,(function(){return e.HEAPU8.subarray(n,n+i)}))];case 1:return r.sent(),[2]}}))}))}),(function(e,t,n){return o.createKernel(e,t,n)}),(function(e){return o.releaseKernel(e)}),(function(t,n){(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepRun: kernel=\\\".concat(t,\\\", contextDataOffset=\\\").concat(n)}));var r=new l(e,o,n);return o.computeKernel(t,r)})),u.label=2;case 2:return[2]}}))}))}},4955:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.LOG_DEBUG=t.LOG=t.configureLogger=void 0;var o,i,c=n(7917),u=[\\\"V\\\",\\\"I\\\",\\\"W\\\",\\\"E\\\",\\\"F\\\"];t.configureLogger=function(e,t){o=e,i=t},t.LOG=function(e,t){var n,r,a=(0,c.logLevelStringToEnum)(e);a>=(0,c.logLevelStringToEnum)(o)&&(n=a,r=\\\"function\\\"==typeof t?t():t,console.log(\\\"[\\\".concat(u[n],\\\",\\\").concat((new Date).toISOString(),\\\"]\\\").concat(r)))},t.LOG_DEBUG=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];i&&t.LOG.apply(void 0,a([],r(e),!1))}},6952:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;var r=function(){function e(){}return e.calcMatMulShape=function(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]},e}();t.MatMulUtil=r;var a=function(){function e(){}return e.calcShape=function(e,t,a){var o;void 0===a&&(a=!1);var i=e.length,c=t.length;if(0===i)return t;if(0===c)return e;var u=Math.max(e.length,t.length),s=new Array(u);if(a){if(i<2||c<2)return;var l=r.calcMatMulShape([e[i-2],e[i-1]],[t[c-2],t[c-1]]);if(void 0===l)return;o=n(l,2),s[u-2]=o[0],s[u-1]=o[1]}for(var f=a?3:1;f<=u;f++){var p=i-f<0?1:e[i-f],d=c-f<0?1:t[c-f];if(p!==d&&p>1&&d>1)return;s[u-f]=Math.max(p,d)}return s},e.isValidBroadcast=function(e,t){var n=e.length,r=t.length;if(n>r)return!1;for(var a=1;a<=n;a++)if(1!==e[n-a]&&e[n-a]!==t[r-a])return!1;return!0},e}();t.BroadcastUtil=a;var o=function(){function e(){}return e.size=function(t){return e.getSizeFromDimensionRange(t,0,t.length)},e.sizeFromDimension=function(t,n){if(n<0||n>t.length)throw new Error(\\\"invalid dimension of \\\".concat(n,\\\" for sizeFromDimension as Tensor has \\\").concat(t.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(t,n,t.length)},e.sizeToDimension=function(t,n){if(n<0||n>t.length)throw new Error(\\\"invalid dimension of \\\".concat(n,\\\" for sizeToDimension as Tensor has \\\").concat(t.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(t,0,n)},e.getSizeFromDimensionRange=function(e,t,n){for(var r=1,a=t;a<n;a++){if(e[a]<0)throw new Error(\\\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\\\");r*=e[a]}return r},e.computeStrides=function(e){var t=e.length;if(0===t)return[];if(1===t)return[1];var n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(var r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n},e.normalizeAxis=function(e,t){if(e<-t&&e>=t)throw new Error(\\\"unsupported axis for this operation.\\\");return e<0?e+t:e},e.normalizeAxes=function(e,t){var n=this;return e.map((function(r){return n.normalizeAxis(r,null!=t?t:e.length)}))},e.sortBasedOnPerm=function(e,t){return t?t.map((function(t){return e[t]})):e.slice().reverse()},e.padShape=function(e,t){var n=e.length;return e.map((function(e,r){return e+t[r]+t[r+n]}))},e.areEqual=function(e,t){return e.length===t.length&&e.every((function(e,n){return e===t[n]}))},e}();t.ShapeUtil=o;var i=function(){function e(){}return e.adjustPoolAttributes=function(e,t,n,r,a,o){if(!e&&n.length!==t.length-2)throw new Error(\\\"length of specified kernel shapes should be 2 less than length of input dimensions\\\");if(e)for(var i=0;i<t.length-2;i++)i>=n.length?n.push(t[i+2]):n[i]=t[i+2];for(i=0;i<n.length;i++)if(i<r.length){if(r[i]<0)throw new Error(\\\"strides should be greater than or equal to 1\\\")}else r.push(1);for(i=0;i<n.length;i++)if(i<a.length){if(a[i]<0)throw new Error(\\\"dilations should be greater than or equal to 1\\\")}else a.push(1);for(i=0;i<2*n.length;i++)if(i<o.length){if(o[i]<0)throw new Error(\\\"pad should be greater than or equal to 1\\\")}else o.push(0);for(i=0;i<n.length;i++){if(n[i]<=0)throw new Error(\\\"kernel shapes need to be greater than 0\\\");if(o[i]>=n[i]||o[i+n.length]>=n[i])throw new Error(\\\"pads should be smaller than kernel\\\")}},e.adjustPadsBasedOnAutoPad=function(t,n,r,a,o,i,c){if(c){if(o.length!==2*(t.length-2))throw new Error(\\\"length of pads should be twice the length of data dimensions\\\");if(n.length!==t.length-2)throw new Error(\\\"length of strides should be the length of data dimensions\\\");if(a.length!==t.length-2)throw new Error(\\\"length of kernel shapes should be the length of data dimensions\\\");for(var u=0;u<t.length-2;u++)e.adjustPadAndReturnShape(t[u+(i?1:2)],n[u],r[u],a[u],o,u,u+t.length-2,c)}},e.computePoolOutputShape=function(t,n,r,a,o,i,c){if(n.length<=0)throw new Error(\\\"input shape must be of size greater than 0\\\");var u=[n[0],n[1]];return e.computeShapeHelper(t,n,u,r,a,o,i,c),u},e.computeConvOutputShape=function(t,n,r,a,o,i,c){if(t.length<=0||n.length<=0)throw new Error(\\\"invalid input tensor dims or invalid filter tensor dims\\\");var u=[t[0],n[0]];return e.computeShapeHelper(!1,t,u,r,a,o,i,c),u},e.computeShapeHelper=function(t,n,r,a,o,i,c,u){if(t)for(var s=0;s<n.length-2;s++)r.push(1);else for(s=0;s<n.length-2;s++)r.push(e.adjustPadAndReturnShape(n[s+2],a[s],o[s],i[s],c,s,s+n.length-2,u))},e.adjustPadAndReturnShape=function(e,t,n,r,a,o,i,c){var u=n*(r-1)+1;if(!c||\\\"NOTSET\\\"===c)return Math.floor((e+a[o]+a[i]-u)/t+1);switch(c){case\\\"VALID\\\":return a[o]=0,a[i]=0,Math.floor((e-u)/t+1);case\\\"SAME_LOWER\\\":case\\\"SAME_UPPER\\\":if(1!==n)throw new Error(\\\"Dilation not supported for SAME_UPPER or SAME_LOWER\\\");var s=((e+t-1)/t-1)*t+r-e;return a[o]=\\\"SAME_LOWER\\\"===c?Math.floor((s+1)/2):Math.floor(s/2),a[i]=s-a[o],Math.floor((e+s-r)/t+1);default:throw new Error(\\\"Unsupported AutoPad type\\\")}},e}();t.PoolConvUtil=i;var c=function(){function e(){}return e.getShapeOfGemmResult=function(e,t,n,r,o){if(2!==e.length||2!==n.length)throw new Error(\\\"shape need to be of size 2\\\");var i,c,u;t?(i=e[1],c=e[0]):(i=e[0],c=e[1]);var s=-1;if(r?(u=n[0],s=1):(u=n[1],s=0),n[s]!==c)throw new Error(\\\"dimension mismatch\\\");if(i<=0||u<=0||c<=0)throw new Error(\\\"invalid shape specified\\\");if(o&&!a.isValidBroadcast(o,[i,u]))throw new Error(\\\"gemm: invalid bias shape for broadcast\\\");return[i,u,c]},e}();t.GemmUtil=c,t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22},387:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createAttributeWithCacheKey=void 0;var n=function(){function e(e){Object.assign(this,e)}return Object.defineProperty(e.prototype,\\\"cacheKey\\\",{get:function(){var e=this;return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((function(t){return\\\"\\\".concat(e[t])})).join(\\\";\\\")),this._cacheKey},enumerable:!1,configurable:!0}),e}();t.createAttributeWithCacheKey=function(e){return new n(e)}},7771:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},c=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGpuDataManager=void 0;var u=n(4955),s=n(1163),l=function(e){return 16*Math.ceil(e/16)},f=0,p=function(){function e(e){this.backend=e,this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}return e.prototype.upload=function(e,t){var n=t.buffer,r=t.byteOffset,a=t.byteLength,o=l(a),i=this.storageCache.get(e);if(!i)throw new Error(\\\"gpu data for uploading does not exist\\\");if(i.originalSize!==a)throw new Error(\\\"inconsistent data size. gpu data size=\\\".concat(i.originalSize,\\\", data size=\\\").concat(a));var c=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),s=c.getMappedRange();new Uint8Array(s).set(new Uint8Array(n,r,a)),c.unmap();var f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(c,0,i.gpuData.buffer,0,o),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.upload(id=\\\".concat(e,\\\")\\\")})),this.buffersForUploadingPending.push(c)},e.prototype.memcpy=function(e,t){var n=this.storageCache.get(e);if(!n)throw new Error(\\\"source gpu data for memcpy does not exist\\\");var r=this.storageCache.get(t);if(!r)throw new Error(\\\"destination gpu data for memcpy does not exist\\\");if(n.originalSize!==r.originalSize)throw new Error(\\\"inconsistent source and destination gpu data size\\\");var a=l(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,a)},e.prototype.create=function(e,t){void 0===t&&(t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST);var n,r=l(e);if((t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){var a=this.freeBuffers.get(r);a||(a=[],this.freeBuffers.set(r,a)),n=a.length>0?a.pop():this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});var o={id:f++,type:s.GpuDataType.default,buffer:n};return this.storageCache.set(o.id,{gpuData:o,originalSize:e}),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.create(size=\\\".concat(e,\\\") => id=\\\").concat(o.id)})),o},e.prototype.get=function(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData},e.prototype.release=function(e){var t=this.storageCache.get(e);if(!t)throw new Error(\\\"releasing data does not exist\\\");return(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.release(id=\\\".concat(e,\\\"), gpuDataId=\\\").concat(t.gpuData.id)})),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),this.downloadCache.get(e)&&this.downloadCache.delete(e),t.originalSize},e.prototype.download=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o,i,c;return a(this,(function(a){if(t=this.downloadCache.get(e))return[2,t.data];if(!(n=this.storageCache.get(e)))throw new Error(\\\"data does not exist\\\");return r=this.backend.getCommandEncoder(),this.backend.endComputePass(),o=l(n.originalSize),i=this.backend.device.createBuffer({size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),r.copyBufferToBuffer(n.gpuData.buffer,0,i,0,o),this.backend.flush(),c=new Promise((function(e){i.mapAsync(GPUMapMode.READ).then((function(){var t=i.getMappedRange().slice(0);i.destroy(),e(t)}))})),this.downloadCache.set(e,{data:c}),[2,c]}))}))},e.prototype.refreshPendingBuffers=function(){var e,t,n,r;try{for(var a=o(this.buffersForUploadingPending),i=a.next();!i.done;i=a.next())(s=i.value).destroy()}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=a.return)&&t.call(a)}finally{if(e)throw e.error}}this.buffersForUploadingPending=[];try{for(var c=o(this.buffersPending),u=c.next();!u.done;u=c.next()){var s;((s=u.value).usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(s.size).push(s):s.destroy()}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}this.buffersPending=[]},e.prototype.dispose=function(){this.freeBuffers.forEach((function(e){e.forEach((function(e){e.destroy()}))})),this.storageCache.forEach((function(e){e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map},e}();t.createGpuDataManager=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new(p.bind.apply(p,c([void 0],i(e),!1)))}},8510:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;var i=n(1868),c=o(n(504)),u=n(513),s=n(9770),l=n(7640),f=n(8856),p=n(8405),d=n(4271),h=n(1798),g=n(6145),m=n(1522),v=o(n(5262)),y=n(6031),b=n(4566),w=n(8906),S=n(5101),_=n(6198),x=n(2067),O=n(8699),T=n(2625),A=o(n(9302));t.WEBGPU_OP_RESOLVE_RULES=new Map([[\\\"Abs\\\",[A.abs]],[\\\"Acos\\\",[A.acos]],[\\\"Acosh\\\",[A.acosh]],[\\\"Add\\\",[c.add]],[\\\"ArgMax\\\",[i.argMax,i.parseArgMinMaxAttributes]],[\\\"ArgMin\\\",[i.argMin,i.parseArgMinMaxAttributes]],[\\\"Asin\\\",[A.asin]],[\\\"Asinh\\\",[A.asinh]],[\\\"Atan\\\",[A.atan]],[\\\"Atanh\\\",[A.atanh]],[\\\"AveragePool\\\",[v.averagePool,v.parseAveragePoolAttributes]],[\\\"Cast\\\",[A.cast,A.parseCastAttributes]],[\\\"Ceil\\\",[A.ceil]],[\\\"ClipV10\\\",[A.clipV10]],[\\\"Clip\\\",[A.clip]],[\\\"Concat\\\",[u.concat,u.parseConcatAttributes]],[\\\"Conv\\\",[s.conv,s.parseConvAttributes]],[\\\"ConvTranspose\\\",[l.convTranspose,l.parseConvTransposeAttributes]],[\\\"Cos\\\",[A.cos]],[\\\"Cosh\\\",[A.cosh]],[\\\"Div\\\",[c.div]],[\\\"Elu\\\",[A.elu,A.parseAlphaAttributes]],[\\\"Erf\\\",[A.erf]],[\\\"Exp\\\",[A.exp]],[\\\"Expand\\\",[f.expand]],[\\\"Floor\\\",[A.floor]],[\\\"Gather\\\",[p.gather,p.parseGatherAttributes]],[\\\"Gelu\\\",[A.gelu]],[\\\"Gemm\\\",[d.gemm,d.parseGemmAttributes]],[\\\"GlobalAveragePool\\\",[v.globalAveragePool,v.parseGlobalAveragePoolAttributes]],[\\\"GlobalMaxPool\\\",[v.globalMaxPool,v.parseGlobalMaxPoolAttributes]],[\\\"InstanceNormalization\\\",[h.instanceNorm,h.parseInstanceNormAttributes]],[\\\"LayerNormalization\\\",[g.layerNorm,g.parseLayerNormAttributes]],[\\\"LeakyRelu\\\",[A.leakyRelu,A.parseAlphaAttributes]],[\\\"Log\\\",[A.log]],[\\\"MatMul\\\",[m.matMul]],[\\\"MaxPool\\\",[v.maxPool,v.parseMaxPoolAttributes]],[\\\"Mul\\\",[c.mul]],[\\\"Neg\\\",[A.neg]],[\\\"Pow\\\",[c.pow]],[\\\"Reciprocal\\\",[A.reciprocal]],[\\\"ReduceMin\\\",[y.reduceMin,y.parseReduceAttributes]],[\\\"ReduceMean\\\",[y.reduceMean,y.parseReduceAttributes]],[\\\"ReduceMax\\\",[y.reduceMax,y.parseReduceAttributes]],[\\\"ReduceSum\\\",[y.reduceSum,y.parseReduceAttributes]],[\\\"ReduceProd\\\",[y.reduceProd,y.parseReduceAttributes]],[\\\"ReduceL1\\\",[y.reduceL1,y.parseReduceAttributes]],[\\\"ReduceL2\\\",[y.reduceL2,y.parseReduceAttributes]],[\\\"ReduceLogSum\\\",[y.reduceLogSum,y.parseReduceAttributes]],[\\\"ReduceLogSumExp\\\",[y.reduceLogSumExp,y.parseReduceAttributes]],[\\\"ReduceSumSquare\\\",[y.reduceSumSquare,y.parseReduceAttributes]],[\\\"Relu\\\",[A.relu]],[\\\"Resize\\\",[b.resize,b.parseResizeAttributes]],[\\\"Sigmoid\\\",[A.sigmoid]],[\\\"Sin\\\",[A.sin]],[\\\"Sinh\\\",[A.sinh]],[\\\"Slice\\\",[S.slice,S.parseSliceAttributes]],[\\\"SkipLayerNormalization\\\",[w.skipLayerNorm,w.parseSkipLayerNormAttributes]],[\\\"Split\\\",[x.split,x.parseSplitAttributes]],[\\\"Sqrt\\\",[A.sqrt]],[\\\"Softmax\\\",[_.softmax,_.parseSoftmaxAttributes]],[\\\"Sub\\\",[c.sub]],[\\\"Tan\\\",[A.tan]],[\\\"Tanh\\\",[A.tanh]],[\\\"ThresholdedRelu\\\",[A.thresholdedRelu,A.parseAlphaAttributes]],[\\\"Tile\\\",[O.tile]],[\\\"Transpose\\\",[T.transpose,T.parseTransposeAttributes]]])},1427:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=function(e){switch(e){case 1:return\\\"f32\\\";case 2:return\\\"vec2<f32>\\\";case 3:return\\\"vec3<f32>\\\";case 4:return\\\"vec4<f32>\\\";default:throw new Error(\\\"\\\".concat(e,\\\"-component is not supported.\\\"))}},t.activationFnSnippet=function(e,t,n,r){return void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===r&&(r=3),\\\"\\\"},t.biasActivationSnippet=function(e,t){return\\\"\\\\n      \\\".concat(e?\\\"value = value + getBiasByOutputCoords(coords);\\\":\\\"\\\",\\\"\\\\n      \\\").concat(t?\\\"value = activation(value, coords);\\\":\\\"\\\",\\\"\\\\n      \\\")}},9456:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;var a=n(4955),o=n(6952),i=n(1163),c=n(1427),u=n(4085),s=n(158);t.createConv2DMatMulProgramInfo=function(e,t,n,l,f,p,d,h,g){var m=\\\"NHWC\\\"===n.format,v=m?e[0].dims[3]:e[0].dims[1],y=l[0],b=m?l[2]:l[3],w=m?l[1]:l[2],S=m?l[3]:l[1],_=((v%4==0||v%3==0)&&m||b%4==0&&!m)&&S%4==0,x=m?S:b*w,O=m?b*w:S,T=_?[8,8,1]:[x<=4?4:16,x>4&&O<=4?4:16,1],A=_?[4,4,1]:[x<=4?1:2,x>4&&O<=4?1:2,1],C=[Math.ceil(x/T[0]/A[0]),Math.ceil(O/T[1]/A[1]),Math.ceil(y/T[2]/A[1])];(0,a.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_mm_webgpu] dispatch = \\\".concat(C)}));var I=_?m&&v%4!=0?3:4:A[0],E=T[1]*A[1],P=T[0]*A[0],M=Math.max(T[0]*I,T[1]),R=f%E==0,k=p%P==0,D=d%M==0,z=_?[I,4,4]:[1,1,1],B=[\\\"@group(0) @binding(0) var<storage, read> x: array<\\\".concat(_&&4===I?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> w: array<\\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")],G=\\\"\\\\n      fn setOutputAtIndex(flatIndex : i32, value : \\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n        result[flatIndex] = \\\").concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\"(value);\\\\n      }\\\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : \\\").concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\\\n        setOutputAtIndex(flatIndex \\\").concat(_?\\\"/ 4\\\":\\\"\\\",\\\", value);\\\\n      }\\\");return h&&(B.push(\\\"@group(0) @binding(2) var<storage, read> bias: array<\\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")),G+=\\\"\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> \\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\" {\\\\n          return bias[coords.\\\").concat(m?\\\"w\\\":\\\"y\\\").concat(_?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n        }\\\")),r(r({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:C[0],y:C[1],z:C[2]}},getShaderSource:function(){return\\\"\\\\n        \\\".concat(u.utilFunctions,\\\"\\\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\\\n        \\\").concat(B.join(\\\"\\\"),\\\"\\\\n        @group(0) @binding(\\\").concat(B.length,\\\") var<storage, read_write> result: array<\\\").concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\\n        //@group(0) @binding(\\\").concat(B.length+1,\\\") var<uniform> uniforms: Uniforms;\\\\n\\\\n        const xShape : vec4<i32> = vec4<i32>(\\\").concat(e[0].dims.join(\\\",\\\"),\\\");\\\\n        const wShape : vec4<i32> = vec4<i32>(\\\").concat(e[1].dims.join(\\\",\\\"),\\\");\\\\n        const outShape : vec4<i32> = vec4<i32>(\\\").concat(l.join(\\\",\\\"),\\\");\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(\\\").concat(o.ShapeUtil.computeStrides(l).slice(0,3).join(\\\",\\\"),\\\");\\\\n        const filterDims : vec2<i32> = vec2<i32>(\\\").concat(n.kernelShape[0],\\\", \\\").concat(n.kernelShape[1],\\\");\\\\n        const pad : vec2<i32> = vec2<i32>(\\\").concat(n.pads[0],\\\", \\\").concat(n.pads[1],\\\");\\\\n        const stride : vec2<i32> = vec2<i32>(\\\").concat(n.strides[0],\\\", \\\").concat(n.strides[1],\\\");\\\\n        const dilation : vec2<i32> = vec2<i32>(\\\").concat(n.dilations[0],\\\", \\\").concat(n.dilations[1],\\\");\\\\n        const dimAOuter : i32 = \\\").concat(f,\\\";\\\\n        const dimBOuter : i32 = \\\").concat(p,\\\";\\\\n        const dimInner : i32 = \\\").concat(d,\\\";\\\\n        \\\").concat(G,\\\"\\\\n        \\\").concat(function(e,t,n,r,a,o,i,u,s,l){void 0===a&&(a=!1),void 0===i&&(i=!1),void 0===u&&(u=4),void 0===s&&(s=4),void 0===l&&(l=4);var f=e?\\\"\\\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\\\n    \\\":\\\"\\\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\\\n    \\\",p=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",d=e?\\\"xShape[1]\\\":\\\"xShape[2]\\\",h=e?\\\"xShape[2]\\\":\\\"xShape[3]\\\",g=e?\\\"row\\\":\\\"col\\\",m=e?\\\"col\\\":\\\"row\\\",v=\\\"\\\\n    let inChannels = wShape[2];\\\\n    let outWidth = \\\".concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n    let outRow = \\\").concat(g,\\\" / outWidth;\\\\n    let outCol = \\\").concat(g,\\\" % outWidth;\\\\n\\\\n    let WRow = \\\").concat(m,\\\" / (filterDims[1] * inChannels);\\\\n    let WCol = \\\").concat(m,\\\" / inChannels % filterDims[1];\\\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\\\n    let xCh = \\\").concat(m,\\\" % inChannels;\\\\n    var resData = \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\\n    // The bounds checking is always needed since we use it to pad zero for\\\\n    // the 'same' padding type.\\\\n    if (xRow >= 0 && xRow < \\\").concat(d,\\\" && xCol >= 0 && xCol < \\\").concat(h,\\\") {\\\\n      \\\").concat(f,\\\"\\\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\\\n      \\\").concat(function(e){switch(e){case 1:return\\\"resData = x[xIndex];\\\";case 3:return\\\"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\\\";case 4:return\\\"resData = x[xIndex / 4];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(u),\\\"\\\\n    }\\\\n    return resData;\\\"),y=e?t&&r?\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    \\\").concat(v):\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    if (row < dimAOuter && col < dimInner) {\\\\n      \\\").concat(v,\\\"\\\\n    }\\\\n    return \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\"):r&&n?\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    \\\").concat(v):\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    if (row < dimInner && col < dimBOuter) {\\\\n      \\\").concat(v,\\\"\\\\n    }\\\\n    return \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\"),b=\\\"\\\".concat(function(e){switch(e){case 1:return\\\"return w[row * wShape[3] + colIn];\\\";case 4:return\\\"return w[row * wShape[3] / 4 + colIn];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(s)),w=(0,c.typeSnippet)(l),S=e?(0,c.typeSnippet)(u):(0,c.typeSnippet)(s),_=e?(0,c.typeSnippet)(s):(0,c.typeSnippet)(u);return\\\"\\\\n    \\\".concat((0,c.activationFnSnippet)(o,i,4===l,4),\\\"\\\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> \\\").concat(S,\\\" {\\\\n      \\\").concat(e?y:b,\\\"\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> \\\").concat(_,\\\" {\\\\n      \\\").concat(e?b:y,\\\"\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : \\\").concat(w,\\\") {\\\\n      let col = colIn * \\\").concat(l,\\\";\\\\n      if (row < dimAOuter && col < dimBOuter)\\\\n      {\\\\n      var value = valueIn;\\\\n      let outWidth = \\\").concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n      \\\").concat(p,\\\"\\\\n      \\\").concat((0,c.biasActivationSnippet)(a,o),\\\"\\\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\\\n      }\\\\n    }\\\")}(m,R,k,D,h,void 0,!1,z[0],z[1],z[2]),\\\"\\\\n            \\\").concat(_?(0,s.makeMatMulPackedVec4Source)(A,T,!m,M):(0,s.makeMatMulPackedSource)(A,T,!m,M,!1,void 0,g))}})}},6514:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConvTranspose2DProgramInfo=void 0;var a=n(4955),o=n(6952),i=n(1163),c=n(2075);t.createConvTranspose2DProgramInfo=function(e,t,n,u){var s=e.length>2,l=\\\"NHWC\\\"===n.format,f=n.outputShape,p=f[0],d=f[l?1:2],h=f[l?2:3],g=f[l?3:1],m=e[0].dims[l?3:1]%4==0&&g%4==0,v=l?g:d*h,y=l?d*h:g,b=m?[8,8,1]:[v<=4?4:16,v>4&&y<=4?4:16,1],w=m?[4,4,1]:[v<=4?1:2,v>4&&y<=4?1:2,1],S=[Math.ceil(v/b[0]/w[0]),Math.ceil(y/b[1]/w[1]),Math.ceil(p/b[2]/w[1])];return(0,a.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_backprop_webgpu] dispatch = \\\".concat(S)})),r(r({},t),{outputs:[{dims:u?u(f):f,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:S[0],y:S[1],z:S[2]}},getShaderSource:function(t){return function(e,t,n,r,a,i){var u=\\\"NHWC\\\"===n.format,s=u?1:2,l=u?2:3,f=u?3:1,p=o.ShapeUtil.size(r),d=r[u?3:1],h=t[0].dims[u?3:1],g=h%4==0&&d%4==0,m=g?2:1,v=[\\\"@group(0) @binding(0) var<storage, read> Dy: array<\\\".concat(g&&4===(g?u&&h%4!=0?3:4:i[0])?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> W: array<\\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")],y=\\\"\\\\n  fn setOutputAtIndex(flatIndex : u32, value : \\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n    result[flatIndex] = \\\").concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\"(value);\\\\n  }\\\");a&&(v.push(\\\"@group(0) @binding(2) var<storage, read> bias: array<\\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")),y+=\\\"\\\\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> \\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\" {\\\\n      return bias[coords.\\\").concat(u?\\\"w\\\":\\\"y\\\").concat(g?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n    }\\\"));var b=(0,c.inputVariable)(\\\"W\\\",t[1].dataType,t[1].dims),w=(0,c.inputVariable)(\\\"Dy\\\",t[0].dataType,t[0].dims),S=(0,c.outputVariable)(\\\"result\\\",t[0].dataType,r),_=\\\"{\\\\n        let batch: u32 = global_id.z / outShape[1];\\\\n        let r = global_id.z % outShape[1];\\\\n        let c = global_id.y * \\\".concat(m,\\\";\\\\n        let d1: u32 = global_id.x * 4;\\\\n\\\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\\\\n\\\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n        // ? = to be determined. : = across all values in that axis.\\\\n        var dotProd: array<vec4<f32>, \\\").concat(m,\\\">;\\\\n        for (var i = 0; i < \\\").concat(m,\\\"; i++) {\\\\n          dotProd[i] = vec4<f32>(0.0);\\\\n        }\\\\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\\\\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\\\\n          let wRPerm: u32= filterDims[0] - 1 - wR;\\\\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\\\\n              fract(dyR) > 0.0) {\\\\n            continue;\\\\n          }\\\\n          let idyR: u32 = u32(dyR);\\\\n\\\\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\\\\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\\\\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\\\\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\\\\n            var bDyCVal = true;\\\\n            var bDyCVal2 = true;\\\\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                fract(dyC) > 0.0) {\\\\n              bDyCVal = false;\\\\n            }\\\\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\\\\n                fract(dyC2) > 0.0) {\\\\n              bDyCVal2 = false;\\\\n            }\\\\n\\\\n            let idyC: u32 = u32(dyC);\\\\n            let idyC2: u32 = u32(dyC2);\\\\n            if (bDyCVal && bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue1 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue2 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue3 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"),\\\";\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n\\\\n                xValue =  \\\").concat(u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC2\\\"),\\\";\\\\n\\\\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\\\\n                                                    xValue * wValue1,\\\\n                                                    xValue * wValue2,\\\\n                                                    xValue * wValue3);\\\\n              }\\\\n            } else if (bDyCVal) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue1 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue2 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue3 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"),\\\";\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n              }\\\\n            } else if (bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue1 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue2 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                let wValue3 = \\\").concat(b.get(\\\"d2\\\",\\\"d1 + 3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"),\\\";\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[1] = dotProd[1] + tmpval;\\\\n              }\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        for (var i: u32 = 0; i < \\\").concat(m,\\\"; i = i + 1) {\\\\n          \\\").concat(S.set(\\\"batch\\\",\\\"r\\\",\\\"c+i\\\",\\\"d1\\\",\\\"dotProd[i]\\\"),\\\";\\\\n        }\\\\n      }\\\"),x=\\\"\\\\n          let outputIndices = \\\".concat(S.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          let batch = outputIndices[0];\\\\n          let d1 = outputIndices[\\\").concat(f,\\\"];\\\\n          let dyCorner = vec2<i32>(i32(outputIndices[\\\").concat(s,\\\"]), i32(outputIndices[\\\").concat(l,\\\"])) - pads;\\\\n          let dyRCorner = dyCorner.x;\\\\n          let dyCCorner = dyCorner.y;\\\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n          // ? = to be determined. : = across all values in that axis.\\\\n          var dotProd = 0.0;\\\\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\\\\n            if (wR % dilations.x != 0) {\\\\n              continue;\\\\n            }\\\\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\\\\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\\\\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\\\\n                wRPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            let idyR: u32 = u32(dyR);\\\\n\\\\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\\\\n              if (wC % dilations.y != 0) {\\\\n                continue;\\\\n              }\\\\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\\\\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\\\\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\\\n                continue;\\\\n              }\\\\n              let idyC: u32 = u32(dyC);\\\\n\\\\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\\\\n                let xValue = \\\").concat(u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"),\\\";\\\\n                let wValue = \\\").concat(b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"),\\\";\\\\n                dotProd = dotProd + xValue * wValue;\\\\n              }\\\\n            }\\\\n          }\\\\n          \\\").concat(S.setByOffset(\\\"global_idx\\\",\\\"dotProd\\\"),\\\";\\\\n        \\\"),O=\\\"\\\\n  \\\".concat(y,\\\"\\\\n  \\\").concat(v.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(v.length,\\\") var<storage, read_write> result: array<\\\").concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\\n  const outShape : vec4<u32> = vec4<u32>(\\\").concat(r.join(\\\",\\\"),\\\");\\\\n  const outBackprop : vec4<u32> = vec4<u32>(\\\").concat(t[0].dims.join(\\\",\\\"),\\\");\\\\n  const strides : vec2<u32> = vec2<u32>(\\\").concat(n.strides[0],\\\", \\\").concat(n.strides[1],\\\");\\\\n  const filterDims : vec2<u32> = vec2<u32>(\\\").concat(n.kernelShape[u?1:2],\\\", \\\").concat(n.kernelShape[u?2:3],\\\");\\\\n  const dilations : vec2<u32> = vec2<u32>(\\\").concat(n.dilations[0],\\\", \\\").concat(n.dilations[1],\\\");\\\\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\\\\n          \\\").concat(n.dilations[0]<=1?0:(n.kernelShape[u?1:2]-1)*(n.dilations[0]-1),\\\",\\\\n          \\\").concat(n.dilations[1]<=1?0:(n.kernelShape[u?2:3]-1)*(n.dilations[1]-1),\\\");\\\\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (\\\").concat(n.pads[0]+n.pads[2],\\\")/2,\\\\n                                     i32(effectiveFilterDims[1]) - 1 - (\\\").concat(n.pads[1]+n.pads[3],\\\")/2);\\\\n    \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\\\";\\\\n  \\\").concat(g?_:x,\\\"}\\\");return\\\"  \\\".concat(b.impl(),\\\"\\\\n  \\\").concat(w.impl(),\\\"\\\\n  \\\").concat(S.impl(),\\\"\\\\n  \\\").concat(O)}(t,e,n,f,s,w)}})}},4085:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.utilFunctions=void 0,t.utilFunctions=\\\"\\\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\\\n}\\\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\\\n}\\\\n\\\"},158:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0,t.makeMatMulPackedVec4Source=function(e,t,n,r,a,o,i){void 0===n&&(n=!1),void 0===r&&(r=32),void 0===a&&(a=!1),void 0===o&&(o=32),void 0===i&&(i=!1);var c,u=t[1]*e[1],s=t[0]*e[0],l=n?u:r,f=n?r:u,p=l/t[0],d=r/t[1];if((!n||4!==p||4!==e[1])&&(n||3!==p&&4!==p)||l%t[0]!=0||r%t[1]!=0||4!==e[0])throw new Error(\\\"If transposeA \\\".concat(n,\\\" is true, innerElementSize \\\").concat(p,\\\" and workPerThread[1] \\\").concat(e[1],\\\" must be 4.\\\\n      Otherwise, innerElementSize \\\").concat(p,\\\" must be 3 or 4.\\\\n  tileAWidth \\\").concat(l,\\\" must be divisible by workgroupSize[0]\\\").concat(t[0],\\\". tileInner \\\").concat(r,\\\" must be divisible by workgroupSize[1] \\\").concat(t[1],\\\". colPerThread \\\").concat(e[0],\\\" must be 4.\\\"));return\\\"\\\\nvar<workgroup> mm_Asub : array<array<vec\\\".concat(p,\\\"<f32>, \\\").concat(l/p,\\\">, \\\").concat(f,\\\">;\\\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, \\\").concat(s/e[0],\\\">, \\\").concat(r,\\\">;\\\\n\\\\nconst rowPerThread = \\\").concat(e[1],\\\";\\\\nconst colPerThread = \\\").concat(e[0],\\\";\\\\nconst innerElementSize = \\\").concat(p,\\\";\\\\nconst tileInner = \\\").concat(r,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(t[0],\\\", \\\").concat(t[1],\\\", \\\").concat(t[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n  let localRow = i32(localId.y);\\\\n  let tileRow = \\\").concat(i?\\\"0\\\":\\\"localRow * rowPerThread\\\",\\\";\\\\n  let tileCol = i32(localId.x);\\\\n\\\\n  let globalRow = \\\").concat(i?\\\"0\\\":\\\"i32(globalId.y) * rowPerThread\\\",\\\";\\\\n  let globalCol = i32(globalId.x);\\\\n  let batch = \\\").concat(a?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n  let globalRowStart = i32(workgroupId.y) * \\\").concat(u,\\\";\\\\n\\\\n  let numTiles = \\\").concat(a?\\\"\\\".concat(Math.ceil(o/r)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n  var kStart = \\\").concat(a?\\\"i32(globalId.z) * \\\".concat(o):\\\"0\\\",\\\";\\\\n\\\\n  var acc: array<vec4<f32>, rowPerThread>;\\\\n\\\\n  // Loop over shared dimension.\\\\n  let tileRowB = localRow * \\\").concat(d,\\\";\\\\n  for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRow + innerRow;\\\\n          let inputCol = tileCol;\\\\n          \\\").concat((c=n,c?\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          kStart + inputRow,\\\\n          globalRowStart / innerElementSize + inputCol);\\\\n        \\\":\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          globalRow + innerRow,\\\\n          kStart / innerElementSize + inputCol);\\\\n        \\\"),\\\"\\\\n      }\\\\n\\\\n      // Load one tile of B into local memory.\\\\n      for (var innerRow = 0; innerRow < \\\").concat(d,\\\"; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRowB + innerRow;\\\\n          let inputCol = tileCol;\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\\\n          \\\").concat(3===p?\\\"\\\":\\\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\\\",\\\"\\\\n\\\\n          \\\").concat(function(e,t){return e?\\\"\\\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\\\n        \\\".concat(3===t?\\\"\\\":\\\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\\\",\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\\\n          \\\").concat(3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached3[i] + acc[i];\\\",\\\"\\\\n        }\\\"):\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          let ACached = mm_Asub[tileRow + i][k];\\\\n          acc[i] = BCached0 * ACached.x + acc[i];\\\\n          acc[i] = BCached1 * ACached.y + acc[i];\\\\n          acc[i] = BCached2 * ACached.z + acc[i];\\\\n          \\\".concat(3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached.w + acc[i];\\\",\\\"\\\\n        }\\\")}(n,p),\\\"\\\\n      }\\\\n\\\\n      workgroupBarrier();\\\\n  }\\\\n\\\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\\\n  }\\\\n}\\\")};var n=function(e){return e?\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              kStart + inputRow,\\\\n              globalRowStart + inputCol);\\\\n            \\\":\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              globalRowStart + inputRow,\\\\n              kStart + inputCol);\\\\n            \\\"};t.makeMatMulPackedSource=function(e,t,r,a,o,i,c){void 0===r&&(r=!1),void 0===a&&(a=32),void 0===o&&(o=!1),void 0===i&&(i=32),void 0===c&&(c=!1);var u=e[1]*t[1],s=e[0]*t[0],l=r?u:a,f=r?a:u;if(f%t[1]!=0||l%t[0]!=0||a%t[1]!=0)throw new Error(\\\"tileAHight \\\".concat(f,\\\" must be divisible by workgroupSize[1]\\\").concat(t[1],\\\", tileAWidth \\\").concat(l,\\\" must be divisible by workgroupSize[0]\\\").concat(t[0],\\\", tileInner \\\").concat(a,\\\" must be divisible by workgroupSize[1]\\\").concat(t[1]));var p=f/t[1],d=l/t[0],h=a/t[1],g=c?\\\"\\\\n    let localRow = i32(localId.y);\\\\n    let localCol = i32(localId.x);\\\\n    let globalRowStart = i32(workgroupId.y) * \\\".concat(u,\\\";\\\\n    let globalColStart = i32(workgroupId.x) * \\\").concat(s,\\\";\\\\n\\\\n    // Loop over shared dimension.\\\\n    for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(f,\\\"; inputRow = inputRow + \\\").concat(t[1],\\\") {\\\\n        for (var inputCol = localCol; inputCol < \\\").concat(l,\\\"; inputCol = inputCol + \\\").concat(t[0],\\\") {\\\\n          \\\").concat(n(r),\\\"\\\\n        }\\\\n      }\\\\n      // Load one tile of B into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(a,\\\"; inputRow = inputRow + \\\").concat(t[1],\\\") {\\\\n            for (var inputCol = localCol; inputCol < \\\").concat(s,\\\"; inputCol = inputCol + \\\").concat(t[0],\\\") {\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n            kStart + inputRow,\\\\n            globalColStart + inputCol);\\\\n        }\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      var BCached : array<f32, colPerThread>;\\\\n      for (var k = 0; k < tileInner; k = k + 1) {\\\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n          BCached[inner] = mm_Bsub[k][localCol + inner * \\\").concat(t[0],\\\"];\\\\n        }\\\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let ACached = \\\").concat(r?\\\"mm_Asub[k][localRow + innerRow * \\\".concat(t[1],\\\"];\\\"):\\\"mm_Asub[localRow + innerRow * \\\".concat(t[1],\\\"][k];\\\"),\\\"\\\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\\\n                ACached * BCached[innerCol];\\\\n          }\\\\n        }\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      let gRow = globalRowStart + localRow + innerRow * \\\").concat(t[1],\\\";\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        let gCol = globalColStart + localCol + innerCol * \\\").concat(t[0],\\\";\\\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\\\n      }\\\\n    }\\\\n    \\\"):\\\"\\\\nlet tileRow = i32(localId.y) * rowPerThread;\\\\nlet tileCol = i32(localId.x) * colPerThread;\\\\n\\\\nlet globalRow = i32(globalId.y) * rowPerThread;\\\\nlet globalCol = i32(globalId.x) * colPerThread;\\\\nlet globalRowStart = i32(workgroupId.y) * \\\".concat(u,\\\";\\\\n\\\\nlet tileRowA = i32(localId.y) * \\\").concat(p,\\\";\\\\nlet tileColA = i32(localId.x) * \\\").concat(d,\\\";\\\\nlet tileRowB = i32(localId.y) * \\\").concat(h,\\\";\\\\n// Loop over shared dimension.\\\\nfor (var t = 0; t < numTiles; t = t + 1) {\\\\n  // Load one tile of A into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(p,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < \\\").concat(d,\\\"; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowA + innerRow;\\\\n      let inputCol = tileColA + innerCol;\\\\n      \\\").concat(n(r),\\\"\\\\n    }\\\\n  }\\\\n\\\\n  // Load one tile of B into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(h,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowB + innerRow;\\\\n      let inputCol = tileCol + innerCol;\\\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n        kStart + inputRow,\\\\n        globalCol + innerCol);\\\\n    }\\\\n  }\\\\n  kStart = kStart + tileInner;\\\\n  workgroupBarrier();\\\\n\\\\n  // Compute acc values for a single thread.\\\\n  var BCached : array<f32, colPerThread>;\\\\n  for (var k = 0; k < tileInner; k = k + 1) {\\\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\\\n    }\\\\n\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      \\\").concat(function(e){return e?\\\"let ACached = mm_Asub[k][tileRow + innerRow];\\\":\\\"let ACached = mm_Asub[tileRow + innerRow][k];\\\"}(r),\\\"\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  workgroupBarrier();\\\\n}\\\\n\\\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\\\n        acc[innerRow][innerCol]);\\\\n  }\\\\n}\\\\n\\\");return\\\"\\\\n  var<workgroup> mm_Asub : array<array<f32, \\\".concat(l,\\\">, \\\").concat(f,\\\">;\\\\n  var<workgroup> mm_Bsub : array<array<f32, \\\").concat(s,\\\">, \\\").concat(a,\\\">;\\\\n  const rowPerThread = \\\").concat(e[1],\\\";\\\\n  const colPerThread = \\\").concat(e[0],\\\";\\\\n  const tileInner = \\\").concat(a,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(t[0],\\\", \\\").concat(t[1],\\\", \\\").concat(t[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n    let batch = \\\").concat(o?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n    let numTiles = \\\").concat(o?\\\"\\\".concat(Math.ceil(i/a)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n    var kStart = \\\").concat(o?\\\"i32(globalId.z) * \\\".concat(i):\\\"0\\\",\\\";\\\\n\\\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\\\n\\\\n    // Without this initialization strange values show up in acc.\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = 0.0;\\\\n      }\\\\n    }\\\\n    \\\").concat(g,\\\"\\\\n  }\\\\n\\\")}},1868:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseArgMinMaxAttributes=t.argMax=t.argMin=void 0;var a=n(387),o=n(1163),i=n(6031),c=function(e){if(!e||0===e.length||e.length>2)throw new Error(\\\"ArgMinMaxOp op requires 1 or 2 inputs.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=function(e,t,n,c){var u=1===e.length?n:function(e,t){return(0,a.createAttributeWithCacheKey)({axis:t.axis,keepDims:t.keepDims,selectLastIndex:t.selectLastIndex})}(0,n),s=u.cacheKey+e.map((function(e){return e.dims.toString()})).join(\\\"_\\\"),l={name:t,inputTypes:[o.GpuDataType.default],cacheHint:s};return r(r({},l),{get:function(){return(0,i.createReduceProgramInfo)(l,[e[0]],c,[u.axis],7,u.keepDims)}})};t.argMin=function(e,t){c(e.inputs),e.compute(u(e.inputs,\\\"ArgMin\\\",t,(function(e,n,r){for(var a=[],o=0;o<e.shape.length;o++)(r.indexOf(o)>=0||0===r.length)&&a.push(\\\"inputIndices[\\\".concat(o,\\\"] = 0;\\\"));return[\\\"\\\".concat(a.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\nvar bestIndex : i32 = 0;\\\"),\\\"if (\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\" \\\").concat(t.selectLastIndex>0?\\\"<=\\\":\\\"<\\\",\\\" value) {\\\\n         value = \\\").concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\n         bestIndex = i32(lastIndex);\\\\n       }\\\"),\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.argMax=function(e,t){c(e.inputs),e.compute(u(e.inputs,\\\"argMax\\\",t,(function(e,n,r){for(var a=[],o=0;o<e.shape.length;o++)(r.indexOf(o)>=0||0===r.length)&&a.push(\\\"inputIndices[\\\".concat(o,\\\"] = 0;\\\"));return[\\\"\\\".concat(a.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\nvar bestIndex : i32 = 0;\\\"),\\\"if (\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\" \\\").concat(t.selectLastIndex>0?\\\">=\\\":\\\">\\\",\\\" value) {\\\\n         value = \\\").concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\n         bestIndex = i32(lastIndex);\\\\n       }\\\"),\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.parseArgMinMaxAttributes=function(e){return(0,a.createAttributeWithCacheKey)(e)}},504:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.sub=t.pow=t.mul=t.div=t.add=void 0;var a=n(6952),o=n(1163),i=n(2075),c=function(e,t,n,c,u){var s={name:t,inputTypes:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:u};return r(r({},s),{get:function(){return function(e,t,n,c,u,s){var l,f;void 0===s&&(s=t.dataType);var p=!a.ShapeUtil.areEqual(t.dims,n.dims),d=t.dims,h=a.ShapeUtil.size(t.dims),g=!1;if(p){var m=a.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!m)throw new Error(\\\"Can't perform binary op on the given tensors\\\");d=m,h=a.ShapeUtil.size(d);for(var v=1,y=0;y<d.length;y++){var b=null!==(l=t.dims[t.dims.length-y])&&void 0!==l?l:1;if(b!==(null!==(f=n.dims[n.dims.length-y])&&void 0!==f?f:1))break;v*=b}v%4==0&&(g=!0)}else g=!0;return r(r({},e),{getShaderSource:function(e){return function(e,t,n,r,o,c,u,s,l,f,p){var d,h,g=a.ShapeUtil.size(r),m=Math.ceil(g/4);\\\"string\\\"==typeof u?d=h=function(e,t){return\\\"\\\".concat(u,\\\"((\\\").concat(e,\\\"),(\\\").concat(t,\\\"))\\\")}:\\\"function\\\"==typeof u?d=h=u:(d=u.scalar,h=u.vector);var v,y=\\\"\\\",b=(0,i.outputVariable)(\\\"outputData\\\",f,r,4),w=(0,i.inputVariable)(\\\"aData\\\",s,t,4),S=(0,i.inputVariable)(\\\"bData\\\",l,n,4);if(c){var _=function(e){for(var t=a.ShapeUtil.computeStrides(e),n=[],o=e.length-1;o>=0;o--){var i=0===r.length?\\\"0u\\\":1===r.length?\\\"outputIndices\\\":\\\"outputIndices[\\\".concat(o+r.length-e.length,\\\"]\\\");n.push(\\\"\\\".concat(t[o],\\\"u * (\\\").concat(i,\\\" % \\\").concat(e[o],\\\"u)\\\"))}return n.length>0?n.join(\\\"+\\\"):\\\"0u\\\"};y=\\\"\\\\n  fn calcOffsetA(outputIndices: \\\".concat(b.type.indices,\\\") -> u32 {\\\\n    return \\\").concat(_(t),\\\";\\\\n  }\\\\n\\\\n  fn calcOffsetB(outputIndices: \\\").concat(b.type.indices,\\\") -> u32 {\\\\n    return \\\").concat(_(n),\\\";\\\\n  }\\\\n  \\\")}if(o)v=c?\\\"\\\\n      let outputIndices = \\\".concat(b.offsetToIndices(\\\"global_idx * 4u\\\"),\\\";\\\\n      let offsetA = calcOffsetA(outputIndices);\\\\n      let offsetB = calcOffsetB(outputIndices);\\\\n      \\\").concat(b.setByOffset(\\\"global_idx\\\",h(w.getByOffset(\\\"offsetA / 4u\\\"),S.getByOffset(\\\"offsetB / 4u\\\")))):b.setByOffset(\\\"global_idx\\\",h(w.getByOffset(\\\"global_idx\\\"),S.getByOffset(\\\"global_idx\\\")));else{if(!c)throw new Error(\\\"no necessary to use scalar implementation for element-wise binary op implementation.\\\");var x=function(e){var t=\\\"aData[indexA\\\".concat(e,\\\"][componentA\\\").concat(e,\\\"]\\\"),n=\\\"bData[indexB\\\".concat(e,\\\"][componentB\\\").concat(e,\\\"]\\\");return\\\"\\\\n      let outputIndices\\\".concat(e,\\\" = \\\").concat(b.offsetToIndices(\\\"global_idx * 4u + \\\".concat(e,\\\"u\\\")),\\\";\\\\n      let offsetA\\\").concat(e,\\\" = calcOffsetA(outputIndices\\\").concat(e,\\\");\\\\n      let offsetB\\\").concat(e,\\\" = calcOffsetB(outputIndices\\\").concat(e,\\\");\\\\n      let indexA\\\").concat(e,\\\" = offsetA\\\").concat(e,\\\" / 4u;\\\\n      let indexB\\\").concat(e,\\\" = offsetB\\\").concat(e,\\\" / 4u;\\\\n      let componentA\\\").concat(e,\\\" = offsetA\\\").concat(e,\\\" % 4u;\\\\n      let componentB\\\").concat(e,\\\" = offsetB\\\").concat(e,\\\" % 4u;\\\\n      outputData[global_idx][\\\").concat(e,\\\"] = \\\").concat(d(t,n),\\\";\\\")};v=\\\"\\\\n      \\\".concat(x(0),\\\"\\\\n      \\\").concat(x(1),\\\"\\\\n      \\\").concat(x(2),\\\"\\\\n      \\\").concat(x(3))}return\\\"\\\\n  \\\".concat(e.declareVariables(w,S,b),\\\"\\\\n\\\\n  \\\").concat(null!=p?p:\\\"\\\",\\\"\\\\n  \\\").concat(y,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(m),\\\"\\\\n    \\\").concat(v,\\\"\\\\n  }\\\")}(e,t.dims,n.dims,d,g,p,c,t.dataType,n.dataType,s,u)},outputs:[{dims:d,dataType:s,gpuDataType:o.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(h/64/(g?4:1))}}})}(s,e[0],e[1],n,c)}})};t.add=function(e){e.compute(c(e.inputs,\\\"Add\\\",(function(e,t){return\\\"\\\".concat(e,\\\"+\\\").concat(t)})))},t.div=function(e){e.compute(c(e.inputs,\\\"Div\\\",(function(e,t){return\\\"\\\".concat(e,\\\"/\\\").concat(t)})))},t.mul=function(e){e.compute(c(e.inputs,\\\"Mul\\\",(function(e,t){return\\\"\\\".concat(e,\\\"*\\\").concat(t)})))},t.pow=function(e){var t=(0,i.inputVariable)(\\\"input\\\",e.inputs[0].dataType,e.inputs[0].dims).type.value,n=\\\"i32\\\"===t?\\\"round\\\":\\\"\\\";e.compute(c(e.inputs,\\\"Pow\\\",{scalar:function(e,t){return\\\"pow_custom(\\\".concat(e,\\\",\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"pow_vector_custom(\\\".concat(e,\\\",\\\").concat(t,\\\")\\\")}},\\\"\\\\n    fn pow_custom(a : \\\".concat(t,\\\", b : \\\").concat(t,\\\") -> \\\").concat(t,\\\" {\\\\n      if (b == \\\").concat(t,\\\"(0.0)) {\\\\n        return \\\").concat(t,\\\"(1.0);\\\\n      } else if (a < \\\").concat(t,\\\"(0.0) && f32(b) != floor(f32(b))) {\\\\n        return \\\").concat(t,\\\"(pow(f32(a), f32(b))); // NaN\\\\n      }\\\\n      return select(sign(a), \\\").concat(t,\\\"(1.0), round(f32(abs(b) % \\\").concat(t,\\\"(2.0))) != 1.0) * \\\").concat(t,\\\"(\\\").concat(n,\\\"(pow(f32(abs(a)), f32(b))));\\\\n    }\\\\n    fn pow_vector_custom(a : vec4<\\\").concat(t,\\\">, b : vec4<\\\").concat(t,\\\">) -> vec4<\\\").concat(t,\\\"> {\\\\n      // TODO: implement vectorized pow\\\\n      return vec4<\\\").concat(t,\\\">(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\\\\n    }\\\\n      \\\")))},t.sub=function(e){e.compute(c(e.inputs,\\\"Sub\\\",(function(e,t){return\\\"\\\".concat(e,\\\"-\\\").concat(t)})))}},2075:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createShaderHelper=t.outputVariable=t.inputVariable=t.tensorTypeToWsglStorageType=t.WORKGROUP_SIZE=void 0;var r=n(6952);t.WORKGROUP_SIZE=64;var a=function(e,t){switch(e){case 1:return t>1?\\\"vec\\\".concat(t,\\\"<f32>\\\"):\\\"f32\\\";case 6:return t>1?\\\"vec\\\".concat(t,\\\"<i32>\\\"):\\\"i32\\\";case 12:return t>1?\\\"vec\\\".concat(t,\\\"<u32>\\\"):\\\"u32\\\";case 7:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"i32\\\"];case 13:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"u32\\\"];case 9:if(4!==t)throw new Error(\\\"bool must be vec4\\\");return[\\\"u32\\\",\\\"vec4<bool>\\\"];default:throw new Error(\\\"Unknown data type: \\\".concat(e))}};t.tensorTypeToWsglStorageType=function(e,t){void 0===t&&(t=1);var n=a(e,t);return\\\"string\\\"==typeof n?n:n[0]};var o=function(e,t,n,o,i){for(var c=n.length,u=c<2?\\\"u32\\\":c<=4?\\\"vec\\\".concat(c,\\\"<u32>\\\"):\\\"array<u32, \\\".concat(c,\\\">\\\"),s=a(t,i),l=\\\"string\\\"==typeof s?s:s[1],f=\\\"string\\\"==typeof s?s:s[0],p={indices:u,value:l,storage:f,tensor:t},d=function(e){return\\\"string\\\"==typeof e?e:\\\"\\\".concat(e,\\\"u\\\")},h={offsetToIndices:!1,indicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},g=r.ShapeUtil.computeStrides(n),m=\\\"\\\",v=0;v<c-1;v++)m+=\\\"\\\\n    let dim\\\".concat(v,\\\" = current / \\\").concat(g[v],\\\"u;\\\\n    let rest\\\").concat(v,\\\" = current % \\\").concat(g[v],\\\"u;\\\\n    indices[\\\").concat(v,\\\"] = dim\\\").concat(v,\\\";\\\\n    current = rest\\\").concat(v,\\\";\\\\n    \\\");m+=\\\"indices[\\\".concat(c-1,\\\"] = current;\\\");var y=c<2?\\\"\\\":\\\"\\\\n  fn o2i_\\\".concat(e,\\\"(offset: u32) -> \\\").concat(p.indices,\\\" {\\\\n    var indices: \\\").concat(p.indices,\\\";\\\\n    var current = offset;\\\\n    \\\").concat(m,\\\"\\\\n    return indices;\\\\n  }\\\"),b=[];if(c>=2)for(v=c-1;v>=0;v--)b.push(\\\"\\\".concat(g[v],\\\"u * (indices[\\\").concat(v,\\\"])\\\"));var w,S,_=c<2?\\\"\\\":\\\"\\\\n  fn i2o_\\\".concat(e,\\\"(indices: \\\").concat(p.indices,\\\") -> u32 {\\\\n    return \\\").concat(b.join(\\\"+\\\"),\\\";\\\\n  }\\\"),x=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===c?\\\"0u\\\":\\\"\\\".concat(p.indices,\\\"(\\\").concat(e.map(d).join(\\\",\\\"),\\\")\\\")},O=function(t,n){return function(){if(p.storage===p.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=\\\").concat(n,\\\";\\\");if(\\\"vec2<u32>\\\"===p.storage&&\\\"i32\\\"===p.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=vec2<u32>(u32(\\\").concat(n,\\\"), select(0u, 0xFFFFFFFFu, \\\").concat(n,\\\" < 0));\\\");if(\\\"vec2<u32>\\\"===p.storage&&\\\"u32\\\"===p.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=vec2<u32>(u32(\\\").concat(n,\\\"), 0u);\\\");if(\\\"u32\\\"===p.storage&&\\\"vec4<bool>\\\"===p.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(\\\").concat(n,\\\"));\\\");throw new Error(\\\"not supported combination of storage type \\\".concat(p.storage,\\\" and value type \\\").concat(p.value,\\\" yet\\\"))}()},T=function(t){return function(){if(p.storage===p.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]\\\");if(\\\"vec2<u32>\\\"===p.storage&&\\\"i32\\\"===p.value)return\\\"i32(\\\".concat(e,\\\"[\\\").concat(t,\\\"].x)\\\");if(\\\"vec2<u32>\\\"===p.storage&&\\\"u32\\\"===p.value)return\\\"u32(\\\".concat(e,\\\"[\\\").concat(t,\\\"].x)\\\");if(\\\"u32\\\"===p.storage&&\\\"vec4<bool>\\\"===p.value)return\\\"vec4<bool>(bool(\\\".concat(e,\\\"[\\\").concat(t,\\\"] & 0xFFu), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF00u), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF0000u), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF000000u))\\\");throw new Error(\\\"not supported combination of storage type \\\".concat(p.storage,\\\" and value type \\\").concat(p.value,\\\" yet\\\"))}()},A=c<2?\\\"\\\":\\\"\\\\n  fn get_\\\".concat(e,\\\"ByIndices(indices: \\\").concat(p.indices,\\\") -> \\\").concat(l,\\\" {\\\\n    return \\\").concat(e,\\\"[i2o_\\\").concat(e,\\\"(indices)];\\\\n  }\\\"),C=c<2?\\\"\\\":(w=n.map((function(e,t){return\\\"d\\\".concat(t,\\\": u32\\\")})).join(\\\", \\\"),S=n.map((function(e,t){return\\\"d\\\".concat(t)})).join(\\\", \\\"),\\\"\\\\n  fn get_\\\".concat(e,\\\"(\\\").concat(w,\\\") -> \\\").concat(l,\\\" {\\\\n    return get_\\\").concat(e,\\\"ByIndices(\\\").concat(x(S),\\\");\\\\n  }\\\")),I=c<2?\\\"\\\":\\\"\\\\n  fn set_\\\".concat(e,\\\"ByIndices(indices: \\\").concat(p.indices,\\\", value: \\\").concat(l,\\\") {\\\\n    \\\").concat(O(\\\"i2o_\\\".concat(e,\\\"(indices)\\\"),\\\"value\\\"),\\\"\\\\n  }\\\"),E=c<2?\\\"\\\":function(){var t=n.map((function(e,t){return\\\"d\\\".concat(t,\\\": u32\\\")})).join(\\\", \\\"),r=n.map((function(e,t){return\\\"d\\\".concat(t)})).join(\\\", \\\");return\\\"\\\\n  fn set_\\\".concat(e,\\\"(\\\").concat(t,\\\", value: \\\").concat(l,\\\") {\\\\n    set_\\\").concat(e,\\\"ByIndices(\\\").concat(x(r),\\\", value);\\\\n  }\\\")}();return{impl:function(){var e=[];return h.offsetToIndices&&e.push(y),h.indicesToOffset&&e.push(_),h.set&&e.push(E),h.setByIndices&&e.push(I),h.get&&e.push(C),h.getByIndices&&e.push(A),e.join(\\\"\\\\n\\\")},type:p,offsetToIndices:function(t){return h.offsetToIndices=!0,c<2?t:\\\"o2i_\\\".concat(e,\\\"(\\\").concat(t,\\\")\\\")},indicesToOffset:function(t){return h.indicesToOffset=!0,c<2?t:\\\"i2o_\\\".concat(e,\\\"(\\\").concat(t,\\\")\\\")},indices:x,indicesGet:function(e,t){return c<2?\\\"\\\".concat(e):\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]\\\")},indicesSet:function(e,t,n){return c<2?\\\"\\\".concat(e,\\\"=\\\").concat(n,\\\";\\\"):\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=\\\").concat(n,\\\";\\\")},set:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(t.length!==c+1)throw new Error(\\\"indices length must be \\\".concat(c));var r=t[c];if(\\\"string\\\"!=typeof r)throw new Error(\\\"value must be string\\\");var a=t.slice(0,c).map(d).join(\\\",\\\");return 0===c?O(\\\"0u\\\",r):1===c?O(a[0],r):(h.set=!0,h.setByIndices=!0,h.indicesToOffset=!0,\\\"set_\\\".concat(e,\\\"(\\\").concat(a,\\\", \\\").concat(r,\\\")\\\"))},setByOffset:O,setByIndices:function(t,n){return c<2?O(t,n):(h.setByIndices=!0,h.indicesToOffset=!0,\\\"set_\\\".concat(e,\\\"ByIndices(\\\").concat(t,\\\", \\\").concat(n,\\\");\\\"))},get:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(t.length!==c)throw new Error(\\\"indices length must be \\\".concat(c));var r=t.map(d).join(\\\",\\\");return 0===c?T(\\\"0u\\\"):1===c?T(r[0]):(h.get=!0,h.getByIndices=!0,h.indicesToOffset=!0,\\\"get_\\\".concat(e,\\\"(\\\").concat(r,\\\")\\\"))},getByOffset:T,getByIndices:function(t){return c<2?T(t):(h.getByIndices=!0,h.indicesToOffset=!0,\\\"get_\\\".concat(e,\\\"ByIndices(\\\").concat(t,\\\")\\\"))},usage:o?\\\"input\\\":\\\"output\\\",name:e,shape:n}};t.inputVariable=function(e,t,n,r){return void 0===r&&(r=1),o(e,t,n,!0,r)},t.outputVariable=function(e,t,n,r){return void 0===r&&(r=1),o(e,t,n,!1,r)};var i=function(){function e(e){this.normalizedDispatchGroup=e,this.indicesHelpers=[]}return e.prototype.guardAgainstOutOfBoundsWorkgroupSizes=function(e){var t=\\\"number\\\"==typeof e?\\\"\\\".concat(e,\\\"u\\\"):e;return\\\"if (global_idx >= \\\".concat(t,\\\") { return; }\\\")},e.prototype.mainStart=function(e){void 0===e&&(e=t.WORKGROUP_SIZE);var n=\\\"number\\\"==typeof e?e:e[0],r=\\\"number\\\"==typeof e?1:e[1],a=\\\"number\\\"==typeof e?1:e[2],o=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2],i=o?\\\"@builtin(global_invocation_id) global_id : vec3<u32>\\\":\\\"@builtin(local_invocation_index) local_index : u32,\\\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\\\",c=o?\\\"let global_idx = global_id.x;\\\":\\\"let global_idx = (workgroup_id.z * \\\".concat(this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1],\\\"u +\\\\n          workgroup_id.y * \\\").concat(this.normalizedDispatchGroup[0],\\\"u + workgroup_id.x) * \\\").concat(n*r*a,\\\"u + local_index;\\\");return\\\"@compute @workgroup_size(\\\".concat(n,\\\", \\\").concat(r,\\\", \\\").concat(a,\\\")\\\\n  fn main(\\\").concat(i,\\\") {\\\\n    \\\").concat(c,\\\"\\\\n  \\\")},e.prototype.declareVariable=function(e,t){this.indicesHelpers.push(e);var n=\\\"input\\\"===e.usage?\\\"read\\\":\\\"read_write\\\",r=e.type.storage;return\\\"@group(0) @binding(\\\".concat(t,\\\") var<storage, \\\").concat(n,\\\"> \\\").concat(e.name,\\\": array<\\\").concat(r,\\\">;\\\")},e.prototype.declareVariables=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var a=0;return t.filter((function(e){return r.ShapeUtil.size(e.shape)>0})).map((function(t){return e.declareVariable(t,a++)})).join(\\\"\\\\n\\\")},Object.defineProperty(e.prototype,\\\"additionalImplementations\\\",{get:function(){return this.indicesHelpers.map((function(e){return e.impl()})).join(\\\"\\\\n\\\")},enumerable:!1,configurable:!0}),e}();t.createShaderHelper=function(e){return new i(e)}},513:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},o=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseConcatAttributes=t.concat=void 0;var c=n(6952),u=n(387),s=n(1163),l=n(2075);t.concat=function(e,t){!function(e){var t,n;if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");var r=e[0].dataType,o=e[0].dims.length;try{for(var i=a(e),c=i.next();!c.done;c=i.next()){var u=c.value;if(u.dataType!==r)throw new Error(\\\"input tensors should be one type\\\");if(u.dims.length!==o)throw new Error(\\\"input tensors should have the same shape\\\")}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}(e.inputs),e.compute(function(e,t){var n,a,u=(n=e.length,a=t.cacheKey,{name:\\\"Concat\\\",inputTypes:Array(n).fill(s.GpuDataType.default),cacheHint:a});return r(r({},u),{get:function(){return function(e,t,n){var a=t[0].dims.slice();if(n>=a.length||n<-1*a.length)throw new Error(\\\"axis specified for concat doesn't match input dimensionality\\\");for(var u=n<0?a.length+n:n,f=a.slice(0),p=1;p<t.length;p++)for(var d=t[p].dims.slice(),h=0;h<a.length;h++)if(h===u)f[u]+=d[h];else if(a[h]!==d[h])throw new Error(\\\"non concat dimensions must match\\\");var g=c.ShapeUtil.size(f),m=new Array(t.length),v=new Array(t.length),y=t[0].dataType,b=0;for(p=0;p<t.length;++p)b+=t[p].dims[u],m[p]=b,v[p]=(0,l.inputVariable)(\\\"input\\\".concat(p),y,t[p].dims);var w=(0,l.outputVariable)(\\\"output\\\",y,f),S=w.indicesGet(\\\"indices\\\",u);return r(r({},e),{outputs:[{dims:f,dataType:t[0].dataType,gpuDataType:s.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,i(i([],o(v),!1),[w],!1)),\\\"\\\\n\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(m.length,\\\">(\\\").concat(m.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((t=m.length,\\\"\\\\n  fn calculateInputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(t,\\\"u; i += 1u ) {\\\\n      if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n      }\\\\n    }\\\\n    return \\\").concat(t,\\\"u;\\\\n  }\\\")),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\"\\\\n\\\\n    var indices = \\\").concat(w.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n    let inputIndex = calculateInputIndex(\\\").concat(S,\\\");\\\\n    if (inputIndex != 0u) {\\\\n      \\\").concat(S,\\\" -= sizeInConcatAxis[inputIndex - 1u];\\\\n    }\\\\n\\\\n    \\\").concat(function(e,t){for(var n=e.length,r=[],a=0;a<n;++a){var o=t.setByOffset(\\\"global_idx\\\",e[a].getByIndices(\\\"indices\\\"));1===n?r.push(o):0===a?r.push(\\\"if (inputIndex == \\\".concat(a,\\\"u) { \\\").concat(o,\\\" }\\\")):a===n-1?r.push(\\\"else { \\\".concat(o,\\\" }\\\")):r.push(\\\"else if (inputIndex == \\\".concat(a,\\\") { \\\").concat(o,\\\" }\\\"))}return r.join(\\\"\\\\n\\\")}(v,w),\\\"\\\\n  }\\\");var t},dispatchGroup:function(){return{x:Math.ceil(g/64)}}})}(u,e,t.axis)}})}(e.inputs,t))},t.parseConcatAttributes=function(e){return(0,u.createAttributeWithCacheKey)({axis:e.axis})}},9192:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;var i=n(6952),c=n(1163),u=n(2075),s=n(9770),l=n(3997);t.createGroupedConvProgramInfoLoader=function(e,t,n){var f,p,d=(f=e.length>2,p=t.cacheKey,{name:\\\"GroupedConv\\\",inputTypes:f?[c.GpuDataType.default,c.GpuDataType.default,c.GpuDataType.default]:[c.GpuDataType.default,c.GpuDataType.default],cacheHint:p});return r(r({},d),{get:function(){return function(e,t,n,f){var p=e.length>2,d=p?\\\"value += b[output_channel];\\\":\\\"\\\",h=e[0].dims,g=e[1].dims,m=g[0]/n.group,v=(0,l.getActicationSnippet)(n),y=v.activationFunction,b=v.applyActivation,w=\\\"NHWC\\\"===n.format,S=(0,s.calculateOutputShape)(h,g,n.dilations,n.pads,n.strides,w),_=i.ShapeUtil.size(S),x=(0,u.outputVariable)(\\\"output\\\",e[0].dataType,S),O=(0,u.inputVariable)(\\\"x\\\",e[0].dataType,h),T=(0,u.inputVariable)(\\\"w\\\",e[1].dataType,g),A=[O,T];return p&&A.push((0,u.inputVariable)(\\\"b\\\",e[2].dataType,e[2].dims)),r(r({},t),{outputs:[{dims:f?f(S):S,dataType:e[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const strides: vec2<u32> = vec2(\\\".concat(n.strides[0],\\\"u, \\\").concat(n.strides[1],\\\"u);\\\\n  const pads: vec2<u32> = vec2(\\\").concat(n.pads[0],\\\"u, \\\").concat(n.pads[1],\\\"u);\\\\n\\\\n  \\\").concat(e.declareVariables.apply(e,o(o([],a(A),!1),[x],!1)),\\\"\\\\n\\\\n  \\\").concat(y,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(_),\\\"\\\\n\\\\n    let outputIndices = \\\").concat(x.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let batch: u32 = outputIndices[0];\\\\n    let output_channel: u32 = outputIndices[\\\").concat(w?3:1,\\\"];\\\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[\\\").concat(w?1:2,\\\"], outputIndices[\\\").concat(w?2:3,\\\"]) * strides - pads;\\\\n    let group_id: u32 = output_channel / \\\").concat(m,\\\"u;\\\\n\\\\n    var value: \\\").concat(x.type.value,\\\" = \\\").concat(x.type.value,\\\"(0);\\\\n    for (var wInChannel: u32 = 0u; wInChannel < \\\").concat(g[1],\\\"u; wInChannel++) {\\\\n      let input_channel = group_id * \\\").concat(g[1],\\\"u + wInChannel;\\\\n      for (var wHeight: u32 = 0u; wHeight < \\\").concat(g[2],\\\"u; wHeight++) {\\\\n        let xHeight = xRCCorner.x + wHeight * \\\").concat(n.dilations[0],\\\"u;\\\\n\\\\n        if (xHeight < 0u || xHeight >= \\\").concat(h[w?1:2],\\\"u) {\\\\n          continue;\\\\n        }\\\\n\\\\n        for (var wWidth: u32 = 0u; wWidth < \\\").concat(g[3],\\\"u; wWidth++) {\\\\n          let xWidth = xRCCorner.y + wWidth * \\\").concat(n.dilations[1],\\\"u;\\\\n          if (xWidth < 0u || xWidth >= \\\").concat(h[w?2:3],\\\"u) {\\\\n            continue;\\\\n          }\\\\n\\\\n          let xVal = \\\").concat(w?O.get(\\\"batch\\\",\\\"xHeight\\\",\\\"xWidth\\\",\\\"input_channel\\\"):O.get(\\\"batch\\\",\\\"input_channel\\\",\\\"xHeight\\\",\\\"xWidth\\\"),\\\";\\\\n          let wVal = \\\").concat(T.get(\\\"output_channel\\\",\\\"wInChannel\\\",\\\"wHeight\\\",\\\"wWidth\\\"),\\\";\\\\n          value += xVal*wVal;\\\\n        }\\\\n      }\\\\n    }\\\\n    \\\").concat(d,\\\"\\\\n    \\\").concat(b,\\\"\\\\n    \\\").concat(x.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(_/64)}}})}(e,d,t,n)}})}},7640:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.convTranspose=t.parseConvTransposeAttributes=void 0;var a=n(387),o=n(1163),i=n(6514),c=n(3997),u=function(e,t,n,r,a,o){return(e-1)*t+n+(r-1)*a+1-o},s=function(e,t,n,r,a){var o=Math.floor(e/2);\\\"SAME_UPPER\\\"===t?(n[r]=o,n[a]=e-o):\\\"SAME_LOWER\\\"===t&&(n[r]=e-o,n[a]=o)},l=function(e,t){var n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce((function(e,t){return e*t}),0)){n.length=0;for(var r=2;r<t[1].dims.length;++r)n.push(t[1].dims[r])}var a=\\\"NHWC\\\"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(a?3:1,0,t[1].dims[1]);var o=e.pads.slice(),i=e.outputShape.slice(),c=e.outputPadding.slice(),l=t[0].dims,f=e.dilations.slice();if(0===f.reduce((function(e,t){return e+t}),0)){var p=t[0].dims.length-2;f=new Array(p).fill(1)}var d=e.strides.slice();0===d.reduce((function(e,t){return e+t}),0)&&(p=t[0].dims.length-2,d=new Array(p).fill(1)),function(e,t,n,r,a,o,i,c,l,f){var p=e.length-2,d=0===f.length;if(0===l.length)for(var h=0;h<p;++h)l.push(0);for(var g=e[0],m=t[c?3:1]*a,v=(h=0,e.length-p-(c?1:0));h<p;++h,++v){var y=e[v],b=d?y*i[h]:f[h],w=u(y,i[h],o[h],t[v],n[h],b);s(w,r,o,h,h+p),d&&f.push(i[h]*(y-1)+l[h]+(t[v]-1)*n[h]+1-o[h]-o[h+p])}f.splice(0,0,g),f.splice(c?3:1,0,m)}(l,n,f,e.autoPad,e.group,o,d,a,c,i);var h=Object.assign({},e);return Object.assign(h,{kernelShape:n,pads:o,outputPadding:c,outputShape:i,dilations:f,strides:d,cacheKey:e.cacheKey}),h};t.parseConvTransposeAttributes=function(e){var t=(0,c.parseInternalActivationAttributes)(e),n=e.format,o=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][void 0===e.autoPad?0:e.autoPad],i=e.dilations,u=e.group,s=e.kernelShape,l=e.pads,f=e.strides,p=e.wIsConst(),d=e.outputPadding,h=e.outputShape;return(0,a.createAttributeWithCacheKey)(r({autoPad:o,format:n,dilations:i,group:u,kernelShape:s,outputPadding:d,outputShape:h,pads:l,strides:f,wIsConst:p},t))};var f=function(e,t,n){var a,c,u=(a=3===e.length,c=t.cacheKey,{name:\\\"ConvTranspose2D\\\",inputTypes:a?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:c});return r(r({},u),{get:function(){return(0,i.createConvTranspose2DProgramInfo)(e,u,t,n)}})};t.convTranspose=function(e,t){!function(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support 2-dimensional conv\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");var n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error(\\\"invalid bias\\\");var r=e[0].dims.length-2;if(t.dilations.reduce((function(e,t){return e+t}),0)>0&&t.dilations.length!==r)throw new Error(\\\"dilations should be \\\".concat(r,\\\"D\\\"));if(t.strides.reduce((function(e,t){return e+t}),0)>0&&t.strides.length!==r)throw new Error(\\\"strides should be \\\".concat(r,\\\"D\\\"));if(t.pads.reduce((function(e,t){return e+t}),0)>0&&t.pads.length!==2*r)throw new Error(\\\"pads should be \\\".concat(2*r,\\\"D\\\"));if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(\\\"output_padding should be \\\".concat(r,\\\"D\\\"));if(t.kernelShape.reduce((function(e,t){return e+t}),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error(\\\"invalid output shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"ConvTranspose input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"ConvTranspose input(bias) should be float tensor\\\")}(e.inputs,t),3===e.inputs[0].dims.length?function(e,t){var n=\\\"NHWC\\\"===t.format,a=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===a.length&&a.push(e.inputs[2]);var o=t.kernelShape;0!==o.length&&0!==o[0]||(o=[e.inputs[1].dims[2]]);var i=t.dilations;0!==i.length&&0!==i[0]||(i=[1]);var c=t.strides;0!==c.length&&0!==c[0]||(c=[1]);var u=t.pads;0===u.length&&(u=[0,0]),u=[0,u[0],0,u[1]],c=[1].concat(c),i=[1].concat(i),o=[1].concat(o);var s=l(r(r({},t),{pads:u,strides:c,dilations:i,kernelShape:o}),a);e.compute(f(a,s,(function(e){return n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]]})))}(e,t):function(e,t,n){var r=l(n,t);e.compute(f(t,r))}(e,e.inputs,t)}},9770:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;var a=n(6952),o=n(387),i=n(9192),c=n(3822),u=n(3997),s=n(2625);t.calculateOutputShape=function(e,t,n,r,a,o){var i=e[0],c=e.slice(o?1:2,o?3:4),u=c.length,s=t[0],l=t.slice(2).map((function(e,t){return e+(e-1)*(n[t]-1)})),f=c.map((function(e,t){return e+r[t]+r[t+u]})).map((function(e,t){return Math.floor((e-l[t]+a[t])/a[t])}));return f.splice(0,0,i),f.splice(o?3:1,0,s),f};var l=(0,o.createAttributeWithCacheKey)({perm:[2,3,1,0]}),f=function(e,t){for(var n=e.kernelShape.slice(),r=2;r<t[1].dims.length;++r)0===n[r-2]&&(n[r-2]=t[1].dims[r]);var o=e.pads.slice();a.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,o,\\\"NHWC\\\"===e.format,e.autoPad);var i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:o,cacheKey:e.cacheKey}),i};t.parseConvAttributes=function(e){var t=(0,u.parseInternalActivationAttributes)(e),n=e.format,a=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],i=e.dilations,c=e.group,s=e.kernel_shape,l=e.pads,f=e.strides,p=e.w_is_const();return(0,o.createAttributeWithCacheKey)(r({autoPad:a,format:n,dilations:i,group:c,kernelShape:s,pads:l,strides:f,wIsConst:p},t))},t.conv=function(e,n){!function(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support conv 1D and 2D\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\\\"invalid bias\\\");var n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(\\\"dilations should be \\\".concat(n,\\\"D\\\"));if(t.strides.length!==n)throw new Error(\\\"strides should be \\\".concat(n,\\\"D\\\"));if(t.pads.length!==2*n)throw new Error(\\\"pads should be \\\".concat(2*n,\\\"D\\\"));if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"Conv input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"Conv input(bias) should be float tensor\\\")}(e.inputs,n),3===e.inputs[0].dims.length?function(e,t){var n=\\\"NHWC\\\"===t.format,a=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&a.push(e.inputs[2]);var o=[0,t.pads[0],0,t.pads[1]],c=[1].concat(t.strides),u=[1].concat(t.dilations),s=[1].concat(t.kernelShape),l=f(r(r({},t),{pads:o,strides:c,dilations:u,kernelShape:s}),a);e.compute((0,i.createGroupedConvProgramInfoLoader)(a,l,(function(e){return n?[e[0],e[2],e[3]]:[]})))}(e,n):function(e,n,a){var o,u=f(a,n),p=3===n.length,d=\\\"NHWC\\\"===a.format,h=n[0].dims[d?1:2],g=n[0].dims[d?2:3],m=n[0].dims[d?3:1],v=n[1].dims[2],y=n[1].dims[3],b=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,a.dilations,u.pads,a.strides,d),w=b[d?1:2],S=b[d?2:3],_=b[d?3:1];if(d&&v===h&&y===g&&\\\"VALID\\\"===a.autoPad||1===v&&1===y&&1===a.dilations[0]&&1===a.dilations[1]&&1===a.strides[0]&&1===a.strides[1]&&(\\\"SAME_UPPER\\\"===a.autoPad||\\\"SAME_LOWER\\\"===a.autoPad||\\\"VALID\\\"===a.autoPad))e.compute((0,i.createGroupedConvProgramInfoLoader)(n,u));else if(d&&1===a.group){var x=d?w*S:_,O=d?_:w*S,T=v*y*m,A=null!==(o=e.kernelCustomData.wT)&&void 0!==o?o:e.compute(r(r({},s.transposeProgramMetadata),{cacheHint:l.cacheKey,get:function(){return(0,s.createTransposeProgramInfo)(n[1],l.perm)}}),{inputs:[1],outputs:[a.wIsConst?-2:-1]})[0];a.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);var C=[n[0],A];p&&(d||1!==n[2].dims.length?C.push(n[2]):C.push(n[2].reshape([n[2].dims[0],1,1]))),e.compute((0,c.createConv2DMatMulProgramInfoLoader)(C,u,b,x,O,T,p,!0),{inputs:C})}else e.compute((0,i.createGroupedConvProgramInfoLoader)(n,u))}(e,e.inputs,n)}},3822:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;var a=n(1163),o=n(9456);t.createConv2DMatMulProgramInfoLoader=function(e,t,n,i,c,u,s,l){var f=function(e,t){return{name:\\\"Conv2DMatMul\\\",inputTypes:e?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:t}}(s,t.cacheKey);return r(r({},f),{get:function(){return(0,o.createConv2DMatMulProgramInfo)(e,f,t,n,i,c,u,s,l)}})}},8856:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.expand=t.expandProgramMetadata=void 0;var i=n(6952),c=n(1163),u=n(2075);t.expandProgramMetadata={name:\\\"Expand\\\",inputTypes:[c.GpuDataType.default]};var s=function(e,t){for(var n=e.length-t.length,r=[],a=0;a<n;++a)r.push(e[a]);for(a=0;a<t.length;++a)r.push(1===t[a]?e[a+n]:t[a]);return r};t.expand=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"Expand requires 2 input.\\\");for(var t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=n.length<t.length?0:n.length-t.length,a=t.length<n.length?0:t.length-n.length;r<n.length&&a<t.length;++r,++a)if(n[r]!==t[a]&&1!==n[r]&&1!==t[a])throw new Error(\\\"Expand requires shape to be broadcastable to input\\\")}(e.inputs);var n=Array.from(e.inputs[1].getBigInt64Array(),Number).toString();e.compute(r(r({},t.expandProgramMetadata),{cacheHint:n,get:function(){return n=t.expandProgramMetadata,l=e.inputs,f=l[0].dims,p=Array.from(l[1].getBigInt64Array(),Number),d=function(e,t){return e.length>t.length?s(e,t):s(t,e)}(f,p),h=i.ShapeUtil.size(d),g=l[0].dataType,m=(0,u.inputVariable)(\\\"input\\\",g,f),v=(0,u.outputVariable)(\\\"output\\\",g,d),r(r({},n),{getShaderSource:function(e){return\\\"\\\\n  const inputShape = \\\".concat(m.indices.apply(m,o([],a(f),!1)),\\\";\\\\n  \\\").concat(e.declareVariables(m,v),\\\"\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n  \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(h),\\\"\\\\n    let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    var inputIndices: \\\").concat(m.type.indices,\\\";\\\\n    for (var i = 0; i < \\\").concat(f.length,\\\"; i++) {\\\\n      if (\\\").concat(m.indicesGet(\\\"inputShape\\\",\\\"i\\\"),\\\" == 1) {\\\\n        \\\").concat(m.indicesSet(\\\"inputIndices\\\",\\\"i\\\",0),\\\"\\\\n      } else {\\\\n        \\\").concat(m.indicesSet(\\\"inputIndices\\\",\\\"i\\\",v.indicesGet(\\\"outputIndices\\\",\\\"i + \\\".concat(d.length-f.length))),\\\"\\\\n      }\\\\n    }\\\\n    \\\").concat(v.setByOffset(\\\"global_idx\\\",m.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n  }\\\")},outputs:[{dims:d,dataType:l[0].dataType,gpuDataType:c.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(h/64)}}});var n,l,f,p,d,h,g,m,v}}),{inputs:[0]})}},3997:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;var a=n(6952);t.getActicationSnippet=function(e){switch(e.activation){case\\\"Relu\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = max(value, 0.0);\\\"};case\\\"Sigmoid\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = (1.0 / (1.0 + exp(-value)));\\\"};case\\\"Clip\\\":return{activationFunction:\\\"const clip_min_=f32(\\\".concat(e.clipMin,\\\");const clip_max_=f32(\\\").concat(e.clipMax,\\\");\\\"),applyActivation:\\\"value = clamp(value, clip_min_, clip_max_);\\\"};default:return{activationFunction:\\\"\\\",applyActivation:\\\"\\\"}}},t.parseInternalActivationAttributes=function(e){var t=(null==e?void 0:e.activation)||\\\"\\\";if(\\\"Clip\\\"===t){var n=r((null==e?void 0:e.activation_params)||[a.MIN_CLIP,a.MAX_CLIP],2),o=n[0],i=n[1];return{activation:t,clipMax:i,clipMin:o,activationCacheKey:\\\"\\\".concat(t,\\\":\\\").concat(o,\\\",\\\").concat(i)}}return{activation:t,activationCacheKey:t}}},8405:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.gather=t.parseGatherAttributes=void 0;var i=n(6952),c=n(387),u=n(1163);t.parseGatherAttributes=function(e){return(0,c.createAttributeWithCacheKey)({axis:e.axis})},t.gather=function(e,t){!function(e){if(!e||2!==e.length)throw new Error(\\\"Gather requires 2 inputs.\\\")}(e.inputs);var n={name:\\\"Gather\\\",inputTypes:[u.GpuDataType.default,u.GpuDataType.default],cacheHint:t.cacheKey};e.compute(function(e,t,n){var c=t[0].dims,s=t[1].dims,l=c.length,f=i.ShapeUtil.normalizeAxis(n.axis,l),p=c.slice(0);p.splice.apply(p,o([f,1],a(s),!1));var d=t[0].dataType,h=i.ShapeUtil.sizeFromDimension(c,f+1),g=[7,13,11].includes(d)?2:1,m=7===t[1].dataType?2:1,v=g*h,y=i.ShapeUtil.sizeToDimension(c,f),b=i.ShapeUtil.size(s),w=i.ShapeUtil.sizeFromDimension(c,f)*g,S=b*h*g,_=c[f],x=i.ShapeUtil.size(c)*g,O=i.ShapeUtil.size(p)*g,T=y*b;return r(r({},e),{outputs:[{dims:p,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const N: u32 = \\\".concat(b,\\\";\\\\n  const elementSize: u32 = \\\").concat(g,\\\";\\\\n  const indicesElementSize: u32 = \\\").concat(m,\\\";\\\\n\\\\n  @group(0) @binding(0) var<storage, read> input : array<u32>;\\\\n  @group(0) @binding(1) var<storage, read> inputIndices : array<i32>;\\\\n  @group(0) @binding(2) var<storage, read_write> output: array<u32>;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let batch: u32 = global_idx / N;\\\\n    let i: u32 = global_idx % N;\\\\n\\\\n    let srcOffsetBatch: u32 = batch * \\\").concat(w,\\\";\\\\n    let dstOffsetBatch: u32 = batch * \\\").concat(S,\\\";\\\\n    var idx = inputIndices[i * indicesElementSize];\\\\n    if (idx < 0) {\\\\n        idx = idx + \\\").concat(_,\\\";\\\\n    }\\\\n\\\\n    let srcOffset = srcOffsetBatch + u32(idx) * \\\").concat(v,\\\";\\\\n    let dstOffset = dstOffsetBatch + i * \\\").concat(v,\\\";\\\\n    if (srcOffset >= \\\").concat(x,\\\") {\\\\n        return;\\\\n    }\\\\n    if (dstOffset >= \\\").concat(O,\\\") {\\\\n        return;\\\\n    }\\\\n    for (var j: u32 = 0; j < \\\").concat(v,\\\"; j++) {\\\\n        output[dstOffset + j] = input[srcOffset + j];\\\\n    }\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(T/64)}}})}(n,e.inputs,t))}},4271:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;var o=n(6952),i=n(387),c=n(1163);t.gemm=function(e,t){!function(e){if(!e)throw new Error(\\\"Input is missing\\\");if(e.length<2||e.length>3)throw new Error(\\\"Invaid input number.\\\");if(3===e.length&&e[2].dims.length>2)throw new Error(\\\"Invalid input shape of C\\\");if(1!==e[0].dataType||1!==e[1].dataType||3===e.length&&1!==e[2].dataType)throw new Error(\\\"Invalid input type.\\\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\\\"Input types are mismatched\\\")}(e.inputs),e.compute(function(e,t){var n={name:\\\"Gemm\\\",inputTypes:3===e.length?[c.GpuDataType.default,c.GpuDataType.default,c.GpuDataType.default]:[c.GpuDataType.default,c.GpuDataType.default],cacheHint:t.cacheKey};return r(r({},n),{get:function(){return function(e,t,n){var i=t[0].dims.slice(),u=t[1].dims.slice(),s=a(o.GemmUtil.getShapeOfGemmResult(i,n.transA,u,n.transB,3===t.length?t[2].dims:void 0),3),l=s[0],f=s[1],p=s[2],d=[l,f];if(!d)throw new Error(\\\"Can't use gemm on the given tensors\\\");var h=o.ShapeUtil.size(d),g=\\\"\\\";n.transA&&n.transB?g=\\\"value += a[k * M + m] * b[n * K + k];\\\":n.transA&&!n.transB?g=\\\"value += a[k * M + m] * b[k * N + n];\\\":!n.transA&&n.transB?g=\\\"value += a[m * K + k] * b[n * K + k];\\\":n.transA||n.transB||(g=\\\"value += a[m * K + k] * b[k * N + n];\\\");var m=\\\"f32\\\",v=1===n.alpha?\\\"\\\":\\\"value *= alpha;\\\",y=3===t.length?\\\"value += beta * c[\\\".concat(function(e,t,n){if(0===n.length)return\\\"0u\\\";var r=1===n.length&&1!==e||2===n.length&&n[0]!==e,a=n[n.length-1]!==t,o=\\\"0u\\\";return r||(o+=\\\"+ m * \\\".concat(n[n.length-1],\\\"u\\\")),a||(o+=\\\"+n\\\"),o}(l,f,t[2].dims),\\\"];\\\"):\\\"\\\",b=[\\\"@group(0) @binding(0) var<storage, read> a : array<\\\".concat(m,\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> b : array<\\\".concat(m,\\\">;\\\")];return 3===t.length&&b.push(\\\"@group(0) @binding(2) var<storage, read> c : array<\\\".concat(m,\\\">;\\\")),r(r({},e),{outputs:[{dims:d,dataType:t[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const M: u32 = \\\".concat(l,\\\"u;\\\\n  const N: u32 = \\\").concat(f,\\\"u;\\\\n  const K: u32 = \\\").concat(p,\\\"u;\\\\n  const alpha = \\\").concat(m,\\\"(\\\").concat(n.alpha,\\\");\\\\n  const beta = \\\").concat(m,\\\"(\\\").concat(n.beta,\\\");\\\\n\\\\n  \\\").concat(b.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(t.length,\\\") var<storage, read_write> output : array<\\\").concat(m,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(h),\\\"\\\\n\\\\n    let m = global_id.x / N;\\\\n    let n = global_id.x % N;\\\\n\\\\n    var value = \\\").concat(m,\\\"(0);\\\\n    for (var k: u32 = 0u; k<\\\").concat(p,\\\"u; k++) {\\\\n      \\\").concat(g,\\\"\\\\n    }\\\\n\\\\n    \\\").concat(v,\\\"\\\\n    \\\").concat(y,\\\"\\\\n    output[global_id.x] = value;\\\\n\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(n,e,t)}})}(e.inputs,t))},t.parseGemmAttributes=function(e){return(0,i.createAttributeWithCacheKey)(e)}},1798:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.instanceNorm=t.parseInstanceNormAttributes=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.parseInstanceNormAttributes=function(e){return(0,o.createAttributeWithCacheKey)({epsilon:e.epsilon,format:e.format})},t.instanceNorm=function(e,t){!function(e){if(!e||3!==e.length)throw new Error(\\\"instanceNorm requires 3 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")}(e.inputs);var n={name:\\\"InstanceNormalization\\\",inputTypes:[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey};\\\"NHWC\\\"===t.format?e.compute(function(e,t,n){var o=t[0].dims,u=o,s=a.ShapeUtil.size(u),l=o[0],f=o[o.length-1],p=a.ShapeUtil.sizeFromDimension(o,1)/f,d=(0,c.tensorTypeToWsglStorageType)(t[0].dataType),h=f*l;return r(r({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const N: u32 = \\\".concat(l,\\\";\\\\n  const H: u32 = \\\").concat(p,\\\";\\\\n  const C: u32 = \\\").concat(f,\\\";\\\\n  const normSizeTyped: \\\").concat(d,\\\" = \\\").concat(p,\\\";\\\\n  const imageSize: u32 = \\\").concat(p*f,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n  @group(0) @binding(0) var<storage, read> x : array<\\\").concat(d,\\\">;\\\\n  @group(0) @binding(1) var<storage, read> scale : array<\\\").concat(d,\\\">;\\\\n  @group(0) @binding(2) var<storage, read> bias : array<\\\").concat(d,\\\">;\\\\n  @group(0) @binding(3) var<storage, read_write> output : array<\\\").concat(d,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let currentImageNumber = global_idx / C;\\\\n    let currentChannelNumber = global_idx % C;\\\\n    \\\\n    // offset is channel num * N\\\\n    let offset = currentImageNumber * imageSize;\\\\n    if (offset >= \\\").concat(s,\\\") { return; }\\\\n    var mean: \\\").concat(d,\\\" = 0;\\\\n\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        mean = mean + x[offset + i * C + currentChannelNumber];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n\\\\n    var squaredNorm: \\\").concat(d,\\\" = 0;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\\\\n        squaredNorm = squaredNorm + deviation * deviation;\\\\n    }\\\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\\\n    let channelScale = invStdDev * scale[currentChannelNumber];\\\\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let currentOffset = offset + i * C + currentChannelNumber;\\\\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\\\\n    }\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(n,e.inputs,t)):e.compute(function(e,t,n){var o=t[0].dims,u=t[1],s=t[2],l=o,f=a.ShapeUtil.size(l),p=a.ShapeUtil.sizeToDimension(o,2),d=a.ShapeUtil.sizeFromDimension(o,2),h=o[1],g=a.ShapeUtil.size(u.dims),m=s?a.ShapeUtil.size(s.dims):0;if(g!==d||s&&m!==d)throw new Error(\\\"Size of X.shape()[axis:] == \\\".concat(d,\\\".\\\\n             Size of scale and bias (if provided) must match this. \\\\n             Got scale size of \\\").concat(g,\\\" and bias size of \\\").concat(m));var v=(0,c.tensorTypeToWsglStorageType)(t[0].dataType);return r(r({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const C: u32 = \\\".concat(h,\\\";\\\\n  const normSize: u32 = \\\").concat(d,\\\";\\\\n  const normSizeTyped: \\\").concat(v,\\\" = \\\").concat(d,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n  @group(0) @binding(0) var<storage, read> x : array<\\\").concat(v,\\\">;\\\\n  @group(0) @binding(1) var<storage, read> scale : array<\\\").concat(v,\\\">;\\\\n  @group(0) @binding(2) var<storage, read> bias : array<\\\").concat(v,\\\">;\\\\n  @group(0) @binding(3) var<storage, read_write> output : array<\\\").concat(v,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let offset = global_idx * normSize;\\\\n    if (offset + normSize >= \\\").concat(f,\\\") { return; }\\\\n    var mean: \\\").concat(v,\\\" = 0;\\\\n\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n        mean = mean + x[h + offset];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n\\\\n    var squaredNorm: \\\").concat(v,\\\" = 0;\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n        let deviation: f32 = x[h + offset] - mean;\\\\n        squaredNorm = squaredNorm + deviation * deviation;\\\\n    }\\\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\\\n    let channelScale = invStdDev * scale[global_idx % C];\\\\n    let channelShift = bias[global_idx % C] - mean * channelScale;\\\\n    for (var j: u32 = 0; j < normSize; j++) {\\\\n        output[j + offset] = x[j + offset] * channelScale + channelShift;\\\\n    }\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(p/64)}}})}(n,e.inputs,t))}},6145:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.layerNorm=t.parseLayerNormAttributes=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.parseLayerNormAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis,epsilon:e.epsilon})},t.layerNorm=function(e,t){!function(e){if(!e||e.length<2)throw new Error(\\\"layerNorm requires at least 2 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")}(e.inputs);var n={name:\\\"LayerNormalization\\\",inputTypes:2===e.inputs.length?[i.GpuDataType.default,i.GpuDataType.default]:[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey+e.outputCount.toString(10)+e.inputs.length.toString(10)};e.compute(function(e,t,n,o){var u=t[0].dims,s=t[1],l=t[2],f=u,p=a.ShapeUtil.size(f),d=a.ShapeUtil.normalizeAxis(n.axis,u.length),h=a.ShapeUtil.sizeToDimension(u,d),g=a.ShapeUtil.sizeFromDimension(u,d),m=a.ShapeUtil.size(s.dims),v=l?a.ShapeUtil.size(l.dims):0;if(m!==g||l&&v!==g)throw new Error(\\\"Size of X.shape()[axis:] == \\\".concat(g,\\\".\\\\n       Size of scale and bias (if provided) must match this.\\\\n       Got scale size of \\\").concat(m,\\\" and bias size of \\\").concat(v));for(var y=[],b=0;b<u.length;++b)b<d?y.push(u[b]):y.push(1);var w=(0,c.tensorTypeToWsglStorageType)(t[0].dataType),S=o>1,_=o>2,x=0,O=[{dims:f,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return S&&O.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),_&&O.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),r(r({},e),{outputs:O,getShaderSource:function(e){return\\\"\\\\n  const normSize: u32 = \\\".concat(g,\\\";\\\\n  const normSizeTyped: \\\").concat(w,\\\" = \\\").concat(g,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read> x : array<\\\").concat(w,\\\">;\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read> scale : array<\\\").concat(w,\\\">;\\\\n  \\\").concat(l?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read> bias : array<\\\").concat(w,\\\">;\\\"):\\\"\\\",\\\"\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read_write> output : array<\\\").concat(w,\\\">;\\\\n  \\\").concat(S?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read_write> meanDataOutput : array<\\\").concat(w,\\\">\\\"):\\\"\\\",\\\";\\\\n  \\\").concat(_?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read_write> invStdOutput : array<\\\").concat(w,\\\">\\\"):\\\"\\\",\\\";\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let offset = global_idx * normSize;\\\\n    if (offset >= \\\").concat(p,\\\") { return; }\\\\n    var mean: \\\").concat(w,\\\" = 0;\\\\n    var meanSquare: \\\").concat(w,\\\" = 0;\\\\n\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n      mean = mean + x[h + offset];\\\\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\\\\n\\\\n    for (var j: u32 = 0; j < normSize; j++) {\\\\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] \\\").concat(l?\\\"+ bias[j]\\\":\\\"\\\",\\\";\\\\n    }\\\\n\\\\n    \\\").concat(S?\\\"meanDataOutput[global_idx] = mean\\\":\\\"\\\",\\\";\\\\n    \\\").concat(_?\\\"invStdOutput[global_idx] = 1 / meanSquare\\\":\\\"\\\",\\\";\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(n,e.inputs,t,e.outputCount))}},1522:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;var a=n(6952),o=n(1163),i=n(3997);t.createMatmulProgramInfoLoader=function(e,t){var n,c,u=(n=e.length>2,c=t.activationCacheKey,{name:\\\"MatMul\\\",inputTypes:n?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:c});return r(r({},u),{get:function(){return function(e,t,n){var c=t[0].dims,u=t[1].dims,s=a.BroadcastUtil.calcShape(c,u,!0);if(!s)throw new Error(\\\"Can't use matmul on the given tensors\\\");var l=a.ShapeUtil.size(s),f=\\\"f32\\\",p=(0,i.getActicationSnippet)(n),d=p.activationFunction,h=p.applyActivation,g=s[s.length-2],m=c[c.length-1],v=s[s.length-1];return r(r({},e),{outputs:[{dims:s,dataType:t[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const M: u32 = \\\".concat(g,\\\"u;\\\\n  const N: u32 = \\\").concat(v,\\\"u;\\\\n  const K: u32 = \\\").concat(m,\\\"u;\\\\n\\\\n  @group(0) @binding(0) var<storage, read> a : array<\\\").concat(f,\\\">;\\\\n  @group(0) @binding(1) var<storage, read> b : array<\\\").concat(f,\\\">;\\\\n  @group(0) @binding(2) var<storage, read_write> output : array<\\\").concat(f,\\\">;\\\\n\\\\n  \\\").concat(d,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\\\"\\\\n\\\\n    let stack = global_idx / (M * N);\\\\n    let mn = global_idx % (M * N);\\\\n    let n = global_idx % N;\\\\n    let m = mn / N;\\\\n\\\\n    let offsetA = stack * (M * K);\\\\n    let offsetB = stack * (K * N);\\\\n\\\\n    var value = \\\").concat(f,\\\"(0);\\\\n    for (var k: u32 = 0u; k<\\\").concat(m,\\\"u; k++) {\\\\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\\\\n    }\\\\n    \\\").concat(h,\\\"\\\\n    output[global_idx] = value;\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(l/64)}}})}(u,e,t)}})},t.matMul=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"MatMul requires 2 inputs.\\\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\\\"shared dimension does not match.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")}(e.inputs),e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:\\\"\\\",activationCacheKey:\\\"\\\"}))}},5262:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;var o=n(6952),i=n(387),c=n(1163),u=n(2075),s=function(e){if(!e||1!==e.length)throw new Error(\\\"Pool ops requires 1 input.\\\");if(4!==e[0].dims.length)throw new Error(\\\"Pool ops supports 2-D inputs only for now.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},l=function(e,t,n){var r=\\\"NHWC\\\"===t.format,a=r?[e.dims[0],e.dims[3],e.dims[1],e.dims[2]]:e.dims.slice(),i=Object.hasOwnProperty.call(t,\\\"dilations\\\"),c=t.kernelShape.slice(),u=t.strides.slice(),s=i?t.dilations.slice():[],l=t.pads.slice();o.PoolConvUtil.adjustPoolAttributes(n,a,c,u,s,l);var f=o.PoolConvUtil.computePoolOutputShape(n,a,u,s,c,l,t.autoPad),p=Object.assign({},t);return i?Object.assign(p,{kernelShape:c,strides:u,pads:l,dilations:s,cacheKey:t.cacheKey}):Object.assign(p,{kernelShape:c,strides:u,pads:l,cacheKey:t.cacheKey}),[p,r?[f[0],f[2],f[3],f[1]]:f]},f=function(e,t,n,r,a,i,c){var s=\\\"NHWC\\\"===r.format,l=t.shape,f=t.type.value,p=l.length,d=o.ShapeUtil.size(n),h=(0,u.outputVariable)(\\\"output\\\",t.type.tensor,n);if(r.kernelShape.length<=2){var g,m=r.kernelShape[r.kernelShape.length-1],v=r.strides[r.strides.length-1],y=r.pads[r.pads.length/2-1],b=p-(s?2:1),w=\\\"\\\",S=\\\"\\\";if(g=y+r.pads[r.pads.length-1]!==0?\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(m,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(v,\\\" - \\\").concat(y,\\\" + i;\\\\n                if (xIndices[\\\").concat(b,\\\"] < 0 || xIndices[\\\").concat(b,\\\"] >= \\\").concat(l[b],\\\") {\\\\n                  pad++;\\\\n                  continue;\\\\n                }\\\\n                let x_val = x[\\\").concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(m,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(v,\\\" - \\\").concat(y,\\\" + i;\\\\n                let x_val = x[\\\").concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"),2===r.kernelShape.length){var _=r.kernelShape[r.kernelShape.length-2],x=r.strides[r.strides.length-2],O=r.pads[r.pads.length/2-2],T=r.pads[r.pads.length-2],A=p-(s?3:2),C=l[A];w=O+T!==0?\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(_,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(A,\\\"] = indices[\\\").concat(A,\\\"] * \\\").concat(x,\\\" - \\\").concat(O,\\\" + j;\\\\n                  if (xIndices[\\\").concat(A,\\\"] < 0 || xIndices[\\\").concat(A,\\\"] >= \\\").concat(C,\\\") {\\\\n                    pad+= \\\").concat(m,\\\";\\\\n                    continue;\\\\n                  }\\\\n              \\\"):\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(_,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(A,\\\"] = indices[\\\").concat(A,\\\"] * \\\").concat(x,\\\" - \\\").concat(O,\\\" + j;\\\\n                \\\"),S=\\\"\\\\n              }\\\\n            \\\"}return\\\"\\\\n            \\\".concat(e.declareVariables(t,h),\\\"\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n\\\\n              let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n              var xIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var value: \\\").concat(f,\\\" = \\\").concat(f,\\\"(\\\").concat(c,\\\");\\\\n              var pad = 0;\\\\n              \\\").concat(w,\\\"\\\\n              \\\").concat(g,\\\"\\\\n              \\\").concat(S,\\\"\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")}if(s)throw new Error(\\\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\\\");var I,E=o.ShapeUtil.size(r.kernelShape),P=o.ShapeUtil.computeStrides(r.kernelShape),M=P.length,R=r.pads.length;return I=r.pads.reduce((function(e,t){return e+t}))?\\\"\\\\n                if (xIndices[j] >= inputDims[j]) {\\\\n                  pad++;\\\\n                  isPad = true;\\\\n                  break;\\\\n                }\\\\n              }\\\\n              if (!isPad) {\\\\n                let x_val = x[\\\".concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              }\\\\n              let x_val = x[\\\".concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n              \\\").concat(a,\\\"\\\\n            \\\"),\\\"\\\\n            \\\".concat(e.declareVariables(t,h),\\\"\\\\n\\\\n            const pads = array<u32, \\\").concat(R,\\\">(\\\").concat(r.pads.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const inputDims = array<u32, \\\").concat(p,\\\">(\\\").concat(l.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const kernelStrides = array<u32, \\\").concat(M,\\\">(\\\").concat(P.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const strides = array<u32, \\\").concat(M,\\\">(\\\").concat(r.strides.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n\\\\n              let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n              let xIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var offsets: array<u32, \\\").concat(M,\\\">;\\\\n\\\\n              var value = \\\").concat(h.type.value,\\\"(\\\").concat(c,\\\");\\\\n              var pad = 0;\\\\n              var isPad = false;\\\\n\\\\n              for (var i: u32 = 0u; i < \\\").concat(E,\\\"u; i++) {\\\\n                var offset = i;\\\\n                for (var j = 0u; j < \\\").concat(M-1,\\\"u; j++) {\\\\n                  offsets[j] = offset / kernelStrides[j];\\\\n                  offset -= offsets[j] * kernelStrides[j];\\\\n                }\\\\n                offsets[\\\").concat(M-1,\\\"] = offset;\\\\n\\\\n                isPad = false;\\\\n                for (var j = \\\").concat(p-M,\\\"u; j < \\\").concat(p,\\\"u; j++) {\\\\n                  xIndices[j] = indices[j] * strides[j - \\\").concat(p-M,\\\"u]\\\\n                    + offsets[j - \\\").concat(p-M,\\\"u] - pads[j - 2u];\\\\n                  \\\").concat(I,\\\"\\\\n              }\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")},p=function(e){return{format:e.format,autoPad:[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}},d=function(e,t,n,i){var s=a(l(e,i,n),2),p=s[0],d=s[1],h=o.ShapeUtil.size(p.kernelShape),g=(0,u.inputVariable)(\\\"x\\\",e.dataType,e.dims),m=\\\"\\\";return p.countIncludePad?m+=\\\"value /= \\\".concat(\\\"f32\\\",\\\"(\\\").concat(h,\\\");\\\"):m+=\\\"value /= \\\".concat(\\\"f32\\\",\\\"(\\\").concat(h,\\\" - pad);\\\"),r(r({},t),{outputs:[{dims:d,dataType:e.dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return f(e,g,d,p,\\\"value += x_val;\\\",m,\\\"0.0\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(d)/64)}}})};t.parseAveragePoolAttributes=function(e){var t=0!==e.count_include_pad,n=p(e);if(0!==n.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for AveragePool\\\");return(0,i.createAttributeWithCacheKey)(r({countIncludePad:t},n))},t.averagePool=function(e,t){s(e.inputs);var n={name:\\\"AveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return d(e.inputs[0],n,!1,t)}}))};var h={autoPad:\\\"\\\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\\\"\\\"};t.parseGlobalAveragePoolAttributes=function(e){var t=e.format;return r(r({format:t},h),{cacheKey:t})},t.globalAveragePool=function(e,t){s(e.inputs);var n={name:\\\"GlobalAveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return d(e.inputs[0],n,!0,t)}}))};var g=function(e,t,n,i){var s=a(l(e,i,n),2),p=s[0],d=s[1],h=(0,u.inputVariable)(\\\"x\\\",e.dataType,e.dims);return r(r({},t),{outputs:[{dims:d,dataType:e.dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return f(e,h,d,p,\\\"\\\\n      value = max(x_val, value);\\\\n    \\\",\\\"\\\",\\\"-1e5\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(d)/64)}}})};t.maxPool=function(e,t){s(e.inputs);var n={name:\\\"MaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return g(e.inputs[0],n,!1,t)}}))},t.parseMaxPoolAttributes=function(e){var t=e.storage_order,n=e.dilations,a=p(e);if(0!==t)throw new Error(\\\"column major storage order is not yet supported for MaxPool\\\");if(0!==a.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for MaxPool\\\");return(0,i.createAttributeWithCacheKey)(r({storageOrder:t,dilations:n},a))},t.parseGlobalMaxPoolAttributes=function(e){var t=e.format;return r(r({format:t},h),{cacheKey:t})},t.globalMaxPool=function(e,t){s(e.inputs);var n={name:\\\"GlobalMaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return g(e.inputs[0],n,!0,t)}}))}},6031:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseReduceAttributes=t.reduceSumSquare=t.reduceSum=t.reduceProd=t.reduceMin=t.reduceMean=t.reduceMax=t.reduceLogSumExp=t.reduceL2=t.reduceL1=t.reduceLogSum=t.createReduceProgramInfo=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e){if(!e||0===e.length||e.length>2)throw new Error(\\\"Reduce op requires 1 or 2 inputs.\\\");if(2===e.length&&1!==e[1].dims.length)throw new Error(\\\"Invalid axes input dims.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},s=function(e){return[\\\"\\\",\\\"\\\",\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]};t.createReduceProgramInfo=function(e,t,n,o,u,s,l){void 0===s&&(s=!1),void 0===l&&(l=!1);var f=[],p=t[0].dims,d=a.ShapeUtil.normalizeAxes(o,t[0].dims.length),h=!l&&0===d.length;p.forEach((function(e,t){h||d.indexOf(t)>=0?s&&f.push(1):f.push(e)}));for(var g=[],m=(0,c.inputVariable)(\\\"_A\\\",t[0].dataType,p),v=(0,c.outputVariable)(\\\"output\\\",u,f),y=n(m,v,d),b=\\\"inputOffset = \\\".concat(m.indicesToOffset(\\\"inputIndices\\\"),\\\";\\\"),w=\\\"let \\\".concat(b,\\\";\\\"),S=\\\"var \\\".concat(b,\\\";\\\"),_=\\\"\\\"===y[1]?\\\"\\\":S,x=(\\\"\\\"===y[1]?w:b)+\\\"\\\\n\\\"+y[2],O=0,T=0;O<t[0].dims.length;O++)h||d.indexOf(O)>=0?(s&&T++,x=\\\"for(var j\\\".concat(O,\\\": u32 = 0; j\\\").concat(O,\\\" < \\\").concat(t[0].dims[O],\\\"; j\\\").concat(O,\\\"++) {\\\\n                \\\").concat(y[2].includes(\\\"lastIndex\\\")?\\\"let lastIndex = j\\\".concat(O,\\\";\\\"):\\\"\\\",\\\"\\\\n                \\\").concat(m.indicesSet(\\\"inputIndices\\\",O,\\\"j\\\".concat(O)),\\\"\\\\n                \\\").concat(x,\\\"\\\\n              }\\\")):(g.push(\\\"\\\".concat(m.indicesSet(\\\"inputIndices\\\",O,v.indicesGet(\\\"outputIndices\\\",T)),\\\";\\\")),T++);var A=a.ShapeUtil.size(f);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n        \\\".concat(e.declareVariables(m,v),\\\"\\\\n\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(A),\\\"\\\\n          var inputIndices: \\\").concat(m.type.indices,\\\";\\\\n          let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n          \\\").concat(g.join(\\\"\\\\n\\\"),\\\"\\\\n          \\\").concat(y[0],\\\"       // init ops for reduce max/min\\\\n          \\\").concat(_,\\\"\\\\n          \\\").concat(y[1],\\\"\\\\n          \\\").concat(x,\\\"\\\\n          \\\").concat(y[3],\\\"\\\\n          \\\").concat(4===y.length?v.setByOffset(\\\"global_idx\\\",\\\"value\\\"):y.slice(4).join(\\\"\\\\n\\\"),\\\"\\\\n        }\\\")},outputs:[{dims:f,dataType:u,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(A/64)}}})};var l=function(e,n,a,c){var u=1===e.length?a:function(e,t){var n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((function(e){return n.push(Number(e))})),(0,o.createAttributeWithCacheKey)({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})}(e,a),l={name:n,inputTypes:[i.GpuDataType.default],cacheHint:u.cacheKey+\\\"_\\\"+e[0].dims.map((function(e){return e.toString()})).join(\\\",\\\")};return r(r({},l),{get:function(){return(0,t.createReduceProgramInfo)(l,[e[0]],u.noopWithEmptyAxes&&0===u.axes.length?s:c,u.axes,e[0].dataType,u.keepDims,u.noopWithEmptyAxes)}})};t.reduceLogSum=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSum\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = log(value);\\\"]})),{inputs:[0]})},t.reduceL1=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL1\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += abs(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceL2=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL2\\\",t,(function(e,t){return[\\\"var t = f32(0); var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"t = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\"; value += (t * t);\\\"),\\\"value = sqrt(value);\\\"]})),{inputs:[0]})},t.reduceLogSumExp=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSumExp\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += exp(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"value = log(value);\\\"]})),{inputs:[0]})},t.reduceMax=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMax\\\",t,(function(e,t,n){for(var r=[],a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&r.push(e.indicesSet(\\\"inputIndices\\\",a,0));return[\\\"\\\".concat(r.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = max(value, \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceMean=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMean\\\",t,(function(e,t,n){for(var r=1,a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&(r*=e.shape[a]);return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = value / \\\".concat(r,\\\".;\\\")]})),{inputs:[0]})},t.reduceMin=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMin\\\",t,(function(e,t,n){for(var r=[],a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&r.push(\\\"inputIndices[\\\".concat(a,\\\"] = 0;\\\"));return[\\\"\\\".concat(r.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = min(value, \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceProd=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceProd\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(1);\\\"),\\\"\\\",\\\"value *= \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceSum=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSum\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceSumSquare=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSumSquare\\\",t,(function(e,t){return[\\\"var t = f32(0); var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"t = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\"; value += t * t;\\\"),\\\"\\\"]})),{inputs:[0]})},t.parseReduceAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)}},4566:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseResizeAttributes=t.resize=t.createResizeProgramInfoLoader=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.createResizeProgramInfoLoader=function(e,t,n,c,l,f){var p={name:\\\"Resize\\\",inputTypes:[u.GpuDataType.default],cacheHint:t.cacheKey+n.toString()+(c.length>0?\\\"_scales_\\\"+c.toString():\\\"\\\")+(l.length>0?\\\"_sizes_\\\"+l.toString():\\\"\\\")};return r(r({},p),{get:function(){return function(e,t,n,c,l,f,p){var d=t.dims,h=function(e,t,n){var r=new Array(n).fill(0).concat(new Array(n).fill(1)),a=0===e.length?r:e.slice();return t.length>0?(t.forEach((function(e,o){r[e]=a[o],r[o+n]=a[t.length+o]})),r):a}(p,n.axes,d.length),g=function(e,t,n,r){var i=[];if(n.length>0)if(r.length>0){if(e.forEach((function(e){return i.push(e)})),Math.max.apply(Math,o([],a(r),!1))>e.length)throw new Error(\\\"axes is out of bound\\\");r.forEach((function(e,t){return i[e]=n[t]}))}else n.forEach((function(e){return i.push(e)}));else{if(0===t.length)throw new Error(\\\"Resize requires either scales or sizes.\\\");i=e.map((function(e,n){return Math.round(e*t[n])}))}return i}(d,l,f,n.axes),m=l.slice();0===l.length&&(m=d.map((function(e,t){return 0===e?1:g[t]/e})),\\\"stretch\\\"!==n.keepAspectRatioPolicy&&(g=function(e,t,n,r){var i=function(){switch(r.keepAspectRatioPolicy){case\\\"not_larger\\\":return r.axes.length>0?Math.min.apply(Math,o(o([],a(r.axes.map((function(e){return n[e]}))),!1),[Number.MAX_VALUE],!1)):Math.min.apply(Math,o(o([],a(n),!1),[Number.MAX_VALUE],!1));case\\\"not_smaller\\\":return r.axes.length>0?Math.max.apply(Math,o(o([],a(r.axes.map((function(e){return n[e]}))),!1),[Number.MIN_VALUE],!1)):Math.max.apply(Math,o(o([],a(n),!1),[Number.MIN_VALUE],!1));default:throw new Error(\\\"Keep aspect ratio policy \\\".concat(r.keepAspectRatioPolicy,\\\" is not supported\\\"))}}();n.fill(1,0,n.length);var c=e.slice();return r.axes.length>0?(r.axes.forEach((function(e){return n[e]=i})),r.axes.forEach((function(t){return c[t]=Math.round(e[t]*n[t])}))):(n.fill(i,0,n.length),c.forEach((function(e,t){return c[t]=Math.round(e*n[t])}))),c}(d,0,m,n)));var v=(0,s.outputVariable)(\\\"output\\\",t.dataType,g),y=(0,s.inputVariable)(\\\"input\\\",t.dataType,d),b=i.ShapeUtil.size(g),w=d.length===g.length&&d.every((function(e,t){return e===g[t]})),S=\\\"tf_crop_and_resize\\\"===n.coordinateTransformMode;return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      \\\".concat((t=n.coordinateTransformMode,\\\"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { \\\"+function(){switch(t){case\\\"asymmetric\\\":return\\\"return xResized / xScale;\\\";case\\\"pytorch_half_pixel\\\":return\\\"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }\\\";case\\\"tf_half_pixel_for_nn\\\":return\\\"return (xResized + 0.5) / xScale;\\\";case\\\"align_corners\\\":return\\\"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }\\\";case\\\"tf_crop_and_resize\\\":return\\\"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }\\\";case\\\"half_pixel_symmetric\\\":return[\\\"const outputWidth = xScale * lengthResized;\\\",\\\"const adjustment = lengthResized / outputWidth;\\\",\\\"const center = lengthOriginal / 2;\\\",\\\"const offset = center * (1 - adjustment);\\\",\\\"return offset + ((xResized + 0.5) / xScale) - 0.5;\\\"].join(\\\"\\\\n\\\");case\\\"half_pixel\\\":return\\\"return ((xResized + 0.5) / xScale) - 0.5;\\\";default:throw new Error(\\\"Coordinate transform mode \\\".concat(t,\\\" is not supported\\\"))}}()+\\\"}\\\"),\\\";\\\\n      \\\").concat(function(){switch(n.mode){case\\\"nearest\\\":return\\\"\\\\n              \\\".concat(function(e,t){return\\\"\\\\n    fn checkInputIndices(inputIndices: \\\".concat(e.type.indices,\\\") -> bool {\\\\n      const inputShape = array<u32, \\\").concat(t.length,\\\">(\\\").concat(t.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      for (var i:u32 = 0; i < \\\").concat(t.length,\\\"; i++) {\\\\n        var inputIndex = \\\").concat(1===t.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\",\\\";\\\\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\\\\n          return false;\\\\n        }\\\\n      }\\\\n      return true;\\\\n    }\\\")}(y,d),\\\";\\\\n              \\\").concat(function(e,t){return\\\"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {\\\"+function(){switch(e){case\\\"round_prefer_ceil\\\":return\\\"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }\\\";case\\\"floor\\\":return\\\"return floor(xOriginal);\\\";case\\\"ceil\\\":return\\\"return ceil(xOriginal);\\\";case\\\"round_prefer_floor\\\":return\\\"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }\\\";default:if(t<11)return\\\"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }\\\";throw new Error(\\\"Nearest mode \\\".concat(e,\\\" is not supported\\\"))}}()+\\\"}\\\"}(n.nearestMode,c),\\\";\\\\n              \\\").concat(function(e,t,n,r,a,o,i){return\\\"\\\\n    fn calculateInputIndicesFromOutputIndices(outputIndices: \\\".concat(t.type.indices,\\\") -> \\\").concat(e.type.indices,\\\" {\\\\n        const inputShape = array<u32, \\\").concat(n.length,\\\">(\\\").concat(n.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const outputShape = array<u32, \\\").concat(r.length,\\\">(\\\").concat(r.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const scales = array<f32, \\\").concat(a.length,\\\">(\\\").concat(a.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n        const roi = array<f32, \\\").concat(o.length,\\\">(\\\").concat(o.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n        var inputIndices: \\\").concat(e.type.indices,\\\";\\\\n        for (var i:u32 = 0; i < \\\").concat(r.length,\\\"; i++) {\\\\n          var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n          var inputIndex: u32;\\\\n          if (scales[i] == 1.0) {\\\\n            inputIndex = outputIndex;\\\\n          } else {\\\\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + \\\").concat(n.length,\\\"]);\\\\n            if (!\\\").concat(i,\\\" || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\\\\n              if (original_idx < 0) {\\\\n                inputIndex = 0;\\\\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\\\\n                inputIndex = inputShape[i] - 1;\\\\n              } else {\\\\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\\\\n              }\\\\n            } else {\\\\n              inputIndex = u32(original_idx);\\\\n            }\\\\n          }\\\\n          \\\").concat(e.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputIndex\\\"),\\\"\\\\n        }\\\\n        return inputIndices;\\\\n    }\\\")}(y,v,d,g,m,h,S),\\\";\\\\n              \\\");case\\\"linear\\\":return\\\"\\\\n              \\\".concat(function(e,t,n,r,a){return\\\"\\\\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: \\\".concat(e.type.indices,\\\") -> array<f32, \\\").concat(n.length,\\\"> {\\\\n      const inputShape = array<u32, \\\").concat(t.length,\\\">(\\\").concat(t.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      const outputShape = array<u32, \\\").concat(n.length,\\\">(\\\").concat(n.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      const scales = array<f32, \\\").concat(r.length,\\\">(\\\").concat(r.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n      const roi = array<f32, \\\").concat(a.length,\\\">(\\\").concat(a.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n      var originalIndices: array<f32, \\\").concat(n.length,\\\">;\\\\n      for (var i:u32 = 0; i < \\\").concat(n.length,\\\"; i++) {\\\\n        var outputIndex = \\\").concat(1===n.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n        if (scales[i] == 1.0) {\\\\n          originalIndices[i] = f32(outputIndex);\\\\n        } else {\\\\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + \\\").concat(t.length,\\\"]);\\\\n        }\\\\n      }\\\\n      return originalIndices;\\\\n    }\\\")}(v,d,g,m,h),\\\";\\\\n              \\\").concat(function(e,t,n,r,o,i,c){var u=a(2===n.length?[-1,0,1,-1]:1===o[1]?[0,2,3,1]:[0,1,2,3],4),s=u[0],l=u[1],f=u[2],p=u[3];return\\\"\\\\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\\\\n      var inputIndices: \\\".concat(e.type.indices,\\\";\\\\n      inputIndices[\\\").concat(l,\\\"] = max(0, min(row, \\\").concat(n[l],\\\" - 1));\\\\n      inputIndices[\\\").concat(f,\\\"] = max(0, min(col, \\\").concat(n[f],\\\" - 1));\\\\n      if (\\\").concat(n.length,\\\" > 2) {\\\\n        inputIndices[\\\").concat(p,\\\"] = channel;\\\\n        inputIndices[\\\").concat(s,\\\"] = batch;\\\\n      };\\\\n      return input[\\\").concat(e.indicesToOffset(\\\"inputIndices\\\"),\\\"];\\\\n    }\\\\n\\\\n    fn bilinearInterpolation(outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\\\\n      var row:f32 = originalIndices[\\\").concat(l,\\\"];\\\\n      var col:f32 = originalIndices[\\\").concat(f,\\\"];\\\\n      if (\\\").concat(i,\\\" && (row < 0 || row > (\\\").concat(n[l],\\\" - 1) || col < 0 || col > \\\").concat(n[f],\\\" - 1)) {\\\\n        return \\\").concat(c,\\\";\\\\n      }\\\\n      row = max(0, min(row, \\\").concat(n[l],\\\" - 1));\\\\n      col = max(0, min(col, \\\").concat(n[f],\\\" - 1));\\\\n      var row1: u32 = u32(row);\\\\n      var col1: u32 = u32(col);\\\\n      var row2: u32 = u32(row + 1);\\\\n      var col2: u32 = u32(col + 1);\\\\n      var channel: u32 = 0;\\\\n      var batch: u32 = 0;\\\\n      if (\\\").concat(n.length>2,\\\") {\\\\n        channel = u32(originalIndices[\\\").concat(p,\\\"]);\\\\n        batch = u32(originalIndices[\\\").concat(s,\\\"]);\\\\n      }\\\\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\\\\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\\\\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\\\\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\\\\n      var dx1: f32 = row - f32(row1);\\\\n      var dx2: f32 = f32(row2 ) - row;\\\\n      var dy1 = col - f32(col1);\\\\n      var dy2 = f32(col2) - col;\\\\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\\\\n    }\\\")}(y,v,d,0,m,S,n.extrapolationValue),\\\";\\\\n              \\\");case\\\"cubic\\\":return\\\"\\\\n            \\\".concat(function(e,t,n,r,o,i,c,u,s,l){var f=a(2===n.length?[0,1]:1===o[1]?[2,3]:[1,2],2),p=f[0],d=f[1],h=function(a){var c=a===p?\\\"row\\\":\\\"col\\\";return\\\"\\\\n      fn \\\".concat(c,\\\"CubicInterpolation(inputIndices: \\\").concat(e.type.indices,\\\", outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n        var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[\\\".concat(a,\\\"]\\\"),\\\";\\\\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), \\\").concat(o[a],\\\",\\\\n        f32(\\\").concat(r[a],\\\"), f32(\\\").concat(n[a],\\\"), \\\").concat(i[a],\\\", \\\").concat(i[a],\\\" + \\\").concat(n.length,\\\");\\\\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\\\\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\\\\n\\\\n        if (\\\").concat(u,\\\" && (originalIdx < 0 || originalIdx > (\\\").concat(n[a],\\\" - 1))) {\\\\n          return \\\").concat(s,\\\";\\\\n        }\\\\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n        for (var i: i32 = -1; i < 3; i++) {\\\\n          var \\\").concat(c,\\\": f32 = originalIdx + f32(i);\\\\n          if (\\\").concat(c,\\\" < 0 || \\\").concat(c,\\\" >= \\\").concat(n[a],\\\") {\\\\n            if (\\\").concat(l,\\\") {\\\\n              coefs[i + 1] = 0.0;\\\\n              continue;\\\\n            } else if (\\\").concat(u,\\\") {\\\\n              return \\\").concat(s,\\\";\\\\n            } else {\\\\n              \\\").concat(c,\\\" = max(0, min(\\\").concat(c,\\\", \\\").concat(n[a],\\\" - 1));\\\\n            }\\\\n          }\\\\n          var inputIndicesCopy: \\\").concat(e.type.indices,\\\" = inputIndices;\\\\n          inputIndicesCopy[\\\").concat(a,\\\"] = u32(\\\").concat(c,\\\");\\\\n          data[i + 1] = \\\").concat(a===p?\\\"input[\\\".concat(e.indicesToOffset(\\\"inputIndicesCopy\\\"),\\\"];\\\"):\\\"\\\\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);\\\",\\\"\\\\n        }\\\\n        return cubicInterpolation1D(data, coefs);\\\\n      }\\\")};return\\\"\\\\n    \\\".concat(h(p),\\\";\\\\n    \\\").concat(h(d),\\\";\\\\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\\\\n    var absS = abs(s);\\\\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n    var oneMinusAbsS: f32 = 1.0 - absS;\\\\n    var twoMinusAbsS: f32 = 2.0 - absS;\\\\n    var onePlusAbsS: f32 = 1.0 + absS;\\\\n    coeffs[0] = ((\\\").concat(c,\\\" * onePlusAbsS - 5 * \\\").concat(c,\\\") * onePlusAbsS + 8 * \\\").concat(c,\\\") * onePlusAbsS - 4 * \\\").concat(c,\\\";\\\\n    coeffs[1] = ((\\\").concat(c,\\\" + 2) * absS - (\\\").concat(c,\\\" + 3)) * absS * absS + 1;\\\\n    coeffs[2] = ((\\\").concat(c,\\\" + 2) * oneMinusAbsS - (\\\").concat(c,\\\" + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\\\\n    coeffs[3] = ((\\\").concat(c,\\\" * twoMinusAbsS - 5 * \\\").concat(c,\\\") * twoMinusAbsS + 8 * \\\").concat(c,\\\") * twoMinusAbsS - 4 * \\\").concat(c,\\\";\\\\n    return coeffs;\\\\n  }\\\\n\\\\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\\\\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\\\\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\\\\n  }\\\\n\\\\n  fn bicubicInterpolation(outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n    var inputIndices: \\\").concat(e.type.indices,\\\" = outputIndices;\\\\n    return colCubicInterpolation(inputIndices, outputIndices);\\\\n  }\\\\n    \\\")}(y,v,d,g,m,h,n.cubicCoeffA,S,n.extrapolationValue,n.excludeOutside),\\\";\\\\n            \\\");default:throw Error(\\\"Invalid resize mode\\\")}}(),\\\";\\\\n      \\\").concat(e.declareVariables(y,v),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(b),\\\"\\\\n        if (\\\").concat(w,\\\") {\\\\n          output[global_idx] = input[global_idx];\\\\n        } else {\\\\n          let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          var inputIndices: \\\").concat(y.type.indices,\\\";\\\\n          \\\").concat(function(){switch(n.mode){case\\\"nearest\\\":return\\\"inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\\\\n                  if (checkInputIndices(inputIndices)) {\\\\n                    output[global_idx] = input[\\\".concat(y.indicesToOffset(\\\"inputIndices\\\"),\\\"];\\\\n                  } else {\\\\n                    output[global_idx] = \\\").concat(n.extrapolationValue,\\\";\\\\n                  }\\\");case\\\"linear\\\":return\\\"output[global_idx] = bilinearInterpolation(outputIndices);\\\";case\\\"cubic\\\":return\\\"output[global_idx] = bicubicInterpolation(outputIndices);\\\";default:throw Error(\\\"Unsupported resize mode: \\\".concat(n.mode))}}(),\\\";\\\\n        }\\\\n      }\\\");var t},outputs:[{dims:g,dataType:t.dataType,gpuDataType:u.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(b/64)}}})}(p,e,t,n,c,l,f)}})},t.resize=function(e,n){var r=[],o=[],i=[],c=function(e){var t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]}(e);(function(e,t,n,r,o,i){var c=a(n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],3),u=c[0],s=c[1],l=c[2],f=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach((function(e){return i.push(e)}));else if(\\\"tf_crop_and_resize\\\"===t.coordinateTransformMode)throw new Error(\\\"Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize\\\");if(s>0&&e.length>s&&e[s].dims.length>0){if(e[s].getFloat32Array().forEach((function(e){return r.push(e)})),0!==r.length&&r.length!==f&&n>=18&&r.length!==t.axes.length)throw new Error(\\\"Resize requires scales input size to be same as input rank or axes size for opset 18 and up\\\");!function(e,t){if(e.every((function(e){return e>0||function(){throw new Error(\\\"Resize requires scales input values to be positive\\\")}})),e.length>0)if(\\\"linear\\\"===t.mode){if(!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for linear mode\\\")}else if(\\\"cubic\\\"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for cubic mode\\\")}(r,t),t.axes.length>0&&function(e,t,n){t.every((function(e){return e>=0&&e<n||function(){throw new Error(\\\"Resize requires axes input values to be positive and less than rank\\\")}}));var r=new Array(n).fill(1);return t.forEach((function(t,n){return r[t]=e[n]})),r}(r,t.axes,f).forEach((function(e,t){return r[t]=e}))}if(l>0&&e.length>l&&(e[l].getBigInt64Array().forEach((function(e){return o.push(Number(e))})),o.length!==f||n>=18&&o.length===t.axes.length))throw new Error(\\\"Resize requires sizes input size to be same as input rank or axes size for opset 18 and up\\\");if(t.axes.length>0){if(r.length!==t.axes.length)throw new Error('Resize requires \\\"scales\\\" input size to be of axes rank when axes attributes is specified');if(o.length!==t.axes.length)throw new Error('Resize requires \\\"sizes\\\" input size to be of rank axes rank when axes attributes is specified')}if(void 0!==r&&void 0!==o&&r.length>0&&o.length>f)throw new Error(\\\"Resize requires only of scales or sizes to be specified\\\")})(e.inputs,n,c,r,o,i),e.compute((0,t.createResizeProgramInfoLoader)(e.inputs[0],n,c,r,o,i),{inputs:[0]})},t.parseResizeAttributes=function(e){var t=e.antialias,n=e.axes,r=e.coordinateTransformMode,a=e.cubicCoeffA,o=0!==e.excludeOutside,i=e.extrapolationValue,u=e.keepAspectRatioPolicy,s=e.mode,l=\\\"\\\"===e.nearestMode?\\\"simple\\\":e.nearestMode;return(0,c.createAttributeWithCacheKey)({antialias:t,axes:n,coordinateTransformMode:r,cubicCoeffA:a,excludeOutside:o,extrapolationValue:i,keepAspectRatioPolicy:u,mode:s,nearestMode:l})}},8906:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSkipLayerNormAttributes=t.skipLayerNorm=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.skipLayerNorm=function(e,t){!function(e){if(!e||e.length<3)throw new Error(\\\"layerNorm requires at least 3 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\");var t=e[0],n=e[1],r=e[2];if(t.dataType!==n.dataType||t.dataType!==r.dataType)throw new Error(\\\"All inputs must have the same data type\\\");if(3!==t.dims.length&&2!==t.dims.length)throw new Error(\\\"Input must be 2D or 3D\\\");if(3!==n.dims.length&&2!==n.dims.length)throw new Error(\\\"Skip must be 2D or 3D\\\");var a=t.dims[t.dims.length-1],o=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==a)throw new Error(\\\"Skip must have the same hidden size as input\\\");if(n.dims[n.dims.length-2]!==o)throw new Error(\\\"Skip must have the same sequence length as input\\\");if(1!==r.dims.length)throw new Error(\\\"Gamma must be 1D\\\");if(r.dims[r.dims.length-1]!==a)throw new Error(\\\"Gamma must have the same hidden size as input\\\");if(e.length>3){var i=e[3];if(1!==i.dims.length)throw new Error(\\\"Beta must be 1D\\\");if(i.dims[i.dims.length-1]!==a)throw new Error(\\\"Beta must have the same hidden size as input\\\")}if(e.length>4){var c=e[4];if(1!==c.dims.length)throw new Error(\\\"Bias must be 1D\\\");if(c.dims[c.dims.length-1]!==a)throw new Error(\\\"Bias must have the same hidden size as input\\\")}}(e.inputs);var n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(function(e,t,n,o){var u={name:\\\"SkipLayerNormalization\\\",inputTypes:new Array(e.length).fill(i.GpuDataType.default),cacheHint:t.cacheKey};return r(r({},u),{get:function(){return function(e,t,n,o,u){var s=t[0].dims,l=s,f=a.ShapeUtil.size(s),p=s.slice(-1)[0],d=u?s.slice(0,-1).concat(1):[],h=t.length>3,g=t.length>4,m=(0,c.tensorTypeToWsglStorageType)(t[0].dataType),v=u&&o>1,y=u&&o>2,b=o>3,w=0,S=[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return o>1&&S.push({dims:d,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),o>2&&S.push({dims:d,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),o>3&&S.push({dims:s,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      const hiddenSize: u32 = \\\".concat(p,\\\";\\\\n      const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> x : array<\\\").concat(m,\\\">;\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> skip : array<\\\").concat(m,\\\">;\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> gamma : array<\\\").concat(m,\\\">;\\\\n      \\\").concat(h?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read> beta : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(g?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read> bias : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read_write> output : array<\\\").concat(m,\\\">;\\\\n      \\\").concat(v?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> meanOutput : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(y?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> invStdOutput : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(b?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> inputSkipBiasSum : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(f/p),\\\"\\\\n        let offset = global_idx * hiddenSize;\\\\n        var sum: f32 = 0.0;\\\\n        var squareSum: f32 = 0.0;\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          let skipValue = skip[offset + i];\\\\n          let biasValue = \\\").concat(g?\\\"bias[i]\\\":\\\"0.0\\\",\\\";\\\\n          let inputValue = x[offset + i];\\\\n          let value = inputValue + skipValue + biasValue;\\\\n          \\\").concat(b?\\\"inputSkipBiasSum[offset + i] = value;\\\":\\\"\\\",\\\"\\\\n          output[offset + i] = value;\\\\n          sum += value;\\\\n          squareSum += value * value;\\\\n        }\\\\n        let mean: f32 = sum / f32(hiddenSize);\\\\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\\\\n        \\\").concat(v?\\\"meanOutput[global_idx] = mean;\\\":\\\"\\\",\\\"\\\\n        \\\").concat(y?\\\"invStdOutput[global_idx] = 1.0 / variance;\\\":\\\"\\\",\\\"\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + \\\").concat(h?\\\"beta[i]\\\":\\\"0.0\\\",\\\";\\\\n        }\\\\n      }\\\")},outputs:S,dispatchGroup:function(){return{x:Math.ceil(f/p/64)}}})}(u,e,t,n,o)}})}(e.inputs,t,e.outputCount,!1),{outputs:n})},t.parseSkipLayerNormAttributes=function(e){var t=e.epsilon;return(0,o.createAttributeWithCacheKey)({epsilon:t})}},5101:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSliceAttributes=t.slice=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075),l=function(e,t){var n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((function(e){return n.push(Number(e))}));else{if(6!==e[t].dataType)throw new Error(\\\"Input \\\".concat(t,\\\" must be an array of int32 or int64\\\"));e[t].getInt32Array().forEach((function(e){return n.push(Number(e))}))}return n},f=function(e,t,n,r,a){var o=e;return e<0&&(o+=n[r[t]]),a[t]<0?Math.max(0,Math.min(o,n[r[t]]-1)):Math.max(0,Math.min(o,n[r[t]]))};t.slice=function(e,t){!function(e,t){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error(\\\"axes, starts and ends must have the same length\\\")}else if(t.starts.length!==t.ends.length)throw new Error(\\\"starts and ends must have the same length\\\");e.slice(1).forEach((function(t,n){if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(\\\"Input \\\".concat(n,\\\" must be an array of int32 or int64\\\"))}))}(e.inputs,t);var n=function(e,t){var n=function(e,t){if(e.length>1){var n=l(e,1),r=l(e,2),i=l(e,3);return 0===i.length&&(i=o([],a(Array(e[0].dims.length).keys()),!1)),(0,c.createAttributeWithCacheKey)({starts:n,ends:r,axes:i})}return t}(e,t),p={name:\\\"Slice\\\",inputTypes:[u.GpuDataType.default],cacheHint:n.cacheKey+(e.length>4?\\\"steps_\\\"+e[4].dims.toString():\\\"\\\")};return r(r({},p),{get:function(){return function(e,t,n){var c=t[0].dims,p=i.ShapeUtil.size(c),d=n.axes.length>0?i.ShapeUtil.normalizeAxes(n.axes,c.length):o([],a(Array(c.length).keys()),!1),h=l(t,4);h.forEach((function(e){return 0!==e||function(){throw new Error(\\\"step cannot be 0\\\")}})),0===h.length&&(h=Array(d.length).fill(1));var g=n.starts.map((function(e,t){return f(e,t,c,d,h)})),m=n.ends.map((function(e,t){return f(e,t,c,d,h)}));if(d.length!==c.length)for(var v=0;v<c.length;++v)d.includes(v)||(g.splice(v,0,0),m.splice(v,0,c[v]),h.splice(v,0,1));var y=h.map((function(e){return Math.sign(e)}));h.forEach((function(e,t,n){if(e<0){var r=(m[t]-g[t])/e,a=g[t],o=a+r*h[t];g[t]=o,m[t]=a,n[t]=-e}}));var b=c.slice(0);d.forEach((function(e,t){b[e]=Math.ceil((m[e]-g[e])/h[e])}));var w={dims:b,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default},S=(0,s.outputVariable)(\\\"output\\\",t[0].dataType,b),_=(0,s.inputVariable)(\\\"input\\\",t[0].dataType,c),x=i.ShapeUtil.size(b);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      \\\".concat(e.declareVariables(_,S),\\\"\\\\n        const signs = array<i32, \\\").concat(y.length,\\\">(\\\").concat(y.map((function(e){return\\\"\\\".concat(e,\\\"i\\\")})).join(\\\",\\\"),\\\");\\\\n        const starts = array<u32, \\\").concat(g.length,\\\">(\\\").concat(g.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const ends = array<u32, \\\").concat(m.length,\\\">(\\\").concat(m.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const steps = array<u32, \\\").concat(h.length,\\\">(\\\").concat(h.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const inputShape = array<u32, \\\").concat(c.length,\\\">(\\\").concat(c.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n        \\\").concat(function(e,t,n,r){return\\\"fn calculateInputIndices(outputIndices: \\\".concat(t.type.indices,\\\") -> \\\").concat(e.type.indices,\\\" {\\\\n          var inputIndices: \\\").concat(e.type.indices,\\\";\\\\n          var carry = 0u;\\\\n          for (var i = \\\").concat(n.length,\\\"; i >= 0; i--) {\\\\n            var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\\\\n            carry = inputIndex / inputShape[i];\\\\n            inputIndex = inputIndex % inputShape[i];\\\\n            if (signs[i] < 0) {\\\\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\\\\n            }\\\\n            \\\").concat(1===n.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\",\\\" = inputIndex;\\\\n          }\\\\n          return inputIndices;\\\\n      }\\\")}(_,S,c,b),\\\"\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(x),\\\"\\\\n          let outputIndices = \\\").concat(S.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          let inputIndices = calculateInputIndices(outputIndices);\\\\n          \\\").concat(S.setByOffset(\\\"global_idx\\\",_.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n      }\\\")},outputs:[w],dispatchGroup:function(){return{x:Math.ceil(p/64)}}})}(p,e,n)}})}(e.inputs,t),p=n.get();if(!(i.ShapeUtil.size(p.outputs[0].dims)>0))throw new Error(\\\"slice: output size is 0\\\");e.compute(n,{inputs:[0]})},t.parseSliceAttributes=function(e){var t=e.starts,n=e.ends,r=e.axes;return(0,c.createAttributeWithCacheKey)({starts:t,ends:n,axes:r})}},6198:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSoftmaxAttributes=t.softmax=t.softmaxProgramMetadata=void 0;var a=n(6952),o=n(387),i=n(1163);t.softmaxProgramMetadata={name:\\\"Softmax\\\",inputTypes:[i.GpuDataType.default]},t.softmax=function(e,n){!function(e){if(!e||1!==e.length)throw new Error(\\\"Softmax op requires 1 input.\\\");if(1!==e[0].dataType)throw new Error(\\\"Softmax input needs to be float.\\\")}(e.inputs),e.compute(r(r({},t.softmaxProgramMetadata),{cacheHint:n.cacheKey,get:function(){return function(e,n){var o=\\\"f32\\\",c=e.dims,u=a.ShapeUtil.size(c),s=n.axis;if(s<0&&(s=c.length+s),s<c.length-1)throw new Error(\\\"softmax only supports last axis for now.\\\");var l=c[s],f=u/l;return r(r({},t.softmaxProgramMetadata),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      var<workgroup> rowMaxShared : \\\".concat(o,\\\";\\\\n      var<workgroup> rowSumShared : \\\").concat(o,\\\";\\\\n      var<workgroup> threadShared : array<\\\").concat(o,\\\", \\\").concat(64,\\\">;\\\\n\\\\n      @group(0) @binding(0) var<storage, read> x : array<\\\").concat(o,\\\">;\\\\n      @group(0) @binding(1) var<storage, read_write> result : array<\\\").concat(o,\\\">;\\\\n\\\\n      fn getValue(row: i32, col: i32, row_stride: i32) -> \\\").concat(o,\\\" {\\\\n        let index = row * row_stride + col;\\\\n        return x[index];\\\\n      }\\\\n\\\\n      fn setValue(row: i32, col: i32, row_stride: i32, value: \\\").concat(o,\\\") {\\\\n        let index = row * row_stride + col;\\\\n        result[index] = value;\\\\n      }\\\\n\\\\n      @compute @workgroup_size(\\\").concat(64,\\\", 1, 1)\\\\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\\\\n        let gindex = i32(global_id.x);\\\\n        let lindex = i32(local_id.x);\\\\n        const wg = \\\").concat(64,\\\";\\\\n        let row = gindex / wg;\\\\n        let cols = \\\").concat(l,\\\";\\\\n        let row_stride : i32 = \\\").concat(l,\\\";\\\\n\\\\n        // find the rows max\\\\n        var threadMax = -3.402823e+38f; // 6.2.4 in wgsl spec\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = getValue(row, col, row_stride);\\\\n          threadMax = max(threadMax, value);\\\\n        }\\\\n        if (lindex < cols) {\\\\n          threadShared[lindex] = threadMax;\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        var reduceSize = min(cols, wg);\\\\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\\\\n          reduceSize = currSize + (reduceSize & 1);\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowMaxShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // find the rows sum\\\\n        var threadSum = 0.0;\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\\\\n          threadSum += subExp;\\\\n        }\\\\n        threadShared[lindex] = threadSum;\\\\n        workgroupBarrier();\\\\n\\\\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowSumShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // calculate final value for each element in the row\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\\\\n          setValue(row, col, row_stride, value);\\\\n        }\\\\n      }\\\")},dispatchGroup:function(){return{x:f}}})}(e.inputs[0],n)}}))},t.parseSoftmaxAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis})}},2067:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSplitAttributes=t.split=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.split=function(e,t){!function(e){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\")}(e.inputs),e.compute(function(e,t){var n=1===e.length?t:function(e,t){var n=[],r=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((function(e){return n.push(Number(e))})),r=n.length),(0,c.createAttributeWithCacheKey)({numOutputs:r,axis:t.axis,splitSizes:n})}(e,t),l={name:\\\"Split\\\",inputTypes:[u.GpuDataType.default],cacheHint:n.cacheKey};return r(r({},l),{get:function(){return function(e,t,n){for(var c=t[0].dims,l=i.ShapeUtil.size(c),f=t[0].dataType,p=c.length,d=n.axis,h=d<0?c.length+d:d,g=new Array(n.numOutputs),m=(0,s.inputVariable)(\\\"input\\\",f,c),v=new Array(n.numOutputs),y=[],b=[],w=0,S=0;S<n.numOutputs;S++){w+=n.splitSizes[S],v[S]=w;var _=c.slice();_[n.axis]=n.splitSizes[S],b.push(_),g[S]=(0,s.outputVariable)(\\\"output\\\".concat(S),f,b[S]),y.push({dims:b[S],dataType:t[0].dataType,gpuDataType:u.GpuDataType.default})}var x=p<2?\\\"indices\\\":\\\"indices[\\\".concat(h,\\\"]\\\");return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,o([m],a(g),!1)),\\\"\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(v.length,\\\">(\\\").concat(v.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((t=v.length,\\\"\\\\nfn calculateOutputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(t,\\\"u; i += 1u ) {\\\\n    if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n    }\\\\n    }\\\\n    return \\\").concat(t,\\\"u;\\\\n}\\\")),\\\"\\\\n  \\\").concat(function(e){for(var t=e.length,n=[],r=0;r<t;++r){var a=e[r].setByIndices(\\\"indices\\\",\\\"input[global_idx]\\\");1===t?n.push(a):0===r?n.push(\\\"if (outputNumber == \\\".concat(r,\\\"u) { \\\").concat(a,\\\" }\\\")):r===t-1?n.push(\\\"else { \\\".concat(a,\\\" }\\\")):n.push(\\\"else if (outputNumber == \\\".concat(r,\\\") { \\\").concat(a,\\\" }\\\"))}return\\\"\\\\n      fn writeBufferData(outputNumber: u32, indices: \\\".concat(e[0].type.indices,\\\", global_idx: u32) {\\\\n        \\\").concat(n.join(\\\"\\\\n\\\"),\\\"\\\\n      }\\\")}(g),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\\\"\\\\n\\\\n    var indices = \\\").concat(m.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let outputNumber = calculateOutputIndex(\\\").concat(x,\\\");\\\\n    if (outputNumber != 0) {\\\\n        \\\").concat(x,\\\" -= sizeInConcatAxis[outputNumber - 1u];\\\\n    }\\\\n    writeBufferData(outputNumber, indices, global_idx);\\\\n  }\\\");var t},outputs:y,dispatchGroup:function(){return{x:Math.ceil(l/64)}}})}(l,[e[0]],n)}})}(e.inputs,t),{inputs:[0]})},t.parseSplitAttributes=function(e){var t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error(\\\"numOutputs and splitSizes lengh must be equal\\\");return(0,c.createAttributeWithCacheKey)({axis:t,numOutputs:r,splitSizes:n})}},8699:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.tile=t.createTileProgramInfo=t.tileProgramMetadata=void 0;var i=n(6952),c=n(1163),u=n(2075);t.tileProgramMetadata={name:\\\"Tile\\\",inputTypes:[c.GpuDataType.default]};var s=function(e){return Array.from(e.getBigInt64Array(),Number)};t.createTileProgramInfo=function(e,t){var n=t[0].dims,l=s(t[1]),f=function(e,t){for(var n=[],r=0;r<e.length;++r)n.push(e[r]*t[r]);return n}(n,l),p=i.ShapeUtil.size(f),d=t[0].dataType,h=(0,u.inputVariable)(\\\"input\\\",d,n),g=(0,u.outputVariable)(\\\"output\\\",d,f);return r(r({},e),{outputs:[{dims:f,dataType:t[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      const inputShape = \\\".concat(h.indices.apply(h,o([],a(n),!1)),\\\";\\\\n      \\\").concat(e.declareVariables(h,g),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n      \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\\\"\\\\n      let outputIndices = \\\").concat(g.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n      var inputIndices: \\\").concat(h.type.indices,\\\";\\\\n      for (var i = 0; i < \\\").concat(n.length,\\\"; i++) {\\\\n        let inputDimValue = \\\").concat(g.indicesGet(\\\"outputIndices\\\",\\\"i\\\"),\\\"  % \\\").concat(h.indicesGet(\\\"inputShape\\\",\\\"i\\\"),\\\";\\\\n\\\\n        \\\").concat(h.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputDimValue\\\"),\\\"\\\\n      }\\\\n      \\\").concat(g.setByOffset(\\\"global_idx\\\",h.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n    }\\\")},dispatchGroup:function(){return{x:Math.ceil(p/64)}}})},t.tile=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"Tile requires 2 inputs.\\\");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error(\\\"Tile only support float, int32, and uint32 data types\\\");if(7!==e[1].dataType)throw new Error(\\\"Tile `repeats` input should be of int64 data type\\\");if(1!==e[1].dims.length)throw new Error(\\\"Tile `repeats` input should be 1-D\\\");if(s(e[1]).length!==e[0].dims.length)throw new Error(\\\"Tile `repeats` input should have same number of elements as rank of input data tensor\\\")}(e.inputs);var n=s(e.inputs[1]).toString();e.compute(r(r({},t.tileProgramMetadata),{cacheHint:n,get:function(){return(0,t.createTileProgramInfo)(t.tileProgramMetadata,e.inputs)}}),{inputs:[0]})}},2625:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.transposeProgramMetadata={name:\\\"Transpose\\\",inputTypes:[u.GpuDataType.default]};var l=function(e,t){return t&&t.length!==e.length?o([],a(e.keys()),!1).reverse():t};t.createTransposeProgramInfo=function(e,n){var a=e.dataType,o=e.dims,c=l(o,n),f=function(e,t){return i.ShapeUtil.sortBasedOnPerm(e,l(e,t))}(o,c),p=o.length,d=i.ShapeUtil.size(f),h=(0,s.outputVariable)(\\\"output\\\",a,f),g=(0,s.inputVariable)(\\\"a\\\",a,o);return r(r({},t.transposeProgramMetadata),{outputs:[{dims:f,dataType:e.dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables(g,h),\\\"\\\\n\\\\n  \\\").concat(function(e,t,n,r){var a=[];a.push(\\\"fn perm(i: \\\".concat(r.type.indices,\\\") -> \\\").concat(n.type.indices,\\\" {\\\\n    var a: \\\").concat(n.type.indices,\\\";\\\"));for(var o=0;o<t;++o)a.push(n.indicesSet(\\\"a\\\",e[o],\\\"i[\\\".concat(o,\\\"]\\\")));return a.push(\\\"return a;}\\\"),a.join(\\\"\\\\n\\\")}(c,p,g,h),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n\\\\n    let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let aIndices = perm(indices);\\\\n\\\\n    \\\").concat(h.setByOffset(\\\"global_idx\\\",g.getByIndices(\\\"aIndices\\\")),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(d/64)}}})},t.transpose=function(e,n){!function(e){if(!e||1!==e.length)throw new Error(\\\"Transpose requires 1 input.\\\");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error(\\\"Transpose only support float, int32, and uint32 data types\\\")}(e.inputs),e.compute(r(r({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:function(){return(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm)}}))},t.parseTransposeAttributes=function(e){return(0,c.createAttributeWithCacheKey)({perm:e.perm})}},9302:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.log=t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.leakyRelu=t.gelu=t.floor=t.exp=t.erf=t.erfImpl=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.cast=t.parseCastAttributes=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e,t,n,o,u,s){void 0===s&&(s=e.dataType);var l={name:t,inputTypes:[i.GpuDataType.default],cacheHint:u};return r(r({},l),{get:function(){return function(e,t,n,o,u){return r(r({},e),{getShaderSource:function(e){return function(e,t,n,r,a,o){var i,u=Math.ceil(t/4);i=\\\"string\\\"==typeof a?\\\"\\\".concat(a,\\\"(a)\\\"):a(\\\"a\\\");var s=(0,c.inputVariable)(\\\"inputData\\\",n,[u],4),l=(0,c.outputVariable)(\\\"outputData\\\",r,[u],4);return\\\"\\\\n  \\\".concat(e.declareVariables(s,l),\\\"\\\\n\\\\n  \\\").concat(null!=o?o:\\\"\\\",\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(u),\\\"\\\\n\\\\n    let a = \\\").concat(s.getByOffset(\\\"global_idx\\\"),\\\";\\\\n    \\\").concat(l.setByOffset(\\\"global_idx\\\",i),\\\"\\\\n  }\\\")}(e,a.ShapeUtil.size(t.dims),t.dataType,n,o,u)},outputs:[{dims:t.dims,dataType:n,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(e){return{x:Math.ceil(a.ShapeUtil.size(e[0].dims)/64/4)}}})}(l,e,s,n,o)}})};t.abs=function(e){e.compute(u(e.inputs[0],\\\"Abs\\\",\\\"abs\\\"))},t.acos=function(e){e.compute(u(e.inputs[0],\\\"Acos\\\",\\\"acos\\\"))},t.acosh=function(e){e.compute(u(e.inputs[0],\\\"Acosh\\\",\\\"acosh\\\"))},t.asin=function(e){e.compute(u(e.inputs[0],\\\"Asin\\\",\\\"asin\\\"))},t.asinh=function(e){e.compute(u(e.inputs[0],\\\"Asinh\\\",\\\"asinh\\\"))},t.atan=function(e){e.compute(u(e.inputs[0],\\\"Atan\\\",\\\"atan\\\"))},t.atanh=function(e){e.compute(u(e.inputs[0],\\\"Atanh\\\",\\\"atanh\\\"))},t.parseCastAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)},t.cast=function(e,t){var n;switch(t.to){case 1:n=\\\"vec4<f32>\\\";break;case 12:n=\\\"vec4<u32>\\\";break;case 6:n=\\\"vec4<i32>\\\";break;case 9:n=\\\"vec4<bool>\\\";break;default:throw new RangeError(\\\"not supported type (specified in attribute 'to' from 'Cast' operator): \\\".concat(t.to))}e.compute(u(e.inputs[0],\\\"Cast\\\",n,void 0,t.cacheKey,t.to))},t.clipV10=function(e,t){e.compute(u(e.inputs[0],\\\"Clip\\\",(function(e){return\\\"clamp(\\\".concat(e,\\\", clip_min_, clip_max_)\\\")}),\\\"\\\\n    const clip_min_: vec4<f32> = vec4(f32(\\\".concat(t.min,\\\"));\\\\n    const clip_max_: vec4<f32> = vec4(f32(\\\").concat(t.max,\\\"));\\\\n\\\"),t.cacheKey),{inputs:[0]})},t.clip=function(e){var n,r,i,c=(r=(n=e.inputs).length>=2?n[1].getFloat32Array()[0]:a.MIN_CLIP,i=n.length>=3?n[2].getFloat32Array()[0]:a.MAX_CLIP,(0,o.createAttributeWithCacheKey)({min:r,max:i}));(0,t.clipV10)(e,c)},t.ceil=function(e){e.compute(u(e.inputs[0],\\\"Ceil\\\",\\\"ceil\\\"))},t.cos=function(e){e.compute(u(e.inputs[0],\\\"Cos\\\",\\\"cos\\\"))},t.cosh=function(e){e.compute(u(e.inputs[0],\\\"Cosh\\\",\\\"cosh\\\"))},t.parseAlphaAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)},t.elu=function(e,t){e.compute(u(e.inputs[0],\\\"Elu\\\",(function(e){return\\\"elu_vf32(\\\".concat(e,\\\")\\\")}),\\\"\\\\n  const elu_alpha_: f32 = f32(\\\".concat(t.alpha,\\\");\\\\n\\\\n  fn elu_f32(a: f32) -> f32 {\\\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\\\n  }\\\\n\\\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\\\n  }\\\"),t.cacheKey))},t.erfImpl=function(e){return\\\"\\\\nconst r0: f32 = 0.3275911;\\\\nconst r1: f32 = 0.254829592;\\\\nconst r2: f32 = -0.284496736;\\\\nconst r3: f32 = 1.421413741;\\\\nconst r4: f32 = -1.453152027;\\\\nconst r5: f32 = 1.061405429;\\\\n\\\\nfn erf_vf32(v: \\\".concat(e,\\\") -> \\\").concat(e,\\\" {\\\\n  let absv = abs(v);\\\\n  let x = 1.0 / (1.0 + r0 * absv);\\\\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\\\n}\\\")},t.erf=function(e){e.compute(u(e.inputs[0],\\\"Erf\\\",(function(e){return\\\"erf_vf32(\\\".concat(e,\\\")\\\")}),(0,t.erfImpl)(\\\"vec4<f32>\\\")))},t.exp=function(e){e.compute(u(e.inputs[0],\\\"Exp\\\",\\\"exp\\\"))},t.floor=function(e){e.compute(u(e.inputs[0],\\\"Floor\\\",\\\"floor\\\"))},t.gelu=function(e){e.compute(u(e.inputs[0],\\\"Gelu\\\",(function(e){return\\\"0.5 * \\\".concat(e,\\\" * (1.0 + erf_vf32(\\\").concat(e,\\\" * 0.7071067811865475))\\\")}),(0,t.erfImpl)(\\\"vec4<f32>\\\")))},t.leakyRelu=function(e,t){e.compute(u(e.inputs[0],\\\"LeakyRelu\\\",(function(e){return\\\"select(leaky_relu_alpha_ * \\\".concat(e,\\\", \\\").concat(e,\\\", \\\").concat(e,\\\" >= vec4<f32>(0.0))\\\")}),\\\"const leaky_relu_alpha_: f32 = f32(\\\".concat(t.alpha,\\\");\\\"),t.cacheKey))},t.neg=function(e){e.compute(u(e.inputs[0],\\\"Neg\\\",(function(e){return\\\"-\\\".concat(e)})))},t.reciprocal=function(e){e.compute(u(e.inputs[0],\\\"Reciprocal\\\",(function(e){return\\\"1.0/\\\".concat(e)})))},t.relu=function(e){e.compute(u(e.inputs[0],\\\"Relu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > vec4<f32>(0.0))\\\")})))},t.sigmoid=function(e){e.compute(u(e.inputs[0],\\\"Sigmoid\\\",(function(e){return\\\"(1.0 / (1.0 + exp(-\\\".concat(e,\\\")))\\\")})))},t.sin=function(e){e.compute(u(e.inputs[0],\\\"Sin\\\",\\\"sin\\\"))},t.sinh=function(e){e.compute(u(e.inputs[0],\\\"Sinh\\\",\\\"sinh\\\"))},t.sqrt=function(e){e.compute(u(e.inputs[0],\\\"Sqrt\\\",\\\"sqrt\\\"))},t.tan=function(e){e.compute(u(e.inputs[0],\\\"Tan\\\",\\\"tan\\\"))},t.tanh=function(e){e.compute(u(e.inputs[0],\\\"Tanh\\\",\\\"tanh\\\"))},t.thresholdedRelu=function(e,t){return e.compute(u(e.inputs[0],\\\"ThresholdedRelu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > thresholded_relu_alpha_)\\\")}),\\\"const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(\\\".concat(t.alpha,\\\");\\\"),t.cacheKey)),0},t.log=function(e){e.compute(u(e.inputs[0],\\\"Log\\\",\\\"log\\\"))}},8305:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.ProgramManager=void 0;var i=n(4955),c=n(2075),u=function(){function e(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}return e.prototype.getArtifact=function(e){return this.repo.get(e)},e.prototype.setArtifact=function(e,t){this.repo.set(e,t)},e.prototype.run=function(e,t,n,i){var c,u,s,l,f=this,p=this.backend.device,d=this.backend.getComputePassEncoder(),h=this.backend.supportTimestampQuery&&\\\"default\\\"===this.backend.env.webgpu.profilingMode;h&&d.writeTimestamp(this.backend.profilingQuerySet,0),d.setPipeline(e.computePipeline);var g=[];try{for(var m=r(t),v=m.next();!v.done;v=m.next()){var y=v.value;g.push({binding:g.length,resource:{buffer:y.buffer}})}}catch(e){c={error:e}}finally{try{v&&!v.done&&(u=m.return)&&u.call(m)}finally{if(c)throw c.error}}try{for(var b=r(n),w=b.next();!w.done;w=b.next()){var S=w.value;g.push({binding:g.length,resource:{buffer:S.buffer}})}}catch(e){s={error:e}}finally{try{w&&!w.done&&(l=b.return)&&l.call(b)}finally{if(s)throw s.error}}var _=p.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:g});if(d.setBindGroup(0,_),d.dispatchWorkgroups.apply(d,o([],a(i),!1)),this.backend.pendingDispatchNumber++,h){d.writeTimestamp(this.backend.profilingQuerySet,1),null==this.backend.profilingQueryData&&(this.backend.profilingQueryData=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));var x=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,this.backend.profilingQueryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.profilingQueryData.buffer,0,x.buffer,0,16),this.backend.flush();var O=this.backend.currentKernelId,T=this.backend.kernels.get(O)[0];x.buffer.mapAsync(GPUMapMode.READ).then((function(){var e=new BigUint64Array(x.buffer.getMappedRange()),t=e[0],n=e[1];x.buffer.unmap(),void 0===f.backend.profilingTimeBase&&(f.backend.profilingTimeBase=t);var r=Number(t-f.backend.profilingTimeBase),a=Number(n-f.backend.profilingTimeBase);if(!Number.isSafeInteger(r)||!Number.isSafeInteger(a))throw new RangeError(\\\"incorrect timestamp range\\\");f.backend.gpuDataManager.release(x.id),console.log('[profiling] kernel \\\"'.concat(O,\\\"|\\\").concat(T,'\\\" execution time: ').concat(a-r,\\\" ns\\\"))}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()},e.prototype.dispose=function(){},e.prototype.build=function(e,t){var n=this.backend.device,r=(0,c.createShaderHelper)(t),a=e.getShaderSource(r),o=\\\"\\\".concat(r.additionalImplementations,\\\"\\\\n\\\").concat(a),u=n.createShaderModule({code:o});return(0,i.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] shader code: \\\".concat(o)})),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:u,entryPoint:\\\"main\\\"},layout:\\\"auto\\\"})}},e.prototype.normalizeDispatchGroupSize=function(e){var t=\\\"number\\\"==typeof e?e:e.x,n=\\\"number\\\"==typeof e?1:e.y||1,r=\\\"number\\\"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=a&&n<=a&&r<=a)return[t,n,r];var o=t*n*r,i=Math.ceil(Math.sqrt(o));if(i>a){if((i=Math.ceil(Math.cbrt(o)))>a)throw new Error(\\\"Total dispatch size exceeds WebGPU maximum.\\\");return[i,i,i]}return[i,i,1]},e}();t.ProgramManager=u},1163:function(e,t){\\\"use strict\\\";var n;Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n.default=0]=\\\"default\\\",n[n.upload=1]=\\\"upload\\\",n[n.profile=2]=\\\"profile\\\"},7918:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(263),a=n(1497);t.setRunOptions=function(e){var t=(0,r.getInstance)(),n=0,o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\".concat(e.logVerbosityLevel));void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);var c=0;return void 0!==(null==e?void 0:e.tag)&&(c=(0,a.allocWasmString)(e.tag,o)),0===(n=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,c))&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,(function(e,r){var i=(0,a.allocWasmString)(e,o),c=(0,a.allocWasmString)(r,o);0!==t._OrtAddRunConfigEntry(n,i,c)&&(0,a.checkLastError)(\\\"Can't set a run config entry: \\\".concat(e,\\\" - \\\").concat(r,\\\".\\\"))})),[n,o]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),o.forEach((function(e){return t._free(e)})),e}}},7622:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var a=n(263),o=n(1497);t.setSessionOptions=function(e){var t,n,i,c,u=(0,a.getInstance)(),s=0,l=[],f=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((function(e){return\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)}))&&(e.enableMemPattern=!1)}(f);try{var p=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\".concat(e))}}(null!==(t=f.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),d=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\".concat(e))}}(null!==(n=f.executionMode)&&void 0!==n?n:\\\"sequential\\\"),h=\\\"string\\\"==typeof f.logId?(0,o.allocWasmString)(f.logId,l):0,g=null!==(i=f.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(g)||g<0||g>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(g));var m=null!==(c=f.logVerbosityLevel)&&void 0!==c?c:0;if(!Number.isInteger(m)||m<0||m>4)throw new Error(\\\"log verbosity level is not valid: \\\".concat(m));var v=\\\"string\\\"==typeof f.optimizedModelFilePath?(0,o.allocWasmString)(f.optimizedModelFilePath,l):0;return 0===(s=u._OrtCreateSessionOptions(p,!!f.enableCpuMemArena,!!f.enableMemPattern,d,!!f.enableProfiling,0,h,g,m,v))&&(0,o.checkLastError)(\\\"Can't create session options.\\\"),f.executionProviders&&function(e,t,n){var i,c;try{for(var u=r(t),s=u.next();!s.done;s=u.next()){var l=s.value,f=\\\"string\\\"==typeof l?l:l.name;switch(f){case\\\"xnnpack\\\":f=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(f=\\\"WEBNN\\\",\\\"string\\\"!=typeof l){var p=l;if(null==p?void 0:p.deviceType){var d=(0,o.allocWasmString)(\\\"deviceType\\\",n),h=(0,o.allocWasmString)(p.deviceType,n);0!==(0,a.getInstance)()._OrtAddSessionConfigEntry(e,d,h)&&(0,o.checkLastError)(\\\"Can't set a session config entry: 'deviceType' - \\\".concat(p.deviceType,\\\".\\\"))}(null==p?void 0:p.powerPreference)&&(d=(0,o.allocWasmString)(\\\"powerPreference\\\",n),h=(0,o.allocWasmString)(p.powerPreference,n),0!==(0,a.getInstance)()._OrtAddSessionConfigEntry(e,d,h)&&(0,o.checkLastError)(\\\"Can't set a session config entry: 'powerPreference' - \\\".concat(p.powerPreference,\\\".\\\")))}break;case\\\"webgpu\\\":f=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported execution provider: \\\".concat(f))}var g=(0,o.allocWasmString)(f,n);0!==(0,a.getInstance)()._OrtAppendExecutionProvider(e,g)&&(0,o.checkLastError)(\\\"Can't append execution provider: \\\".concat(f,\\\".\\\"))}}catch(e){i={error:e}}finally{try{s&&!s.done&&(c=u.return)&&c.call(u)}finally{if(i)throw i.error}}}(s,f.executionProviders,l),void 0!==f.extra&&(0,o.iterateExtraOptions)(f.extra,\\\"\\\",new WeakSet,(function(e,t){var n=(0,o.allocWasmString)(e,l),r=(0,o.allocWasmString)(t,l);0!==u._OrtAddSessionConfigEntry(s,n,r)&&(0,o.checkLastError)(\\\"Can't set a session config entry: \\\".concat(e,\\\" - \\\").concat(t,\\\".\\\"))})),[s,l]}catch(e){throw 0!==s&&u._OrtReleaseSessionOptions(s),l.forEach((function(e){return u._free(e)})),e}}},7917:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},t.tensorDataTypeEnumToString=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},t.getTensorElementSize=function(e){return[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e]},t.tensorTypeToTypedArrayConstructor=function(e){switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\".concat(e))}},t.logLevelStringToEnum=function(e){switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(\\\"unsupported logging level: \\\".concat(e))}}},1259:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;var c=n(7918),u=n(7622),s=n(7917),l=n(263),f=n(1497);t.initRuntime=function(e){return r(void 0,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return n=e.wasm.numThreads,r=(0,s.logLevelStringToEnum)(e.logLevel),0!==(0,l.getInstance)()._OrtInit(n,r)&&(0,f.checkLastError)(\\\"Can't initialize onnxruntime.\\\"),[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}var n,r}))}))};var p=new Map;t.createSessionAllocate=function(e){var t=(0,l.getInstance)(),n=t._malloc(e.byteLength);if(0===n)throw new Error(\\\"Can't create a session. failed to allocate a buffer of size \\\".concat(e.byteLength,\\\".\\\"));return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=function(e,t){var n,r=(0,l.getInstance)(),a=0,i=0,c=[],s=[],d=[];try{i=(n=o((0,u.setSessionOptions)(t),2))[0],c=n[1],0===(a=r._OrtCreateSession(e[0],e[1],i))&&(0,f.checkLastError)(\\\"Can't create a session.\\\");for(var h=o(function(e){var t=(0,l.getInstance)(),n=t.stackSave();try{var r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,f.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(n)}}(a),2),g=h[0],m=h[1],v=[],y=[],b=0;b<g;b++){var w=r._OrtGetInputName(a,b);0===w&&(0,f.checkLastError)(\\\"Can't get an input name.\\\"),s.push(w),v.push(r.UTF8ToString(w))}for(b=0;b<m;b++){var S=r._OrtGetOutputName(a,b);0===S&&(0,f.checkLastError)(\\\"Can't get an output name.\\\"),d.push(S),y.push(r.UTF8ToString(S))}return p.set(a,[a,s,d]),[a,v,y]}catch(e){throw s.forEach((function(e){return r._OrtFree(e)})),d.forEach((function(e){return r._OrtFree(e)})),0!==a&&r._OrtReleaseSession(a),e}finally{r._free(e[0]),0!==i&&r._OrtReleaseSessionOptions(i),c.forEach((function(e){return r._free(e)}))}},t.createSession=function(e,n){var r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=function(e){var t=(0,l.getInstance)(),n=p.get(e);if(!n)throw new Error(\\\"cannot release session. invalid session id: \\\".concat(e));var r=o(n,3),a=r[0],i=r[1],c=r[2];i.forEach((function(e){return t._OrtFree(e)})),c.forEach((function(e){return t._OrtFree(e)})),t._OrtReleaseSession(a),p.delete(e)},t.run=function(e,t,n,i,u){return r(void 0,void 0,void 0,(function(){var r,d,h,g,m,v,y,b,w,S,_,x,O,T,A,C,I,E,P,M,R,k,D,z,B,G,j,U,W,L,F,V,N,H,K,q,Y,X,Q,J,Z,$,ee,te,ne,re;return a(this,(function(a){switch(a.label){case 0:if(r=(0,l.getInstance)(),!(d=p.get(e)))throw new Error(\\\"cannot run inference. invalid session id: \\\".concat(e));h=o(d,3),g=h[0],m=h[1],v=h[2],y=t.length,b=i.length,w=0,S=[],_=[],x=[],a.label=1;case 1:for(a.trys.push([1,,7,8]),re=o((0,c.setRunOptions)(u),2),w=re[0],S=re[1],O=function(e){var t=n[e][0],a=n[e][1],o=n[e][2],i=void 0,c=void 0;if(Array.isArray(o)){c=4*o.length,i=r._malloc(c),x.push(i);for(var u=i/4,l=0;l<o.length;l++){if(\\\"string\\\"!=typeof o[l])throw new TypeError(\\\"tensor data at index \\\".concat(l,\\\" is not a string\\\"));r.HEAPU32[u++]=(0,f.allocWasmString)(o[l],x)}}else c=o.byteLength,i=r._malloc(c),x.push(i),r.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,c),i);var p=r.stackSave(),d=r.stackAlloc(4*a.length);try{var h=d/4;a.forEach((function(e){return r.HEAP32[h++]=e}));var g=r._OrtCreateTensor((0,s.tensorDataTypeStringToEnum)(t),i,c,d,a.length);0===g&&(0,f.checkLastError)(\\\"Can't create tensor for input[\\\".concat(e,\\\"].\\\")),_.push(g)}finally{r.stackRestore(p)}},G=0;G<y;G++)O(G);T=r.stackSave(),A=r.stackAlloc(4*y),C=r.stackAlloc(4*y),I=r.stackAlloc(4*b),E=r.stackAlloc(4*b),a.label=2;case 2:for(a.trys.push([2,,5,6]),P=A/4,M=C/4,R=I/4,k=E/4,G=0;G<y;G++)r.HEAPU32[P++]=_[G],r.HEAPU32[M++]=m[t[G]];for(G=0;G<b;G++)r.HEAPU32[R++]=0,r.HEAPU32[k++]=v[i[G]];return D=r._OrtRun(g,C,A,y,E,b,I,w),(z=r.jsepRunPromise)&&void 0!==z.then?[4,z]:[3,4];case 3:D=a.sent(),a.label=4;case 4:for(B=[],0!==D&&(0,f.checkLastError)(\\\"failed to call OrtRun().\\\"),G=0;G<b;G++){j=r.HEAPU32[I/4+G],U=r.stackSave(),W=r.stackAlloc(16),L=void 0,F=0;try{for(0!==(D=r._OrtGetTensorData(j,W,W+4,W+8,W+12))&&(0,f.checkLastError)(\\\"Can't access output tensor data on index \\\".concat(G,\\\".\\\")),V=W/4,N=r.HEAPU32[V++],F=r.HEAPU32[V++],H=r.HEAPU32[V++],K=r.HEAPU32[V++],q=[],Y=0;Y<K;Y++)q.push(r.HEAPU32[H/4+Y]);if(r._OrtFree(H),X=0===q.length?1:q.reduce((function(e,t){return e*t})),\\\"string\\\"===(L=(0,s.tensorDataTypeEnumToString)(N))){for(Q=[],J=F/4,Z=0;Z<X;Z++)$=r.HEAPU32[J++],ee=Z===X-1?void 0:r.HEAPU32[J]-$,Q.push(r.UTF8ToString($,ee));B.push([L,q,Q])}else te=(0,s.tensorTypeToTypedArrayConstructor)(L),ne=new te(X),new Uint8Array(ne.buffer,ne.byteOffset,ne.byteLength).set(r.HEAPU8.subarray(F,F+ne.byteLength)),B.push([L,q,ne])}finally{r.stackRestore(U),\\\"string\\\"===L&&F&&r._free(F),r._OrtReleaseTensor(j)}}return[2,B];case 5:return r.stackRestore(T),[7];case 6:return[3,8];case 7:return _.forEach((function(e){return r._OrtReleaseTensor(e)})),x.forEach((function(e){return r._free(e)})),0!==w&&r._OrtReleaseRunOptions(w),S.forEach((function(e){return r._free(e)})),[7];case 8:return[2]}}))}))},t.endProfiling=function(e){var t=(0,l.getInstance)(),n=p.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);0===a&&(0,f.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var a=i(e),o=a.next();!o.done;o=a.next()){var c=o.value[2];!Array.isArray(c)&&c.buffer&&r.push(c.buffer)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return r}},263:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var u,s=o(n(6449)),l=n(932),f=n(3474),p=!1,d=!1,h=!1;t.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var t,r,a,o,i,g,m,v,y,b,w;return c(this,(function(c){switch(c.label){case 0:if(p)return[2,Promise.resolve()];if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return d=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),g=e.wasmPaths,m=\\\"string\\\"==typeof g?g:void 0,v=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"}(i,o),y=\\\"object\\\"==typeof g?g[v]:void 0,b=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){b=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=o?f:l,a={locateFile:function(e,t){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(4154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=m?m:t)+v:t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\".concat(r.toString(),\\\"})();\\\");a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(t){d=!1,p=!0,u=t,e()}),(function(e){d=!1,h=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(c.sent(),b)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\".concat(t,\\\"ms\\\"));return[2]}}))}))},t.getInstance=function(){if(p&&u)return u;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!p||d||h||(d=!0,null===(e=u.PThread)||void 0===e||e.terminateAllThreads(),u=void 0,d=!1,p=!1,h=!0)}},1497:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;var a=n(263);t.allocWasmString=function(e,t){var n=(0,a.getInstance)(),r=n.lengthBytesUTF8(e)+1,o=n._malloc(r);return n.stringToUTF8(e,o,r),t.push(o),o},t.iterateExtraOptions=function(e,n,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=r(e,2),c=i[0],u=i[1],s=n?n+c:c;if(\\\"object\\\"==typeof u)(0,t.iterateExtraOptions)(u,s+\\\".\\\",a,o);else if(\\\"string\\\"==typeof u||\\\"number\\\"==typeof u)o(s,u.toString());else{if(\\\"boolean\\\"!=typeof u)throw new Error(\\\"Can't handle extra config type: \\\".concat(typeof u));o(s,u?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=function(e){var t=(0,a.getInstance)(),n=t.stackSave();try{var r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);var o=t.HEAP32[r/4],i=t.HEAPU32[r/4+1],c=i?t.UTF8ToString(i):\\\"\\\";throw new Error(\\\"\\\".concat(e,\\\" ERROR_CODE: \\\").concat(o,\\\", ERROR_MESSAGE: \\\").concat(c))}finally{t.stackRestore(n)}}},3474:function(e,t,n){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return P.buffer!=D.buffer&&W(),D}function r(){return P.buffer!=D.buffer&&W(),z}function a(){return P.buffer!=D.buffer&&W(),B}function o(){return P.buffer!=D.buffer&&W(),G}function i(){return P.buffer!=D.buffer&&W(),j}var c,u,s=e;s.ready=new Promise(((e,t)=>{c=e,u=t}));var l,f,p,d=Object.assign({},s),h=\\\"./this.program\\\",g=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,v=\\\"function\\\"==typeof importScripts,y=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=s.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function S(e){return s.locateFile?s.locateFile(e,w):w+e}if(y){var _=n(1384),x=n(908);let t;w=v?x.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",l=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),_.readFileSync(e,t?void 0:\\\"utf8\\\")),p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),_.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),g=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=n(9925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(m||v)&&(v?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",y||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},v&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));y&&\\\"undefined\\\"==typeof performance&&(global.performance=n(6953).performance);var O=console.log.bind(console),T=console.error.bind(console);y&&(O=(...e)=>_.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),T=(...e)=>_.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var A,C=s.print||O,I=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(g=s.quit),s.wasmBinary&&(A=s.wasmBinary);var E=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&te(\\\"no native wasm support detected\\\");var P,M,R,k,D,z,B,G,j,U=!1;function W(){var e=P.buffer;s.HEAP8=D=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=B=new Int32Array(e),s.HEAPU8=z=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=G=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=j=new Float64Array(e)}var L=s.INITIAL_MEMORY||16777216;if(5242880<=L||te(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+L+\\\"! (STACK_SIZE=5242880)\\\"),b)P=s.wasmMemory;else if(s.wasmMemory)P=s.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:L/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw I(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),y&&I(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");W(),L=P.buffer.byteLength;var F,V=[],N=[],H=[],K=0;function q(){return E||0<K}var Y,X,Q=0,J=null,Z=null;function $(){Q++,s.monitorRunDependencies&&s.monitorRunDependencies(Q)}function ee(){if(Q--,s.monitorRunDependencies&&s.monitorRunDependencies(Q),0==Q&&(null!==J&&(clearInterval(J),J=null),Z)){var e=Z;Z=null,e()}}function te(e){throw s.onAbort&&s.onAbort(e),I(e=\\\"Aborted(\\\"+e+\\\")\\\"),U=!0,k=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),u(e),e}function ne(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function re(e){if(e==Y&&A)return new Uint8Array(A);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function ae(e,t,n){return function(e){if(!A&&(m||v)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>re(e)));if(f)return new Promise(((t,n)=>{f(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{I(\\\"failed to asynchronously prepare wasm: \\\"+e),te(e)}))}function oe(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}function ie(e){e.terminate(),e.onmessage=()=>{}}function ce(e){(e=he.Fa[e])||te(),he.fb(e)}function ue(e){var t=he.Za();if(!t)return 6;he.Ia.push(t),he.Fa[e.Ha]=t,t.Ha=e.Ha;var n={cmd:\\\"run\\\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return y&&t.unref(),t.postMessage(n,e.mb),0}ne(Y=\\\"ort-wasm-threaded.wasm\\\")||(Y=S(Y));var se=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,le=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},fe=(e,t)=>(e>>>=0)?le(r(),e,t):\\\"\\\";function pe(e){if(b)return qe(1,1,e);k=e,q()||(he.hb(),s.onExit&&s.onExit(e),U=!0),g(e,new oe(e))}var de=e=>{if(k=e,b)throw me(e),\\\"unwind\\\";pe(e)},he={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){b?he.ab():he.$a()},$a:function(){V.unshift((()=>{$(),he.bb((()=>ee()))}))},ab:function(){he.receiveObjectTransfer=he.eb,he.threadInitTLS=he.Sa,he.setExitStatus=he.Ra,E=!1},Ra:function(e){k=e},rb:[\\\"$terminateWorker\\\"],hb:function(){for(var e of he.Ia)ie(e);for(e of he.La)ie(e);he.La=[],he.Ia=[],he.Fa=[]},fb:function(e){var t=e.Ha;delete he.Fa[t],he.La.push(e),he.Ia.splice(he.Ia.indexOf(e),1),e.Ha=0,vt(t)},eb:function(){},Sa:function(){he.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=pt()){var a=he.Fa[n.qb];a?a.postMessage(n,n.transferList):I('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===r?Ue():\\\"spawnThread\\\"===r?ue(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=he.Fa[n],delete he.Fa[n],ie(r),vt(n),he.Ia.splice(he.Ia.indexOf(r),1),r.Ha=0):\\\"cancelThread\\\"===r?he.Fa[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t(e)):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"callHandler\\\"===r?s[n.handler](...n.args):r&&I(\\\"worker sent an unknown command \\\"+r)},e.onerror=e=>{throw I(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},y&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var n,r=[];for(n of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])s.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:\\\"load\\\",handlers:r,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:R})})),bb:function(e){e()},Xa:function(){var e=S(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),he.La.push(e)},Za:function(){return 0==he.La.length&&(he.Xa(),he.cb(he.La[0])),he.La.pop()}};s.PThread=he;var ge=e=>{for(;0<e.length;)e.shift()(s)};function me(e){if(b)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=pt(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],St(t,t-e),xt(t)};var ve=[];function ye(e){this.Oa=e-24,this.Wa=function(e){o()[this.Oa+4>>2>>>0]=e},this.Va=function(e){o()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){o()[this.Oa+16>>2>>>0]=0}}function be(e,t,n,r){return b?qe(3,1,e,t,n,r):we(e,t,n,r)}function we(e,t,n,r){if(e>>>=0,t>>>=0,n>>>=0,r>>>=0,\\\"undefined\\\"==typeof SharedArrayBuffer)return I(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return b&&0===a.length?be(e,t,n,r):(e={gb:n,Ha:e,Ya:r,mb:a},b?(e.ob=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function Se(e,t,n){return b?qe(4,1,e,t,n):0}function _e(e,t){if(b)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var n=ve[e];n||(e>=ve.length&&(ve.length=e+1),ve[e]=n=F.get(e)),e=n(t),q()?he.Ra(e):yt(e)};var xe=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Oe=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a},Te=(e,t,n)=>Oe(e,r(),t,n);function Ae(e,t){if(b)return qe(6,1,e,t)}function Ce(e,t,n){if(b)return qe(7,1,e,t,n)}function Ie(e,t,n){return b?qe(8,1,e,t,n):0}function Ee(e,t){if(b)return qe(9,1,e,t)}function Pe(e,t,n){if(b)return qe(10,1,e,t,n)}function Me(e,t,n,r){if(b)return qe(11,1,e,t,n,r)}function Re(e,t,n,r){if(b)return qe(12,1,e,t,n,r)}function ke(e,t,n,r){if(b)return qe(13,1,e,t,n,r)}function De(e){if(b)return qe(14,1,e)}function ze(e,t){if(b)return qe(15,1,e,t)}function Be(e,t,n){if(b)return qe(16,1,e,t,n)}var Ge=e=>{if(!U)try{if(e(),!q())try{b?yt(k):de(k)}catch(e){e instanceof oe||\\\"unwind\\\"==e||g(1,e)}}catch(e){e instanceof oe||\\\"unwind\\\"==e||g(1,e)}};function je(e){e>>>=0,\\\"function\\\"==typeof Atomics.nb&&(Atomics.nb(a(),e>>2,e).value.then(Ue),e+=128,Atomics.store(a(),e>>2,1))}function Ue(){var e=pt();e&&(je(e),Ge((()=>bt())))}s.__emscripten_thread_mailbox_await=je,s.checkMailbox=Ue;var We=e=>0==e%4&&(0!=e%100||0==e%400),Le=[0,31,60,91,121,152,182,213,244,274,305,335],Fe=[0,31,59,90,120,151,181,212,243,273,304,334];function Ve(e,t,n,r,a,o,i,c){return b?qe(17,1,e,t,n,r,a,o,i,c):-52}function Ne(e,t,n,r,a,o,i){if(b)return qe(18,1,e,t,n,r,a,o,i)}var He=e=>{var t=xe(e)+1,n=dt(t);return n&&Te(e,n,t),n},Ke=e=>{var t=_t();return e=e(),xt(t),e};function qe(e,t){var n=arguments.length-2,r=arguments;return Ke((()=>{for(var a=Ot(8*n),o=a>>3,c=0;c<n;c++){var u=r[2+c];i()[o+c>>>0]=u}return mt(e,n,a,t)}))}var Ye,Xe=[],Qe={},Je=()=>{if(!Ye){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:h||\\\"./this.program\\\"};for(e in Qe)void 0===Qe[e]?delete t[e]:t[e]=Qe[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Ye=n}return Ye};function Ze(e,n){if(b)return qe(19,1,e,n);e>>>=0,n>>>=0;var r=0;return Je().forEach((function(a,i){var c=n+r;for(i=o()[e+4*i>>2>>>0]=c,c=0;c<a.length;++c)t()[i++>>0>>>0]=a.charCodeAt(c);t()[i>>0>>>0]=0,r+=a.length+1})),0}function $e(e,t){if(b)return qe(20,1,e,t);e>>>=0,t>>>=0;var n=Je();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function et(e){return b?qe(21,1,e):52}function tt(e,t,n,r){return b?qe(22,1,e,t,n,r):52}function nt(e,t,n,r,a){return b?qe(23,1,e,t,n,r,a):70}var rt=[null,[],[]];function at(e,t,n,a){if(b)return qe(24,1,e,t,n,a);t>>>=0,n>>>=0,a>>>=0;for(var i=0,c=0;c<n;c++){var u=o()[t>>2>>>0],s=o()[t+4>>2>>>0];t+=8;for(var l=0;l<s;l++){var f=r()[u+l>>>0],p=rt[e];0===f||10===f?((1===e?C:I)(le(p,0)),p.length=0):p.push(f)}i+=s}return o()[a>>2>>>0]=i,0}var ot=e=>(ot=(()=>{if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(y)try{var e=n(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}te(\\\"initRandomDevice\\\")})())(e),it=[31,29,31,30,31,30,31,31,30,31,30,31],ct=[31,28,31,30,31,30,31,31,30,31,30,31],ut=(e,n)=>{t().set(e,n>>>0)};function st(e,t,n,r){function o(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function i(e,t){return o(e,t,\\\"0\\\")}function c(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(We(e.getFullYear())?it:ct)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=c(t,e)?0>=c(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0,r>>>=0;var l=a()[r+40>>2>>>0];for(var f in r={kb:a()[r>>2>>>0],jb:a()[r+4>>2>>>0],Ma:a()[r+8>>2>>>0],Qa:a()[r+12>>2>>>0],Na:a()[r+16>>2>>>0],Ka:a()[r+20>>2>>>0],Ga:a()[r+24>>2>>>0],Ja:a()[r+28>>2>>>0],sb:a()[r+32>>2>>>0],ib:a()[r+36>>2>>>0],lb:l?fe(l):\\\"\\\"},n=fe(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(f,\\\"g\\\"),l[f]);var p=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in l={\\\"%a\\\":e=>p[e.Ga].substring(0,3),\\\"%A\\\":e=>p[e.Ga],\\\"%b\\\":e=>d[e.Na].substring(0,3),\\\"%B\\\":e=>d[e.Na],\\\"%C\\\":e=>i((e.Ka+1900)/100|0,2),\\\"%d\\\":e=>i(e.Qa,2),\\\"%e\\\":e=>o(e.Qa,2,\\\" \\\"),\\\"%g\\\":e=>s(e).toString().substring(2),\\\"%G\\\":e=>s(e),\\\"%H\\\":e=>i(e.Ma,2),\\\"%I\\\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.Na-1;t+=(We(e.Ka+1900)?it:ct)[n++]);return i(e.Qa+t,3)},\\\"%m\\\":e=>i(e.Na+1,2),\\\"%M\\\":e=>i(e.jb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ma&&12>e.Ma?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>i(e.kb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ga||7,\\\"%U\\\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(n=(e.Ga+371-e.Ja)%7)||3==n&&We(e.Ka)||(t=1));else{t=52;var n=(e.Ga+7-e.Ja-1)%7;(4==n||5==n&&We(e.Ka%400-1))&&t++}return i(t,2)},\\\"%w\\\":e=>e.Ga,\\\"%W\\\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\\\"%y\\\":e=>(e.Ka+1900).toString().substring(2),\\\"%Y\\\":e=>e.Ka+1900,\\\"%z\\\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.lb,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(f)&&(n=n.replace(new RegExp(f,\\\"g\\\"),l[f](r)));return f=function(e){var t=Array(xe(e)+1);return Oe(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>t?0:(ut(f,e),f.length-1)}he.Pa();var lt=[null,pe,me,be,Se,_e,Ae,Ce,Ie,Ee,Pe,Me,Re,ke,De,ze,Be,Ve,Ne,Ze,$e,et,tt,nt,at],ft={b:function(e,t,n){throw new ye(e>>>=0).Pa(t>>>0,n>>>0),e},N:function(e){ht(e>>>0,!v,1,!m,131072,!1),he.Sa()},k:function(e){e>>>=0,b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},I:we,h:Se,T:_e,E:Ae,G:Ce,U:Ie,R:Ee,J:Pe,Q:Me,o:Re,F:ke,C:De,S:ze,D:Be,q:()=>!0,A:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Ue())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=he.Fa[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},L:function(){return-1},M:je,p:function(e){y&&he.Fa[e>>>0].ref()},t:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getUTCSeconds(),a()[n+4>>2>>>0]=e.getUTCMinutes(),a()[n+8>>2>>>0]=e.getUTCHours(),a()[n+12>>2>>>0]=e.getUTCDate(),a()[n+16>>2>>>0]=e.getUTCMonth(),a()[n+20>>2>>>0]=e.getUTCFullYear()-1900,a()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[n+28>>2>>>0]=e},u:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getSeconds(),a()[n+4>>2>>>0]=e.getMinutes(),a()[n+8>>2>>>0]=e.getHours(),a()[n+12>>2>>>0]=e.getDate(),a()[n+16>>2>>>0]=e.getMonth(),a()[n+20>>2>>>0]=e.getFullYear()-1900,a()[n+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Le:Fe)[e.getMonth()]+e.getDate()-1|0,a()[n+28>>2>>>0]=t,a()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t)),a()[n+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),c=Math.min(i,o);return 0>n?a()[e+32>>2>>>0]=Number(o!=i&&c==r):0<n!=(c==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?c:o)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(We(t.getFullYear())?Le:Fe)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,wt((X=e,1<=+Math.abs(X)?0<X?+Math.floor(X/4294967296)>>>0:~~+Math.ceil((X-+(~~X>>>0))/4294967296)>>>0:0)),e>>>0},r:Ve,s:Ne,z:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}e>>>=0,t>>>=0,n>>>=0;var i=(new Date).getFullYear(),c=new Date(i,0,1),u=new Date(i,6,1);i=c.getTimezoneOffset();var s=u.getTimezoneOffset(),l=Math.max(i,s);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=s),e=r(c),t=r(u),e=He(e),t=He(t),s<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)},c:()=>{te(\\\"\\\")},l:function(){},i:function(){return Date.now()},V:()=>{throw K+=1,\\\"unwind\\\"},B:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return y?n(3993).cpus().length:navigator.hardwareConcurrency},K:function(e,t,n,r){for(he.pb=t>>>0,Xe.length=n,t=r>>>0>>3,r=0;r<n;r++)Xe[r]=i()[t+r>>>0];return lt[e].apply(null,Xe)},y:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-P.buffer.byteLength+65535>>>16;try{P.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Ze,P:$e,j:de,g:et,n:tt,w:nt,m:at,x:function(e,t){return e>>>=0,t>>>=0,ot(r().subarray(e>>>0,e+t>>>0)),0},a:P||s.wasmMemory,H:st,d:function(e,t,n,r){return st(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e,t){return e=e.exports,M=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),he.Ta.push(M.sa),F=M.ta,N.unshift(M.W),R=t,ee(),e}var t={a:ft};if($(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){I(\\\"Module.instantiateWasm callback failed with error: \\\"+e),u(e)}(function(e,t){var n=Y;return A||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ne(n)||n.startsWith(\\\"file://\\\")||y||\\\"function\\\"!=typeof fetch?ae(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return I(\\\"wasm streaming compile failed: \\\"+r),I(\\\"falling back to ArrayBuffer instantiation\\\"),ae(n,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=M.X)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=M.Y)(e,t),s._OrtCreateSessionOptions=(e,t,n,r,a,o,i,c,u,l)=>(s._OrtCreateSessionOptions=M.Z)(e,t,n,r,a,o,i,c,u,l),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=M._)(e,t),s._OrtAddSessionConfigEntry=(e,t,n)=>(s._OrtAddSessionConfigEntry=M.$)(e,t,n),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=M.aa)(e),s._OrtCreateSession=(e,t,n)=>(s._OrtCreateSession=M.ba)(e,t,n),s._OrtReleaseSession=e=>(s._OrtReleaseSession=M.ca)(e),s._OrtGetInputOutputCount=(e,t,n)=>(s._OrtGetInputOutputCount=M.da)(e,t,n),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=M.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=M.fa)(e,t),s._OrtFree=e=>(s._OrtFree=M.ga)(e),s._OrtCreateTensor=(e,t,n,r,a)=>(s._OrtCreateTensor=M.ha)(e,t,n,r,a),s._OrtGetTensorData=(e,t,n,r,a)=>(s._OrtGetTensorData=M.ia)(e,t,n,r,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=M.ja)(e),s._OrtCreateRunOptions=(e,t,n,r)=>(s._OrtCreateRunOptions=M.ka)(e,t,n,r),s._OrtAddRunConfigEntry=(e,t,n)=>(s._OrtAddRunConfigEntry=M.la)(e,t,n),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=M.ma)(e),s._OrtRun=(e,t,n,r,a,o,i,c)=>(s._OrtRun=M.na)(e,t,n,r,a,o,i,c),s._OrtEndProfiling=e=>(s._OrtEndProfiling=M.oa)(e);var pt=s._pthread_self=()=>(pt=s._pthread_self=M.pa)(),dt=s._malloc=e=>(dt=s._malloc=M.qa)(e);s._free=e=>(s._free=M.ra)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=M.sa)();var ht=s.__emscripten_thread_init=(e,t,n,r,a,o)=>(ht=s.__emscripten_thread_init=M.ua)(e,t,n,r,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=M.va)();var gt,mt=(e,t,n,r)=>(mt=M.wa)(e,t,n,r),vt=e=>(vt=M.xa)(e),yt=s.__emscripten_thread_exit=e=>(yt=s.__emscripten_thread_exit=M.ya)(e),bt=s.__emscripten_check_mailbox=()=>(bt=s.__emscripten_check_mailbox=M.za)(),wt=e=>(wt=M.Aa)(e),St=(e,t)=>(St=M.Ba)(e,t),_t=()=>(_t=M.Ca)(),xt=e=>(xt=M.Da)(e),Ot=e=>(Ot=M.Ea)(e);function Tt(){function e(){if(!gt&&(gt=!0,s.calledRun=!0,!U)&&(b||ge(N),c(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!b)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();H.unshift(e)}ge(H)}}if(!(0<Q))if(b)c(s),b||ge(N),startWorker(s);else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)V.unshift(s.preRun.shift());ge(V),0<Q||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=P,s.stackAlloc=Ot,s.stackSave=_t,s.stackRestore=xt,s.UTF8ToString=fe,s.stringToUTF8=Te,s.lengthBytesUTF8=xe,s.ExitStatus=oe,s.PThread=he,Z=function e(){gt||Tt(),gt||(Z=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Tt(),e.ready});e.exports=r},932:function(e,t,n){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,r,a=e;a.ready=new Promise(((e,n)=>{t=e,r=n}));var o,i,c,u=Object.assign({},a),s=\\\"./this.program\\\",l=(e,t)=>{throw t},f=\\\"object\\\"==typeof window,p=\\\"function\\\"==typeof importScripts,d=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";if(d){var g=n(1384),m=n(908);h=p?m.dirname(h)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),c=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(s=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),l=(e,t)=>{throw process.exitCode=e,t},a.inspect=()=>\\\"[Emscripten Module object]\\\"}else(f||p)&&(p?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},p&&(c=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var v,y=a.print||console.log.bind(console),b=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(s=a.thisProgram),a.quit&&(l=a.quit),a.wasmBinary&&(v=a.wasmBinary);var w=a.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&j(\\\"no native wasm support detected\\\");var S,_,x,O,T,A,C=!1;function I(){var e=S.buffer;a.HEAP8=x=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=T=new Int32Array(e),a.HEAPU8=O=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=A=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}var E=[],P=[],M=[];function R(){var e=a.preRun.shift();E.unshift(e)}var k,D,z=0,B=null,G=null;function j(e){throw a.onAbort&&a.onAbort(e),b(e=\\\"Aborted(\\\"+e+\\\")\\\"),C=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),r(e),e}function U(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!U(k=\\\"ort-wasm.wasm\\\")){var W=k;k=a.locateFile?a.locateFile(W,h):h+W}function L(e){if(e==k&&v)return new Uint8Array(v);if(c)return c(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function F(e,t,n){return function(e){if(!v&&(f||p)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>L(e)));if(i)return new Promise(((t,n)=>{i(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>L(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{b(\\\"failed to asynchronously prepare wasm: \\\"+e),j(e)}))}function V(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}var N=e=>{for(;0<e.length;)e.shift()(a)};function H(e){this.qa=e-24,this.va=function(e){A[this.qa+4>>2>>>0]=e},this.ua=function(e){A[this.qa+8>>2>>>0]=e},this.sa=function(e,t){this.ta(),this.va(e),this.ua(t)},this.ta=function(){A[this.qa+16>>2>>>0]=0}}var K,q=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,Y=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&q)return q.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},X=(e,t)=>(e>>>=0)?Y(O,e,t):\\\"\\\",Q=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},J=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a},Z=e=>0==e%4&&(0!=e%100||0==e%400),$=[0,31,60,91,121,152,182,213,244,274,305,335],ee=[0,31,59,90,120,151,181,212,243,273,304,334],te=e=>{var t=Q(e)+1,n=le(t);return n&&J(e,O,n,t),n},ne={},re=()=>{if(!K){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:s||\\\"./this.program\\\"};for(e in ne)void 0===ne[e]?delete t[e]:t[e]=ne[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);K=n}return K},ae=[null,[],[]],oe=e=>(oe=(()=>{if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues)return e=>crypto.getRandomValues(e);if(d)try{var e=n(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}j(\\\"initRandomDevice\\\")})())(e),ie=[31,29,31,30,31,30,31,31,30,31,30,31],ce=[31,28,31,30,31,30,31,31,30,31,30,31];function ue(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.ma;for(e=new Date(new Date(e.na+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Z(e.getFullYear())?ie:ce)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0;var s=T[40+(r>>>=0)>>2>>>0];for(var l in r={ya:T[r>>2>>>0],xa:T[r+4>>2>>>0],oa:T[r+8>>2>>>0],ra:T[r+12>>2>>>0],pa:T[r+16>>2>>>0],na:T[r+20>>2>>>0],ha:T[r+24>>2>>>0],ma:T[r+28>>2>>>0],Aa:T[r+32>>2>>>0],wa:T[r+36>>2>>>0],za:s?X(s):\\\"\\\"},n=X(n),s={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),s[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in s={\\\"%a\\\":e=>f[e.ha].substring(0,3),\\\"%A\\\":e=>f[e.ha],\\\"%b\\\":e=>p[e.pa].substring(0,3),\\\"%B\\\":e=>p[e.pa],\\\"%C\\\":e=>o((e.na+1900)/100|0,2),\\\"%d\\\":e=>o(e.ra,2),\\\"%e\\\":e=>a(e.ra,2,\\\" \\\"),\\\"%g\\\":e=>u(e).toString().substring(2),\\\"%G\\\":e=>u(e),\\\"%H\\\":e=>o(e.oa,2),\\\"%I\\\":e=>(0==(e=e.oa)?e=12:12<e&&(e-=12),o(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.pa-1;t+=(Z(e.na+1900)?ie:ce)[n++]);return o(e.ra+t,3)},\\\"%m\\\":e=>o(e.pa+1,2),\\\"%M\\\":e=>o(e.xa,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.oa&&12>e.oa?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>o(e.ya,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.ha||7,\\\"%U\\\":e=>o(Math.floor((e.ma+7-e.ha)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.ma+7-(e.ha+6)%7)/7);if(2>=(e.ha+371-e.ma-2)%7&&t++,t)53==t&&(4==(n=(e.ha+371-e.ma)%7)||3==n&&Z(e.na)||(t=1));else{t=52;var n=(e.ha+7-e.ma-1)%7;(4==n||5==n&&Z(e.na%400-1))&&t++}return o(t,2)},\\\"%w\\\":e=>e.ha,\\\"%W\\\":e=>o(Math.floor((e.ma+7-(e.ha+6)%7)/7),2),\\\"%y\\\":e=>(e.na+1900).toString().substring(2),\\\"%Y\\\":e=>e.na+1900,\\\"%z\\\":e=>{var t=0<=(e=e.wa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.za,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),s)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),s[l](r)));return l=function(e){var t=Array(Q(e)+1);return J(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(x.set(l,e>>>0),l.length-1)}var se={a:function(e,t,n){throw new H(e>>>=0).sa(t>>>0,n>>>0),e},e:function(){return 0},I:function(){},y:function(){},A:function(){},K:function(){return 0},G:function(){},B:function(){},F:function(){},g:function(){},z:function(){},w:function(){},H:function(){},x:function(){},k:()=>!0,n:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),T[n>>2>>>0]=e.getUTCSeconds(),T[n+4>>2>>>0]=e.getUTCMinutes(),T[n+8>>2>>>0]=e.getUTCHours(),T[n+12>>2>>>0]=e.getUTCDate(),T[n+16>>2>>>0]=e.getUTCMonth(),T[n+20>>2>>>0]=e.getUTCFullYear()-1900,T[n+24>>2>>>0]=e.getUTCDay(),T[n+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},o:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),T[n>>2>>>0]=e.getSeconds(),T[n+4>>2>>>0]=e.getMinutes(),T[n+8>>2>>>0]=e.getHours(),T[n+12>>2>>>0]=e.getDate(),T[n+16>>2>>>0]=e.getMonth(),T[n+20>>2>>>0]=e.getFullYear()-1900,T[n+24>>2>>>0]=e.getDay(),T[n+28>>2>>>0]=(Z(e.getFullYear())?$:ee)[e.getMonth()]+e.getDate()-1|0,T[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();T[n+32>>2>>>0]=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t))},p:function(e){e>>>=0;var t=new Date(T[e+20>>2>>>0]+1900,T[e+16>>2>>>0],T[e+12>>2>>>0],T[e+8>>2>>>0],T[e+4>>2>>>0],T[e>>2>>>0],0),n=T[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>n?T[e+32>>2>>>0]=Number(a!=o&&i==r):0<n!=(i==r)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<n?i:a)-r))),T[e+24>>2>>>0]=t.getDay(),T[e+28>>2>>>0]=(Z(t.getFullYear())?$:ee)[t.getMonth()]+t.getDate()-1|0,T[e>>2>>>0]=t.getSeconds(),T[e+4>>2>>>0]=t.getMinutes(),T[e+8>>2>>>0]=t.getHours(),T[e+12>>2>>>0]=t.getDate(),T[e+16>>2>>>0]=t.getMonth(),T[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,pe((D=e,1<=+Math.abs(D)?0<D?+Math.floor(D/4294967296)>>>0:~~+Math.ceil((D-+(~~D>>>0))/4294967296)>>>0:0)),e>>>0},l:function(){return-52},m:function(){},u:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}n>>>=0;var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var c=i.getTimezoneOffset();A[e>>>0>>2>>>0]=60*Math.max(a,c),T[t>>>0>>2>>>0]=Number(a!=c),e=r(o),t=r(i),e=te(e),t=te(t),c<a?(A[n>>2>>>0]=e,A[n+4>>2>>>0]=t):(A[n>>2>>>0]=t,A[n+4>>2>>>0]=e)},d:()=>{j(\\\"\\\")},h:function(){return Date.now()},v:function(){return 4294901760},b:()=>performance.now(),J:function(e,t,n){return t>>>=0,O.copyWithin(e>>>0>>>0,t>>>0,t+(n>>>0)>>>0)},t:function(e){e>>>=0;var t=O.length;if(4294901760<e)return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r);e:{a=a.min.call(a,4294901760,r+(65536-r%65536)%65536)-S.buffer.byteLength+65535>>>16;try{S.grow(a),I();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){e>>>=0,t>>>=0;var n=0;return re().forEach((function(r,a){var o=t+n;for(a=A[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)x[a++>>0>>>0]=r.charCodeAt(o);x[a>>0>>>0]=0,n+=r.length+1})),0},E:function(e,t){e>>>=0,t>>>=0;var n=re();A[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),A[t>>2>>>0]=r,0},s:e=>{w||(a.onExit&&a.onExit(e),C=!0),l(e,new V(e))},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(e,t,n,r){t>>>=0,n>>>=0,r>>>=0;for(var a=0,o=0;o<n;o++){var i=A[t>>2>>>0],c=A[t+4>>2>>>0];t+=8;for(var u=0;u<c;u++){var s=O[i+u>>>0],l=ae[e];0===s||10===s?((1===e?y:b)(Y(l,0)),l.length=0):l.push(s)}a+=c}return A[r>>2>>>0]=a,0},r:function(e,t){return e>>>=0,oe(O.subarray(e>>>0,e+(t>>>0)>>>0)),0},C:ue,c:function(e,t,n,r){return ue(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e){if(e=e.exports,_=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),S=_.L,I(),P.unshift(_.M),z--,a.monitorRunDependencies&&a.monitorRunDependencies(z),0==z&&(null!==B&&(clearInterval(B),B=null),G)){var t=G;G=null,t()}return e}var t={a:se};if(z++,a.monitorRunDependencies&&a.monitorRunDependencies(z),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){b(\\\"Module.instantiateWasm callback failed with error: \\\"+e),r(e)}(function(e,t){var n=k;return v||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||U(n)||n.startsWith(\\\"file://\\\")||d||\\\"function\\\"!=typeof fetch?F(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return b(\\\"wasm streaming compile failed: \\\"+r),b(\\\"falling back to ArrayBuffer instantiation\\\"),F(n,e,t)}))))})(t,(function(t){e(t.instance)})).catch(r)}(),a._OrtInit=(e,t)=>(a._OrtInit=_.N)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=_.O)(e,t),a._OrtCreateSessionOptions=(e,t,n,r,o,i,c,u,s,l)=>(a._OrtCreateSessionOptions=_.P)(e,t,n,r,o,i,c,u,s,l),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=_.Q)(e,t),a._OrtAddSessionConfigEntry=(e,t,n)=>(a._OrtAddSessionConfigEntry=_.R)(e,t,n),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=_.S)(e),a._OrtCreateSession=(e,t,n)=>(a._OrtCreateSession=_.T)(e,t,n),a._OrtReleaseSession=e=>(a._OrtReleaseSession=_.U)(e),a._OrtGetInputOutputCount=(e,t,n)=>(a._OrtGetInputOutputCount=_.V)(e,t,n),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=_.W)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=_.X)(e,t),a._OrtFree=e=>(a._OrtFree=_.Y)(e),a._OrtCreateTensor=(e,t,n,r,o)=>(a._OrtCreateTensor=_.Z)(e,t,n,r,o),a._OrtGetTensorData=(e,t,n,r,o)=>(a._OrtGetTensorData=_._)(e,t,n,r,o),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=_.$)(e),a._OrtCreateRunOptions=(e,t,n,r)=>(a._OrtCreateRunOptions=_.aa)(e,t,n,r),a._OrtAddRunConfigEntry=(e,t,n)=>(a._OrtAddRunConfigEntry=_.ba)(e,t,n),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=_.ca)(e),a._OrtRun=(e,t,n,r,o,i,c,u)=>(a._OrtRun=_.da)(e,t,n,r,o,i,c,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=_.ea)(e);var le=a._malloc=e=>(le=a._malloc=_.fa)(e);a._free=e=>(a._free=_.ga)(e);var fe,pe=e=>(pe=_.ia)(e),de=()=>(de=_.ja)(),he=e=>(he=_.ka)(e),ge=e=>(ge=_.la)(e);function me(){function e(){if(!fe&&(fe=!0,a.calledRun=!0,!C)){if(N(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for(\\\"function\\\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();M.unshift(e)}N(M)}}if(!(0<z)){if(a.preRun)for(\\\"function\\\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)R();N(E),0<z||(a.setStatus?(a.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){a.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(a.stackAlloc=ge,a.stackSave=de,a.stackRestore=he,a.UTF8ToString=X,a.stringToUTF8=(e,t,n)=>J(e,O,t,n),a.lengthBytesUTF8=Q,G=function e(){fe||me(),fe||(G=e)},a.preInit)for(\\\"function\\\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return me(),e.ready});e.exports=r},4154:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\\\"callHandler\\\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},760:function(){},1384:function(){},3993:function(){},908:function(){},6953:function(){},9925:function(){},6449:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}!function(){\\\"use strict\\\";var e=n(1259),t=n(263);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(n.data.in).then((function(){return postMessage({type:\\\"init-ort\\\"})}),(function(e){return postMessage({type:\\\"init-ort\\\",err:e})})),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{var r=n.data.in.model,a=(0,e.createSessionAllocate)(r);postMessage({type:\\\"create_allocate\\\",out:a})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{var o=n.data.in,i=(a=o.modeldata,o.options),c=(0,e.createSessionFinalize)(a,i);postMessage({type:\\\"create_finalize\\\",out:c})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{var u=n.data.in;r=u.model,i=u.options,c=(0,e.createSession)(r,i),postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var s=n.data.in;(0,e.releaseSession)(s),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var l=n.data.in,f=l.sessionId,p=l.inputIndices,d=l.inputs,h=l.outputIndices;i=l.options,(0,e.run)(f,p,d,h,i).then((function(t){postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(function(e){postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{s=n.data.in,(0,e.endProfiling)(s),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\r\n\"use strict\";\r\n\r\nvar $protobuf = require(\"protobufjs/minimal\");\r\n\r\n// Common aliases\r\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\r\n\r\n// Exported root namespace\r\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\r\n\r\n$root.onnx = (function() {\r\n\r\n    /**\r\n     * Namespace onnx.\r\n     * @exports onnx\r\n     * @namespace\r\n     */\r\n    var onnx = {};\r\n\r\n    /**\r\n     * Version enum.\r\n     * @name onnx.Version\r\n     * @enum {number}\r\n     * @property {number} _START_VERSION=0 _START_VERSION value\r\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\r\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\r\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\r\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\r\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\r\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\r\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\r\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\r\n     * @property {number} IR_VERSION=9 IR_VERSION value\r\n     */\r\n    onnx.Version = (function() {\r\n        var valuesById = {}, values = Object.create(valuesById);\r\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\r\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\r\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\r\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\r\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\r\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\r\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\r\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\r\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\r\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\r\n        return values;\r\n    })();\r\n\r\n    onnx.AttributeProto = (function() {\r\n\r\n        /**\r\n         * Properties of an AttributeProto.\r\n         * @memberof onnx\r\n         * @interface IAttributeProto\r\n         * @property {string|null} [name] AttributeProto name\r\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\r\n         * @property {string|null} [docString] AttributeProto docString\r\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\r\n         * @property {number|null} [f] AttributeProto f\r\n         * @property {number|Long|null} [i] AttributeProto i\r\n         * @property {Uint8Array|null} [s] AttributeProto s\r\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\r\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\r\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\r\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\r\n         * @property {Array.<number>|null} [floats] AttributeProto floats\r\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\r\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\r\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\r\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\r\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\r\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\r\n         */\r\n\r\n        /**\r\n         * Constructs a new AttributeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents an AttributeProto.\r\n         * @implements IAttributeProto\r\n         * @constructor\r\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\r\n         */\r\n        function AttributeProto(properties) {\r\n            this.floats = [];\r\n            this.ints = [];\r\n            this.strings = [];\r\n            this.tensors = [];\r\n            this.graphs = [];\r\n            this.sparseTensors = [];\r\n            this.typeProtos = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * AttributeProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * AttributeProto refAttrName.\r\n         * @member {string} refAttrName\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.refAttrName = \"\";\r\n\r\n        /**\r\n         * AttributeProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * AttributeProto type.\r\n         * @member {onnx.AttributeProto.AttributeType} type\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.type = 0;\r\n\r\n        /**\r\n         * AttributeProto f.\r\n         * @member {number} f\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.f = 0;\r\n\r\n        /**\r\n         * AttributeProto i.\r\n         * @member {number|Long} i\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * AttributeProto s.\r\n         * @member {Uint8Array} s\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.s = $util.newBuffer([]);\r\n\r\n        /**\r\n         * AttributeProto t.\r\n         * @member {onnx.ITensorProto|null|undefined} t\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.t = null;\r\n\r\n        /**\r\n         * AttributeProto g.\r\n         * @member {onnx.IGraphProto|null|undefined} g\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.g = null;\r\n\r\n        /**\r\n         * AttributeProto sparseTensor.\r\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.sparseTensor = null;\r\n\r\n        /**\r\n         * AttributeProto tp.\r\n         * @member {onnx.ITypeProto|null|undefined} tp\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.tp = null;\r\n\r\n        /**\r\n         * AttributeProto floats.\r\n         * @member {Array.<number>} floats\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.floats = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto ints.\r\n         * @member {Array.<number|Long>} ints\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.ints = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto strings.\r\n         * @member {Array.<Uint8Array>} strings\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.strings = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto tensors.\r\n         * @member {Array.<onnx.ITensorProto>} tensors\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.tensors = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto graphs.\r\n         * @member {Array.<onnx.IGraphProto>} graphs\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.graphs = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto sparseTensors.\r\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto typeProtos.\r\n         * @member {Array.<onnx.ITypeProto>} typeProtos\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new AttributeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\r\n         * @returns {onnx.AttributeProto} AttributeProto instance\r\n         */\r\n        AttributeProto.create = function create(properties) {\r\n            return new AttributeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        AttributeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\r\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\r\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\r\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\r\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\r\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\r\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\r\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\r\n            if (message.floats != null && message.floats.length) {\r\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\r\n                for (var i = 0; i < message.floats.length; ++i)\r\n                    writer.float(message.floats[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.ints != null && message.ints.length) {\r\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\r\n                for (var i = 0; i < message.ints.length; ++i)\r\n                    writer.int64(message.ints[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.strings != null && message.strings.length)\r\n                for (var i = 0; i < message.strings.length; ++i)\r\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\r\n            if (message.tensors != null && message.tensors.length)\r\n                for (var i = 0; i < message.tensors.length; ++i)\r\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\r\n            if (message.graphs != null && message.graphs.length)\r\n                for (var i = 0; i < message.graphs.length; ++i)\r\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\r\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\r\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.typeProtos != null && message.typeProtos.length)\r\n                for (var i = 0; i < message.typeProtos.length; ++i)\r\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\r\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\r\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\r\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\r\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\r\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\r\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\r\n            if (message.sparseTensors != null && message.sparseTensors.length)\r\n                for (var i = 0; i < message.sparseTensors.length; ++i)\r\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes an AttributeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        AttributeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 21: {\r\n                        message.refAttrName = reader.string();\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 20: {\r\n                        message.type = reader.int32();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.f = reader.float();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.i = reader.int64();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.s = reader.bytes();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 22: {\r\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.floats && message.floats.length))\r\n                            message.floats = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.floats.push(reader.float());\r\n                        } else\r\n                            message.floats.push(reader.float());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        if (!(message.ints && message.ints.length))\r\n                            message.ints = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.ints.push(reader.int64());\r\n                        } else\r\n                            message.ints.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        if (!(message.strings && message.strings.length))\r\n                            message.strings = [];\r\n                        message.strings.push(reader.bytes());\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        if (!(message.tensors && message.tensors.length))\r\n                            message.tensors = [];\r\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.graphs && message.graphs.length))\r\n                            message.graphs = [];\r\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 23: {\r\n                        if (!(message.sparseTensors && message.sparseTensors.length))\r\n                            message.sparseTensors = [];\r\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 15: {\r\n                        if (!(message.typeProtos && message.typeProtos.length))\r\n                            message.typeProtos = [];\r\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies an AttributeProto message.\r\n         * @function verify\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        AttributeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\r\n                if (!$util.isString(message.refAttrName))\r\n                    return \"refAttrName: string expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                switch (message.type) {\r\n                default:\r\n                    return \"type: enum value expected\";\r\n                case 0:\r\n                case 1:\r\n                case 2:\r\n                case 3:\r\n                case 4:\r\n                case 5:\r\n                case 11:\r\n                case 13:\r\n                case 6:\r\n                case 7:\r\n                case 8:\r\n                case 9:\r\n                case 10:\r\n                case 12:\r\n                case 14:\r\n                    break;\r\n                }\r\n            if (message.f != null && message.hasOwnProperty(\"f\"))\r\n                if (typeof message.f !== \"number\")\r\n                    return \"f: number expected\";\r\n            if (message.i != null && message.hasOwnProperty(\"i\"))\r\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\r\n                    return \"i: integer|Long expected\";\r\n            if (message.s != null && message.hasOwnProperty(\"s\"))\r\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\r\n                    return \"s: buffer expected\";\r\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.t);\r\n                if (error)\r\n                    return \"t.\" + error;\r\n            }\r\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.g);\r\n                if (error)\r\n                    return \"g.\" + error;\r\n            }\r\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\r\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\r\n                if (error)\r\n                    return \"sparseTensor.\" + error;\r\n            }\r\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\r\n                var error = $root.onnx.TypeProto.verify(message.tp);\r\n                if (error)\r\n                    return \"tp.\" + error;\r\n            }\r\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\r\n                if (!Array.isArray(message.floats))\r\n                    return \"floats: array expected\";\r\n                for (var i = 0; i < message.floats.length; ++i)\r\n                    if (typeof message.floats[i] !== \"number\")\r\n                        return \"floats: number[] expected\";\r\n            }\r\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\r\n                if (!Array.isArray(message.ints))\r\n                    return \"ints: array expected\";\r\n                for (var i = 0; i < message.ints.length; ++i)\r\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\r\n                        return \"ints: integer|Long[] expected\";\r\n            }\r\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\r\n                if (!Array.isArray(message.strings))\r\n                    return \"strings: array expected\";\r\n                for (var i = 0; i < message.strings.length; ++i)\r\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\r\n                        return \"strings: buffer[] expected\";\r\n            }\r\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\r\n                if (!Array.isArray(message.tensors))\r\n                    return \"tensors: array expected\";\r\n                for (var i = 0; i < message.tensors.length; ++i) {\r\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\r\n                    if (error)\r\n                        return \"tensors.\" + error;\r\n                }\r\n            }\r\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\r\n                if (!Array.isArray(message.graphs))\r\n                    return \"graphs: array expected\";\r\n                for (var i = 0; i < message.graphs.length; ++i) {\r\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\r\n                    if (error)\r\n                        return \"graphs.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\r\n                if (!Array.isArray(message.sparseTensors))\r\n                    return \"sparseTensors: array expected\";\r\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\r\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\r\n                    if (error)\r\n                        return \"sparseTensors.\" + error;\r\n                }\r\n            }\r\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\r\n                if (!Array.isArray(message.typeProtos))\r\n                    return \"typeProtos: array expected\";\r\n                for (var i = 0; i < message.typeProtos.length; ++i) {\r\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\r\n                    if (error)\r\n                        return \"typeProtos.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         */\r\n        AttributeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.AttributeProto)\r\n                return object;\r\n            var message = new $root.onnx.AttributeProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.refAttrName != null)\r\n                message.refAttrName = String(object.refAttrName);\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            switch (object.type) {\r\n            default:\r\n                if (typeof object.type === \"number\") {\r\n                    message.type = object.type;\r\n                    break;\r\n                }\r\n                break;\r\n            case \"UNDEFINED\":\r\n            case 0:\r\n                message.type = 0;\r\n                break;\r\n            case \"FLOAT\":\r\n            case 1:\r\n                message.type = 1;\r\n                break;\r\n            case \"INT\":\r\n            case 2:\r\n                message.type = 2;\r\n                break;\r\n            case \"STRING\":\r\n            case 3:\r\n                message.type = 3;\r\n                break;\r\n            case \"TENSOR\":\r\n            case 4:\r\n                message.type = 4;\r\n                break;\r\n            case \"GRAPH\":\r\n            case 5:\r\n                message.type = 5;\r\n                break;\r\n            case \"SPARSE_TENSOR\":\r\n            case 11:\r\n                message.type = 11;\r\n                break;\r\n            case \"TYPE_PROTO\":\r\n            case 13:\r\n                message.type = 13;\r\n                break;\r\n            case \"FLOATS\":\r\n            case 6:\r\n                message.type = 6;\r\n                break;\r\n            case \"INTS\":\r\n            case 7:\r\n                message.type = 7;\r\n                break;\r\n            case \"STRINGS\":\r\n            case 8:\r\n                message.type = 8;\r\n                break;\r\n            case \"TENSORS\":\r\n            case 9:\r\n                message.type = 9;\r\n                break;\r\n            case \"GRAPHS\":\r\n            case 10:\r\n                message.type = 10;\r\n                break;\r\n            case \"SPARSE_TENSORS\":\r\n            case 12:\r\n                message.type = 12;\r\n                break;\r\n            case \"TYPE_PROTOS\":\r\n            case 14:\r\n                message.type = 14;\r\n                break;\r\n            }\r\n            if (object.f != null)\r\n                message.f = Number(object.f);\r\n            if (object.i != null)\r\n                if ($util.Long)\r\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\r\n                else if (typeof object.i === \"string\")\r\n                    message.i = parseInt(object.i, 10);\r\n                else if (typeof object.i === \"number\")\r\n                    message.i = object.i;\r\n                else if (typeof object.i === \"object\")\r\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\r\n            if (object.s != null)\r\n                if (typeof object.s === \"string\")\r\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\r\n                else if (object.s.length >= 0)\r\n                    message.s = object.s;\r\n            if (object.t != null) {\r\n                if (typeof object.t !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\r\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\r\n            }\r\n            if (object.g != null) {\r\n                if (typeof object.g !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\r\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\r\n            }\r\n            if (object.sparseTensor != null) {\r\n                if (typeof object.sparseTensor !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\r\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\r\n            }\r\n            if (object.tp != null) {\r\n                if (typeof object.tp !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\r\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\r\n            }\r\n            if (object.floats) {\r\n                if (!Array.isArray(object.floats))\r\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\r\n                message.floats = [];\r\n                for (var i = 0; i < object.floats.length; ++i)\r\n                    message.floats[i] = Number(object.floats[i]);\r\n            }\r\n            if (object.ints) {\r\n                if (!Array.isArray(object.ints))\r\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\r\n                message.ints = [];\r\n                for (var i = 0; i < object.ints.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\r\n                    else if (typeof object.ints[i] === \"string\")\r\n                        message.ints[i] = parseInt(object.ints[i], 10);\r\n                    else if (typeof object.ints[i] === \"number\")\r\n                        message.ints[i] = object.ints[i];\r\n                    else if (typeof object.ints[i] === \"object\")\r\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.strings) {\r\n                if (!Array.isArray(object.strings))\r\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\r\n                message.strings = [];\r\n                for (var i = 0; i < object.strings.length; ++i)\r\n                    if (typeof object.strings[i] === \"string\")\r\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\r\n                    else if (object.strings[i].length >= 0)\r\n                        message.strings[i] = object.strings[i];\r\n            }\r\n            if (object.tensors) {\r\n                if (!Array.isArray(object.tensors))\r\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\r\n                message.tensors = [];\r\n                for (var i = 0; i < object.tensors.length; ++i) {\r\n                    if (typeof object.tensors[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\r\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\r\n                }\r\n            }\r\n            if (object.graphs) {\r\n                if (!Array.isArray(object.graphs))\r\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\r\n                message.graphs = [];\r\n                for (var i = 0; i < object.graphs.length; ++i) {\r\n                    if (typeof object.graphs[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\r\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\r\n                }\r\n            }\r\n            if (object.sparseTensors) {\r\n                if (!Array.isArray(object.sparseTensors))\r\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\r\n                message.sparseTensors = [];\r\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\r\n                    if (typeof object.sparseTensors[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\r\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\r\n                }\r\n            }\r\n            if (object.typeProtos) {\r\n                if (!Array.isArray(object.typeProtos))\r\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\r\n                message.typeProtos = [];\r\n                for (var i = 0; i < object.typeProtos.length; ++i) {\r\n                    if (typeof object.typeProtos[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\r\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.AttributeProto} message AttributeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        AttributeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.floats = [];\r\n                object.ints = [];\r\n                object.strings = [];\r\n                object.tensors = [];\r\n                object.graphs = [];\r\n                object.typeProtos = [];\r\n                object.sparseTensors = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.f = 0;\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.i = options.longs === String ? \"0\" : 0;\r\n                if (options.bytes === String)\r\n                    object.s = \"\";\r\n                else {\r\n                    object.s = [];\r\n                    if (options.bytes !== Array)\r\n                        object.s = $util.newBuffer(object.s);\r\n                }\r\n                object.t = null;\r\n                object.g = null;\r\n                object.docString = \"\";\r\n                object.tp = null;\r\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\r\n                object.refAttrName = \"\";\r\n                object.sparseTensor = null;\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.f != null && message.hasOwnProperty(\"f\"))\r\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\r\n            if (message.i != null && message.hasOwnProperty(\"i\"))\r\n                if (typeof message.i === \"number\")\r\n                    object.i = options.longs === String ? String(message.i) : message.i;\r\n                else\r\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\r\n            if (message.s != null && message.hasOwnProperty(\"s\"))\r\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\r\n            if (message.t != null && message.hasOwnProperty(\"t\"))\r\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\r\n            if (message.g != null && message.hasOwnProperty(\"g\"))\r\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\r\n            if (message.floats && message.floats.length) {\r\n                object.floats = [];\r\n                for (var j = 0; j < message.floats.length; ++j)\r\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\r\n            }\r\n            if (message.ints && message.ints.length) {\r\n                object.ints = [];\r\n                for (var j = 0; j < message.ints.length; ++j)\r\n                    if (typeof message.ints[j] === \"number\")\r\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\r\n                    else\r\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\r\n            }\r\n            if (message.strings && message.strings.length) {\r\n                object.strings = [];\r\n                for (var j = 0; j < message.strings.length; ++j)\r\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\r\n            }\r\n            if (message.tensors && message.tensors.length) {\r\n                object.tensors = [];\r\n                for (var j = 0; j < message.tensors.length; ++j)\r\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\r\n            }\r\n            if (message.graphs && message.graphs.length) {\r\n                object.graphs = [];\r\n                for (var j = 0; j < message.graphs.length; ++j)\r\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\r\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\r\n            if (message.typeProtos && message.typeProtos.length) {\r\n                object.typeProtos = [];\r\n                for (var j = 0; j < message.typeProtos.length; ++j)\r\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\r\n            }\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\r\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\r\n                object.refAttrName = message.refAttrName;\r\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\r\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\r\n            if (message.sparseTensors && message.sparseTensors.length) {\r\n                object.sparseTensors = [];\r\n                for (var j = 0; j < message.sparseTensors.length; ++j)\r\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this AttributeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        AttributeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for AttributeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\r\n        };\r\n\r\n        /**\r\n         * AttributeType enum.\r\n         * @name onnx.AttributeProto.AttributeType\r\n         * @enum {number}\r\n         * @property {number} UNDEFINED=0 UNDEFINED value\r\n         * @property {number} FLOAT=1 FLOAT value\r\n         * @property {number} INT=2 INT value\r\n         * @property {number} STRING=3 STRING value\r\n         * @property {number} TENSOR=4 TENSOR value\r\n         * @property {number} GRAPH=5 GRAPH value\r\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\r\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\r\n         * @property {number} FLOATS=6 FLOATS value\r\n         * @property {number} INTS=7 INTS value\r\n         * @property {number} STRINGS=8 STRINGS value\r\n         * @property {number} TENSORS=9 TENSORS value\r\n         * @property {number} GRAPHS=10 GRAPHS value\r\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\r\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\r\n         */\r\n        AttributeProto.AttributeType = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\r\n            values[valuesById[1] = \"FLOAT\"] = 1;\r\n            values[valuesById[2] = \"INT\"] = 2;\r\n            values[valuesById[3] = \"STRING\"] = 3;\r\n            values[valuesById[4] = \"TENSOR\"] = 4;\r\n            values[valuesById[5] = \"GRAPH\"] = 5;\r\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\r\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\r\n            values[valuesById[6] = \"FLOATS\"] = 6;\r\n            values[valuesById[7] = \"INTS\"] = 7;\r\n            values[valuesById[8] = \"STRINGS\"] = 8;\r\n            values[valuesById[9] = \"TENSORS\"] = 9;\r\n            values[valuesById[10] = \"GRAPHS\"] = 10;\r\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\r\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\r\n            return values;\r\n        })();\r\n\r\n        return AttributeProto;\r\n    })();\r\n\r\n    onnx.ValueInfoProto = (function() {\r\n\r\n        /**\r\n         * Properties of a ValueInfoProto.\r\n         * @memberof onnx\r\n         * @interface IValueInfoProto\r\n         * @property {string|null} [name] ValueInfoProto name\r\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\r\n         * @property {string|null} [docString] ValueInfoProto docString\r\n         */\r\n\r\n        /**\r\n         * Constructs a new ValueInfoProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a ValueInfoProto.\r\n         * @implements IValueInfoProto\r\n         * @constructor\r\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\r\n         */\r\n        function ValueInfoProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * ValueInfoProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * ValueInfoProto type.\r\n         * @member {onnx.ITypeProto|null|undefined} type\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.type = null;\r\n\r\n        /**\r\n         * ValueInfoProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * Creates a new ValueInfoProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\r\n         */\r\n        ValueInfoProto.create = function create(properties) {\r\n            return new ValueInfoProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ValueInfoProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\r\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ValueInfoProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a ValueInfoProto message.\r\n         * @function verify\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ValueInfoProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\r\n                var error = $root.onnx.TypeProto.verify(message.type);\r\n                if (error)\r\n                    return \"type.\" + error;\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         */\r\n        ValueInfoProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.ValueInfoProto)\r\n                return object;\r\n            var message = new $root.onnx.ValueInfoProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.type != null) {\r\n                if (typeof object.type !== \"object\")\r\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\r\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ValueInfoProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.type = null;\r\n                object.docString = \"\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this ValueInfoProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ValueInfoProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for ValueInfoProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\r\n        };\r\n\r\n        return ValueInfoProto;\r\n    })();\r\n\r\n    onnx.NodeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a NodeProto.\r\n         * @memberof onnx\r\n         * @interface INodeProto\r\n         * @property {Array.<string>|null} [input] NodeProto input\r\n         * @property {Array.<string>|null} [output] NodeProto output\r\n         * @property {string|null} [name] NodeProto name\r\n         * @property {string|null} [opType] NodeProto opType\r\n         * @property {string|null} [domain] NodeProto domain\r\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\r\n         * @property {string|null} [docString] NodeProto docString\r\n         */\r\n\r\n        /**\r\n         * Constructs a new NodeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a NodeProto.\r\n         * @implements INodeProto\r\n         * @constructor\r\n         * @param {onnx.INodeProto=} [properties] Properties to set\r\n         */\r\n        function NodeProto(properties) {\r\n            this.input = [];\r\n            this.output = [];\r\n            this.attribute = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * NodeProto input.\r\n         * @member {Array.<string>} input\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto output.\r\n         * @member {Array.<string>} output\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * NodeProto opType.\r\n         * @member {string} opType\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.opType = \"\";\r\n\r\n        /**\r\n         * NodeProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * NodeProto attribute.\r\n         * @member {Array.<onnx.IAttributeProto>} attribute\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.attribute = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * Creates a new NodeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto=} [properties] Properties to set\r\n         * @returns {onnx.NodeProto} NodeProto instance\r\n         */\r\n        NodeProto.create = function create(properties) {\r\n            return new NodeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        NodeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\r\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\r\n            if (message.attribute != null && message.attribute.length)\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a NodeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        NodeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.opType = reader.string();\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.attribute && message.attribute.length))\r\n                            message.attribute = [];\r\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a NodeProto message.\r\n         * @function verify\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        NodeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    if (!$util.isString(message.input[i]))\r\n                        return \"input: string[] expected\";\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    if (!$util.isString(message.output[i]))\r\n                        return \"output: string[] expected\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\r\n                if (!$util.isString(message.opType))\r\n                    return \"opType: string expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\r\n                if (!Array.isArray(message.attribute))\r\n                    return \"attribute: array expected\";\r\n                for (var i = 0; i < message.attribute.length; ++i) {\r\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\r\n                    if (error)\r\n                        return \"attribute.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         */\r\n        NodeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.NodeProto)\r\n                return object;\r\n            var message = new $root.onnx.NodeProto();\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i)\r\n                    message.input[i] = String(object.input[i]);\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i)\r\n                    message.output[i] = String(object.output[i]);\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.opType != null)\r\n                message.opType = String(object.opType);\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.attribute) {\r\n                if (!Array.isArray(object.attribute))\r\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\r\n                message.attribute = [];\r\n                for (var i = 0; i < object.attribute.length; ++i) {\r\n                    if (typeof object.attribute[i] !== \"object\")\r\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\r\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.NodeProto} message NodeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        NodeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.input = [];\r\n                object.output = [];\r\n                object.attribute = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.opType = \"\";\r\n                object.docString = \"\";\r\n                object.domain = \"\";\r\n            }\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = message.input[j];\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = message.output[j];\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\r\n                object.opType = message.opType;\r\n            if (message.attribute && message.attribute.length) {\r\n                object.attribute = [];\r\n                for (var j = 0; j < message.attribute.length; ++j)\r\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this NodeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        NodeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for NodeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.NodeProto\";\r\n        };\r\n\r\n        return NodeProto;\r\n    })();\r\n\r\n    onnx.TrainingInfoProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TrainingInfoProto.\r\n         * @memberof onnx\r\n         * @interface ITrainingInfoProto\r\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\r\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TrainingInfoProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TrainingInfoProto.\r\n         * @implements ITrainingInfoProto\r\n         * @constructor\r\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\r\n         */\r\n        function TrainingInfoProto(properties) {\r\n            this.initializationBinding = [];\r\n            this.updateBinding = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TrainingInfoProto initialization.\r\n         * @member {onnx.IGraphProto|null|undefined} initialization\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.initialization = null;\r\n\r\n        /**\r\n         * TrainingInfoProto algorithm.\r\n         * @member {onnx.IGraphProto|null|undefined} algorithm\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.algorithm = null;\r\n\r\n        /**\r\n         * TrainingInfoProto initializationBinding.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\r\n\r\n        /**\r\n         * TrainingInfoProto updateBinding.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TrainingInfoProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\r\n         */\r\n        TrainingInfoProto.create = function create(properties) {\r\n            return new TrainingInfoProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TrainingInfoProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\r\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\r\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.initializationBinding != null && message.initializationBinding.length)\r\n                for (var i = 0; i < message.initializationBinding.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\r\n            if (message.updateBinding != null && message.updateBinding.length)\r\n                for (var i = 0; i < message.updateBinding.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TrainingInfoProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        if (!(message.initializationBinding && message.initializationBinding.length))\r\n                            message.initializationBinding = [];\r\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.updateBinding && message.updateBinding.length))\r\n                            message.updateBinding = [];\r\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TrainingInfoProto message.\r\n         * @function verify\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TrainingInfoProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.initialization);\r\n                if (error)\r\n                    return \"initialization.\" + error;\r\n            }\r\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\r\n                if (error)\r\n                    return \"algorithm.\" + error;\r\n            }\r\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\r\n                if (!Array.isArray(message.initializationBinding))\r\n                    return \"initializationBinding: array expected\";\r\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\r\n                    if (error)\r\n                        return \"initializationBinding.\" + error;\r\n                }\r\n            }\r\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\r\n                if (!Array.isArray(message.updateBinding))\r\n                    return \"updateBinding: array expected\";\r\n                for (var i = 0; i < message.updateBinding.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\r\n                    if (error)\r\n                        return \"updateBinding.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         */\r\n        TrainingInfoProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TrainingInfoProto)\r\n                return object;\r\n            var message = new $root.onnx.TrainingInfoProto();\r\n            if (object.initialization != null) {\r\n                if (typeof object.initialization !== \"object\")\r\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\r\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\r\n            }\r\n            if (object.algorithm != null) {\r\n                if (typeof object.algorithm !== \"object\")\r\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\r\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\r\n            }\r\n            if (object.initializationBinding) {\r\n                if (!Array.isArray(object.initializationBinding))\r\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\r\n                message.initializationBinding = [];\r\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\r\n                    if (typeof object.initializationBinding[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\r\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\r\n                }\r\n            }\r\n            if (object.updateBinding) {\r\n                if (!Array.isArray(object.updateBinding))\r\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\r\n                message.updateBinding = [];\r\n                for (var i = 0; i < object.updateBinding.length; ++i) {\r\n                    if (typeof object.updateBinding[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\r\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TrainingInfoProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.initializationBinding = [];\r\n                object.updateBinding = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.initialization = null;\r\n                object.algorithm = null;\r\n            }\r\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\r\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\r\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\r\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\r\n            if (message.initializationBinding && message.initializationBinding.length) {\r\n                object.initializationBinding = [];\r\n                for (var j = 0; j < message.initializationBinding.length; ++j)\r\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\r\n            }\r\n            if (message.updateBinding && message.updateBinding.length) {\r\n                object.updateBinding = [];\r\n                for (var j = 0; j < message.updateBinding.length; ++j)\r\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TrainingInfoProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TrainingInfoProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\r\n        };\r\n\r\n        return TrainingInfoProto;\r\n    })();\r\n\r\n    onnx.ModelProto = (function() {\r\n\r\n        /**\r\n         * Properties of a ModelProto.\r\n         * @memberof onnx\r\n         * @interface IModelProto\r\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\r\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\r\n         * @property {string|null} [producerName] ModelProto producerName\r\n         * @property {string|null} [producerVersion] ModelProto producerVersion\r\n         * @property {string|null} [domain] ModelProto domain\r\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\r\n         * @property {string|null} [docString] ModelProto docString\r\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\r\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\r\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\r\n         */\r\n\r\n        /**\r\n         * Constructs a new ModelProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a ModelProto.\r\n         * @implements IModelProto\r\n         * @constructor\r\n         * @param {onnx.IModelProto=} [properties] Properties to set\r\n         */\r\n        function ModelProto(properties) {\r\n            this.opsetImport = [];\r\n            this.metadataProps = [];\r\n            this.trainingInfo = [];\r\n            this.functions = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * ModelProto irVersion.\r\n         * @member {number|Long} irVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * ModelProto opsetImport.\r\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.opsetImport = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto producerName.\r\n         * @member {string} producerName\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.producerName = \"\";\r\n\r\n        /**\r\n         * ModelProto producerVersion.\r\n         * @member {string} producerVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.producerVersion = \"\";\r\n\r\n        /**\r\n         * ModelProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * ModelProto modelVersion.\r\n         * @member {number|Long} modelVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * ModelProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * ModelProto graph.\r\n         * @member {onnx.IGraphProto|null|undefined} graph\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.graph = null;\r\n\r\n        /**\r\n         * ModelProto metadataProps.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.metadataProps = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto trainingInfo.\r\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto functions.\r\n         * @member {Array.<onnx.IFunctionProto>} functions\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.functions = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new ModelProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto=} [properties] Properties to set\r\n         * @returns {onnx.ModelProto} ModelProto instance\r\n         */\r\n        ModelProto.create = function create(properties) {\r\n            return new ModelProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ModelProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\r\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\r\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\r\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\r\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\r\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\r\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\r\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\r\n            if (message.opsetImport != null && message.opsetImport.length)\r\n                for (var i = 0; i < message.opsetImport.length; ++i)\r\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\r\n            if (message.metadataProps != null && message.metadataProps.length)\r\n                for (var i = 0; i < message.metadataProps.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.trainingInfo != null && message.trainingInfo.length)\r\n                for (var i = 0; i < message.trainingInfo.length; ++i)\r\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\r\n            if (message.functions != null && message.functions.length)\r\n                for (var i = 0; i < message.functions.length; ++i)\r\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a ModelProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ModelProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.irVersion = reader.int64();\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        if (!(message.opsetImport && message.opsetImport.length))\r\n                            message.opsetImport = [];\r\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.producerName = reader.string();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.producerVersion = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.modelVersion = reader.int64();\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        if (!(message.metadataProps && message.metadataProps.length))\r\n                            message.metadataProps = [];\r\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 20: {\r\n                        if (!(message.trainingInfo && message.trainingInfo.length))\r\n                            message.trainingInfo = [];\r\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 25: {\r\n                        if (!(message.functions && message.functions.length))\r\n                            message.functions = [];\r\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a ModelProto message.\r\n         * @function verify\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ModelProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\r\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\r\n                    return \"irVersion: integer|Long expected\";\r\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\r\n                if (!Array.isArray(message.opsetImport))\r\n                    return \"opsetImport: array expected\";\r\n                for (var i = 0; i < message.opsetImport.length; ++i) {\r\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\r\n                    if (error)\r\n                        return \"opsetImport.\" + error;\r\n                }\r\n            }\r\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\r\n                if (!$util.isString(message.producerName))\r\n                    return \"producerName: string expected\";\r\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\r\n                if (!$util.isString(message.producerVersion))\r\n                    return \"producerVersion: string expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\r\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\r\n                    return \"modelVersion: integer|Long expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.graph);\r\n                if (error)\r\n                    return \"graph.\" + error;\r\n            }\r\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\r\n                if (!Array.isArray(message.metadataProps))\r\n                    return \"metadataProps: array expected\";\r\n                for (var i = 0; i < message.metadataProps.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\r\n                    if (error)\r\n                        return \"metadataProps.\" + error;\r\n                }\r\n            }\r\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\r\n                if (!Array.isArray(message.trainingInfo))\r\n                    return \"trainingInfo: array expected\";\r\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\r\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\r\n                    if (error)\r\n                        return \"trainingInfo.\" + error;\r\n                }\r\n            }\r\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\r\n                if (!Array.isArray(message.functions))\r\n                    return \"functions: array expected\";\r\n                for (var i = 0; i < message.functions.length; ++i) {\r\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\r\n                    if (error)\r\n                        return \"functions.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         */\r\n        ModelProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.ModelProto)\r\n                return object;\r\n            var message = new $root.onnx.ModelProto();\r\n            if (object.irVersion != null)\r\n                if ($util.Long)\r\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\r\n                else if (typeof object.irVersion === \"string\")\r\n                    message.irVersion = parseInt(object.irVersion, 10);\r\n                else if (typeof object.irVersion === \"number\")\r\n                    message.irVersion = object.irVersion;\r\n                else if (typeof object.irVersion === \"object\")\r\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\r\n            if (object.opsetImport) {\r\n                if (!Array.isArray(object.opsetImport))\r\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\r\n                message.opsetImport = [];\r\n                for (var i = 0; i < object.opsetImport.length; ++i) {\r\n                    if (typeof object.opsetImport[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\r\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\r\n                }\r\n            }\r\n            if (object.producerName != null)\r\n                message.producerName = String(object.producerName);\r\n            if (object.producerVersion != null)\r\n                message.producerVersion = String(object.producerVersion);\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.modelVersion != null)\r\n                if ($util.Long)\r\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\r\n                else if (typeof object.modelVersion === \"string\")\r\n                    message.modelVersion = parseInt(object.modelVersion, 10);\r\n                else if (typeof object.modelVersion === \"number\")\r\n                    message.modelVersion = object.modelVersion;\r\n                else if (typeof object.modelVersion === \"object\")\r\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.graph != null) {\r\n                if (typeof object.graph !== \"object\")\r\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\r\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\r\n            }\r\n            if (object.metadataProps) {\r\n                if (!Array.isArray(object.metadataProps))\r\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\r\n                message.metadataProps = [];\r\n                for (var i = 0; i < object.metadataProps.length; ++i) {\r\n                    if (typeof object.metadataProps[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\r\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\r\n                }\r\n            }\r\n            if (object.trainingInfo) {\r\n                if (!Array.isArray(object.trainingInfo))\r\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\r\n                message.trainingInfo = [];\r\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\r\n                    if (typeof object.trainingInfo[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\r\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\r\n                }\r\n            }\r\n            if (object.functions) {\r\n                if (!Array.isArray(object.functions))\r\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\r\n                message.functions = [];\r\n                for (var i = 0; i < object.functions.length; ++i) {\r\n                    if (typeof object.functions[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\r\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.ModelProto} message ModelProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ModelProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.opsetImport = [];\r\n                object.metadataProps = [];\r\n                object.trainingInfo = [];\r\n                object.functions = [];\r\n            }\r\n            if (options.defaults) {\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.irVersion = options.longs === String ? \"0\" : 0;\r\n                object.producerName = \"\";\r\n                object.producerVersion = \"\";\r\n                object.domain = \"\";\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\r\n                object.docString = \"\";\r\n                object.graph = null;\r\n            }\r\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\r\n                if (typeof message.irVersion === \"number\")\r\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\r\n                else\r\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\r\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\r\n                object.producerName = message.producerName;\r\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\r\n                object.producerVersion = message.producerVersion;\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\r\n                if (typeof message.modelVersion === \"number\")\r\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\r\n                else\r\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\r\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\r\n            if (message.opsetImport && message.opsetImport.length) {\r\n                object.opsetImport = [];\r\n                for (var j = 0; j < message.opsetImport.length; ++j)\r\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\r\n            }\r\n            if (message.metadataProps && message.metadataProps.length) {\r\n                object.metadataProps = [];\r\n                for (var j = 0; j < message.metadataProps.length; ++j)\r\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\r\n            }\r\n            if (message.trainingInfo && message.trainingInfo.length) {\r\n                object.trainingInfo = [];\r\n                for (var j = 0; j < message.trainingInfo.length; ++j)\r\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\r\n            }\r\n            if (message.functions && message.functions.length) {\r\n                object.functions = [];\r\n                for (var j = 0; j < message.functions.length; ++j)\r\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this ModelProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ModelProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for ModelProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.ModelProto\";\r\n        };\r\n\r\n        return ModelProto;\r\n    })();\r\n\r\n    onnx.StringStringEntryProto = (function() {\r\n\r\n        /**\r\n         * Properties of a StringStringEntryProto.\r\n         * @memberof onnx\r\n         * @interface IStringStringEntryProto\r\n         * @property {string|null} [key] StringStringEntryProto key\r\n         * @property {string|null} [value] StringStringEntryProto value\r\n         */\r\n\r\n        /**\r\n         * Constructs a new StringStringEntryProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a StringStringEntryProto.\r\n         * @implements IStringStringEntryProto\r\n         * @constructor\r\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\r\n         */\r\n        function StringStringEntryProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * StringStringEntryProto key.\r\n         * @member {string} key\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         */\r\n        StringStringEntryProto.prototype.key = \"\";\r\n\r\n        /**\r\n         * StringStringEntryProto value.\r\n         * @member {string} value\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         */\r\n        StringStringEntryProto.prototype.value = \"\";\r\n\r\n        /**\r\n         * Creates a new StringStringEntryProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\r\n         */\r\n        StringStringEntryProto.create = function create(properties) {\r\n            return new StringStringEntryProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        StringStringEntryProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\r\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        StringStringEntryProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.key = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.value = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a StringStringEntryProto message.\r\n         * @function verify\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        StringStringEntryProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.key != null && message.hasOwnProperty(\"key\"))\r\n                if (!$util.isString(message.key))\r\n                    return \"key: string expected\";\r\n            if (message.value != null && message.hasOwnProperty(\"value\"))\r\n                if (!$util.isString(message.value))\r\n                    return \"value: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         */\r\n        StringStringEntryProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.StringStringEntryProto)\r\n                return object;\r\n            var message = new $root.onnx.StringStringEntryProto();\r\n            if (object.key != null)\r\n                message.key = String(object.key);\r\n            if (object.value != null)\r\n                message.value = String(object.value);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        StringStringEntryProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.key = \"\";\r\n                object.value = \"\";\r\n            }\r\n            if (message.key != null && message.hasOwnProperty(\"key\"))\r\n                object.key = message.key;\r\n            if (message.value != null && message.hasOwnProperty(\"value\"))\r\n                object.value = message.value;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this StringStringEntryProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for StringStringEntryProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\r\n        };\r\n\r\n        return StringStringEntryProto;\r\n    })();\r\n\r\n    onnx.TensorAnnotation = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorAnnotation.\r\n         * @memberof onnx\r\n         * @interface ITensorAnnotation\r\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorAnnotation.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorAnnotation.\r\n         * @implements ITensorAnnotation\r\n         * @constructor\r\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\r\n         */\r\n        function TensorAnnotation(properties) {\r\n            this.quantParameterTensorNames = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorAnnotation tensorName.\r\n         * @member {string} tensorName\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         */\r\n        TensorAnnotation.prototype.tensorName = \"\";\r\n\r\n        /**\r\n         * TensorAnnotation quantParameterTensorNames.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         */\r\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorAnnotation instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\r\n         */\r\n        TensorAnnotation.create = function create(properties) {\r\n            return new TensorAnnotation(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorAnnotation.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\r\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\r\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorAnnotation.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.tensorName = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\r\n                            message.quantParameterTensorNames = [];\r\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorAnnotation message.\r\n         * @function verify\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorAnnotation.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\r\n                if (!$util.isString(message.tensorName))\r\n                    return \"tensorName: string expected\";\r\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\r\n                if (!Array.isArray(message.quantParameterTensorNames))\r\n                    return \"quantParameterTensorNames: array expected\";\r\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\r\n                    if (error)\r\n                        return \"quantParameterTensorNames.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         */\r\n        TensorAnnotation.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorAnnotation)\r\n                return object;\r\n            var message = new $root.onnx.TensorAnnotation();\r\n            if (object.tensorName != null)\r\n                message.tensorName = String(object.tensorName);\r\n            if (object.quantParameterTensorNames) {\r\n                if (!Array.isArray(object.quantParameterTensorNames))\r\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\r\n                message.quantParameterTensorNames = [];\r\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\r\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\r\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorAnnotation.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.quantParameterTensorNames = [];\r\n            if (options.defaults)\r\n                object.tensorName = \"\";\r\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\r\n                object.tensorName = message.tensorName;\r\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\r\n                object.quantParameterTensorNames = [];\r\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\r\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorAnnotation to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorAnnotation.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorAnnotation\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\r\n        };\r\n\r\n        return TensorAnnotation;\r\n    })();\r\n\r\n    onnx.GraphProto = (function() {\r\n\r\n        /**\r\n         * Properties of a GraphProto.\r\n         * @memberof onnx\r\n         * @interface IGraphProto\r\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\r\n         * @property {string|null} [name] GraphProto name\r\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\r\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\r\n         * @property {string|null} [docString] GraphProto docString\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\r\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\r\n         */\r\n\r\n        /**\r\n         * Constructs a new GraphProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a GraphProto.\r\n         * @implements IGraphProto\r\n         * @constructor\r\n         * @param {onnx.IGraphProto=} [properties] Properties to set\r\n         */\r\n        function GraphProto(properties) {\r\n            this.node = [];\r\n            this.initializer = [];\r\n            this.sparseInitializer = [];\r\n            this.input = [];\r\n            this.output = [];\r\n            this.valueInfo = [];\r\n            this.quantizationAnnotation = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * GraphProto node.\r\n         * @member {Array.<onnx.INodeProto>} node\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.node = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * GraphProto initializer.\r\n         * @member {Array.<onnx.ITensorProto>} initializer\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.initializer = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto sparseInitializer.\r\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * GraphProto input.\r\n         * @member {Array.<onnx.IValueInfoProto>} input\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto output.\r\n         * @member {Array.<onnx.IValueInfoProto>} output\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto valueInfo.\r\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.valueInfo = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto quantizationAnnotation.\r\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new GraphProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto=} [properties] Properties to set\r\n         * @returns {onnx.GraphProto} GraphProto instance\r\n         */\r\n        GraphProto.create = function create(properties) {\r\n            return new GraphProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        GraphProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.node != null && message.node.length)\r\n                for (var i = 0; i < message.node.length; ++i)\r\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\r\n            if (message.initializer != null && message.initializer.length)\r\n                for (var i = 0; i < message.initializer.length; ++i)\r\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\r\n            if (message.valueInfo != null && message.valueInfo.length)\r\n                for (var i = 0; i < message.valueInfo.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\r\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\r\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\r\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\r\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\r\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a GraphProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        GraphProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.node && message.node.length))\r\n                            message.node = [];\r\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.initializer && message.initializer.length))\r\n                            message.initializer = [];\r\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 15: {\r\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\r\n                            message.sparseInitializer = [];\r\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 12: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        if (!(message.valueInfo && message.valueInfo.length))\r\n                            message.valueInfo = [];\r\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\r\n                            message.quantizationAnnotation = [];\r\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a GraphProto message.\r\n         * @function verify\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        GraphProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\r\n                if (!Array.isArray(message.node))\r\n                    return \"node: array expected\";\r\n                for (var i = 0; i < message.node.length; ++i) {\r\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\r\n                    if (error)\r\n                        return \"node.\" + error;\r\n                }\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\r\n                if (!Array.isArray(message.initializer))\r\n                    return \"initializer: array expected\";\r\n                for (var i = 0; i < message.initializer.length; ++i) {\r\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\r\n                    if (error)\r\n                        return \"initializer.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\r\n                if (!Array.isArray(message.sparseInitializer))\r\n                    return \"sparseInitializer: array expected\";\r\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\r\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\r\n                    if (error)\r\n                        return \"sparseInitializer.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\r\n                    if (error)\r\n                        return \"input.\" + error;\r\n                }\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\r\n                    if (error)\r\n                        return \"output.\" + error;\r\n                }\r\n            }\r\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\r\n                if (!Array.isArray(message.valueInfo))\r\n                    return \"valueInfo: array expected\";\r\n                for (var i = 0; i < message.valueInfo.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\r\n                    if (error)\r\n                        return \"valueInfo.\" + error;\r\n                }\r\n            }\r\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\r\n                if (!Array.isArray(message.quantizationAnnotation))\r\n                    return \"quantizationAnnotation: array expected\";\r\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\r\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\r\n                    if (error)\r\n                        return \"quantizationAnnotation.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         */\r\n        GraphProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.GraphProto)\r\n                return object;\r\n            var message = new $root.onnx.GraphProto();\r\n            if (object.node) {\r\n                if (!Array.isArray(object.node))\r\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\r\n                message.node = [];\r\n                for (var i = 0; i < object.node.length; ++i) {\r\n                    if (typeof object.node[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\r\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\r\n                }\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.initializer) {\r\n                if (!Array.isArray(object.initializer))\r\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\r\n                message.initializer = [];\r\n                for (var i = 0; i < object.initializer.length; ++i) {\r\n                    if (typeof object.initializer[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\r\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\r\n                }\r\n            }\r\n            if (object.sparseInitializer) {\r\n                if (!Array.isArray(object.sparseInitializer))\r\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\r\n                message.sparseInitializer = [];\r\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\r\n                    if (typeof object.sparseInitializer[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\r\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i) {\r\n                    if (typeof object.input[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\r\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\r\n                }\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i) {\r\n                    if (typeof object.output[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\r\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\r\n                }\r\n            }\r\n            if (object.valueInfo) {\r\n                if (!Array.isArray(object.valueInfo))\r\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\r\n                message.valueInfo = [];\r\n                for (var i = 0; i < object.valueInfo.length; ++i) {\r\n                    if (typeof object.valueInfo[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\r\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\r\n                }\r\n            }\r\n            if (object.quantizationAnnotation) {\r\n                if (!Array.isArray(object.quantizationAnnotation))\r\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\r\n                message.quantizationAnnotation = [];\r\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\r\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\r\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.GraphProto} message GraphProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        GraphProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.node = [];\r\n                object.initializer = [];\r\n                object.input = [];\r\n                object.output = [];\r\n                object.valueInfo = [];\r\n                object.quantizationAnnotation = [];\r\n                object.sparseInitializer = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.docString = \"\";\r\n            }\r\n            if (message.node && message.node.length) {\r\n                object.node = [];\r\n                for (var j = 0; j < message.node.length; ++j)\r\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.initializer && message.initializer.length) {\r\n                object.initializer = [];\r\n                for (var j = 0; j < message.initializer.length; ++j)\r\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\r\n            }\r\n            if (message.valueInfo && message.valueInfo.length) {\r\n                object.valueInfo = [];\r\n                for (var j = 0; j < message.valueInfo.length; ++j)\r\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\r\n            }\r\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\r\n                object.quantizationAnnotation = [];\r\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\r\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\r\n            }\r\n            if (message.sparseInitializer && message.sparseInitializer.length) {\r\n                object.sparseInitializer = [];\r\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\r\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this GraphProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        GraphProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for GraphProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.GraphProto\";\r\n        };\r\n\r\n        return GraphProto;\r\n    })();\r\n\r\n    onnx.TensorProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorProto.\r\n         * @memberof onnx\r\n         * @interface ITensorProto\r\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\r\n         * @property {number|null} [dataType] TensorProto dataType\r\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\r\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\r\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\r\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\r\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\r\n         * @property {string|null} [name] TensorProto name\r\n         * @property {string|null} [docString] TensorProto docString\r\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\r\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\r\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\r\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorProto.\r\n         * @implements ITensorProto\r\n         * @constructor\r\n         * @param {onnx.ITensorProto=} [properties] Properties to set\r\n         */\r\n        function TensorProto(properties) {\r\n            this.dims = [];\r\n            this.floatData = [];\r\n            this.int32Data = [];\r\n            this.stringData = [];\r\n            this.int64Data = [];\r\n            this.externalData = [];\r\n            this.doubleData = [];\r\n            this.uint64Data = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorProto dims.\r\n         * @member {Array.<number|Long>} dims\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dims = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto dataType.\r\n         * @member {number} dataType\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dataType = 0;\r\n\r\n        /**\r\n         * TensorProto segment.\r\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.segment = null;\r\n\r\n        /**\r\n         * TensorProto floatData.\r\n         * @member {Array.<number>} floatData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.floatData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto int32Data.\r\n         * @member {Array.<number>} int32Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.int32Data = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto stringData.\r\n         * @member {Array.<Uint8Array>} stringData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.stringData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto int64Data.\r\n         * @member {Array.<number|Long>} int64Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.int64Data = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * TensorProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * TensorProto rawData.\r\n         * @member {Uint8Array} rawData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.rawData = $util.newBuffer([]);\r\n\r\n        /**\r\n         * TensorProto externalData.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.externalData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto dataLocation.\r\n         * @member {onnx.TensorProto.DataLocation} dataLocation\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dataLocation = 0;\r\n\r\n        /**\r\n         * TensorProto doubleData.\r\n         * @member {Array.<number>} doubleData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.doubleData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto uint64Data.\r\n         * @member {Array.<number|Long>} uint64Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.uint64Data = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto=} [properties] Properties to set\r\n         * @returns {onnx.TensorProto} TensorProto instance\r\n         */\r\n        TensorProto.create = function create(properties) {\r\n            return new TensorProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.dims != null && message.dims.length) {\r\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    writer.int64(message.dims[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\r\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\r\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\r\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\r\n            if (message.floatData != null && message.floatData.length) {\r\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\r\n                for (var i = 0; i < message.floatData.length; ++i)\r\n                    writer.float(message.floatData[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.int32Data != null && message.int32Data.length) {\r\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\r\n                for (var i = 0; i < message.int32Data.length; ++i)\r\n                    writer.int32(message.int32Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.stringData != null && message.stringData.length)\r\n                for (var i = 0; i < message.stringData.length; ++i)\r\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\r\n            if (message.int64Data != null && message.int64Data.length) {\r\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\r\n                for (var i = 0; i < message.int64Data.length; ++i)\r\n                    writer.int64(message.int64Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\r\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\r\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\r\n            if (message.doubleData != null && message.doubleData.length) {\r\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\r\n                for (var i = 0; i < message.doubleData.length; ++i)\r\n                    writer.double(message.doubleData[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.uint64Data != null && message.uint64Data.length) {\r\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\r\n                for (var i = 0; i < message.uint64Data.length; ++i)\r\n                    writer.uint64(message.uint64Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\r\n            if (message.externalData != null && message.externalData.length)\r\n                for (var i = 0; i < message.externalData.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\r\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\r\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.dims && message.dims.length))\r\n                            message.dims = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.dims.push(reader.int64());\r\n                        } else\r\n                            message.dims.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.dataType = reader.int32();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.floatData && message.floatData.length))\r\n                            message.floatData = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.floatData.push(reader.float());\r\n                        } else\r\n                            message.floatData.push(reader.float());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.int32Data && message.int32Data.length))\r\n                            message.int32Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.int32Data.push(reader.int32());\r\n                        } else\r\n                            message.int32Data.push(reader.int32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        if (!(message.stringData && message.stringData.length))\r\n                            message.stringData = [];\r\n                        message.stringData.push(reader.bytes());\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.int64Data && message.int64Data.length))\r\n                            message.int64Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.int64Data.push(reader.int64());\r\n                        } else\r\n                            message.int64Data.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 12: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        message.rawData = reader.bytes();\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        if (!(message.externalData && message.externalData.length))\r\n                            message.externalData = [];\r\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        message.dataLocation = reader.int32();\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        if (!(message.doubleData && message.doubleData.length))\r\n                            message.doubleData = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.doubleData.push(reader.double());\r\n                        } else\r\n                            message.doubleData.push(reader.double());\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.uint64Data && message.uint64Data.length))\r\n                            message.uint64Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.uint64Data.push(reader.uint64());\r\n                        } else\r\n                            message.uint64Data.push(reader.uint64());\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorProto message.\r\n         * @function verify\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\r\n                if (!Array.isArray(message.dims))\r\n                    return \"dims: array expected\";\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\r\n                        return \"dims: integer|Long[] expected\";\r\n            }\r\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\r\n                if (!$util.isInteger(message.dataType))\r\n                    return \"dataType: integer expected\";\r\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\r\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\r\n                if (error)\r\n                    return \"segment.\" + error;\r\n            }\r\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\r\n                if (!Array.isArray(message.floatData))\r\n                    return \"floatData: array expected\";\r\n                for (var i = 0; i < message.floatData.length; ++i)\r\n                    if (typeof message.floatData[i] !== \"number\")\r\n                        return \"floatData: number[] expected\";\r\n            }\r\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\r\n                if (!Array.isArray(message.int32Data))\r\n                    return \"int32Data: array expected\";\r\n                for (var i = 0; i < message.int32Data.length; ++i)\r\n                    if (!$util.isInteger(message.int32Data[i]))\r\n                        return \"int32Data: integer[] expected\";\r\n            }\r\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\r\n                if (!Array.isArray(message.stringData))\r\n                    return \"stringData: array expected\";\r\n                for (var i = 0; i < message.stringData.length; ++i)\r\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\r\n                        return \"stringData: buffer[] expected\";\r\n            }\r\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\r\n                if (!Array.isArray(message.int64Data))\r\n                    return \"int64Data: array expected\";\r\n                for (var i = 0; i < message.int64Data.length; ++i)\r\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\r\n                        return \"int64Data: integer|Long[] expected\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\r\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\r\n                    return \"rawData: buffer expected\";\r\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\r\n                if (!Array.isArray(message.externalData))\r\n                    return \"externalData: array expected\";\r\n                for (var i = 0; i < message.externalData.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\r\n                    if (error)\r\n                        return \"externalData.\" + error;\r\n                }\r\n            }\r\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\r\n                switch (message.dataLocation) {\r\n                default:\r\n                    return \"dataLocation: enum value expected\";\r\n                case 0:\r\n                case 1:\r\n                    break;\r\n                }\r\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\r\n                if (!Array.isArray(message.doubleData))\r\n                    return \"doubleData: array expected\";\r\n                for (var i = 0; i < message.doubleData.length; ++i)\r\n                    if (typeof message.doubleData[i] !== \"number\")\r\n                        return \"doubleData: number[] expected\";\r\n            }\r\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\r\n                if (!Array.isArray(message.uint64Data))\r\n                    return \"uint64Data: array expected\";\r\n                for (var i = 0; i < message.uint64Data.length; ++i)\r\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\r\n                        return \"uint64Data: integer|Long[] expected\";\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         */\r\n        TensorProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorProto)\r\n                return object;\r\n            var message = new $root.onnx.TensorProto();\r\n            if (object.dims) {\r\n                if (!Array.isArray(object.dims))\r\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\r\n                message.dims = [];\r\n                for (var i = 0; i < object.dims.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\r\n                    else if (typeof object.dims[i] === \"string\")\r\n                        message.dims[i] = parseInt(object.dims[i], 10);\r\n                    else if (typeof object.dims[i] === \"number\")\r\n                        message.dims[i] = object.dims[i];\r\n                    else if (typeof object.dims[i] === \"object\")\r\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.dataType != null)\r\n                message.dataType = object.dataType | 0;\r\n            if (object.segment != null) {\r\n                if (typeof object.segment !== \"object\")\r\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\r\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\r\n            }\r\n            if (object.floatData) {\r\n                if (!Array.isArray(object.floatData))\r\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\r\n                message.floatData = [];\r\n                for (var i = 0; i < object.floatData.length; ++i)\r\n                    message.floatData[i] = Number(object.floatData[i]);\r\n            }\r\n            if (object.int32Data) {\r\n                if (!Array.isArray(object.int32Data))\r\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\r\n                message.int32Data = [];\r\n                for (var i = 0; i < object.int32Data.length; ++i)\r\n                    message.int32Data[i] = object.int32Data[i] | 0;\r\n            }\r\n            if (object.stringData) {\r\n                if (!Array.isArray(object.stringData))\r\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\r\n                message.stringData = [];\r\n                for (var i = 0; i < object.stringData.length; ++i)\r\n                    if (typeof object.stringData[i] === \"string\")\r\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\r\n                    else if (object.stringData[i].length >= 0)\r\n                        message.stringData[i] = object.stringData[i];\r\n            }\r\n            if (object.int64Data) {\r\n                if (!Array.isArray(object.int64Data))\r\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\r\n                message.int64Data = [];\r\n                for (var i = 0; i < object.int64Data.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\r\n                    else if (typeof object.int64Data[i] === \"string\")\r\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\r\n                    else if (typeof object.int64Data[i] === \"number\")\r\n                        message.int64Data[i] = object.int64Data[i];\r\n                    else if (typeof object.int64Data[i] === \"object\")\r\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.rawData != null)\r\n                if (typeof object.rawData === \"string\")\r\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\r\n                else if (object.rawData.length >= 0)\r\n                    message.rawData = object.rawData;\r\n            if (object.externalData) {\r\n                if (!Array.isArray(object.externalData))\r\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\r\n                message.externalData = [];\r\n                for (var i = 0; i < object.externalData.length; ++i) {\r\n                    if (typeof object.externalData[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\r\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\r\n                }\r\n            }\r\n            switch (object.dataLocation) {\r\n            default:\r\n                if (typeof object.dataLocation === \"number\") {\r\n                    message.dataLocation = object.dataLocation;\r\n                    break;\r\n                }\r\n                break;\r\n            case \"DEFAULT\":\r\n            case 0:\r\n                message.dataLocation = 0;\r\n                break;\r\n            case \"EXTERNAL\":\r\n            case 1:\r\n                message.dataLocation = 1;\r\n                break;\r\n            }\r\n            if (object.doubleData) {\r\n                if (!Array.isArray(object.doubleData))\r\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\r\n                message.doubleData = [];\r\n                for (var i = 0; i < object.doubleData.length; ++i)\r\n                    message.doubleData[i] = Number(object.doubleData[i]);\r\n            }\r\n            if (object.uint64Data) {\r\n                if (!Array.isArray(object.uint64Data))\r\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\r\n                message.uint64Data = [];\r\n                for (var i = 0; i < object.uint64Data.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\r\n                    else if (typeof object.uint64Data[i] === \"string\")\r\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\r\n                    else if (typeof object.uint64Data[i] === \"number\")\r\n                        message.uint64Data[i] = object.uint64Data[i];\r\n                    else if (typeof object.uint64Data[i] === \"object\")\r\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.TensorProto} message TensorProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.dims = [];\r\n                object.floatData = [];\r\n                object.int32Data = [];\r\n                object.stringData = [];\r\n                object.int64Data = [];\r\n                object.doubleData = [];\r\n                object.uint64Data = [];\r\n                object.externalData = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.dataType = 0;\r\n                object.segment = null;\r\n                object.name = \"\";\r\n                if (options.bytes === String)\r\n                    object.rawData = \"\";\r\n                else {\r\n                    object.rawData = [];\r\n                    if (options.bytes !== Array)\r\n                        object.rawData = $util.newBuffer(object.rawData);\r\n                }\r\n                object.docString = \"\";\r\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\r\n            }\r\n            if (message.dims && message.dims.length) {\r\n                object.dims = [];\r\n                for (var j = 0; j < message.dims.length; ++j)\r\n                    if (typeof message.dims[j] === \"number\")\r\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\r\n                    else\r\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\r\n            }\r\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\r\n                object.dataType = message.dataType;\r\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\r\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\r\n            if (message.floatData && message.floatData.length) {\r\n                object.floatData = [];\r\n                for (var j = 0; j < message.floatData.length; ++j)\r\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\r\n            }\r\n            if (message.int32Data && message.int32Data.length) {\r\n                object.int32Data = [];\r\n                for (var j = 0; j < message.int32Data.length; ++j)\r\n                    object.int32Data[j] = message.int32Data[j];\r\n            }\r\n            if (message.stringData && message.stringData.length) {\r\n                object.stringData = [];\r\n                for (var j = 0; j < message.stringData.length; ++j)\r\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\r\n            }\r\n            if (message.int64Data && message.int64Data.length) {\r\n                object.int64Data = [];\r\n                for (var j = 0; j < message.int64Data.length; ++j)\r\n                    if (typeof message.int64Data[j] === \"number\")\r\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\r\n                    else\r\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\r\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\r\n            if (message.doubleData && message.doubleData.length) {\r\n                object.doubleData = [];\r\n                for (var j = 0; j < message.doubleData.length; ++j)\r\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\r\n            }\r\n            if (message.uint64Data && message.uint64Data.length) {\r\n                object.uint64Data = [];\r\n                for (var j = 0; j < message.uint64Data.length; ++j)\r\n                    if (typeof message.uint64Data[j] === \"number\")\r\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\r\n                    else\r\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.externalData && message.externalData.length) {\r\n                object.externalData = [];\r\n                for (var j = 0; j < message.externalData.length; ++j)\r\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\r\n            }\r\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\r\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorProto\";\r\n        };\r\n\r\n        /**\r\n         * DataType enum.\r\n         * @name onnx.TensorProto.DataType\r\n         * @enum {number}\r\n         * @property {number} UNDEFINED=0 UNDEFINED value\r\n         * @property {number} FLOAT=1 FLOAT value\r\n         * @property {number} UINT8=2 UINT8 value\r\n         * @property {number} INT8=3 INT8 value\r\n         * @property {number} UINT16=4 UINT16 value\r\n         * @property {number} INT16=5 INT16 value\r\n         * @property {number} INT32=6 INT32 value\r\n         * @property {number} INT64=7 INT64 value\r\n         * @property {number} STRING=8 STRING value\r\n         * @property {number} BOOL=9 BOOL value\r\n         * @property {number} FLOAT16=10 FLOAT16 value\r\n         * @property {number} DOUBLE=11 DOUBLE value\r\n         * @property {number} UINT32=12 UINT32 value\r\n         * @property {number} UINT64=13 UINT64 value\r\n         * @property {number} COMPLEX64=14 COMPLEX64 value\r\n         * @property {number} COMPLEX128=15 COMPLEX128 value\r\n         * @property {number} BFLOAT16=16 BFLOAT16 value\r\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\r\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\r\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\r\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\r\n         */\r\n        TensorProto.DataType = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\r\n            values[valuesById[1] = \"FLOAT\"] = 1;\r\n            values[valuesById[2] = \"UINT8\"] = 2;\r\n            values[valuesById[3] = \"INT8\"] = 3;\r\n            values[valuesById[4] = \"UINT16\"] = 4;\r\n            values[valuesById[5] = \"INT16\"] = 5;\r\n            values[valuesById[6] = \"INT32\"] = 6;\r\n            values[valuesById[7] = \"INT64\"] = 7;\r\n            values[valuesById[8] = \"STRING\"] = 8;\r\n            values[valuesById[9] = \"BOOL\"] = 9;\r\n            values[valuesById[10] = \"FLOAT16\"] = 10;\r\n            values[valuesById[11] = \"DOUBLE\"] = 11;\r\n            values[valuesById[12] = \"UINT32\"] = 12;\r\n            values[valuesById[13] = \"UINT64\"] = 13;\r\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\r\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\r\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\r\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\r\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\r\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\r\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\r\n            return values;\r\n        })();\r\n\r\n        TensorProto.Segment = (function() {\r\n\r\n            /**\r\n             * Properties of a Segment.\r\n             * @memberof onnx.TensorProto\r\n             * @interface ISegment\r\n             * @property {number|Long|null} [begin] Segment begin\r\n             * @property {number|Long|null} [end] Segment end\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Segment.\r\n             * @memberof onnx.TensorProto\r\n             * @classdesc Represents a Segment.\r\n             * @implements ISegment\r\n             * @constructor\r\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\r\n             */\r\n            function Segment(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Segment begin.\r\n             * @member {number|Long} begin\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             */\r\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n            /**\r\n             * Segment end.\r\n             * @member {number|Long} end\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             */\r\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n            /**\r\n             * Creates a new Segment instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\r\n             * @returns {onnx.TensorProto.Segment} Segment instance\r\n             */\r\n            Segment.create = function create(properties) {\r\n                return new Segment(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Segment.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\r\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Segment message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Segment.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.begin = reader.int64();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.end = reader.int64();\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Segment.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Segment message.\r\n             * @function verify\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Segment.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\r\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\r\n                        return \"begin: integer|Long expected\";\r\n                if (message.end != null && message.hasOwnProperty(\"end\"))\r\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\r\n                        return \"end: integer|Long expected\";\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             */\r\n            Segment.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TensorProto.Segment)\r\n                    return object;\r\n                var message = new $root.onnx.TensorProto.Segment();\r\n                if (object.begin != null)\r\n                    if ($util.Long)\r\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\r\n                    else if (typeof object.begin === \"string\")\r\n                        message.begin = parseInt(object.begin, 10);\r\n                    else if (typeof object.begin === \"number\")\r\n                        message.begin = object.begin;\r\n                    else if (typeof object.begin === \"object\")\r\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\r\n                if (object.end != null)\r\n                    if ($util.Long)\r\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\r\n                    else if (typeof object.end === \"string\")\r\n                        message.end = parseInt(object.end, 10);\r\n                    else if (typeof object.end === \"number\")\r\n                        message.end = object.end;\r\n                    else if (typeof object.end === \"object\")\r\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.Segment} message Segment\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Segment.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    if ($util.Long) {\r\n                        var long = new $util.Long(0, 0, false);\r\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                    } else\r\n                        object.begin = options.longs === String ? \"0\" : 0;\r\n                    if ($util.Long) {\r\n                        var long = new $util.Long(0, 0, false);\r\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                    } else\r\n                        object.end = options.longs === String ? \"0\" : 0;\r\n                }\r\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\r\n                    if (typeof message.begin === \"number\")\r\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\r\n                    else\r\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\r\n                if (message.end != null && message.hasOwnProperty(\"end\"))\r\n                    if (typeof message.end === \"number\")\r\n                        object.end = options.longs === String ? String(message.end) : message.end;\r\n                    else\r\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Segment to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Segment.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Segment\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\r\n            };\r\n\r\n            return Segment;\r\n        })();\r\n\r\n        /**\r\n         * DataLocation enum.\r\n         * @name onnx.TensorProto.DataLocation\r\n         * @enum {number}\r\n         * @property {number} DEFAULT=0 DEFAULT value\r\n         * @property {number} EXTERNAL=1 EXTERNAL value\r\n         */\r\n        TensorProto.DataLocation = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"DEFAULT\"] = 0;\r\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\r\n            return values;\r\n        })();\r\n\r\n        return TensorProto;\r\n    })();\r\n\r\n    onnx.SparseTensorProto = (function() {\r\n\r\n        /**\r\n         * Properties of a SparseTensorProto.\r\n         * @memberof onnx\r\n         * @interface ISparseTensorProto\r\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\r\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\r\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\r\n         */\r\n\r\n        /**\r\n         * Constructs a new SparseTensorProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a SparseTensorProto.\r\n         * @implements ISparseTensorProto\r\n         * @constructor\r\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\r\n         */\r\n        function SparseTensorProto(properties) {\r\n            this.dims = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * SparseTensorProto values.\r\n         * @member {onnx.ITensorProto|null|undefined} values\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.values = null;\r\n\r\n        /**\r\n         * SparseTensorProto indices.\r\n         * @member {onnx.ITensorProto|null|undefined} indices\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.indices = null;\r\n\r\n        /**\r\n         * SparseTensorProto dims.\r\n         * @member {Array.<number|Long>} dims\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.dims = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new SparseTensorProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\r\n         */\r\n        SparseTensorProto.create = function create(properties) {\r\n            return new SparseTensorProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        SparseTensorProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\r\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\r\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.dims != null && message.dims.length) {\r\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    writer.int64(message.dims[i]);\r\n                writer.ldelim();\r\n            }\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        SparseTensorProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        if (!(message.dims && message.dims.length))\r\n                            message.dims = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.dims.push(reader.int64());\r\n                        } else\r\n                            message.dims.push(reader.int64());\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a SparseTensorProto message.\r\n         * @function verify\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        SparseTensorProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.values);\r\n                if (error)\r\n                    return \"values.\" + error;\r\n            }\r\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.indices);\r\n                if (error)\r\n                    return \"indices.\" + error;\r\n            }\r\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\r\n                if (!Array.isArray(message.dims))\r\n                    return \"dims: array expected\";\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\r\n                        return \"dims: integer|Long[] expected\";\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         */\r\n        SparseTensorProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.SparseTensorProto)\r\n                return object;\r\n            var message = new $root.onnx.SparseTensorProto();\r\n            if (object.values != null) {\r\n                if (typeof object.values !== \"object\")\r\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\r\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\r\n            }\r\n            if (object.indices != null) {\r\n                if (typeof object.indices !== \"object\")\r\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\r\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\r\n            }\r\n            if (object.dims) {\r\n                if (!Array.isArray(object.dims))\r\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\r\n                message.dims = [];\r\n                for (var i = 0; i < object.dims.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\r\n                    else if (typeof object.dims[i] === \"string\")\r\n                        message.dims[i] = parseInt(object.dims[i], 10);\r\n                    else if (typeof object.dims[i] === \"number\")\r\n                        message.dims[i] = object.dims[i];\r\n                    else if (typeof object.dims[i] === \"object\")\r\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        SparseTensorProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.dims = [];\r\n            if (options.defaults) {\r\n                object.values = null;\r\n                object.indices = null;\r\n            }\r\n            if (message.values != null && message.hasOwnProperty(\"values\"))\r\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\r\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\r\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\r\n            if (message.dims && message.dims.length) {\r\n                object.dims = [];\r\n                for (var j = 0; j < message.dims.length; ++j)\r\n                    if (typeof message.dims[j] === \"number\")\r\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\r\n                    else\r\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this SparseTensorProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        SparseTensorProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for SparseTensorProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\r\n        };\r\n\r\n        return SparseTensorProto;\r\n    })();\r\n\r\n    onnx.TensorShapeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorShapeProto.\r\n         * @memberof onnx\r\n         * @interface ITensorShapeProto\r\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorShapeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorShapeProto.\r\n         * @implements ITensorShapeProto\r\n         * @constructor\r\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\r\n         */\r\n        function TensorShapeProto(properties) {\r\n            this.dim = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorShapeProto dim.\r\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\r\n         * @memberof onnx.TensorShapeProto\r\n         * @instance\r\n         */\r\n        TensorShapeProto.prototype.dim = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorShapeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\r\n         */\r\n        TensorShapeProto.create = function create(properties) {\r\n            return new TensorShapeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorShapeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.dim != null && message.dim.length)\r\n                for (var i = 0; i < message.dim.length; ++i)\r\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorShapeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.dim && message.dim.length))\r\n                            message.dim = [];\r\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorShapeProto message.\r\n         * @function verify\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorShapeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\r\n                if (!Array.isArray(message.dim))\r\n                    return \"dim: array expected\";\r\n                for (var i = 0; i < message.dim.length; ++i) {\r\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\r\n                    if (error)\r\n                        return \"dim.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         */\r\n        TensorShapeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorShapeProto)\r\n                return object;\r\n            var message = new $root.onnx.TensorShapeProto();\r\n            if (object.dim) {\r\n                if (!Array.isArray(object.dim))\r\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\r\n                message.dim = [];\r\n                for (var i = 0; i < object.dim.length; ++i) {\r\n                    if (typeof object.dim[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\r\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorShapeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.dim = [];\r\n            if (message.dim && message.dim.length) {\r\n                object.dim = [];\r\n                for (var j = 0; j < message.dim.length; ++j)\r\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorShapeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorShapeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorShapeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorShapeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\r\n        };\r\n\r\n        TensorShapeProto.Dimension = (function() {\r\n\r\n            /**\r\n             * Properties of a Dimension.\r\n             * @memberof onnx.TensorShapeProto\r\n             * @interface IDimension\r\n             * @property {number|Long|null} [dimValue] Dimension dimValue\r\n             * @property {string|null} [dimParam] Dimension dimParam\r\n             * @property {string|null} [denotation] Dimension denotation\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Dimension.\r\n             * @memberof onnx.TensorShapeProto\r\n             * @classdesc Represents a Dimension.\r\n             * @implements IDimension\r\n             * @constructor\r\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\r\n             */\r\n            function Dimension(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Dimension dimValue.\r\n             * @member {number|Long|null|undefined} dimValue\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.dimValue = null;\r\n\r\n            /**\r\n             * Dimension dimParam.\r\n             * @member {string|null|undefined} dimParam\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.dimParam = null;\r\n\r\n            /**\r\n             * Dimension denotation.\r\n             * @member {string} denotation\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.denotation = \"\";\r\n\r\n            // OneOf field names bound to virtual getters and setters\r\n            var $oneOfFields;\r\n\r\n            /**\r\n             * Dimension value.\r\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Object.defineProperty(Dimension.prototype, \"value\", {\r\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\r\n                set: $util.oneOfSetter($oneOfFields)\r\n            });\r\n\r\n            /**\r\n             * Creates a new Dimension instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\r\n             */\r\n            Dimension.create = function create(properties) {\r\n                return new Dimension(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Dimension.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\r\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\r\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\r\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\r\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Dimension message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Dimension.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.dimValue = reader.int64();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.dimParam = reader.string();\r\n                            break;\r\n                        }\r\n                    case 3: {\r\n                            message.denotation = reader.string();\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Dimension message.\r\n             * @function verify\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Dimension.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                var properties = {};\r\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\r\n                    properties.value = 1;\r\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\r\n                        return \"dimValue: integer|Long expected\";\r\n                }\r\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\r\n                    if (properties.value === 1)\r\n                        return \"value: multiple values\";\r\n                    properties.value = 1;\r\n                    if (!$util.isString(message.dimParam))\r\n                        return \"dimParam: string expected\";\r\n                }\r\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                    if (!$util.isString(message.denotation))\r\n                        return \"denotation: string expected\";\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             */\r\n            Dimension.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\r\n                    return object;\r\n                var message = new $root.onnx.TensorShapeProto.Dimension();\r\n                if (object.dimValue != null)\r\n                    if ($util.Long)\r\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\r\n                    else if (typeof object.dimValue === \"string\")\r\n                        message.dimValue = parseInt(object.dimValue, 10);\r\n                    else if (typeof object.dimValue === \"number\")\r\n                        message.dimValue = object.dimValue;\r\n                    else if (typeof object.dimValue === \"object\")\r\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\r\n                if (object.dimParam != null)\r\n                    message.dimParam = String(object.dimParam);\r\n                if (object.denotation != null)\r\n                    message.denotation = String(object.denotation);\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Dimension.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.denotation = \"\";\r\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\r\n                    if (typeof message.dimValue === \"number\")\r\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\r\n                    else\r\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\r\n                    if (options.oneofs)\r\n                        object.value = \"dimValue\";\r\n                }\r\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\r\n                    object.dimParam = message.dimParam;\r\n                    if (options.oneofs)\r\n                        object.value = \"dimParam\";\r\n                }\r\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                    object.denotation = message.denotation;\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Dimension to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Dimension.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Dimension\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\r\n            };\r\n\r\n            return Dimension;\r\n        })();\r\n\r\n        return TensorShapeProto;\r\n    })();\r\n\r\n    onnx.TypeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TypeProto.\r\n         * @memberof onnx\r\n         * @interface ITypeProto\r\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\r\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\r\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\r\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\r\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\r\n         * @property {string|null} [denotation] TypeProto denotation\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TypeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TypeProto.\r\n         * @implements ITypeProto\r\n         * @constructor\r\n         * @param {onnx.ITypeProto=} [properties] Properties to set\r\n         */\r\n        function TypeProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TypeProto tensorType.\r\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.tensorType = null;\r\n\r\n        /**\r\n         * TypeProto sequenceType.\r\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.sequenceType = null;\r\n\r\n        /**\r\n         * TypeProto mapType.\r\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.mapType = null;\r\n\r\n        /**\r\n         * TypeProto optionalType.\r\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.optionalType = null;\r\n\r\n        /**\r\n         * TypeProto sparseTensorType.\r\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.sparseTensorType = null;\r\n\r\n        /**\r\n         * TypeProto denotation.\r\n         * @member {string} denotation\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.denotation = \"\";\r\n\r\n        // OneOf field names bound to virtual getters and setters\r\n        var $oneOfFields;\r\n\r\n        /**\r\n         * TypeProto value.\r\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        Object.defineProperty(TypeProto.prototype, \"value\", {\r\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\r\n            set: $util.oneOfSetter($oneOfFields)\r\n        });\r\n\r\n        /**\r\n         * Creates a new TypeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto=} [properties] Properties to set\r\n         * @returns {onnx.TypeProto} TypeProto instance\r\n         */\r\n        TypeProto.create = function create(properties) {\r\n            return new TypeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TypeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\r\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\r\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\r\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\r\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\r\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\r\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\r\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\r\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TypeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TypeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.denotation = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TypeProto message.\r\n         * @function verify\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TypeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            var properties = {};\r\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\r\n                    if (error)\r\n                        return \"tensorType.\" + error;\r\n                }\r\n            }\r\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\r\n                    if (error)\r\n                        return \"sequenceType.\" + error;\r\n                }\r\n            }\r\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\r\n                    if (error)\r\n                        return \"mapType.\" + error;\r\n                }\r\n            }\r\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\r\n                    if (error)\r\n                        return \"optionalType.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\r\n                    if (error)\r\n                        return \"sparseTensorType.\" + error;\r\n                }\r\n            }\r\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                if (!$util.isString(message.denotation))\r\n                    return \"denotation: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         */\r\n        TypeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TypeProto)\r\n                return object;\r\n            var message = new $root.onnx.TypeProto();\r\n            if (object.tensorType != null) {\r\n                if (typeof object.tensorType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\r\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\r\n            }\r\n            if (object.sequenceType != null) {\r\n                if (typeof object.sequenceType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\r\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\r\n            }\r\n            if (object.mapType != null) {\r\n                if (typeof object.mapType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\r\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\r\n            }\r\n            if (object.optionalType != null) {\r\n                if (typeof object.optionalType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\r\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\r\n            }\r\n            if (object.sparseTensorType != null) {\r\n                if (typeof object.sparseTensorType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\r\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\r\n            }\r\n            if (object.denotation != null)\r\n                message.denotation = String(object.denotation);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.TypeProto} message TypeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TypeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults)\r\n                object.denotation = \"\";\r\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\r\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"tensorType\";\r\n            }\r\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\r\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"sequenceType\";\r\n            }\r\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\r\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"mapType\";\r\n            }\r\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                object.denotation = message.denotation;\r\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\r\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"sparseTensorType\";\r\n            }\r\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\r\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"optionalType\";\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TypeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TypeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TypeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TypeProto\";\r\n        };\r\n\r\n        TypeProto.Tensor = (function() {\r\n\r\n            /**\r\n             * Properties of a Tensor.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ITensor\r\n             * @property {number|null} [elemType] Tensor elemType\r\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Tensor.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Tensor.\r\n             * @implements ITensor\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\r\n             */\r\n            function Tensor(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Tensor elemType.\r\n             * @member {number} elemType\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             */\r\n            Tensor.prototype.elemType = 0;\r\n\r\n            /**\r\n             * Tensor shape.\r\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             */\r\n            Tensor.prototype.shape = null;\r\n\r\n            /**\r\n             * Creates a new Tensor instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\r\n             */\r\n            Tensor.create = function create(properties) {\r\n                return new Tensor(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Tensor.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\r\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\r\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Tensor message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Tensor.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Tensor message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Tensor.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    if (!$util.isInteger(message.elemType))\r\n                        return \"elemType: integer expected\";\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\r\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\r\n                    if (error)\r\n                        return \"shape.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             */\r\n            Tensor.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Tensor)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Tensor();\r\n                if (object.elemType != null)\r\n                    message.elemType = object.elemType | 0;\r\n                if (object.shape != null) {\r\n                    if (typeof object.shape !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\r\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.Tensor} message Tensor\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Tensor.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.elemType = 0;\r\n                    object.shape = null;\r\n                }\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = message.elemType;\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\r\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Tensor to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Tensor.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Tensor\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\r\n            };\r\n\r\n            return Tensor;\r\n        })();\r\n\r\n        TypeProto.Sequence = (function() {\r\n\r\n            /**\r\n             * Properties of a Sequence.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ISequence\r\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Sequence.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Sequence.\r\n             * @implements ISequence\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\r\n             */\r\n            function Sequence(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Sequence elemType.\r\n             * @member {onnx.ITypeProto|null|undefined} elemType\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @instance\r\n             */\r\n            Sequence.prototype.elemType = null;\r\n\r\n            /**\r\n             * Creates a new Sequence instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\r\n             */\r\n            Sequence.create = function create(properties) {\r\n                return new Sequence(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Sequence.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Sequence message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Sequence.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Sequence message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Sequence.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\r\n                    if (error)\r\n                        return \"elemType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             */\r\n            Sequence.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Sequence)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Sequence();\r\n                if (object.elemType != null) {\r\n                    if (typeof object.elemType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\r\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.Sequence} message Sequence\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Sequence.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.elemType = null;\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Sequence to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Sequence.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Sequence\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\r\n            };\r\n\r\n            return Sequence;\r\n        })();\r\n\r\n        TypeProto.Map = (function() {\r\n\r\n            /**\r\n             * Properties of a Map.\r\n             * @memberof onnx.TypeProto\r\n             * @interface IMap\r\n             * @property {number|null} [keyType] Map keyType\r\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Map.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Map.\r\n             * @implements IMap\r\n             * @constructor\r\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\r\n             */\r\n            function Map(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Map keyType.\r\n             * @member {number} keyType\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             */\r\n            Map.prototype.keyType = 0;\r\n\r\n            /**\r\n             * Map valueType.\r\n             * @member {onnx.ITypeProto|null|undefined} valueType\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             */\r\n            Map.prototype.valueType = null;\r\n\r\n            /**\r\n             * Creates a new Map instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Map} Map instance\r\n             */\r\n            Map.create = function create(properties) {\r\n                return new Map(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Map.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\r\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\r\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Map message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Map.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.keyType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Map message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Map.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Map message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Map.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\r\n                    if (!$util.isInteger(message.keyType))\r\n                        return \"keyType: integer expected\";\r\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\r\n                    if (error)\r\n                        return \"valueType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             */\r\n            Map.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Map)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Map();\r\n                if (object.keyType != null)\r\n                    message.keyType = object.keyType | 0;\r\n                if (object.valueType != null) {\r\n                    if (typeof object.valueType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\r\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.Map} message Map\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Map.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.keyType = 0;\r\n                    object.valueType = null;\r\n                }\r\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\r\n                    object.keyType = message.keyType;\r\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\r\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Map to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Map.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Map\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\r\n            };\r\n\r\n            return Map;\r\n        })();\r\n\r\n        TypeProto.Optional = (function() {\r\n\r\n            /**\r\n             * Properties of an Optional.\r\n             * @memberof onnx.TypeProto\r\n             * @interface IOptional\r\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Optional.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents an Optional.\r\n             * @implements IOptional\r\n             * @constructor\r\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\r\n             */\r\n            function Optional(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Optional elemType.\r\n             * @member {onnx.ITypeProto|null|undefined} elemType\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @instance\r\n             */\r\n            Optional.prototype.elemType = null;\r\n\r\n            /**\r\n             * Creates a new Optional instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Optional} Optional instance\r\n             */\r\n            Optional.create = function create(properties) {\r\n                return new Optional(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Optional.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes an Optional message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Optional.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Optional.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies an Optional message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Optional.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\r\n                    if (error)\r\n                        return \"elemType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             */\r\n            Optional.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Optional)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Optional();\r\n                if (object.elemType != null) {\r\n                    if (typeof object.elemType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\r\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.Optional} message Optional\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Optional.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.elemType = null;\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Optional to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Optional.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Optional\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\r\n            };\r\n\r\n            return Optional;\r\n        })();\r\n\r\n        TypeProto.SparseTensor = (function() {\r\n\r\n            /**\r\n             * Properties of a SparseTensor.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ISparseTensor\r\n             * @property {number|null} [elemType] SparseTensor elemType\r\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\r\n             */\r\n\r\n            /**\r\n             * Constructs a new SparseTensor.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a SparseTensor.\r\n             * @implements ISparseTensor\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\r\n             */\r\n            function SparseTensor(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * SparseTensor elemType.\r\n             * @member {number} elemType\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             */\r\n            SparseTensor.prototype.elemType = 0;\r\n\r\n            /**\r\n             * SparseTensor shape.\r\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             */\r\n            SparseTensor.prototype.shape = null;\r\n\r\n            /**\r\n             * Creates a new SparseTensor instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\r\n             */\r\n            SparseTensor.create = function create(properties) {\r\n                return new SparseTensor(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            SparseTensor.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\r\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\r\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a SparseTensor message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            SparseTensor.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a SparseTensor message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            SparseTensor.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    if (!$util.isInteger(message.elemType))\r\n                        return \"elemType: integer expected\";\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\r\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\r\n                    if (error)\r\n                        return \"shape.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             */\r\n            SparseTensor.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.SparseTensor();\r\n                if (object.elemType != null)\r\n                    message.elemType = object.elemType | 0;\r\n                if (object.shape != null) {\r\n                    if (typeof object.shape !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\r\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            SparseTensor.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.elemType = 0;\r\n                    object.shape = null;\r\n                }\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = message.elemType;\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\r\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this SparseTensor to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            SparseTensor.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for SparseTensor\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\r\n            };\r\n\r\n            return SparseTensor;\r\n        })();\r\n\r\n        return TypeProto;\r\n    })();\r\n\r\n    onnx.OperatorSetIdProto = (function() {\r\n\r\n        /**\r\n         * Properties of an OperatorSetIdProto.\r\n         * @memberof onnx\r\n         * @interface IOperatorSetIdProto\r\n         * @property {string|null} [domain] OperatorSetIdProto domain\r\n         * @property {number|Long|null} [version] OperatorSetIdProto version\r\n         */\r\n\r\n        /**\r\n         * Constructs a new OperatorSetIdProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents an OperatorSetIdProto.\r\n         * @implements IOperatorSetIdProto\r\n         * @constructor\r\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\r\n         */\r\n        function OperatorSetIdProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * OperatorSetIdProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         */\r\n        OperatorSetIdProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * OperatorSetIdProto version.\r\n         * @member {number|Long} version\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         */\r\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * Creates a new OperatorSetIdProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\r\n         */\r\n        OperatorSetIdProto.create = function create(properties) {\r\n            return new OperatorSetIdProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        OperatorSetIdProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\r\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\r\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        OperatorSetIdProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.version = reader.int64();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies an OperatorSetIdProto message.\r\n         * @function verify\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        OperatorSetIdProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.version != null && message.hasOwnProperty(\"version\"))\r\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\r\n                    return \"version: integer|Long expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         */\r\n        OperatorSetIdProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.OperatorSetIdProto)\r\n                return object;\r\n            var message = new $root.onnx.OperatorSetIdProto();\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.version != null)\r\n                if ($util.Long)\r\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\r\n                else if (typeof object.version === \"string\")\r\n                    message.version = parseInt(object.version, 10);\r\n                else if (typeof object.version === \"number\")\r\n                    message.version = object.version;\r\n                else if (typeof object.version === \"object\")\r\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        OperatorSetIdProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.domain = \"\";\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.version = options.longs === String ? \"0\" : 0;\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.version != null && message.hasOwnProperty(\"version\"))\r\n                if (typeof message.version === \"number\")\r\n                    object.version = options.longs === String ? String(message.version) : message.version;\r\n                else\r\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this OperatorSetIdProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for OperatorSetIdProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\r\n        };\r\n\r\n        return OperatorSetIdProto;\r\n    })();\r\n\r\n    /**\r\n     * OperatorStatus enum.\r\n     * @name onnx.OperatorStatus\r\n     * @enum {number}\r\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\r\n     * @property {number} STABLE=1 STABLE value\r\n     */\r\n    onnx.OperatorStatus = (function() {\r\n        var valuesById = {}, values = Object.create(valuesById);\r\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\r\n        values[valuesById[1] = \"STABLE\"] = 1;\r\n        return values;\r\n    })();\r\n\r\n    onnx.FunctionProto = (function() {\r\n\r\n        /**\r\n         * Properties of a FunctionProto.\r\n         * @memberof onnx\r\n         * @interface IFunctionProto\r\n         * @property {string|null} [name] FunctionProto name\r\n         * @property {Array.<string>|null} [input] FunctionProto input\r\n         * @property {Array.<string>|null} [output] FunctionProto output\r\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\r\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\r\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\r\n         * @property {string|null} [docString] FunctionProto docString\r\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\r\n         * @property {string|null} [domain] FunctionProto domain\r\n         */\r\n\r\n        /**\r\n         * Constructs a new FunctionProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a FunctionProto.\r\n         * @implements IFunctionProto\r\n         * @constructor\r\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\r\n         */\r\n        function FunctionProto(properties) {\r\n            this.input = [];\r\n            this.output = [];\r\n            this.attribute = [];\r\n            this.attributeProto = [];\r\n            this.node = [];\r\n            this.opsetImport = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * FunctionProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * FunctionProto input.\r\n         * @member {Array.<string>} input\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto output.\r\n         * @member {Array.<string>} output\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto attribute.\r\n         * @member {Array.<string>} attribute\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.attribute = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto attributeProto.\r\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto node.\r\n         * @member {Array.<onnx.INodeProto>} node\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.node = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * FunctionProto opsetImport.\r\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * Creates a new FunctionProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\r\n         * @returns {onnx.FunctionProto} FunctionProto instance\r\n         */\r\n        FunctionProto.create = function create(properties) {\r\n            return new FunctionProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        FunctionProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\r\n            if (message.attribute != null && message.attribute.length)\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\r\n            if (message.node != null && message.node.length)\r\n                for (var i = 0; i < message.node.length; ++i)\r\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\r\n            if (message.opsetImport != null && message.opsetImport.length)\r\n                for (var i = 0; i < message.opsetImport.length; ++i)\r\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\r\n            if (message.attributeProto != null && message.attributeProto.length)\r\n                for (var i = 0; i < message.attributeProto.length; ++i)\r\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a FunctionProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        FunctionProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        if (!(message.attribute && message.attribute.length))\r\n                            message.attribute = [];\r\n                        message.attribute.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.attributeProto && message.attributeProto.length))\r\n                            message.attributeProto = [];\r\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.node && message.node.length))\r\n                            message.node = [];\r\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        if (!(message.opsetImport && message.opsetImport.length))\r\n                            message.opsetImport = [];\r\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a FunctionProto message.\r\n         * @function verify\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        FunctionProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    if (!$util.isString(message.input[i]))\r\n                        return \"input: string[] expected\";\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    if (!$util.isString(message.output[i]))\r\n                        return \"output: string[] expected\";\r\n            }\r\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\r\n                if (!Array.isArray(message.attribute))\r\n                    return \"attribute: array expected\";\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    if (!$util.isString(message.attribute[i]))\r\n                        return \"attribute: string[] expected\";\r\n            }\r\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\r\n                if (!Array.isArray(message.attributeProto))\r\n                    return \"attributeProto: array expected\";\r\n                for (var i = 0; i < message.attributeProto.length; ++i) {\r\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\r\n                    if (error)\r\n                        return \"attributeProto.\" + error;\r\n                }\r\n            }\r\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\r\n                if (!Array.isArray(message.node))\r\n                    return \"node: array expected\";\r\n                for (var i = 0; i < message.node.length; ++i) {\r\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\r\n                    if (error)\r\n                        return \"node.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\r\n                if (!Array.isArray(message.opsetImport))\r\n                    return \"opsetImport: array expected\";\r\n                for (var i = 0; i < message.opsetImport.length; ++i) {\r\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\r\n                    if (error)\r\n                        return \"opsetImport.\" + error;\r\n                }\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         */\r\n        FunctionProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.FunctionProto)\r\n                return object;\r\n            var message = new $root.onnx.FunctionProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i)\r\n                    message.input[i] = String(object.input[i]);\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i)\r\n                    message.output[i] = String(object.output[i]);\r\n            }\r\n            if (object.attribute) {\r\n                if (!Array.isArray(object.attribute))\r\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\r\n                message.attribute = [];\r\n                for (var i = 0; i < object.attribute.length; ++i)\r\n                    message.attribute[i] = String(object.attribute[i]);\r\n            }\r\n            if (object.attributeProto) {\r\n                if (!Array.isArray(object.attributeProto))\r\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\r\n                message.attributeProto = [];\r\n                for (var i = 0; i < object.attributeProto.length; ++i) {\r\n                    if (typeof object.attributeProto[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\r\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\r\n                }\r\n            }\r\n            if (object.node) {\r\n                if (!Array.isArray(object.node))\r\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\r\n                message.node = [];\r\n                for (var i = 0; i < object.node.length; ++i) {\r\n                    if (typeof object.node[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\r\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.opsetImport) {\r\n                if (!Array.isArray(object.opsetImport))\r\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\r\n                message.opsetImport = [];\r\n                for (var i = 0; i < object.opsetImport.length; ++i) {\r\n                    if (typeof object.opsetImport[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\r\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\r\n                }\r\n            }\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.FunctionProto} message FunctionProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        FunctionProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.input = [];\r\n                object.output = [];\r\n                object.attribute = [];\r\n                object.node = [];\r\n                object.opsetImport = [];\r\n                object.attributeProto = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.docString = \"\";\r\n                object.domain = \"\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = message.input[j];\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = message.output[j];\r\n            }\r\n            if (message.attribute && message.attribute.length) {\r\n                object.attribute = [];\r\n                for (var j = 0; j < message.attribute.length; ++j)\r\n                    object.attribute[j] = message.attribute[j];\r\n            }\r\n            if (message.node && message.node.length) {\r\n                object.node = [];\r\n                for (var j = 0; j < message.node.length; ++j)\r\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.opsetImport && message.opsetImport.length) {\r\n                object.opsetImport = [];\r\n                for (var j = 0; j < message.opsetImport.length; ++j)\r\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.attributeProto && message.attributeProto.length) {\r\n                object.attributeProto = [];\r\n                for (var j = 0; j < message.attributeProto.length; ++j)\r\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this FunctionProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        FunctionProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for FunctionProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\r\n        };\r\n\r\n        return FunctionProto;\r\n    })();\r\n\r\n    return onnx;\r\n})();\r\n\r\nmodule.exports = $root;\r\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return F.buffer!=k.buffer&&W(),k}function r(){return F.buffer!=k.buffer&&W(),x}function n(){return F.buffer!=k.buffer&&W(),Y}function a(){return F.buffer!=k.buffer&&W(),H}function o(){return F.buffer!=k.buffer&&W(),U}var i,u,s=e;s.ready=new Promise(((e,t)=>{i=e,u=t}));var f,c,l,d=Object.assign({},s),h=\"./this.program\",m=(e,t)=>{throw t},p=\"object\"==typeof window,g=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=s.ENVIRONMENT_IS_PTHREAD||!1,v=\"\";function _(e){return s.locateFile?s.locateFile(e,v):v+e}if(b){var w=require(\"fs\"),O=require(\"path\");let e;v=g?O.dirname(v)+\"/\":__dirname+\"/\",f=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFileSync(e,t?void 0:\"utf8\")),l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),m=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(p||g)&&(g?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),v=0!==v.indexOf(\"blob:\")?v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",b||(f=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),c=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));b&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),T=console.error.bind(console);b&&(M=(...e)=>w.writeSync(1,e.join(\" \")+\"\\n\"),T=(...e)=>w.writeSync(2,e.join(\" \")+\"\\n\"));var S,A=s.print||M,R=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(m=s.quit),s.wasmBinary&&(S=s.wasmBinary);var E=s.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ee(\"no native wasm support detected\");var F,D,C,I,k,x,Y,H,U,P=!1;function W(){var e=F.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=Y=new Int32Array(e),s.HEAPU8=x=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=U=new Float64Array(e)}var G=s.INITIAL_MEMORY||16777216;if(5242880<=G||ee(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+G+\"! (STACK_SIZE=5242880)\"),y)F=s.wasmMemory;else if(s.wasmMemory)F=s.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),b&&R(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");W(),G=F.buffer.byteLength;var L,N=[],j=[],B=[],z=0;function q(){return E||0<z}var J,K,V=0,X=null,$=null;function Z(){V++,s.monitorRunDependencies&&s.monitorRunDependencies(V)}function Q(){if(V--,s.monitorRunDependencies&&s.monitorRunDependencies(V),0==V&&(null!==X&&(clearInterval(X),X=null),$)){var e=$;$=null,e()}}function ee(e){throw s.onAbort&&s.onAbort(e),R(e=\"Aborted(\"+e+\")\"),P=!0,I=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}function te(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function re(e){if(e==J&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}function ne(e,t,r){return function(e){if(!S&&(p||g)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return t.arrayBuffer()})).catch((()=>re(e)));if(c)return new Promise(((t,r)=>{c(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\"failed to asynchronously prepare wasm: \"+e),ee(e)}))}function ae(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}function oe(e){e.terminate(),e.onmessage=()=>{}}function ie(e){(e=he.Fa[e])||ee(),he.fb(e)}function ue(e){var t=he.Za();if(!t)return 6;he.Ia.push(t),he.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return b&&t.unref(),t.postMessage(r,e.mb),0}te(J=\"ort-wasm-threaded.wasm\")||(J=_(J));var se=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,fe=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},ce=(e,t)=>(e>>>=0)?fe(r(),e,t):\"\";function le(e){if(y)return qe(1,1,e);I=e,q()||(he.hb(),s.onExit&&s.onExit(e),P=!0),m(e,new ae(e))}var de=e=>{if(I=e,y)throw pe(e),\"unwind\";le(e)},he={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){y?he.ab():he.$a()},$a:function(){N.unshift((()=>{Z(),he.bb((()=>Q()))}))},ab:function(){he.receiveObjectTransfer=he.eb,he.threadInitTLS=he.Sa,he.setExitStatus=he.Ra,E=!1},Ra:function(e){I=e},rb:[\"$terminateWorker\"],hb:function(){for(var e of he.Ia)oe(e);for(e of he.La)oe(e);he.La=[],he.Ia=[],he.Fa=[]},fb:function(e){var t=e.Ha;delete he.Fa[t],he.La.push(e),he.Ia.splice(he.Ia.indexOf(e),1),e.Ha=0,gt(t)},eb:function(){},Sa:function(){he.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=lt()){var a=he.Fa[r.qb];a?a.postMessage(r,r.transferList):R('Internal error! Worker sent a message \"'+n+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===n?Pe():\"spawnThread\"===n?ue(r):\"cleanupThread\"===n?ie(r.thread):\"killThread\"===n?(r=r.thread,n=he.Fa[r],delete he.Fa[r],oe(n),gt(r),he.Ia.splice(he.Ia.indexOf(n),1),n.Ha=0):\"cancelThread\"===n?he.Fa[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?s[r.handler](...r.args):n&&R(\"worker sent an unknown command \"+n)},e.onerror=e=>{throw R(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},b&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])s.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:C})})),bb:function(e){e()},Xa:function(){var e=_(\"ort-wasm-threaded.worker.js\");e=new Worker(e),he.La.push(e)},Za:function(){return 0==he.La.length&&(he.Xa(),he.cb(he.La[0])),he.La.pop()}};s.PThread=he;var me=e=>{for(;0<e.length;)e.shift()(s)};function pe(e){if(y)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=lt(),t=n()[e+52>>2>>>0];e=n()[e+56>>2>>>0],_t(t,t-e),Ot(t)};var ge=[];function be(e){this.Oa=e-24,this.Wa=function(e){a()[this.Oa+4>>2>>>0]=e},this.Va=function(e){a()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){a()[this.Oa+16>>2>>>0]=0}}function ye(e,t,r,n){return y?qe(3,1,e,t,r,n):ve(e,t,r,n)}function ve(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\"undefined\"==typeof SharedArrayBuffer)return R(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return y&&0===a.length?ye(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},y?(e.ob=\"spawnThread\",postMessage(e,a),0):ue(e))}function _e(e,t,r){return y?qe(4,1,e,t,r):0}function we(e,t){if(y)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var r=ge[e];r||(e>=ge.length&&(ge.length=e+1),ge[e]=r=L.get(e)),e=r(t),q()?he.Ra(e):bt(e)};var Oe=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Me=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Te=(e,t,n)=>Me(e,r(),t,n);function Se(e,t){if(y)return qe(6,1,e,t)}function Ae(e,t,r){if(y)return qe(7,1,e,t,r)}function Re(e,t,r){return y?qe(8,1,e,t,r):0}function Ee(e,t){if(y)return qe(9,1,e,t)}function Fe(e,t,r){if(y)return qe(10,1,e,t,r)}function De(e,t,r,n){if(y)return qe(11,1,e,t,r,n)}function Ce(e,t,r,n){if(y)return qe(12,1,e,t,r,n)}function Ie(e,t,r,n){if(y)return qe(13,1,e,t,r,n)}function ke(e){if(y)return qe(14,1,e)}function xe(e,t){if(y)return qe(15,1,e,t)}function Ye(e,t,r){if(y)return qe(16,1,e,t,r)}var He=e=>{if(!P)try{if(e(),!q())try{y?bt(I):de(I)}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}};function Ue(e){e>>>=0,\"function\"==typeof Atomics.nb&&(Atomics.nb(n(),e>>2,e).value.then(Pe),e+=128,Atomics.store(n(),e>>2,1))}function Pe(){var e=lt();e&&(Ue(e),He((()=>yt())))}s.__emscripten_thread_mailbox_await=Ue,s.checkMailbox=Pe;var We=e=>0==e%4&&(0!=e%100||0==e%400),Ge=[0,31,60,91,121,152,182,213,244,274,305,335],Le=[0,31,59,90,120,151,181,212,243,273,304,334];function Ne(e,t,r,n,a,o,i,u){return y?qe(17,1,e,t,r,n,a,o,i,u):-52}function je(e,t,r,n,a,o,i){if(y)return qe(18,1,e,t,r,n,a,o,i)}var Be=e=>{var t=Oe(e)+1,r=dt(t);return r&&Te(e,r,t),r},ze=e=>{var t=wt();return e=e(),Ot(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return ze((()=>{for(var a=Mt(8*r),i=a>>3,u=0;u<r;u++){var s=n[2+u];o()[i+u>>>0]=s}return pt(e,r,a,t)}))}var Je,Ke=[],Ve={},Xe=()=>{if(!Je){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:h||\"./this.program\"};for(e in Ve)void 0===Ve[e]?delete t[e]:t[e]=Ve[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Je=r}return Je};function $e(e,r){if(y)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return Xe().forEach((function(o,i){var u=r+n;for(i=a()[e+4*i>>2>>>0]=u,u=0;u<o.length;++u)t()[i++>>0>>>0]=o.charCodeAt(u);t()[i>>0>>>0]=0,n+=o.length+1})),0}function Ze(e,t){if(y)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=Xe();a()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),a()[t>>2>>>0]=n,0}function Qe(e){return y?qe(21,1,e):52}function et(e,t,r,n){return y?qe(22,1,e,t,r,n):52}function tt(e,t,r,n,a){return y?qe(23,1,e,t,r,n,a):70}var rt=[null,[],[]];function nt(e,t,n,o){if(y)return qe(24,1,e,t,n,o);t>>>=0,n>>>=0,o>>>=0;for(var i=0,u=0;u<n;u++){var s=a()[t>>2>>>0],f=a()[t+4>>2>>>0];t+=8;for(var c=0;c<f;c++){var l=r()[s+c>>>0],d=rt[e];0===l||10===l?((1===e?A:R)(fe(d,0)),d.length=0):d.push(l)}i+=f}return a()[o>>2>>>0]=i,0}var at=e=>(at=(()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(b)try{var e=require(\"crypto\");if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}ee(\"initRandomDevice\")})())(e),ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],ut=(e,r)=>{t().set(e,r>>>0)};function st(e,t,r,a){function o(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\"0\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(We(e.getFullYear())?ot:it)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,a>>>=0;var c=n()[a+40>>2>>>0];for(var l in a={kb:n()[a>>2>>>0],jb:n()[a+4>>2>>>0],Ma:n()[a+8>>2>>>0],Qa:n()[a+12>>2>>>0],Na:n()[a+16>>2>>>0],Ka:n()[a+20>>2>>>0],Ga:n()[a+24>>2>>>0],Ja:n()[a+28>>2>>>0],sb:n()[a+32>>2>>>0],ib:n()[a+36>>2>>>0],lb:c?ce(c):\"\"},r=ce(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(l,\"g\"),c[l]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":e=>d[e.Ga].substring(0,3),\"%A\":e=>d[e.Ga],\"%b\":e=>h[e.Na].substring(0,3),\"%B\":e=>h[e.Na],\"%C\":e=>i((e.Ka+1900)/100|0,2),\"%d\":e=>i(e.Qa,2),\"%e\":e=>o(e.Qa,2,\" \"),\"%g\":e=>f(e).toString().substring(2),\"%G\":e=>f(e),\"%H\":e=>i(e.Ma,2),\"%I\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(We(e.Ka+1900)?ot:it)[r++]);return i(e.Qa+t,3)},\"%m\":e=>i(e.Na+1,2),\"%M\":e=>i(e.jb,2),\"%n\":()=>\"\\n\",\"%p\":e=>0<=e.Ma&&12>e.Ma?\"AM\":\"PM\",\"%S\":e=>i(e.kb,2),\"%t\":()=>\"\\t\",\"%u\":e=>e.Ga||7,\"%U\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\"%V\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&We(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&We(e.Ka%400-1))&&t++}return i(t,2)},\"%w\":e=>e.Ga,\"%W\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\"%y\":e=>(e.Ka+1900).toString().substring(2),\"%Y\":e=>e.Ka+1900,\"%z\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.lb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\0\\0\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\"g\"),c[l](a)));return l=function(e){var t=Array(Oe(e)+1);return Me(e,t,0,t.length),t}(r=r.replace(/\\0\\0/g,\"%\")),l.length>t?0:(ut(l,e),l.length-1)}he.Pa();var ft=[null,le,pe,ye,_e,we,Se,Ae,Re,Ee,Fe,De,Ce,Ie,ke,xe,Ye,Ne,je,$e,Ze,Qe,et,tt,nt],ct={b:function(e,t,r){throw new be(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){ht(e>>>0,!g,1,!p,131072,!1),he.Sa()},k:function(e){e>>>=0,y?postMessage({cmd:\"cleanupThread\",thread:e}):ie(e)},I:ve,h:_e,T:we,E:Se,G:Ae,U:Re,R:Ee,J:Fe,Q:De,o:Ce,F:Ie,C:ke,S:xe,D:Ye,q:()=>!0,A:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Pe())):y?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=he.Fa[e])&&e.postMessage({cmd:\"checkMailbox\"})},L:function(){return-1},M:Ue,p:function(e){b&&he.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getUTCSeconds(),n()[r+4>>2>>>0]=e.getUTCMinutes(),n()[r+8>>2>>>0]=e.getUTCHours(),n()[r+12>>2>>>0]=e.getUTCDate(),n()[r+16>>2>>>0]=e.getUTCMonth(),n()[r+20>>2>>>0]=e.getUTCFullYear()-1900,n()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getSeconds(),n()[r+4>>2>>>0]=e.getMinutes(),n()[r+8>>2>>>0]=e.getHours(),n()[r+12>>2>>>0]=e.getDate(),n()[r+16>>2>>>0]=e.getMonth(),n()[r+20>>2>>>0]=e.getFullYear()-1900,n()[r+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Ge:Le)[e.getMonth()]+e.getDate()-1|0,n()[r+28>>2>>>0]=t,n()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var a=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=a&&e.getTimezoneOffset()==Math.min(a,t)),n()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(n()[e+20>>2>>>0]+1900,n()[e+16>>2>>>0],n()[e+12>>2>>>0],n()[e+8>>2>>>0],n()[e+4>>2>>>0],n()[e>>2>>>0],0),r=n()[e+32>>2>>>0],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,o);return 0>r?n()[e+32>>2>>>0]=Number(o!=i&&u==a):0<r!=(u==a)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?u:o)-a))),n()[e+24>>2>>>0]=t.getDay(),r=(We(t.getFullYear())?Ge:Le)[t.getMonth()]+t.getDate()-1|0,n()[e+28>>2>>>0]=r,n()[e>>2>>>0]=t.getSeconds(),n()[e+4>>2>>>0]=t.getMinutes(),n()[e+8>>2>>>0]=t.getHours(),n()[e+12>>2>>>0]=t.getDate(),n()[e+16>>2>>>0]=t.getMonth(),n()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,vt((K=e,1<=+Math.abs(K)?0<K?+Math.floor(K/4294967296)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)),e>>>0},r:Ne,s:je,z:function(e,t,r){function o(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);a()[e>>2>>>0]=60*c,n()[t>>2>>>0]=Number(i!=f),e=o(u),t=o(s),e=Be(e),t=Be(t),f<i?(a()[r>>2>>>0]=e,a()[r+4>>2>>>0]=t):(a()[r>>2>>>0]=t,a()[r+4>>2>>>0]=e)},c:()=>{ee(\"\")},l:function(){},i:function(){return Date.now()},V:()=>{throw z+=1,\"unwind\"},B:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return b?require(\"os\").cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(he.pb=t>>>0,Ke.length=r,t=n>>>0>>3,n=0;n<r;n++)Ke[n]=o()[t+n>>>0];return ft[e].apply(null,Ke)},y:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-F.buffer.byteLength+65535>>>16;try{F.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:$e,P:Ze,j:de,g:Qe,n:et,w:tt,m:nt,x:function(e,t){return e>>>=0,t>>>=0,at(r().subarray(e>>>0,e+t>>>0)),0},a:F||s.wasmMemory,H:st,d:function(e,t,r,n){return st(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,D=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),he.Ta.push(D.sa),L=D.ta,j.unshift(D.W),C=t,Q(),e}var t={a:ct};if(Z(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){R(\"Module.instantiateWasm callback failed with error: \"+e),u(e)}(function(e,t){var r=J;return S||\"function\"!=typeof WebAssembly.instantiateStreaming||te(r)||r.startsWith(\"file://\")||b||\"function\"!=typeof fetch?ne(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\"wasm streaming compile failed: \"+n),R(\"falling back to ArrayBuffer instantiation\"),ne(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=D.X)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=D.Y)(e,t),s._OrtCreateSessionOptions=(e,t,r,n,a,o,i,u,f,c)=>(s._OrtCreateSessionOptions=D.Z)(e,t,r,n,a,o,i,u,f,c),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=D._)(e,t),s._OrtAddSessionConfigEntry=(e,t,r)=>(s._OrtAddSessionConfigEntry=D.$)(e,t,r),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=D.aa)(e),s._OrtCreateSession=(e,t,r)=>(s._OrtCreateSession=D.ba)(e,t,r),s._OrtReleaseSession=e=>(s._OrtReleaseSession=D.ca)(e),s._OrtGetInputOutputCount=(e,t,r)=>(s._OrtGetInputOutputCount=D.da)(e,t,r),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=D.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=D.fa)(e,t),s._OrtFree=e=>(s._OrtFree=D.ga)(e),s._OrtCreateTensor=(e,t,r,n,a)=>(s._OrtCreateTensor=D.ha)(e,t,r,n,a),s._OrtGetTensorData=(e,t,r,n,a)=>(s._OrtGetTensorData=D.ia)(e,t,r,n,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=D.ja)(e),s._OrtCreateRunOptions=(e,t,r,n)=>(s._OrtCreateRunOptions=D.ka)(e,t,r,n),s._OrtAddRunConfigEntry=(e,t,r)=>(s._OrtAddRunConfigEntry=D.la)(e,t,r),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=D.ma)(e),s._OrtRun=(e,t,r,n,a,o,i,u)=>(s._OrtRun=D.na)(e,t,r,n,a,o,i,u),s._OrtEndProfiling=e=>(s._OrtEndProfiling=D.oa)(e);var lt=s._pthread_self=()=>(lt=s._pthread_self=D.pa)(),dt=s._malloc=e=>(dt=s._malloc=D.qa)(e);s._free=e=>(s._free=D.ra)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=D.sa)();var ht=s.__emscripten_thread_init=(e,t,r,n,a,o)=>(ht=s.__emscripten_thread_init=D.ua)(e,t,r,n,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=D.va)();var mt,pt=(e,t,r,n)=>(pt=D.wa)(e,t,r,n),gt=e=>(gt=D.xa)(e),bt=s.__emscripten_thread_exit=e=>(bt=s.__emscripten_thread_exit=D.ya)(e),yt=s.__emscripten_check_mailbox=()=>(yt=s.__emscripten_check_mailbox=D.za)(),vt=e=>(vt=D.Aa)(e),_t=(e,t)=>(_t=D.Ba)(e,t),wt=()=>(wt=D.Ca)(),Ot=e=>(Ot=D.Da)(e),Mt=e=>(Mt=D.Ea)(e);function Tt(){function e(){if(!mt&&(mt=!0,s.calledRun=!0,!P)&&(y||me(j),i(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!y)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();B.unshift(e)}me(B)}}if(!(0<V))if(y)i(s),y||me(j),startWorker(s);else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)N.unshift(s.preRun.shift());me(N),0<V||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=F,s.stackAlloc=Mt,s.stackSave=wt,s.stackRestore=Ot,s.UTF8ToString=ce,s.stringToUTF8=Te,s.lengthBytesUTF8=Oe,s.ExitStatus=ae,s.PThread=he,$=function e(){mt||Tt(),mt||($=e)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Tt(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd&&define([],(()=>e));\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar e=moduleArg,aa,h;e.ready=new Promise((a,b)=>{aa=a;h=b});var ba=Object.assign({},e),m=\"./this.program\",q=(a,b)=>{throw b;},ca=\"object\"==typeof window,v=\"function\"==typeof importScripts,x=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=\"\",A,B,C;\nif(x){var fs=require(\"fs\"),D=require(\"path\");y=v?D.dirname(y)+\"/\":__dirname+\"/\";A=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};C=a=>{a=A(a,!0);a.buffer||(a=new Uint8Array(a));return a};B=(a,b,c,f=!0)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);fs.readFile(a,f?void 0:\"utf8\",(g,k)=>{g?c(g):b(f?k.buffer:k)})};!e.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);q=(a,b)=>{process.exitCode=\na;throw b;};e.inspect=()=>\"[Emscripten Module object]\"}else if(ca||v)v?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),0!==y.indexOf(\"blob:\")?y=y.substr(0,y.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):y=\"\",A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},v&&(C=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\nB=(a,b,c)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):c()};f.onerror=c;f.send(null)};var da=e.print||console.log.bind(console),E=e.printErr||console.error.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(m=e.thisProgram);e.quit&&(q=e.quit);var F;e.wasmBinary&&(F=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&G(\"no native wasm support detected\");\nvar H,I,J=!1,K,L,M,N;function ea(){var a=H.buffer;e.HEAP8=K=new Int8Array(a);e.HEAP16=new Int16Array(a);e.HEAP32=M=new Int32Array(a);e.HEAPU8=L=new Uint8Array(a);e.HEAPU16=new Uint16Array(a);e.HEAPU32=N=new Uint32Array(a);e.HEAPF32=new Float32Array(a);e.HEAPF64=new Float64Array(a)}var fa=[],ha=[],ia=[];function ja(){var a=e.preRun.shift();fa.unshift(a)}var O=0,P=null,Q=null;\nfunction G(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";E(a);J=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");h(a);throw a;}function ka(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var R;R=\"ort-wasm.wasm\";if(!ka(R)){var la=R;R=e.locateFile?e.locateFile(la,y):y+la}function ma(a){if(a==R&&F)return new Uint8Array(F);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction na(a){if(!F&&(ca||v)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ma(a));if(B)return new Promise((b,c)=>{B(a,f=>b(new Uint8Array(f)),c)})}return Promise.resolve().then(()=>ma(a))}function oa(a,b,c){return na(a).then(f=>WebAssembly.instantiate(f,b)).then(f=>f).then(c,f=>{E(\"failed to asynchronously prepare wasm: \"+f);G(f)})}\nfunction pa(a,b){var c=R;return F||\"function\"!=typeof WebAssembly.instantiateStreaming||ka(c)||c.startsWith(\"file://\")||x||\"function\"!=typeof fetch?oa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(f=>WebAssembly.instantiateStreaming(f,a).then(b,function(g){E(\"wasm streaming compile failed: \"+g);E(\"falling back to ArrayBuffer instantiation\");return oa(c,a,b)}))}var S;function qa(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}var T=a=>{for(;0<a.length;)a.shift()(e)};\nfunction ra(a){this.qa=a-24;this.va=function(b){N[this.qa+4>>2>>>0]=b};this.ua=function(b){N[this.qa+8>>2>>>0]=b};this.sa=function(b,c){this.ta();this.va(b);this.ua(c)};this.ta=function(){N[this.qa+16>>2>>>0]=0}}\nvar sa=0,ta=0,ua=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,va=(a,b,c)=>{b>>>=0;var f=b+c;for(c=b;a[c]&&!(c>=f);)++c;if(16<c-b&&a.buffer&&ua)return ua.decode(a.subarray(b,c));for(f=\"\";b<c;){var g=a[b++];if(g&128){var k=a[b++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|k);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|k<<6|l:(g&7)<<18|k<<12|l<<6|a[b++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f},\nU=(a,b)=>(a>>>=0)?va(L,a,b):\"\",V=a=>{for(var b=0,c=0;c<a.length;++c){var f=a.charCodeAt(c);127>=f?b++:2047>=f?b+=2:55296<=f&&57343>=f?(b+=4,++c):b+=3}return b},W=(a,b,c,f)=>{c>>>=0;if(!(0<f))return 0;var g=c;f=c+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var r=a.charCodeAt(++k);l=65536+((l&1023)<<10)|r&1023}if(127>=l){if(c>=f)break;b[c++>>>0]=l}else{if(2047>=l){if(c+1>=f)break;b[c++>>>0]=192|l>>6}else{if(65535>=l){if(c+2>=f)break;b[c++>>>0]=224|l>>12}else{if(c+3>=\nf)break;b[c++>>>0]=240|l>>18;b[c++>>>0]=128|l>>12&63}b[c++>>>0]=128|l>>6&63}b[c++>>>0]=128|l&63}}b[c>>>0]=0;return c-g},X=a=>0===a%4&&(0!==a%100||0===a%400),wa=[0,31,60,91,121,152,182,213,244,274,305,335],xa=[0,31,59,90,120,151,181,212,243,273,304,334],Ca=a=>{var b=V(a)+1,c=ya(b);c&&W(a,L,c,b);return c},Y={},Ea=()=>{if(!Da){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\n\"_\")+\".UTF-8\",_:m||\"./this.program\"},b;for(b in Y)void 0===Y[b]?delete a[b]:a[b]=Y[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Da=c}return Da},Da,Fa=[null,[],[]],Ga=()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return c=>crypto.getRandomValues(c);if(x)try{var a=require(\"crypto\");if(a.randomFillSync)return c=>a.randomFillSync(c);var b=a.randomBytes;return c=>(c.set(b(c.byteLength)),c)}catch(c){}G(\"initRandomDevice\")},Ha=a=>(Ha=Ga())(a),Ia=[31,29,31,30,31,30,31,31,30,\n31,30,31],Ja=[31,28,31,30,31,30,31,31,30,31,30,31];function Ka(a){var b=Array(V(a)+1);W(a,b,0,b.length);return b}\nfunction La(a,b,c,f){function g(d,n,p){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<n;)d=p[0]+d;return d}function k(d,n){return g(d,n,\"0\")}function l(d,n){function p(za){return 0>za?-1:0<za?1:0}var z;0===(z=p(d.getFullYear()-n.getFullYear()))&&0===(z=p(d.getMonth()-n.getMonth()))&&(z=p(d.getDate()-n.getDate()));return z}function r(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var n=d.ma;for(d=new Date((new Date(d.na+1900,0,1)).getTime());0<n;){var p=d.getMonth(),z=(X(d.getFullYear())?Ia:Ja)[p];if(n>z-d.getDate())n-=z-d.getDate()+1,d.setDate(1),11>p?d.setMonth(p+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+n);break}}p=new Date(d.getFullYear()+1,0,4);n=r(new Date(d.getFullYear(),\n0,4));p=r(p);return 0>=l(n,d)?0>=l(p,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;f>>>=0;var t=M[f+40>>2>>>0];f={ya:M[f>>2>>>0],xa:M[f+4>>2>>>0],oa:M[f+8>>2>>>0],ra:M[f+12>>2>>>0],pa:M[f+16>>2>>>0],na:M[f+20>>2>>>0],ha:M[f+24>>2>>>0],ma:M[f+28>>2>>>0],Aa:M[f+32>>2>>>0],wa:M[f+36>>2>>>0],za:t?U(t):\"\"};c=U(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\n\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in t)c=c.replace(new RegExp(u,\"g\"),t[u]);var Aa=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),Ba=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":d=>Aa[d.ha].substring(0,3),\"%A\":d=>Aa[d.ha],\"%b\":d=>\nBa[d.pa].substring(0,3),\"%B\":d=>Ba[d.pa],\"%C\":d=>k((d.na+1900)/100|0,2),\"%d\":d=>k(d.ra,2),\"%e\":d=>g(d.ra,2,\" \"),\"%g\":d=>w(d).toString().substring(2),\"%G\":d=>w(d),\"%H\":d=>k(d.oa,2),\"%I\":d=>{d=d.oa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":d=>{for(var n=0,p=0;p<=d.pa-1;n+=(X(d.na+1900)?Ia:Ja)[p++]);return k(d.ra+n,3)},\"%m\":d=>k(d.pa+1,2),\"%M\":d=>k(d.xa,2),\"%n\":()=>\"\\n\",\"%p\":d=>0<=d.oa&&12>d.oa?\"AM\":\"PM\",\"%S\":d=>k(d.ya,2),\"%t\":()=>\"\\t\",\"%u\":d=>d.ha||7,\"%U\":d=>k(Math.floor((d.ma+7-d.ha)/7),2),\"%V\":d=>\n{var n=Math.floor((d.ma+7-(d.ha+6)%7)/7);2>=(d.ha+371-d.ma-2)%7&&n++;if(n)53==n&&(p=(d.ha+371-d.ma)%7,4==p||3==p&&X(d.na)||(n=1));else{n=52;var p=(d.ha+7-d.ma-1)%7;(4==p||5==p&&X(d.na%400-1))&&n++}return k(n,2)},\"%w\":d=>d.ha,\"%W\":d=>k(Math.floor((d.ma+7-(d.ha+6)%7)/7),2),\"%y\":d=>(d.na+1900).toString().substring(2),\"%Y\":d=>d.na+1900,\"%z\":d=>{d=d.wa;var n=0<=d;d=Math.abs(d)/60;return(n?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":d=>d.za,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in t)c.includes(u)&&\n(c=c.replace(new RegExp(u,\"g\"),t[u](f)));c=c.replace(/\\0\\0/g,\"%\");u=Ka(c);if(u.length>b)return 0;K.set(u,a>>>0);return u.length-1}\nvar Na={a:function(a,b,c){a>>>=0;(new ra(a)).sa(b>>>0,c>>>0);sa=a;ta++;throw sa;},e:function(){return 0},I:function(){},y:function(){},A:function(){},K:function(){return 0},G:function(){},B:function(){},F:function(){},g:function(){},z:function(){},w:function(){},H:function(){},x:function(){},k:()=>!0,n:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);M[c>>2>>>0]=a.getUTCSeconds();M[c+4>>2>>>0]=a.getUTCMinutes();M[c+8>>2>>>0]=a.getUTCHours();M[c+12>>2>>>\n0]=a.getUTCDate();M[c+16>>2>>>0]=a.getUTCMonth();M[c+20>>2>>>0]=a.getUTCFullYear()-1900;M[c+24>>2>>>0]=a.getUTCDay();M[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},o:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);M[c>>2>>>0]=a.getSeconds();M[c+4>>2>>>0]=a.getMinutes();M[c+8>>2>>>0]=a.getHours();M[c+12>>2>>>0]=a.getDate();M[c+16>>2>>>0]=a.getMonth();M[c+20>>2>>>0]=a.getFullYear()-1900;M[c+24>>2>>>0]=a.getDay();M[c+28>>2>>>\n0]=(X(a.getFullYear())?wa:xa)[a.getMonth()]+a.getDate()-1|0;M[c+36>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var f=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();M[c+32>>2>>>0]=(b!=f&&a.getTimezoneOffset()==Math.min(f,b))|0},p:function(a){a>>>=0;var b=new Date(M[a+20>>2>>>0]+1900,M[a+16>>2>>>0],M[a+12>>2>>>0],M[a+8>>2>>>0],M[a+4>>2>>>0],M[a>>2>>>0],0),c=M[a+32>>2>>>0],f=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),\nk=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(k,g);0>c?M[a+32>>2>>>0]=Number(g!=k&&l==f):0<c!=(l==f)&&(g=Math.max(k,g),b.setTime(b.getTime()+6E4*((0<c?l:g)-f)));M[a+24>>2>>>0]=b.getDay();M[a+28>>2>>>0]=(X(b.getFullYear())?wa:xa)[b.getMonth()]+b.getDate()-1|0;M[a>>2>>>0]=b.getSeconds();M[a+4>>2>>>0]=b.getMinutes();M[a+8>>2>>>0]=b.getHours();M[a+12>>2>>>0]=b.getDate();M[a+16>>2>>>0]=b.getMonth();M[a+20>>2>>>0]=b.getYear();a=b.getTime()/1E3;return Ma((S=a,1<=+Math.abs(S)?0<S?+Math.floor(S/\n4294967296)>>>0:~~+Math.ceil((S-+(~~S>>>0))/4294967296)>>>0:0)),a>>>0},l:function(){return-52},m:function(){},u:function(a,b,c){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}c>>>=0;var g=(new Date).getFullYear(),k=new Date(g,0,1),l=new Date(g,6,1);g=k.getTimezoneOffset();var r=l.getTimezoneOffset();N[a>>>0>>2>>>0]=60*Math.max(g,r);M[b>>>0>>2>>>0]=Number(g!=r);a=f(k);b=f(l);a=Ca(a);b=Ca(b);r<g?(N[c>>2>>>0]=a,N[c+4>>2>>>0]=b):(N[c>>2>>>0]=b,N[c+4>>2>>>0]=a)},d:()=>{G(\"\")},\nh:function(){return Date.now()},v:function(){return 4294901760},b:()=>performance.now(),J:function(a,b,c){b>>>=0;return L.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},t:function(a){a>>>=0;var b=L.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var f=b*(1+.2/c);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);a:{g=g.min.call(g,4294901760,f+(65536-f%65536)%65536)-H.buffer.byteLength+65535>>>16;try{H.grow(g);ea();var k=1;break a}catch(l){}k=void 0}if(k)return!0}return!1},D:function(a,b){a>>>=\n0;b>>>=0;var c=0;Ea().forEach(function(f,g){var k=b+c;g=N[a+4*g>>2>>>0]=k;for(k=0;k<f.length;++k)K[g++>>0>>>0]=f.charCodeAt(k);K[g>>0>>>0]=0;c+=f.length+1});return 0},E:function(a,b){a>>>=0;b>>>=0;var c=Ea();N[a>>2>>>0]=c.length;var f=0;c.forEach(function(g){f+=g.length+1});N[b>>2>>>0]=f;return 0},s:a=>{if(!noExitRuntime){if(e.onExit)e.onExit(a);J=!0}q(a,new qa(a))},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(a,b,c,f){b>>>=0;c>>>=0;f>>>=0;for(var g=0,k=0;k<c;k++){var l=N[b>>\n2>>>0],r=N[b+4>>2>>>0];b+=8;for(var w=0;w<r;w++){var t=L[l+w>>>0],u=Fa[a];0===t||10===t?((1===a?da:E)(va(u,0)),u.length=0):u.push(t)}g+=r}N[f>>2>>>0]=g;return 0},r:function(a,b){a>>>=0;Ha(L.subarray(a>>>0,a+(b>>>0)>>>0));return 0},C:La,c:function(a,b,c,f){return La(a>>>0,b>>>0,c>>>0,f>>>0)}};\n(function(){function a(c){c=c.exports;I=c=Oa(c);H=I.L;ea();ha.unshift(I.M);O--;e.monitorRunDependencies&&e.monitorRunDependencies(O);if(0==O&&(null!==P&&(clearInterval(P),P=null),Q)){var f=Q;Q=null;f()}return c}var b={a:Na};O++;e.monitorRunDependencies&&e.monitorRunDependencies(O);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){E(\"Module.instantiateWasm callback failed with error: \"+c),h(c)}pa(b,function(c){a(c.instance)}).catch(h);return{}})();\ne._OrtInit=(a,b)=>(e._OrtInit=I.N)(a,b);e._OrtGetLastError=(a,b)=>(e._OrtGetLastError=I.O)(a,b);e._OrtCreateSessionOptions=(a,b,c,f,g,k,l,r,w,t)=>(e._OrtCreateSessionOptions=I.P)(a,b,c,f,g,k,l,r,w,t);e._OrtAppendExecutionProvider=(a,b)=>(e._OrtAppendExecutionProvider=I.Q)(a,b);e._OrtAddSessionConfigEntry=(a,b,c)=>(e._OrtAddSessionConfigEntry=I.R)(a,b,c);e._OrtReleaseSessionOptions=a=>(e._OrtReleaseSessionOptions=I.S)(a);e._OrtCreateSession=(a,b,c)=>(e._OrtCreateSession=I.T)(a,b,c);\ne._OrtReleaseSession=a=>(e._OrtReleaseSession=I.U)(a);e._OrtGetInputOutputCount=(a,b,c)=>(e._OrtGetInputOutputCount=I.V)(a,b,c);e._OrtGetInputName=(a,b)=>(e._OrtGetInputName=I.W)(a,b);e._OrtGetOutputName=(a,b)=>(e._OrtGetOutputName=I.X)(a,b);e._OrtFree=a=>(e._OrtFree=I.Y)(a);e._OrtCreateTensor=(a,b,c,f,g)=>(e._OrtCreateTensor=I.Z)(a,b,c,f,g);e._OrtGetTensorData=(a,b,c,f,g)=>(e._OrtGetTensorData=I._)(a,b,c,f,g);e._OrtReleaseTensor=a=>(e._OrtReleaseTensor=I.$)(a);\ne._OrtCreateRunOptions=(a,b,c,f)=>(e._OrtCreateRunOptions=I.aa)(a,b,c,f);e._OrtAddRunConfigEntry=(a,b,c)=>(e._OrtAddRunConfigEntry=I.ba)(a,b,c);e._OrtReleaseRunOptions=a=>(e._OrtReleaseRunOptions=I.ca)(a);e._OrtRun=(a,b,c,f,g,k,l,r)=>(e._OrtRun=I.da)(a,b,c,f,g,k,l,r);e._OrtEndProfiling=a=>(e._OrtEndProfiling=I.ea)(a);var ya=e._malloc=a=>(ya=e._malloc=I.fa)(a);e._free=a=>(e._free=I.ga)(a);var Ma=a=>(Ma=I.ia)(a),Pa=()=>(Pa=I.ja)(),Qa=a=>(Qa=I.ka)(a),Ra=a=>(Ra=I.la)(a);\nfunction Oa(a){a=Object.assign({},a);var b=f=>()=>f()>>>0,c=f=>g=>f(g)>>>0;a.__errno_location=b(a.__errno_location);a.malloc=c(a.malloc);a.stackSave=b(a.stackSave);a.stackAlloc=c(a.stackAlloc);return a}e.stackAlloc=Ra;e.stackSave=Pa;e.stackRestore=Qa;e.UTF8ToString=U;e.stringToUTF8=(a,b,c)=>W(a,L,b,c);e.lengthBytesUTF8=V;var Z;Q=function Sa(){Z||Ta();Z||(Q=Sa)};\nfunction Ta(){function a(){if(!Z&&(Z=!0,e.calledRun=!0,!J)){T(ha);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ia.unshift(b)}T(ia)}}if(!(0<O)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ja();T(fa);0<O||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Ta();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new tensor_js_1.Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ?\n        (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n        'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nclass Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    if (arg0 === 'float16') {\n                        // Throw error here because when user try to use number array as data,\n                        // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                        // Uint16Array.from(arg1) which generates wrong data.\n                        throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                    }\n                    else if (arg0 === 'uint64' || arg0 === 'int64') {\n                        // use 'as any' here because:\n                        // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                        // see https://github.com/microsoft/TypeScript/issues/17002\n                        // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()' does\n                        // not accept parameter mapFn.\n                        // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                        // type.\n                        // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1, BigInt);\n                    }\n                    else {\n                        // assume 'arg1' is of type \"readonly number[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1);\n                    }\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => new tensor_js_1.Tensor(tensor.type, tensor.data, dims);\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.16.0';\n//# sourceMappingURL=version.js.map","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","init","createSessionHandler","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","wasmBackend","OnnxruntimeWebAssemblyBackend","registerBackend","versions","web","version","attribute","Object","assign","this","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","Map","attr","onnx","AttributeProto","set","Attribute","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","dispose","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","glsl","getGlsl","floatTextureSetRGBASource","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","line1","line2","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","swapLastDimsSnippet","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","slice","newInputShape","squeezeInputShape","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","params","index","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","node","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","EncodingGlslLib","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","match","inlineDefs","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","keys","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","shift","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getFetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","orank","irank","iDrank","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","declareC","broadcastC","calculateC","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","getBiasMethod","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","getOutputCoordsSnippet","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","padFunction","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","poolingCode","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","padCode","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","oRank","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","location","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","constructor","allocate","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","maxCounter","_counter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","n","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","initializer","GraphImpl","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","_nodeProto","NodeProto","opType","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","next","child","_severity","_content","_category","severity","content","category","console","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","startTime","endCallback","timer","ctx","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","create","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","bb","bb_pos","__init","getRootAsShape","Shape","readInt32","getSizePrefixedRootAsShape","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","startShape","builder","startObject","addDim","addFieldOffset","createDimVector","startVector","addOffset","endVector","startDimVector","numElems","endShape","endObject","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","denotation","optionalEncoding","__string","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","startDimensionValue","addDimType","addFieldInt8","addDimValue","addFieldInt64","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addFieldInt32","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","readUint32","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","prep","writeInt32","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","addInt32","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","addInt64","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","addInt8","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","values","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","readFloat32","floatsLength","graphsLength","startAttribute","addF","addFieldFloat32","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","addFloat32","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","producerName","producerVersion","modelVersion","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","requiredField","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","__has_identifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","_strides","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","fromData","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","typeProto","tensorDataTypeStringToEnum","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","supportTimestampQuery","kernelCustomData","gpu","requestAdapter","adapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","maxBufferSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","features","requiredFeatures","requestDevice","device","gpuDataManager","createGpuDataManager","kernelPersistentData","configureLogger","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputInfos","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","download","getTargetBuffer","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","WebGpuBackend","getFloat32Array","elementCount","HEAP8","getBigInt64Array","getInt32Array","newDims","TensorViewImpl","contextDataOffset","customDataOffset","customDataSize","heapU32","HEAPU32","opKernelContext","outputCount","currentKernelCustomData","HEAPU8","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","isSourceGpu","dataOffset","ComputeContextImpl","configLogLevel","logLevelPrefix","$configLogLevel","$debug","LOG","level","messageLevel","logLevelStringToEnum","args","isChannelLast","calcNormalizedBufferSize","guid","storageCache","downloadCache","freeBuffers","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","buffers","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","storage","GpuDataManagerImpl","acosh","argMax","parseArgMinMaxAttributes","argMin","asinh","atanh","pool","clipV10","cosh","parseAlphaAttributes","erf","expand","gelu","parseGlobalMaxPoolAttributes","instanceNorm","parseInstanceNormAttributes","layerNorm","parseLayerNormAttributes","reciprocal","reduceL1","reduceL2","reduceLogSumExp","reduceSumSquare","parseResizeAttributes","sinh","skipLayerNorm","parseSkipLayerNormAttributes","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","createConvTranspose2DProgramInfo","squeezeOutputShapeFunction","shaderHelper","rowDim","colDim","channelDim","outputSize","workPerThread","inputVariable","dy","outputVariable","codeSnippet4","codeSnippet","setByOffset","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createConvTranspose2DOpProgramShaderSource","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createArgMinMaxProgramInfoLoader","updatedAttributes","selectLastIndex","createArgMinMaxAttributesFromInputs","getByOffset","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","vectorize","sharedDimension","dimA","dimsOutput","doBroadcast","typeA","typeB","typeOutput","expressionScalar","expressionVector","vecSize","scalar","vector","assignment","broadcastImpl","calcOffsetImpl","singleAssignment","expressionA","expressionB","declareVariables","createBinaryOpProgramShader","createBinaryOpProgramInfo","roundStr","WORKGROUP_SIZE","getWgslMappedType","components","tensorTypeToWsglStorageType","mappedType","createIndicesHelper","isInput","indicesType","storageType","normalizeDim","implementationUsed","setByIndices","getByIndices","o2iSnippet","offsetToIndicesImplementation","indicesToOffsetImplementation","getByIndicesImplementation","getImplementation","setByIndicesImplementation","setImplementation","impls","varOffset","varIndices","indicesGet","indicesSet","indicesAndValue","normalizedIndices","indicesHelpers","sizeInCode","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","paramList","globalIdxDefinition","declareVariable","bindingIndex","access","createShaderHelper","ShaderHelperImpl","adjustedAxis","inputVars","indicesAxis","returnSnippet","assignOutputData","createConcatProgramInfo","createConcatProgramInfoLoader","createGroupedConvProgramInfoLoader","getActicationSnippet","createGroupedConvProgramInfo","updateOutputShape","wIsConst","createConvTranspose2DProgramInfoLoader","convTranspose1d","weightTransposeAttribute","auto_pad","kernel_shape","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","expandProgramMetadata","getAdjustedShape","diff","shapeIndex","inputShapeIndex","activation_params","indicesShape","inputDataType","includes","indicesElementSize","dataBatchElements","gatheredBatchElements","axisDimLimit","inputSize","totalGathers","calculateAlpha","m","broadcastM","broadcastN","offsetC","inputStorageBuffersDeclarations","H","normCount","createInstanceNormNHWCProgramInfo","normSize","scaleSize","biasSize","createInstanceNormProgramInfo","meanInvStdDevDim","hasMeanDataOutput","hasInvStdOutput","createLayerNormProgramInfo","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","noOp","axesInput","noopWithEmptyAxes","reduceOnAllAxes","inputOffsetAssignment","initinputOffsetLet","initinputOffsetVar","initinputOffset","l","createReduceProgramInfoLoader","createReduceAttributesFromInputs","_output","createResizeProgramInfoLoader","opsetVersion","sizes","roi","inputTensor","scalesInput","roiInput","roiTmp","roiLocal","updateRoI","round","initOutputShape","keepAspectRatioPolicy","scaleInPolicy","MAX_VALUE","MIN_VALUE","adjustedOutputShape","adjustOutputShape","noScale","coordinateTransferMode","checkInputIndices","getNearestPixelFromOriginal","calculateInputIndicesFromOutputIndices","calculateOriginalIndicesFromOutputIndices","batchIdx","heightIdx","widthIdx","bilinearInterpolation","cubicCoeffA","createCubicInterpolationFunction","direction","bicubicInterpolation","createResizeProgramInfo","customDataBuffer","getOpsetVersionFromCustomDataBuffer","roiInputIndex","scalesInputIndex","sizesInputIndex","validateScales","newScales","updateScales","skip","gamma","hiddenSize","sequenceLength","isTraining","hasBetaInput","hasBiasInput","hasMeanOutput","hasInvStdDevOutput","hasInputSkipBiasSumOutput","bindingNumber","createSkipLayerNormProgramInfo","createSkipLayerNormProgramInfoLoader","readInput","fixStartEndValues","steps","newValue","programInfoLoader","createSliceAttributesFromInputs","signs","sign","numSteps","newEnd","newStart","outputTensorInfo","calculateInputIndicesImpl","createSliceProgramInfoLoader","_shaderHelper","createSoftmaxProgramInfo","splitSizes","createSplitAttributesFromInputs","outputsTensorInfo","outputShapes","writeBufferDataImpl","createSplitProgramInfoLoader","getRepeats","repeatsTensorView","repeats","permAttr","permFunctionBody","datasize","expression","createElementwiseProgramShader","erfImpl","profilingEnabled","webgpu","profilingMode","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","profilingQueryData","QUERY_RESOLVE","resolveQuerySet","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","isSafeInteger","normalizedDispatchGroupSize","userCode","code","additionalImplementations","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","path","response","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","_OrtGetInputOutputCount","HEAP32","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","typedArrayConstructor","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","F","W","Y","U","u","ready","h","importScripts","ENVIRONMENT_IS_PTHREAD","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","T","writeSync","S","A","print","R","printErr","quit","wasmBinary","E","noExitRuntime","ee","I","P","HEAP16","HEAPU16","HEAPF32","HEAPF64","G","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","L","q","J","V","$","Z","monitorRunDependencies","Q","clearInterval","onAbort","RuntimeError","te","re","ne","credentials","ok","catch","instantiate","ae","oe","ie","he","Fa","ue","Za","Ia","Ha","cmd","start_routine","gb","Ya","pthread_ptr","unref","mb","se","fe","fromCharCode","ce","le","qe","hb","onExit","de","pe","La","Ta","Pa","ab","$a","receiveObjectTransfer","eb","threadInitTLS","Sa","setExitStatus","Ra","rb","gt","cb","targetThread","lt","qb","transferList","Pe","thread","loaded","alert","threadId","text","filename","lineno","on","handlers","urlOrBlob","wasmModule","Xa","me","establishStackSpace","_t","Ot","ge","be","Oa","Wa","Va","Ua","ye","ve","ob","_e","we","invokeEntryPoint","bt","Oe","charCodeAt","Me","Te","Se","Ae","Re","Ee","Fe","De","Ce","Ie","ke","xe","Ye","He","Ue","Atomics","nb","store","yt","__emscripten_thread_mailbox_await","checkMailbox","We","Ge","Le","Ne","je","Be","dt","ze","wt","arguments","Mt","pt","Je","Ke","Ve","Xe","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","$e","Ze","Qe","et","tt","rt","nt","at","crypto","getRandomValues","randomFillSync","randomBytes","ot","it","ut","st","getFullYear","getMonth","getDate","getDay","Ja","Ka","getTime","setDate","setMonth","setFullYear","kb","jb","Ma","Qa","Na","Ga","sb","ib","lb","ft","ct","ht","ref","NaN","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","vt","toTimeString","timeOrigin","pb","apply","grow","__errno_location","pthread_self","malloc","sa","ta","instantiateWasm","instantiateStreaming","instance","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","_pthread_self","pa","qa","ra","__emscripten_tls_init","__emscripten_thread_init","ua","__emscripten_thread_crashed","va","mt","wa","xa","__emscripten_thread_exit","ya","__emscripten_check_mailbox","za","Aa","Ba","Ca","Da","Ea","Tt","calledRun","onRuntimeInitialized","postRun","startWorker","preRun","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","moduleArg","fs","copyWithin","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","backends","backendsSortedByPriority","priority","currentBackend","backendHints","backendNames","errors","backendName","backendInfo","isInitializing","initPromise","backend_impl_js_1","version_js_1","logLevelValue","common","env_impl_js_1","__createBinding","k2","desc","getOwnPropertyDescriptor","__exportStar","tensor_js_1","isFetchesEmpty","isFetches","arg1Keys","results","returnValue","static","filePathOrUint8Array","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","pixels2DContext","tensorLayout","inputformat","norm","normMean","normBias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","fillStyle","fillRect","toDataURL","image","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromImage","bufferToTensor","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","img","tempCanvas","putImageData","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_utils_impl_js_1","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","checkBigInt","BigInt","firstElementType","calculateSize","toImageData","tensorReshape","tensor_impl_js_1","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lessThanOrEqual","lte","greaterThan","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}