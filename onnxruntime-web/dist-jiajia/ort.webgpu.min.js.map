{"version":3,"file":"ort.webgpu.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/argminmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/concat.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/expand.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gather.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/instance-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/reduce.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/resize.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/slice.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/softmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/split.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/tile.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/wasm-utils.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://ort/./lib/wasm/binding/ort-wasm-simd-threaded.jsep.js","webpack://ort/./lib/wasm/binding/ort-wasm-simd.jsep.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/../common/dist/cjs/backend-impl.js","webpack://ort/../common/dist/cjs/backend.js","webpack://ort/../common/dist/cjs/env-impl.js","webpack://ort/../common/dist/cjs/env.js","webpack://ort/../common/dist/cjs/index.js","webpack://ort/../common/dist/cjs/inference-session-impl.js","webpack://ort/../common/dist/cjs/inference-session.js","webpack://ort/../common/dist/cjs/onnx-value.js","webpack://ort/../common/dist/cjs/tensor-conversion-impl.js","webpack://ort/../common/dist/cjs/tensor-factory-impl.js","webpack://ort/../common/dist/cjs/tensor-impl.js","webpack://ort/../common/dist/cjs/tensor-utils-impl.js","webpack://ort/../common/dist/cjs/tensor.js","webpack://ort/../common/dist/cjs/version.js","webpack://ort/./node_modules/long/umd/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\n\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {cpus} from 'os';\r\n\r\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\r\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\r\n\r\n/**\r\n * This function initializes all flags for WebAssembly.\r\n *\r\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\r\n * being created, to override default value.\r\n */\r\nexport const initializeFlags = (): void => {\r\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\r\n    env.wasm.initTimeout = 0;\r\n  }\r\n\r\n  if (typeof env.wasm.simd !== 'boolean') {\r\n    env.wasm.simd = true;\r\n  }\r\n\r\n  if (typeof env.wasm.proxy !== 'boolean') {\r\n    env.wasm.proxy = false;\r\n  }\r\n\r\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\r\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\r\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\r\n  }\r\n};\r\n\r\nclass OnnxruntimeWebAssemblyBackend implements Backend {\r\n  async init(): Promise<void> {\r\n    // populate wasm flags\r\n    initializeFlags();\r\n\r\n    // init wasm\r\n    await initializeWebAssemblyInstance();\r\n  }\r\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\r\n    await handler.loadModel(pathOrBuffer, options);\r\n    return Promise.resolve(handler);\r\n  }\r\n}\r\n\r\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\r\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\r\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\r\n// So we import code inside the if-clause to allow terser remove the code safely.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend, env} from 'onnxruntime-common';\r\nimport {version} from './version';\r\n\r\nif (!BUILD_DEFS.DISABLE_WEBGL) {\r\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\r\n  registerBackend('webgl', onnxjsBackend, -10);\r\n}\r\n\r\nif (!BUILD_DEFS.DISABLE_WASM) {\r\n  const wasmBackend = require('./backend-wasm').wasmBackend;\r\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\r\n    registerBackend('webgpu', wasmBackend, 5);\r\n  }\r\n  registerBackend('cpu', wasmBackend, 10);\r\n  registerBackend('wasm', wasmBackend, 10);\r\n  registerBackend('xnnpack', wasmBackend, 9);\r\n  registerBackend('webnn', wasmBackend, 9);\r\n}\r\n\r\nenv.versions.web = version;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\n\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\nimport {decodeUtf8String, LongUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return decodeUtf8String(utf8String);\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(decodeUtf8String);\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend()\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  get async(): boolean|undefined {\r\n    return env.webgl.async;\r\n  }\r\n  set async(value: boolean|undefined) {\r\n    env.webgl.async = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n      if (typeof this.async !== 'boolean') {\r\n        this.async = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\r\n              this.async}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.inputTextureLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xy, outputValue.xy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n\r\n    const swapLastDimsSnippet = `\r\n        int lastDim = coords.${fields[outRank - 1]};\r\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\r\n        coords.${fields[outRank - 2]} = lastDim;\r\n      `;\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${swapLastDimsSnippet}\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.outputTextureLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const layout = this.context.inputTextureLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(\r\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\r\n      public outputTextureLayout: TextureLayout) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(\r\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\r\n      outputTextureLayout: TextureLayout) {\r\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {createPackProgramInfoLoader} from './ops/pack';\r\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\r\nimport {encodeAsUint8} from './ops/uint8-encode';\r\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\r\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\r\n\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\r\n      const inputs =\r\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\r\n              .join('_');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputs;\r\n      return key;\r\n    };\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  /**\r\n   * @returns [width, height]\r\n   */\r\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\r\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\r\n  }\r\n\r\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\r\n    if (inputs.length < program.inputNames.length) {\r\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\r\n    }\r\n    if (program.inputNames.length !== program.inputTypes.length) {\r\n      throw new Error('input names size does not match input types');\r\n    }\r\n\r\n    // create texture info for input\r\n    const inputTextureDatas: TextureData[] = [];\r\n    for (let i = 0; i < program.inputNames.length; ++i) {\r\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\r\n    let artifact = this.session.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // create texture info for output\r\n    const outputTextureLayout = createTextureLayoutFromTextureType(\r\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\r\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\r\n\r\n    if (!artifact) {\r\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\r\n      this.session.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\r\n    return outputTextureData;\r\n  }\r\n\r\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\r\n    const outputTextureData = this.executeProgram(program, inputs);\r\n    return outputTextureData.tensor;\r\n  }\r\n\r\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    // input should match\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\r\n        throw new Error(`input[${i}] property packed inconsistent`);\r\n      }\r\n    }\r\n\r\n    // output should match\r\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, inputs, output);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\r\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\r\n\r\n    if (!td) {\r\n      // check if we have texture data in different type\r\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\r\n      if (td) {\r\n        if (textureType === TextureType.packed) {\r\n          return this.pack(td);\r\n        } else {\r\n          return this.unpack(td);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!td) {\r\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\r\n\r\n      if (textureType === TextureType.packedLastDimension) {\r\n        const group = 1;\r\n        const channels = 4;\r\n        const shape = tensor.dims;\r\n        if (shape.length === 4) {\r\n          // pre-processing for kernel data of Conv.\r\n          //\r\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\r\n          // 1. implement texture based const-folding\r\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\r\n          // 3. run the program before dotProduct.\r\n          //\r\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\r\n          const adjustedLayout =\r\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\r\n          let buffer = tensor.numberData;\r\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\r\n            const numFeatureMaps = shape[0];\r\n            const oldRowSize = shape[1] * shape[2] * shape[3];\r\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n            const newSize = numFeatureMaps * newRowSize;\r\n            buffer = new Float32Array(newSize);\r\n            for (let f = 0; f < numFeatureMaps; ++f) {\r\n              const oldOffset = f * oldRowSize;\r\n              const newOffset = f * newRowSize + f % group * oldRowSize;\r\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n            }\r\n          }\r\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n\r\n      if (textureType === TextureType.packed) {\r\n        const unpackedTextureLayout =\r\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\r\n        const unpackedTextureData = this.createTextureData(\r\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        td = this.pack(unpackedTextureData);\r\n      } else {\r\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n      }\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureLayout: TextureLayout = {\r\n      channels: inputTD.channels,\r\n      height: inputTD.height,\r\n      width: inputTD.width,\r\n      // handle reshaping into scalar Tensors\r\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n      strides: ShapeUtil.computeStrides(reshapedDims),\r\n      unpackedShape: reshapedDims,\r\n    };\r\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\r\n\r\n    // check if the reshape is 'cheap'\r\n    if (isReshapeCheap(input.dims, reshapedDims)) {\r\n      const newTextureLayout: TextureLayout = {\r\n        channels: inputTD.channels,\r\n        height: inputTD.height,\r\n        width: inputTD.width,\r\n        // handle reshaping into scalar Tensors\r\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n        strides: ShapeUtil.computeStrides(reshapedDims),\r\n        unpackedShape: reshapedDims,\r\n        isPacked: true\r\n      };\r\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n      return newTextureData.tensor;\r\n    }\r\n\r\n    const squeezedInputShape = processDims3D(input.dims);\r\n    const squeezedOutputShape = processDims3D(reshapedDims);\r\n\r\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\r\n    const squeezedOutputTensor = this.run(\r\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\r\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\r\n    return outputTensor;\r\n  }\r\n\r\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\r\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\r\n                                                  this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\r\n    if (textureData.isPacked) {\r\n      return this.readTextureAsync(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {cast, parseCastAttributes} from './ops/cast';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\r\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\r\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\r\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\r\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\r\nimport {lrn, parseLrnAttributes} from './ops/lrn';\r\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\r\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\r\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\r\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\r\nimport {reshape} from './ops/reshape';\r\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\r\nimport {shape} from './ops/shape';\r\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\r\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\r\nimport {sum} from './ops/sum';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\r\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', unaryOps.abs],\r\n  ['Acos', '', '7+', unaryOps.acos],\r\n  ['Add', '', '7+', binaryOps.add],\r\n  ['And', '', '7+', binaryOps.and],\r\n  ['Asin', '', '7+', unaryOps.asin],\r\n  ['Atan', '', '7+', unaryOps.atan],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\r\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\r\n  ['Cast', '', '6+', cast, parseCastAttributes],\r\n  ['Ceil', '', '6+', unaryOps.ceil],\r\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\r\n  ['Clip', '', '11+', unaryOps.clipV11],\r\n  ['Concat', '', '4+', concat, parseConcatAttributes],\r\n  ['Conv', '', '1+', conv, parseConvAttributes],\r\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\r\n  ['Cos', '', '7+', unaryOps.cos],\r\n  ['Div', '', '7+', binaryOps.div],\r\n  ['Dropout', '', '7+', unaryOps.identity],\r\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\r\n  ['Equal', '', '7+', binaryOps.equal],\r\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\r\n  ['Exp', '', '6+', unaryOps.exp],\r\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\r\n  ['Floor', '', '6+', unaryOps.floor],\r\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\r\n  ['Gather', '', '1+', gather, parseGatherAttributes],\r\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\r\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\r\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\r\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\r\n  ['Greater', '', '7+', binaryOps.greater],\r\n  ['Identity', '', '1+', unaryOps.identity],\r\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\r\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\r\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\r\n  ['Less', '', '7+', binaryOps.less],\r\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\r\n  ['Log', '', '6+', unaryOps.log],\r\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\r\n  ['Mul', '', '7+', binaryOps.mul],\r\n  ['Neg', '', '6+', unaryOps.neg],\r\n  ['Not', '', '1+', unaryOps.not],\r\n  ['Or', '', '7+', binaryOps.or],\r\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\r\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\r\n  ['Pow', '', '7+', binaryOps.pow],\r\n  ['PRelu', '', '7+', binaryOps.pRelu],\r\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\r\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\r\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\r\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\r\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\r\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\r\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\r\n  ['Relu', '', '6+', unaryOps.relu],\r\n  ['Reshape', '', '5+', reshape],\r\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\r\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\r\n  ['Shape', '', '1+', shape],\r\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\r\n  ['Sin', '', '7+', unaryOps.sin],\r\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\r\n  // The \"semantic\" meaning of axis has changed in opset-13.\r\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\r\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data is split.\r\n  // When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2-12', split, parseSplitAttributes],\r\n  ['Sqrt', '', '6+', unaryOps.sqrt],\r\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\r\n  ['Squeeze', '', '13+', squeezeV13],\r\n  ['Sub', '', '7+', binaryOps.sub],\r\n  ['Sum', '', '6+', sum],\r\n  ['Tan', '', '7+', unaryOps.tan],\r\n  ['Tanh', '', '6+', unaryOps.tanh],\r\n  ['Tile', '', '6+', tile],\r\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\r\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\r\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\r\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\r\n  ['Unsqueeze', '', '13+', unsqueezeV13],\r\n  ['Xor', '', '7+', binaryOps.xor],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  momentum: number;\r\n  spatial: number;\r\n}\r\n\r\nconst batchNormalizationProgramMetadata = {\r\n  name: 'BatchNormalization',\r\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n  inputTypes:\r\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\r\n};\r\n\r\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...batchNormalizationProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\r\n    (node: Graph.Node): BatchNormalizationAttributes => {\r\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\r\n      const momentum = node.attributes.getFloat('momentum', 0.9);\r\n      const spatial = node.attributes.getInt('spatial', 1);\r\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\r\n    };\r\n\r\nconst createBatchNormalizationProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\r\n        ProgramInfo => {\r\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n          const rank = inputs[0].dims.length;\r\n          const [scaleWidth, scaleHeight] =\r\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\r\n          const shaderSource = `\r\n  float process(int[${rank}] indices) {\r\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\r\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\r\n  }`;\r\n          return {\r\n            ...batchNormalizationProgramMetadata,\r\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 5) {\r\n    throw new Error('BatchNormalization requires 5 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n  const mean = inputs[3];\r\n  const var_ = inputs[4];\r\n\r\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n      var_.dims.length !== 1) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n      var_.dims[0] !== X.dims[1]) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nconst createBinaryProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        cacheHint: cacheKey,\r\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\r\n      };\r\n    };\r\n\r\nconst createBinaryProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      let outputShape = inputs[0].dims;\r\n\r\n      const usePackedTexture = handler.session.pack;\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        const outputRank = outputShape.length;\r\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n        const glsl = getGlsl(handler.session.backend.glContext.version);\r\n        const shaderSource = usePackedTexture ? `\r\n      ${glslFunc.body}\r\n      void main() {\r\n        vec4 a = getAAtOutCoords();\r\n        vec4 b = getBAtOutCoords();\r\n        vec4 result = ${glslFunc.name}(a, b);\r\n        ${glsl.output} = result;\r\n      }` :\r\n                                                `\r\n      ${glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\r\n      }`;\r\n\r\n        return {\r\n          name: glslFunc.name,\r\n          inputNames: ['A', 'B'],\r\n          inputTypes: [textureType, textureType],\r\n          output: {dims: outputShape, type: outputTensorType, textureType},\r\n          shaderSource,\r\n          hasMain: usePackedTexture\r\n        };\r\n      }\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n    ${glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\r\n\r\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\r\n\r\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\r\n\r\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\r\n\r\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\r\n\r\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\r\n\r\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\r\n\r\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\r\n\r\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\r\n\r\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\r\n\r\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\r\n\r\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ProtoUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const cast: OperatorImplementation<Tensor.DataType> =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\r\n      validateInputs(inputs);\r\n      return [handler.cast(inputs[0], to)];\r\n    };\r\n\r\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\r\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Cast requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {ConcatAttributes} from './concat';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat (packed)',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.packed),\r\n  cacheHint\r\n});\r\n\r\nconst createPackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const coords = getChannels('coords', rank);\r\n      const dtype = getCoordsDataType(rank);\r\n      const unpackChannel = unpackFromChannel();\r\n\r\n      const shapes = inputs.map(i => i.dims);\r\n      const channels = getGlChannels(rank);\r\n      const offsets: number[] = new Array(shapes.length - 1);\r\n\r\n      offsets[0] = shapes[0][axis];\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\r\n      }\r\n\r\n      const channel = channels[axis];\r\n      const lastChannels = channels.slice(-2);\r\n      const allChannels = channels.join();\r\n\r\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n        return getChannel(\r\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n        }`;\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        const shift = offsets[i - 1];\r\n        getValueSnippet += `\r\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n              return getChannel(\r\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n            }`;\r\n      }\r\n      const lastIndex = offsets.length;\r\n      const shift = offsets[offsets.length - 1];\r\n      getValueSnippet += `\r\n            return getChannel(\r\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n      const shaderSource = `\r\n          ${unpackChannel}\r\n          float getValue(${channels.map(x => 'int ' + x)}) {\r\n            ${getValueSnippet}\r\n          }\r\n\r\n          void main() {\r\n            ${dtype} coords = getOutputCoords();\r\n            int lastDim = coords.${channels[rank - 1]};\r\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\r\n            coords.${channels[rank - 2]} = lastDim;\r\n\r\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.g = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n              result.a = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.b = getValue(${coords});\r\n            }\r\n            ${glsl.output} = result;\r\n          }\r\n        `;\r\n\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createPackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\r\n  const channelIdx = channels.indexOf(channel);\r\n  const res = channels.map((c, idx) => {\r\n    if (idx === channelIdx) {\r\n      return `${c} - ${shift}`;\r\n    } else {\r\n      return c;\r\n    }\r\n  });\r\n  return res.join();\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const concat: OperatorImplementation<ConcatAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n        const output =\r\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      } else {\r\n        const output =\r\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      }\r\n    };\r\n\r\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      let previousSum = 0;\r\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n        previousSum += inputs[i].dims[axis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n      }\r\n\r\n      let getTextureIndexWhereDataResidesMethod = '';\r\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n      if (inputs.length < 5) {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n      } else {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\r\n      }\r\n\r\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\r\n      const shaderSource = `\r\n        ${fetchDataFromCorrectTextureMethod}\r\n        ${getSizeInConcatAxisValueFromIndexMethod}\r\n        ${getTextureIndexWhereDataResidesMethod}\r\n        float process(int indices[${rank}]) {\r\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\r\n\r\n          if(textureIndex != 0) {\r\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\r\n          }\r\n\r\n          return fetchDataFromCorrectTexture(textureIndex, indices);\r\n        }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\r\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\r\n`);\r\n  return `int getTextureWhereDataResides(int index) {\r\n      ${searchAxis.join('')}\r\n    }`;\r\n};\r\n\r\n// TODO: Implement BinarySearch in GLSL\r\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\r\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n\r\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\r\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return _X${i}(indices); }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\r\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\r\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    } else if (i === sizeInConcatAxis.length - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return ${sizeInConcatAxis[i]}; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].type;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  // TODO: Support string concat\r\n  if (inputType === 'string') {\r\n    throw new Error('string tensor is not supported yet');\r\n  }\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.type !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActivationSnippet} from './fuse-utils';\r\n\r\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedGroupedConvProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n      const xShape = inputs[0].dims.slice();\r\n      const wShape = inputs[1].dims.slice();\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n      Logger.verbose(\r\n          'GroupedConv',\r\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\r\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\r\n      const outputShape =\r\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n    ivec2 xRCCorner = coords.zw * strides - pads;\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n    float value = 0.0;\r\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\r\n\r\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n          continue;\r\n        }\r\n\r\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\r\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n            continue;\r\n          }\r\n\r\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createUnpackedGroupedConvProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const conv2DPackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n    };\r\n\r\nexport const conv2DPacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n\r\n      // run im2col\r\n      const im2colOutput = inferenceHandler.run(\r\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\r\n          [inputs[0]]);\r\n\r\n      // reshape kernel\r\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\r\n\r\n      // run matmul\r\n      const matmulInputs =\r\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n\r\n      // reshape output\r\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n      return outputReshaped;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\r\n\r\nconst computeTotalPad =\r\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\r\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\r\n\r\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\r\n  const smallPad = Math.floor(totalPad / 2);\r\n  if (autoPad === 'SAME_UPPER') {\r\n    pads[head] = smallPad;\r\n    pads[tail] = totalPad - smallPad;\r\n  } else if (autoPad === 'SAME_LOWER') {\r\n    pads[head] = totalPad - smallPad;\r\n    pads[tail] = smallPad;\r\n  }\r\n};\r\n\r\nconst calculateOutputShapeAndPads =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\r\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\r\n      const spatialRank = inputShape.length - 2;\r\n      const updateShape = outputShape.length === 0;\r\n      for (let i = 0; i < spatialRank; ++i) {\r\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\r\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\r\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\r\n        if (updateShape) {\r\n          outputShape.push(\r\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\r\n              pads[i] - pads[i + spatialRank]);\r\n        }\r\n      }\r\n    };\r\n\r\nexport interface ConvTransposeAttributes extends ConvAttributes {\r\n  readonly outputPadding: readonly number[];\r\n  readonly outputShape: readonly number[];\r\n}\r\n\r\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\r\n      return convTranspose2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\r\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n    };\r\n\r\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'ConvTranspose',\r\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConvTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvTransposeAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\r\n      const xShape = inputs[0].dims;\r\n      const wShape = inputs[1].dims;\r\n      const outputChannelsPerGroup = wShape[1];\r\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\r\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n\r\n    ivec2 loc = coords.zw + pads;\r\n\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\r\n\r\n    float value = ${valueInit};\r\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\r\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\r\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\r\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\r\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\r\n          ivec2 wLoc = loc - wOff;\r\n          ivec2 wLocIn = wLoc / strides;\r\n          if (\r\n            wLocIn * strides == wLoc &&\r\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\r\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\r\n          ) {\r\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\r\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\r\n            value += xVal * wVal;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConvTransposeProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n\r\n\r\nconst convTranspose2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\r\n        Tensor => {\r\n          const result = inferenceHandler.run(\r\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n          return result;\r\n        };\r\n\r\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n\r\n  const pads = attributes.pads.slice();\r\n  const outputShape = attributes.outputShape.slice();\r\n  const inputShape = inputs[0].dims;\r\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\r\n  // Similarly, automatically infer pads if not specified\r\n  calculateOutputShapeAndPads(\r\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\r\n      attributes.outputPadding, outputShape);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\r\n    (node: Graph.Node): ConvTransposeAttributes => {\r\n      const attributes = node.attributes;\r\n      const activationAttributes = parseInternalActivationAttributes(attributes);\r\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n      const dilations = attributes.getInts('dilations', [1, 1]);\r\n      const group = attributes.getInt('group', 1);\r\n      const kernelShape = attributes.getInts('kernel_shape', []);\r\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\r\n      const outputShape = attributes.getInts('output_shape', []);\r\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n      const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[0];\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  const featureMaps = inputs[1].dims[1] * attributes.group;\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // Wrong output padding dimension\r\n  if (attributes.outputPadding.length !== spatialRank) {\r\n    throw new Error(`output_padding should be ${spatialRank}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // as with kernelShape, must have same number of spatial dims as input\r\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\r\n    throw new Error('invalid output shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('ConvTranspose input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {conv2DPacked} from './conv-pack';\r\nimport {createDotProductProgramInfoLoader} from './dot-product';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createIm2ColProgramInfoLoader} from './im2col';\r\nimport {createMatmulProgramInfoLoader} from './matmul';\r\n\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(2);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputSpatialShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n}\r\n\r\nexport const conv: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\r\n      return conv2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst conv2d: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n      const packMode = inferenceHandler.session.pack;\r\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\r\n      if (adjustedAttributes.group > 1) {\r\n        const result = inferenceHandler.run(\r\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\r\n        return [result];\r\n      } else if (isPointwise && packMode) {\r\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\r\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else {\r\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      }\r\n    };\r\n\r\nconst conv2DUnpackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\r\n    };\r\n\r\nconst conv2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const xIm2Col = inferenceHandler.run(\r\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\r\n\r\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\r\n      const output = inferenceHandler.run(\r\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\r\n      return output;\r\n    };\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\r\n  const attributes = node.attributes;\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n  const dilations = attributes.getInts('dilations', [1, 1]);\r\n  const group = attributes.getInt('group', 1);\r\n  const kernelShape = attributes.getInts('kernel_shape', []);\r\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n  const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface DepthToSpaceAttributes {\r\n  mode: 'DCR'|'CRD';\r\n  blocksize: number;\r\n}\r\n\r\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const blocksize = attributes.blocksize;\r\n      const blocksizeSqr = blocksize * blocksize;\r\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n      const firstReshapeShape = attributes.mode === 'DCR' ?\r\n          [\r\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ] :\r\n          [\r\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ];\r\n\r\n      // const transpose = new WebGLTranspose();\r\n      // const attributes = new Attribute(undefined);\r\n      // attributes.set('perm', 'ints', transposePerm);\r\n      // transpose.initialize(attributes);\r\n\r\n      // First reshape\r\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\r\n\r\n      // transpose\r\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\r\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\r\n\r\n      // Second reshape\r\n      const secondReshapeShape = [\r\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\r\n        inputs[0].dims[3] * blocksize\r\n      ];\r\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\r\n      return [result];\r\n    };\r\n\r\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\r\n    (node: Graph.Node): DepthToSpaceAttributes => {\r\n      // processing node attributes\r\n      const blocksize = node.attributes.getInt('blocksize');\r\n      if (blocksize < 1) {\r\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\r\n      }\r\n      const mode = node.attributes.getString('mode', 'DCR');\r\n      if (mode !== 'DCR' && mode !== 'CRD') {\r\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\r\n      }\r\n      return {mode, blocksize};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (inputs.length !== 1) {\r\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\r\n  }\r\n\r\n  // Input has to be a 4-D tensor\r\n  // TODO: Support string depth-to-space.\r\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\r\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {calculateIm2ColDims} from './im2col';\r\n\r\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\r\n  name: 'ConvDotProduct',\r\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.packedLastDimension],\r\n  cacheKey: attributes.activationCacheKey\r\n});\r\n\r\nconst createDotProductProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\r\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\r\n      const [kWidth, kHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\r\n\r\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\r\n      const [im2colWidth, im2colHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\r\n      const rank = outputShape.length;\r\n\r\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n${activationFunction}\r\nfloat process(int indices[${rank}]) {\r\n  int b[1];\r\n  b[0] = indices[1];\r\n  int im2col[4];\r\n  im2col[0] = indices[0];\r\n  im2col[1] = indices[2];\r\n  im2col[2] = indices[3];\r\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\r\n          im2colStrides[2]};\r\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\r\n  float value = ${initValue};\r\n  for (int i = 0; i < ${sharedDim}; ++i) {\r\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\r\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\r\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n    ++im2colOffset;\r\n    ++kernelOffset;\r\n  }\r\n  ${applyActivation}\r\n  return value;\r\n}`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createDotProductProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\r\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\r\n      return {\r\n        ...metadata,\r\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const flatten: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\r\n      validateInputs(inputs, axis);\r\n\r\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\r\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\r\n    };\r\n\r\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getInt('axis', 1);  // default axis is 1\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Flatten requires 1 input.');\r\n  }\r\n\r\n  const r = inputs[0].dims.length;\r\n  if (r === 0) {\r\n    throw new Error('scalar tensor is not supported.');\r\n  }\r\n\r\n  if (axis < -r || axis > r) {\r\n    throw new Error('Invalid axis');\r\n  }\r\n\r\n  // TODO: Support string type\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('string tensor is not supported.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {GlslValueFunction} from '../glsl-definitions';\r\n\r\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\r\n  let func: GlslValueFunction;\r\n  switch (attributes.activation) {\r\n    case 'Relu':\r\n      func = glslRelu();\r\n      break;\r\n    case 'Sigmoid':\r\n      func = glslSigmoid();\r\n      break;\r\n    case 'Clip':\r\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\r\n      break;\r\n    // TODO: adding other activations that can be fused.\r\n    default:\r\n      return {activationFunction: '', applyActivation: ''};\r\n  }\r\n\r\n  const activationName = func.name;\r\n  const activationFunction = func.body;\r\n  const applyActivation = `value = ${activationName}_(value);`;\r\n  return {activationFunction, applyActivation};\r\n}\r\n\r\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\r\n  const activation = attributes.getString('activation', '');\r\n\r\n  if (activation === 'Clip') {\r\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\r\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n  }\r\n  return {activation, activationCacheKey: activation};\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\ninterface GatherAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const gather: OperatorImplementation<GatherAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes.axis);\r\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\r\n\r\nconst gatherProgramMetadata = {\r\n  name: 'Gather',\r\n  inputNames: ['A', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const indexDataShape = inputs[1].dims.slice();\r\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\r\n      const indexCopyOps: string[] = [];\r\n      for (let i = 0; i < outputShape.length; i++) {\r\n        // outputShape is divided into three parts: A, B, C\r\n        // |0        axis|  axis + indexDataShape.length |          end|\r\n        // |     A       |             B                 |      C      |\r\n        //\r\n        // inputIdx: [A, inputs[1][B], C]\r\n        if (i < axis) {  // A\r\n          outputShape[i] = inputShape[i];\r\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n        } else {\r\n          if (i < axis + indexDataShape.length) {  // B\r\n            outputShape[i] = indexDataShape[i - axis];\r\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n          } else {                                                       // C\r\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n          }\r\n        }\r\n      }\r\n\r\n      const orank = outputShape.length || 1;\r\n      const irank = inputShape.length;\r\n      const iDrank = indexDataShape.length || 1;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createGatherProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\r\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n  const tensorRank = inputs[0].dims.length;\r\n  if (tensorRank < 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (axis < -tensorRank || axis > tensorRank - 1) {\r\n    throw new Error('Invalid axis.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n  isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n\r\nexport const gemm: OperatorImplementation<GemmAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\r\n  const transA = node.attributes.getInt('transA', 0) !== 0;\r\n  const transB = node.attributes.getInt('transB', 0) !== 0;\r\n  const alpha = node.attributes.getFloat('alpha', 1.0);\r\n  const beta = node.attributes.getFloat('beta', 1.0);\r\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\r\n};\r\n\r\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, false);\r\n\r\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, true);\r\n\r\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                                      [TextureType.unpacked, TextureType.unpacked],\r\n    key: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      let sharedDim = aShape[aShape.length - 1];\r\n      let line = '';\r\n      if (attributes.transA) {\r\n        sharedDim = aShape[0];\r\n      }\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += _A_T(a) * _B_T(b);';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += _A_T(a) * _B(b);';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += _A(a) * _B_T(b);';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += _A(a) * _B(b);';\r\n      }\r\n      const rank = outputShape.length;\r\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n      const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        variables: [\r\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\r\n        ],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n    throw new Error('Invaid input shape.');\r\n  }\r\n  if (!attributes.isOptionalC && inputs.length !== 3) {\r\n    throw new Error('Gemm requires 3 inputs');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col (packed)',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed],\r\n  cacheHint,\r\n});\r\n\r\nconst createPackedIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n      const rowDim = 2;\r\n      const colDim = 3;\r\n      const rank = outputShape.length;\r\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\r\n      const kernelSize = wshape[2] * wshape[3];\r\n      const unpackChannel = unpackFromChannel();\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      let unrolled = '';\r\n\r\n      for (let row = 0; row <= 1; row++) {\r\n        for (let col = 0; col <= 1; col++) {\r\n          unrolled += `\r\n            blockIndex = rc.x + ${col};\r\n            pos = rc.y + ${row};\r\n\r\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\r\n                ${attributes.pads[0]};\r\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\r\n                  ${attributes.pads[1]};\r\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                  ch = int(float(pos)/ ${kernelSize}.);\r\n                    innerDims = vec2(d0, d1);\r\n                    result[${row * 2 + col}] = getChannel(\r\n                      getA(0, ch, int(innerDims.x),\r\n                      int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n\r\n          `;\r\n        }\r\n      }\r\n\r\n      const shaderSource = `\r\n      ${unpackChannel}\r\n\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n          vec4 result = vec4(0.0);\r\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n          vec2 innerDims;\r\n          ${unrolled}\r\n          ${glsl.output} = result;\r\n      }\r\n            `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\n\r\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n  cacheHint,\r\n});\r\n\r\nconst createIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n\r\n      const rank = outputShape.length;\r\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\r\n\r\n      const shaderSource = `\r\n        const int XC = ${xshape[1]};\r\n        const int XH = ${xshape[2]};\r\n        const int XW = ${xshape[3]};\r\n        const int KH = ${attributes.kernelShape[0]};\r\n        const int KW = ${attributes.kernelShape[1]};\r\n        const int dilationH = ${attributes.dilations[0]};\r\n        const int dilationW = ${attributes.dilations[1]};\r\n        const int strideH = ${attributes.strides[0]};\r\n        const int strideW = ${attributes.strides[1]};\r\n        const int padH = ${attributes.pads[0]};\r\n        const int padW = ${attributes.pads[1]};\r\n        const int KHKW = KH*KW;\r\n        const int XCKHKW = XC * KHKW;\r\n        const int outputChannels = 4;\r\n        vec4 process(int indices[${rank}]) {\r\n          int b  = indices[0]; // batch size\r\n          int oh = indices[1] * strideH - padH; //output height\r\n          int ow = indices[2] * strideW - padW; //output width\r\n          int p = indices[3] * outputChannels; //patch\r\n          vec4 value = vec4(0.0);\r\n          for(int i=0; i < outputChannels; ++i) {\r\n            if(p < XCKHKW) {\r\n              int patchC = p / KHKW;\r\n              int patchH = (p - patchC*KHKW) / KW;\r\n              int patchW = (p - patchC*KHKW) - patchH * KW;\r\n              int xh2 = oh + patchH * dilationH;\r\n              int xw2 = ow + patchW * dilationW;\r\n              int x[${xshape.length}];\r\n              x[0] = b;\r\n              x[1] = patchC;\r\n              x[2] = xh2;\r\n              x[3] = xw2;\r\n              if(xh2 >= 0 &&\r\n                  xh2 < XH &&\r\n                  xw2 >= 0 &&\r\n                  xw2 < XW) {\r\n                value[i] = _X(x);\r\n              }\r\n            }\r\n            ++p;\r\n          }\r\n          return value;\r\n        }\r\n        `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n\r\n\r\nexport const calculateIm2ColDims =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\r\n        number[] =>\r\n            [outputShape[0], outputShape[2], outputShape[3],\r\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\r\n  scale: number;\r\n  bias: number[];\r\n}\r\n\r\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output =\r\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\r\n    (node: Graph.Node): ImageScalerAttributes => {\r\n      const scale = node.attributes.getFloat('scale');\r\n      const bias = node.attributes.getFloats('bias');\r\n      return createAttributeWithCacheKey({scale, bias});\r\n    };\r\n\r\nconst imageScalerProgramMetadata = {\r\n  name: 'ImageScaler',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createImageScalerProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\r\n        ProgramInfo => {\r\n          const outputShape = inputs[0].dims.slice();\r\n          const rank = outputShape.length;\r\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\r\n          const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            variables: [\r\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\r\n              {name: 'scale', type: 'float', data: attributes.scale}\r\n            ],\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst createImageScalerProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\r\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\r\n    };\r\n\r\nconst createGetBiasMethod = (numChannels: number): string => {\r\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n  for (let i = 0; i < numChannels; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (channel == ${i}) { return bias[${i}]; }`);\r\n    } else if (i === numChannels - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return bias[${i}]; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (channel == ${i}) { return bias[${i}]; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('ImageScaler requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const instanceNormalization: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\r\n      const output = inferenceHandler.run(\r\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\r\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\r\n      return [output];\r\n    };\r\n\r\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getFloat('epsilon', 1e-5);\r\n\r\nconst meanAndVarianceProgramMetadata = {\r\n  name: 'InstanceNormalization_MeanAndVariance',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\r\n  const xDims = input.dims.slice();\r\n  const channel = xDims[1];\r\n  const channelSize = xDims[2] * xDims[3];\r\n  const outputShape = [xDims[0], channel];\r\n\r\n  const shaderSource = `\r\n      vec4 process(int[2] indices) {\r\n        vec4 v = vec4(0.0);\r\n        int a[4];\r\n        a[0] = indices[0];\r\n        a[1] = indices[1];\r\n        float temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += x;\r\n          }\r\n        }\r\n        float mean = temp / float(${channelSize});\r\n        temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += (x - mean) * (x - mean);\r\n          }\r\n        }\r\n        v.r = mean;\r\n        v.g = temp / float(${channelSize});\r\n\r\n        return v;\r\n      }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\r\n  ...meanAndVarianceProgramMetadata,\r\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\r\n});\r\n\r\nconst computeOutputProgramMetadata = {\r\n  name: 'InstanceNormalization_ComputeOutput',\r\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createComputeOutputProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\r\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\r\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\r\n      const shaderSource = `\r\n      vec4 get_MeanAndVariance(int[2] mv) {\r\n        int offset = indicesToOffset_MeanAndVariance(mv);\r\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\r\n        return ${glsl.texture2D}(MeanAndVariance, coords);\r\n      }\r\n\r\n      float process(int[4] indices) {\r\n        int mv[2];\r\n        mv[0] = indices[0];\r\n        mv[1] = indices[1];\r\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n        float mean = mean_and_variance.r;\r\n        float variance = mean_and_variance.g;\r\n\r\n        int sb[1];\r\n        sb[0] = indices[1];\r\n        float scale = _Scale(sb);\r\n        float b = _B(sb);\r\n\r\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createComputeOutputProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\r\n        ProgramInfoLoader => {\r\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\r\n          return {\r\n            ...metadata,\r\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('InstanceNormalization requires 3 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n\r\n  // input should at least have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n    throw new Error('Input shapes are mismatched.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Only support 4-D input shape.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport interface LrnAttributes extends AttributeWithCacheKey {\r\n  alpha: number;\r\n  beta: number;\r\n  bias: number;\r\n  size: number;\r\n}\r\n\r\nexport const lrn: OperatorImplementation<LrnAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      // if (inferenceHandler.session.pack) {\r\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\r\n      //   inputs)];\r\n      // } else {\r\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\r\n      //}\r\n    };\r\n\r\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\r\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\r\n  const beta = node.attributes.getFloat('beta', 0.75);\r\n  const bias = node.attributes.getFloat('bias', 1.0);\r\n  const size = node.attributes.getInt('size');\r\n\r\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\r\n};\r\n\r\nconst lrnProgramMetadata = {\r\n  name: 'LRN',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\r\n  const C = inputs[0].dims[1];\r\n  const rank = inputs[0].dims.length;\r\n  const from = -Math.floor((attributes.size - 1) / 2);\r\n  const to = Math.ceil((attributes.size - 1) / 2);\r\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\r\n  const bias = `float(${attributes.bias})`;\r\n  const beta = `float(${attributes.beta})`;\r\n\r\n  const shaderSource = `\r\n    float process(int indices[${rank}]) {\r\n        int c = indices[1];\r\n        float x = _X(indices);\r\n        float square_sum = 0.0;\r\n\r\n        for (int i = ${from}; i <= ${to}; i++) {\r\n          int idx = c + i;\r\n          if (c >= 0 && c < ${C}) {\r\n            indices[1] = idx;\r\n            float j = _X(indices);\r\n            square_sum += j * j;\r\n          }\r\n        }\r\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\r\n    }`;\r\n  return {\r\n    ...lrnProgramMetadata,\r\n    cacheHint: attributes.cacheKey,\r\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\r\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('LRN requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\r\n  }\r\n  if (inputs[0].type !== 'float32') {\r\n    throw new Error('input should be float type');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {getBiasForMatmul} from './matmul';\r\n\r\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul (packed)',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\r\n                        [TextureType.packed, TextureType.packed],\r\n  cacheHint\r\n});\r\n\r\nconst createPackedMatmulProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n      const aShape = inputs[0].dims;\r\n      const bShape = inputs[1].dims;\r\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use matmul on the given tensors');\r\n      }\r\n      const sharedDim = aShape[aShape.length - 1];\r\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n      const aRank = aShape.length;\r\n      const bRank = bShape.length;\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const coordsDataType = getCoordsDataType(outputShape.length);\r\n      const outRank = outputShape.length;\r\n      const allGlChannels = getGlChannels();\r\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\r\n\r\n      const getBiasForMatmulSnippet =\r\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\r\n\r\n      const getBcastedSamplerForMatmulSnippet =\r\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\r\n\r\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\r\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\r\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\r\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\r\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\r\n      `;\r\n      const shaderSource = `\r\n            ${getBcastedSamplerForMatmulSnippet}\r\n            ${getBiasForMatmulSnippet}\r\n            ${activationFunction}\r\n            void main() {\r\n              ${getOutputCoordsSnippet}\r\n\r\n              vec4 value = vec4(0);\r\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n                vec4 a = ${getSamplerAInLoopSnippet};\r\n                vec4 b = ${getSamplerBInLoopSnippet};\r\n\r\n                value += (a.rrbb * b.rgrg);\r\n                value += (a.ggaa * b.baba);\r\n              }\r\n              ${processBias}\r\n              ${applyActivation}\r\n              ${glsl.output} = value;\r\n            }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedMatmulProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\r\n      };\r\n    };\r\n\r\nfunction getBcastSamplerForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\r\n  let unpackedACoordsSnippet = [];\r\n  let unpackedBCoordsSnippet = [];\r\n\r\n  const inAShape = inputs[0].dims;\r\n  const inBShape = inputs[1].dims;\r\n\r\n  const inARank = inAShape.length;\r\n  const inBRank = inBShape.length;\r\n\r\n  const outRank = outShape.length;\r\n  const rankADiff = outRank - inARank;\r\n  const rankBDiff = outRank - inBRank;\r\n\r\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\r\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\r\n  unpackedACoordsSnippet.join(', ');\r\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\r\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\r\n  unpackedBCoordsSnippet.join(', ');\r\n\r\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\r\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\r\n\r\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\r\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\r\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\r\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\r\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\r\n\r\n  const getBcastSamplerMatmulSource = `\r\nvec4 getAAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsASnippet}\r\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\r\n  return outputValue;\r\n}\r\n\r\nvec4 getBAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsBSnippet}\r\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\r\n  return outputValue;\r\n}`;\r\n\r\n  return getBcastSamplerMatmulSource;\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i*2';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i*2, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      if (inferenceHandler.session.pack) {\r\n        return [inferenceHandler.run(\r\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\r\n      } else {\r\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\r\n      }\r\n    };\r\n\r\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\r\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nfunction createMatmulProgramInfo(\r\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\r\n  const aShape = inputs[0].dims;\r\n  const bShape = inputs[1].dims;\r\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n  if (!outputShape) {\r\n    throw new Error('Can\\'t use matmul on the given tensors');\r\n  }\r\n  const coordsDataType = getCoordsDataType(outputShape.length);\r\n  const allGlChannels = getGlChannels();\r\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\r\n\r\n  const hasBias = inputs.length > 2;\r\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n  const getBiasForMatmulSnippet =\r\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\r\n\r\n  const rank = outputShape.length;\r\n  const arank = aShape.length;\r\n  const brank = bShape.length;\r\n  const sharedDim = aShape[aShape.length - 1];\r\n  const shaderSource = `\r\n    ${activationFunction}\r\n    ${getBiasForMatmulSnippet}\r\n    float process(int indices[${rank}]) {\r\n        int a[${arank}];\r\n        int b[${brank}];\r\n        bcastMatmulIndices_A(indices, a);\r\n        bcastMatmulIndices_B(indices, b);\r\n\r\n        float value;\r\n        for (int k=0; k<${sharedDim}; ++k) {\r\n            a[${arank - 1}] = k;\r\n            b[${brank - 2}] = k;\r\n            value += _A(a) * _B(b);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        return value;\r\n    }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createMatmulProgramInfoLoader(\r\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\r\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n\r\n  if (inputs[0].type !== inputs[1].type) {\r\n    throw new Error('inputs types should match');\r\n  }\r\n};\r\n\r\nexport function getBiasForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\r\n    isPacked: boolean): string {\r\n  let unpackedCoordsSnippet = '';\r\n  const inRank = inShape.length;\r\n  const outRank = outShape.length;\r\n  const rankDiff = outRank - inRank;\r\n  if (outRank < 2 && inRank > 0) {\r\n    unpackedCoordsSnippet = 'coords';\r\n  } else {\r\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\r\n  }\r\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\r\n  const inSize = ShapeUtil.size(inShape);\r\n  const isInputScalar = inSize === 1;\r\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\r\n  if (isInputScalar) {\r\n    output = 'vec4(outputValue.x)';\r\n  }\r\n  const getBiasForMatmulSource = isPacked ? `\r\nvec4 getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\r\n  return ${output};\r\n}` :\r\n                                            `\r\nfloat getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  return getBias(coords.x);\r\n}`;\r\n\r\n  return getBiasForMatmulSource;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nconst packProgramMetadata = {\r\n  name: 'pack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpackedReversed]\r\n};\r\n\r\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const inputShape = input.dims;\r\n\r\n  const inputRank = inputShape.length;\r\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\r\n  const outputRank = input.dims.length;\r\n\r\n  const coordsDataType = getCoordsDataType(outputRank);\r\n  const channels = getChannels('rc', outputRank);\r\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n  let reversedInputWH;\r\n  if (inputRank === 0) {\r\n    reversedInputWH = [1, 1];\r\n  } else if (inputRank === 1) {\r\n    reversedInputWH = [inputShape[0], 1];\r\n  } else {\r\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n  }\r\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n  const output = getOutput(inputShape, channels);\r\n\r\n  const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n  return {\r\n    ...packProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 0) {\r\n    return 'false';\r\n  }\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlChannels} from '../utils';\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return getGlChannels(rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface PadAttributes extends AttributeWithCacheKey {\r\n  readonly mode: string;\r\n  readonly pads: number[];\r\n  readonly value: number;\r\n}\r\n\r\nconst padProgramMetadata = {\r\n  name: 'Pad',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const padV2: OperatorImplementation<PadAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\r\n      validateInputsV2(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...padProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\r\n  const mode = node.attributes.getString('mode', 'constant');\r\n  const value = node.attributes.getFloat('value', 0.0);\r\n  const pads = node.attributes.getInts('pads');\r\n  return createAttributeWithCacheKey({mode, value, pads});\r\n};\r\n\r\nexport const padV11: OperatorImplementation<string> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\r\n      validateInputsV11(inputs);\r\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\r\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\r\n    };\r\n\r\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\r\n    node.attributes.getString('mode', 'constant');\r\n\r\nconst generatePadAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\r\n        throw new Error('dynamic pad attributes are not allowed');\r\n      }\r\n\r\n      const pads = Array.from(inputs[1].integerData);\r\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\r\n\r\n      return createAttributeWithCacheKey({mode, pads, value});\r\n    };\r\n\r\nconst createPadProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\r\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\r\n      const rank = outputShape.length;\r\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\r\n      const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n      return {\r\n        name: 'Pad',\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputsV2 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pad requires 1 input');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst validateInputsV11 = (inputs: Tensor[]): void => {\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Pad requires 2 or 3 inputs');\r\n  }\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n  const strides = ShapeUtil.computeStrides(input.dims);\r\n\r\n  switch (attributes.mode) {\r\n    case 'constant':\r\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\r\n    case 'reflect':\r\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\r\n    case 'edge':\r\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n};\r\n\r\nconst getPadConstant =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\r\n     value: number): string => {\r\n      const rank = shape.length;\r\n      let block = '';\r\n      for (let i = rank - 1; i >= 0; --i) {\r\n        block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  return constant;\r\n        if (k >= ${shape[i]}) return constant;\r\n        offset += k * ${strides[i]};\r\n        `;\r\n      }\r\n      return `\r\n      float padA(int m[${rank}]) {\r\n        const float constant = float(${value});\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n    };\r\n\r\nconst getPadReflect =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n\r\nconst getPadEdge =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  k = 0;\r\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n        offset += k * ${strides[i]};\r\n      `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly countIncludePad: boolean;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n\r\n      // TODO: support attribute 'ceil_mode'\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\r\n    };\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n          const op1 = 'value += _X(x);';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= float(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= float(${kernelSize} - pad);`;\r\n          }\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\r\n          const shaderSource = `\r\n        ${poolingCode}\r\n      `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata = {\r\n        name: 'GlobalAveragePool',\r\n        inputNames: ['X'],\r\n        inputTypes: [TextureType.unpacked],\r\n        cacheHint: `${attributes.countIncludePad}`\r\n      };\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      return createAttributeWithCacheKey(\r\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\r\n    };\r\n\r\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\r\n    (node: Graph.Node): MaxPoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n      const storageOrder = node.attributes.getInt('storage_order', 0);\r\n      const dilations = node.attributes.getInts('dilations', []);\r\n\r\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n      if (storageOrder !== 0) {\r\n        throw new Error('column major storage order is not yet supported for MaxPool');\r\n      }\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\r\n    };\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(_X(x), value);\r\n    `;\r\n          const op2 = '';\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\r\n          const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape =\r\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\r\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\r\n          const inputShape = inputs[0].dims.slice();\r\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n          const kernelShape = attributes.kernelShape.slice();\r\n          const strides = attributes.strides.slice();\r\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n          const pads = attributes.pads.slice();\r\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\r\n\r\n          const outputShape = PoolConvUtil.computePoolOutputShape(\r\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n          const newAttributes = Object.assign({}, attributes);\r\n          if (hasDilations) {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n          } else {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n          }\r\n          return [newAttributes, outputShape];\r\n        };\r\n\r\nconst globalMaxPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nconst globalMaxPoolMetadata = {\r\n  name: 'GlobalMaxPool',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...globalMaxPoolMetadata,\r\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\r\n      },\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst generatePoolingCode =\r\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\r\n        string => {\r\n          const rank = inputDims.length;\r\n          if (attributes.kernelShape.length <= 2) {\r\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n            const sw = attributes.strides[attributes.strides.length - 1];\r\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n            const dimW = inputDims[rank - 1];\r\n            let codeW = '';\r\n            let codeH = '';\r\n            let codeHEnd = '';\r\n            if (pwStart + pwEnd !== 0) {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n              pad++;\r\n              continue;\r\n            }\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            ${op1}\r\n          }`;\r\n            }\r\n\r\n            if (attributes.kernelShape.length === 2) {\r\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n              const sh = attributes.strides[attributes.strides.length - 2];\r\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n              const phEnd = attributes.pads[attributes.pads.length - 2];\r\n              const dimH = inputDims[rank - 2];\r\n              if (phStart + phEnd !== 0) {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                pad+= ${kw};\r\n                continue;\r\n              }\r\n          `;\r\n              } else {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n            `;\r\n              }\r\n              codeHEnd = `\r\n          }\r\n        `;\r\n            }\r\n\r\n            const poolingCode = `\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          ${codeH}\r\n          ${codeW}\r\n          ${codeHEnd}\r\n          ${op2}\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          } else {\r\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n            const stridesRank = kernelStrides.length;\r\n            const padsRank = attributes.pads.length;\r\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n            const copyInputDims = copyArray(inputDims, 'inputDims');\r\n            const copyPads = copyArray(attributes.pads, 'pads');\r\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n            const copyStrides = copyArray(attributes.strides, 'strides');\r\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n            let padCode = '';\r\n            if (hasPads) {\r\n              padCode = `\r\n            if (x[j] >= inputDims[j] || x[j] < 0) {\r\n              pad++;\r\n              isPad = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isPad) {\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              padCode = `\r\n          }\r\n          ${op1}\r\n        `;\r\n            }\r\n            const poolingCode = `\r\n        ${offsetToIndicesFunction}\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n          int offset[${stridesRank}];\r\n          int pads[${padsRank}];\r\n          int inputDims[${rank}];\r\n          int kernelStrides[${stridesRank}];\r\n          int strides[${stridesRank}];\r\n          ${copyPads}\r\n          ${copyInputDims}\r\n          ${copyStrides}\r\n          ${copyKernelStrides}\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          bool isPad = false;\r\n          for (int i = 0; i < ${kernelSize}; i++) {\r\n            offsetToIndices(i, kernelStrides, offset);\r\n            isPad = false;\r\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n              ${padCode}\r\n          }\r\n          ${op2}\r\n\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          }\r\n        };\r\n\r\nconst copyArray = (array: readonly number[], arrayName: string): string => {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n};\r\n\r\nconst offsetToIndices = (rank: number): string => `\r\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n    if (${rank} == 0) {\r\n      return;\r\n    }\r\n    for (int i = 0; i < ${rank} - 1; ++i) {\r\n      indices[i] = offset / strides[i];\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[${rank} - 1] = offset;\r\n  }`;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly keepDims: boolean;\r\n}\r\n\r\n// return [init ops, reduce ops, final ops]\r\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\r\n\r\nconst reduce =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\r\n     reduceOp: ReduceOp): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const reduceProgramMetadata = {\r\n        name,\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n      };\r\n\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...reduceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () =>\r\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\r\n  const axes = node.attributes.getInts('axes', []);\r\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\r\n  return createAttributeWithCacheKey({axes, keepDims});\r\n};\r\n\r\nconst createReduceProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\r\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const iRank = inputs[0].dims.length || 1;\r\n\r\n      const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\r\n      const ops = reduceOp(inputs, axes);\r\n      let reduceOps = ops[1];\r\n\r\n      for (let k = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n          if (attributes.keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { remove the axis from outputShape; }\r\n\r\n          // loop over the d-th axis\r\n          reduceOps = `\r\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n            inputIdx[${k}] = j${k};\r\n            ${reduceOps}\r\n          }`;\r\n        } else {\r\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n          outputShape.push(inputs[0].dims[k]);\r\n        }\r\n      }\r\n\r\n      const oRank = outputShape.length || 1;\r\n\r\n      const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n      return {\r\n        ...reduceProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  // TODO: support Reduce* operators with 2 inputs.\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Reduce op requires 1 input.');\r\n  }\r\n\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\r\n    };\r\n\r\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        let size = 1.0;\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            size *= inputs[0].dims[k];\r\n          }\r\n        }\r\n\r\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\r\n    };\r\n\r\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\r\n    };\r\n\r\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\r\n    };\r\n\r\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\r\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\r\n\r\nconst createPackedReshape3DProgramInfo =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\r\n        ProgramInfo => {\r\n          const inputShape3D = input3D.dims as [number, number, number];\r\n          const squeezedOutputShape = outputShape3D as [number, number, number];\r\n\r\n          let mainLoop = '';\r\n          for (let i = 0; i < 4; i++) {\r\n            let outputCoords = '';\r\n            switch (i) {\r\n              case 0:\r\n                outputCoords = 'outputCoords = rc;';\r\n                break;\r\n              case 1:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n                break;\r\n              case 2:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n                break;\r\n              case 3:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n                break;\r\n              default:\r\n                throw new Error();\r\n            }\r\n\r\n            mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n          }\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n          const shaderSource = `\r\n      ${getReshapedInputCoords(inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n          return {\r\n            ...metadata,\r\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\r\n            shaderSource,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nexport const createPackedReshape3DProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\r\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\r\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\r\n    };\r\n\r\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  let batch = 1;\r\n  for (let i = 0; i < shape.length - 2; ++i) {\r\n    batch *= shape[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\n\r\n// For packed reshape, we need to re-arrange texel data for output shape.\r\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n// for the reshaped new tensor, we just need to re-arrange the last h and\r\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n// first convert it to 3D by collapsing other dimension to batch dim, then\r\n// process with the last two dimensions.\r\n// Note: we only need the shape tensor to calculate output shape, so the\r\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n// the same between input shape and output shape, the packed reshape can be\r\n// treated as no-op.\r\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\r\n  let isCheapReshape = false;\r\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\r\n    isCheapReshape = true;\r\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\r\n  } else {  // 2D +\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\r\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\r\n  }\r\n\r\n  return isCheapReshape;\r\n}\r\n\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n  if (handler.session.pack) {\r\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\r\n  } else {\r\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\r\n\r\nconst resizeProgramMetadata = {\r\n  name: 'Resize',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const resize: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...resizeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\r\n\r\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\r\n\r\nconst createPackedResizeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\r\n\r\n      const isSame =\r\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\r\n      if (isSame) {\r\n        return {\r\n          ...resizeProgramMetadata,\r\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n          hasMain: true,\r\n          shaderSource: `void main() {\r\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n                    ${glsl.output} = v;\r\n                }`\r\n        };\r\n      }\r\n\r\n      const dim = outputShape.length;\r\n      if (dim < 2) {\r\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n      }\r\n\r\n      const outputHeight = outputShape[dim - 2];\r\n      const outputWidth = outputShape[dim - 1];\r\n\r\n      const inputShape = inputs[0].dims;\r\n      if (dim !== inputShape.length) {\r\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n      }\r\n      const inputHeight = inputShape[dim - 2];\r\n      const inputWidth = inputShape[dim - 1];\r\n\r\n      const scalesHeight = scales[dim - 2];\r\n      const scalesWidth = scales[dim - 1];\r\n\r\n      let getSourceFracIndex = '';\r\n\r\n      if (attributes.mode !== 'linear') {\r\n        // TODO: support other modes\r\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\r\n      }\r\n      switch (attributes.coordinateTransformMode) {\r\n        case 'asymmetric':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return vec4(coords) / scaleWHWH;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'pytorch_half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 fcoords = vec4(coords);\r\n                        return vec4(\r\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\r\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\r\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\r\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\r\n                          );\r\n                    }\r\n                `;\r\n          break;\r\n        case 'align_corners':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\r\n                            ${outputHeight}.0 - 1.0);\r\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\r\n                            ${inputHeight}.0 - 1.0);\r\n                        vec4 new_scale = original / resized;\r\n                        return vec4(coords) * new_scale;\r\n                    }\r\n                `;\r\n          break;\r\n        default:\r\n          // TODO:supporting other coordinateTransformModes\r\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\r\n                                '${attributes.coordinateTransformMode}'`);\r\n      }\r\n\r\n      const coordsDataType = getCoordsDataType(dim);\r\n      const unpackChannel = unpackFromChannel();\r\n      const shaderSource = `\r\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\r\n          scalesWidth}));\r\n            ${unpackChannel}\r\n            ${getSourceFracIndex}\r\n            float getAValue(int x10, int r, int c, int d) {\r\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n            }\r\n            void main() {\r\n                ${coordsDataType} rc = getOutputCoords();\r\n\r\n                int batch = rc[0];\r\n                int depth = rc[1];\r\n\r\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n                // calculate the source index in fraction\r\n                vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n                bool hasNextRow = rc.w < ${outputHeight - 1};\r\n                bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n                vec4 topLeft = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n                vec4 topRight = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n                vec4 bottomLeft = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n                vec4 bottomRight = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n                // calculate the interpolation fraction on u and v direction\r\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n                ${glsl.output} = vec4(newValue);\r\n            }\r\n        `;\r\n      return {\r\n        ...resizeProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n\r\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\r\n  const x = inputs[0];\r\n  const xDims = x.dims;\r\n\r\n  let scales = attributes.scales;\r\n  let outputSizes: number[]|undefined;\r\n  if (scales.length === 0) {\r\n    const scalesTensor = inputs[attributes.scalesInputIdx];\r\n    if (scalesTensor && scalesTensor.size !== 0) {\r\n      if (inputs[attributes.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\r\n    } else {\r\n      const sizesTensor = inputs[attributes.sizesInputIdx];\r\n      if (!sizesTensor || sizesTensor.size === 0) {\r\n        throw new Error('Either scales or sizes MUST be provided as input.');\r\n      }\r\n\r\n      outputSizes = Array.from(sizesTensor.integerData);\r\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\r\n    }\r\n  } else {\r\n    if (inputs[attributes.sizesInputIdx]) {\r\n      throw new Error('Only one of scales or sizes must be provided as input.');\r\n    }\r\n  }\r\n\r\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\r\n\r\n  return [scales, yDims];\r\n};\r\n\r\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidation(scales, mode, isResize);\r\n  return scales;\r\n};\r\n\r\nconst parseScalesDataFromOutputSize =\r\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\r\n      const length = xDims.length;\r\n      const scales = new Array<number>(length);\r\n\r\n      for (let i = 0, end = length; i < end; i++) {\r\n        if (xDims[i] === 0) {\r\n          if (yDims[i] !== 0) {\r\n            throw new Error('Input dim is zero but required output dim is non-zero.');\r\n          }\r\n          scales[i] = 1;\r\n        } else {\r\n          scales[i] = yDims[i] / xDims[i];\r\n        }\r\n      }\r\n      scalesValidation(scales, mode, isResize);\r\n      return scales;\r\n    };\r\n\r\n// roi data is not used yet. but leave here for future usage.\r\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\r\n//     let roi: number[] = [];\r\n//     if (attributes.needRoiInput) {\r\n//         if (attributes.roiInputIdx <= 0) {\r\n//             throw new Error('Invalid roi input index.');\r\n//         }\r\n//         const roiTensor = inputs[attributes.roiInputIdx];\r\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\r\n//     } else {\r\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\r\n//     }\r\n//     return roi;\r\n// };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Shape requires 1 input.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly ends: number[];\r\n  readonly starts: number[];\r\n}\r\n\r\nconst sliceProgramMetadata = {\r\n  name: 'Slice',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const slice: OperatorImplementation<SliceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...sliceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\r\n  const starts = node.attributes.getInts('starts');\r\n  const ends = node.attributes.getInts('ends');\r\n  const axes = node.attributes.getInts('axes', []);\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n\r\nconst createSliceProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\r\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\r\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\r\n      const starts = attributes.starts.map((start, i) => {\r\n        if (start > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\r\n      });\r\n      const ends = attributes.ends.map((end, i) => {\r\n        if (end > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\r\n      });\r\n\r\n      const outputShape = input.dims.slice();\r\n\r\n      const sliceOps: string[] = [];\r\n      for (let i = 0; i < normalizedAxes.length; i++) {\r\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\r\n        if (starts[i] > 0) {\r\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\r\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n      return {\r\n        ...sliceProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Slice requires 1 input.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV10(inputs);\r\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...sliceProgramMetadata,\r\n        cacheHint: attributes.cacheKey,\r\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n      },\r\n      [inputs[0]]);\r\n  return [output];\r\n};\r\n\r\nconst generateSliceAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\r\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\r\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\r\n        throw new Error('dynamic slice attributes are not allowed');\r\n      }\r\n\r\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n        throw new Error('currently non-1 steps is not supported for Slice');\r\n      }\r\n\r\n      const starts = Array.from(inputs[1].integerData);\r\n      const ends = Array.from(inputs[2].integerData);\r\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n      const cacheKey = `${axes};${starts};${ends}`;\r\n      return {starts, ends, axes, cacheKey};\r\n    };\r\n\r\nconst validateInputsV10 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n    throw new Error('Invalid input number.');\r\n  }\r\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst softmaxComputeMaxProgramMetadata = {\r\n  name: 'SoftmaxComputeMax',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst softmaxComputeScaleProgramMetadata = {\r\n  name: 'SoftmaxComputeScale',\r\n  inputNames: ['A', 'Max'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst softmaxProgramMetadata = {\r\n  name: 'SoftMax',\r\n  inputNames: ['A', 'Max', 'Norm'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n\r\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\r\n      return output;\r\n    };\r\n\r\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\r\n\r\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\r\n\r\n// The \"semantic\" meaning of axis has changed in opset-13.\r\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\r\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\r\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\r\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\r\n// the innermost dim\r\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const rank = inputShape.length;\r\n\r\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\r\n      const transposedInputShape: number[] = [];\r\n      let perm: number[] = [];\r\n      let transposedInputs: Tensor[] = [];\r\n      let transposeAttribute: TransposeAttributes;\r\n\r\n      if (isTransposeRequired) {\r\n        perm = Array.from({length: rank}).map((_, i) => i);\r\n\r\n        // swap the innermost dim with the dim corresponding to axis\r\n        perm[axis] = rank - 1;\r\n        perm[rank - 1] = axis;\r\n\r\n        perm.map(p => transposedInputShape.push(inputShape[p]));\r\n\r\n        transposeAttribute = createAttributeWithCacheKey({perm});\r\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\r\n      }\r\n\r\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\r\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\r\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\r\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\r\n\r\n      const output = computeSoftmax(\r\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\r\n\r\n      if (isTransposeRequired) {\r\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\r\n        return reversedOutput;\r\n      } else {\r\n        return output;\r\n      }\r\n    };\r\n\r\nconst computeSoftmax =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\r\n     featureCount: number): Tensor[] => {\r\n      const computeMaxProgramInfo =\r\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\r\n      const max = inferenceHandler.run(\r\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\r\n          inputs);\r\n\r\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          [logicalRowCount]);\r\n      const scale = inferenceHandler.run(\r\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\r\n          [inputs[0], max]);\r\n\r\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          computeScaleProgramInfo.output.dims);\r\n      const output = inferenceHandler.run(\r\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\r\n          [inputs[0], max, scale]);\r\n      return [output];\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the maximum value of each of the 'N' rows\r\n */\r\nconst createComputeMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\r\n        ${textureHeight} )));\r\n        for(int i=1; i<${featureCount}; ++i)\r\n        {\r\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight})));\r\n          if(current > max)\r\n          max = current;\r\n        }\r\n\r\n        return max;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeMaxProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the normalization factor for each of the 'N' rows\r\n */\r\nconst createComputScaleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float norm_factor = 0.0;\r\n        float max = _Max(indices);\r\n        for(int i=0; i<${featureCount}; ++i)\r\n        {\r\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight}))) - max);\r\n        }\r\n\r\n        return norm_factor;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeScaleProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createSoftMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = input.dims.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${featureCount};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n      return {\r\n        ...softmaxProgramMetadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly split: number[];\r\n  readonly numOutputs: number;\r\n}\r\n\r\nconst splitProgramMetadata = {\r\n  name: 'Split',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const split: OperatorImplementation<SplitAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\r\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        output.push(inferenceHandler.run(\r\n            {\r\n              ...splitProgramMetadata,\r\n              cacheHint: `${attributes.cacheKey};${i}`,\r\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\r\n            },\r\n            inputs));\r\n      }\r\n\r\n      return output;\r\n    };\r\n\r\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\r\n  const axis = node.attributes.getInt('axis', 0);\r\n  const split = node.attributes.getInts('split', []);\r\n  const numOutputs = node.outputs.length;\r\n  return createAttributeWithCacheKey({axis, split, numOutputs});\r\n};\r\n\r\nconst getProgramCount =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\r\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\r\n      return offsets.length;\r\n    };\r\n\r\nconst createSplitProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\r\n        ProgramInfo => {\r\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\r\n          const offset = offsets[index];\r\n          const outputShape = shapes[index];\r\n          const rank = outputShape.length;\r\n          const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }\r\n    `;\r\n          return {\r\n            ...splitProgramMetadata,\r\n            cacheHint: `${attributes.cacheKey}:${index}`,\r\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Split requires one input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const squeeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Squeeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Squeeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const sumProgramMetadata = {\r\n    name: 'Sum',\r\n    inputNames: inputs.map((v, i) => `X${i}`),\r\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\r\n  return [output];\r\n};\r\n\r\nconst createSumProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const outputShape = inputs[0].dims.slice();\r\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n      const shaderSource = `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n      return {\r\n        ...sumProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length === 0) {\r\n    throw new Error('Sum requires inputs.');\r\n  }\r\n\r\n  const length = inputs[0].dims.length;\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (length !== inputs[i].dims.length) {\r\n      throw new Error('Input shapes are mismatched.');\r\n    }\r\n\r\n    for (let j = 0; j < length; j++) {\r\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n        throw new Error('Input shapes are not matched.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (inputs[0].type !== inputs[i].type) {\r\n      throw new Error('Input types are not matched.');\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {NUMBER_TYPES} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const tileProgramMetadata = {\r\n    name: 'Tile',\r\n    inputNames: ['A'],\r\n    inputTypes: [TextureType.unpacked],\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst createTileProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const outputShape = new Array(inputShape.length);\r\n\r\n      const tileOps: string[] = [];\r\n      for (let i = 0; i < inputShape.length; i++) {\r\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        int inputIdx[${rank}];\r\n        ${tileOps.join('\\n')}\r\n        return _A(inputIdx);\r\n      }\r\n    `;\r\n      return {\r\n        ...tileProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 input.');\r\n  }\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('The second input shape must 1 dimension.');\r\n  }\r\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invalid repeat type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nconst transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const transpose: OperatorImplementation<TransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\r\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\r\n\r\nconst createTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\r\n      const inputShape = input.dims;\r\n      perm = getAdjustedPerm(inputShape, perm);\r\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\r\n      const rank = inputShape.length;\r\n      // A dims=[${inputs[0].dims.toString()}]\r\n      // out Dims=[${unpackedOutputShape.toString()}]\r\n      // based on perm=[${perm.toString()}]\r\n      const shaderSource = `\r\n      ${getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n      return {\r\n        ...transposeProgramMetadata,\r\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\r\n  if (perm && perm.length !== inputShape.length) {\r\n    perm = [...(inputShape.keys())].reverse();\r\n  }\r\n  return perm;\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\r\n  perm = getAdjustedPerm(inputShape, perm);\r\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\r\n};\r\n\r\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n  }\r\n  reverseFunc.push('\\t}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('input should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureType} from '../types';\r\n\r\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\r\n  const outputShape = input.shape;\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  /**\r\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n   */\r\n  const shaderSource = `\r\n    const float FLOAT_MAX = 1.70141184e38;\r\n    const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n    bool isNaN(float val) {\r\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n    }\r\n\r\n    highp vec4 encodeAsUint8(highp float v) {\r\n      if (isNaN(v)) {\r\n        return vec4(255, 255, 255, 255);\r\n      }\r\n\r\n      highp float av = abs(v);\r\n\r\n      if(av < FLOAT_MIN) {\r\n        return vec4(0.0, 0.0, 0.0, 0.0);\r\n      } else if(v > FLOAT_MAX) {\r\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n      } else if(v < -FLOAT_MAX) {\r\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n      }\r\n\r\n      highp vec4 c = vec4(0,0,0,0);\r\n\r\n      highp float e = floor(log2(av));\r\n      highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n      c[2] = floor(128.0 * m);\r\n      m -= c[2] / 128.0;\r\n      c[1] = floor(32768.0 * m);\r\n      m -= c[1] / 32768.0;\r\n      c[0] = floor(8388608.0 * m);\r\n\r\n      highp float ebias = e + 127.0;\r\n      c[3] = floor(ebias / 2.0);\r\n      ebias -= c[3] * 2.0;\r\n      c[2] += floor(ebias) * 128.0;\r\n\r\n      c[3] += 128.0 * step(0.0, -v);\r\n\r\n      return c / 255.0;\r\n    }\r\n\r\n    void main() {\r\n      float value = ${glsl.texture2D}(X,TexCoords).r;\r\n      ${glsl.output} = encodeAsUint8(value);\r\n    }`;\r\n  const programInfo = {\r\n    name: 'Uint8Encode',\r\n    inputTypes: [TextureType.unpacked],\r\n    inputNames: ['X'],\r\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\r\n    shaderSource,\r\n    hasMain: true\r\n  };\r\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {Tensor} from '../../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslElu(alpha: number): GlslValueFunction {\r\n  const name = 'elu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslClip(min: number, max: number): GlslValueFunction {\r\n  const name = 'clip';\r\n  const body = `\r\n  const float min = float(${min});\r\n  const float max = float(${max});\r\n\r\n  float ${name}_(float a) {\r\n    return clamp(a, min, max);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return clamp(v, min, max);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\r\n  const name = 'leakyRelu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a < 0.0 ? a * alpha : a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}_(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}_(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return ${name}(a);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return ${name}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\n/////\r\n/////\r\n/////\r\n\r\nconst createElementwiseProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\r\n        ProgramInfo => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n          return {\r\n            ...metadata,\r\n            output: {dims: input.dims, type: input.type, textureType},\r\n            shaderSource: `\r\n     ${glslFunc.body}\r\n     void main() {\r\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n       v = ${glslFunc.name}_(v);\r\n       ${glsl.output} = v;\r\n     }\r\n     `,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\r\n        ProgramInfoLoader => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\r\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\r\n        };\r\n\r\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\r\n\r\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\r\n\r\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\r\n\r\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clip =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(\r\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\r\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\r\n\r\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\r\n  return clip(handler, [inputs[0]], attributes);\r\n};\r\n\r\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\r\n  if (inputs.length >= 3 &&\r\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\r\n    throw new Error('dynamic clip attributes are not allowed');\r\n  }\r\n\r\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\r\n\r\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\r\n\r\nexport interface EluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const elu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\r\n\r\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\r\n\r\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\r\n\r\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\r\n\r\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const leakyRelu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\r\n\r\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\r\n\r\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\r\n\r\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\r\n\r\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\r\n\r\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\r\n\r\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\r\n\r\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\r\n\r\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\r\n\r\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst unpackProgramMetadata = {\r\n  name: 'unpack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const rank = input.dims.length;\r\n\r\n  const channels = getChannels('rc', rank);\r\n  const innerDims = channels.slice(-2);\r\n  const coordsDataType = getCoordsDataType(rank);\r\n  const unpackChannel = unpackFromChannel();\r\n  const isScalar = (input.dims.length === 0);\r\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n       // Sample the texture with the coords to get the rgba channel value.\r\n       vec4 packedInput = getA(${sourceCoords});\r\n\r\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n     }\r\n   `;\r\n\r\n  return {\r\n    ...unpackProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\r\n\r\nfunction getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const unsqueeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Unsqueeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Unsqueeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\r\n  readonly opset: number;\r\n  readonly isResize: boolean;\r\n  readonly mode: string;\r\n  readonly scales: number[];\r\n  readonly extrapolationValue: number;\r\n  readonly coordinateTransformMode: string;\r\n  readonly useExtrapolation: boolean;\r\n  readonly needRoiInput: boolean;\r\n  readonly nearestMode: string;\r\n  readonly cubicCoefficientA: number;\r\n  readonly excludeOutside: boolean;\r\n  readonly useNearest2xOptimization: boolean;\r\n  readonly roiInputIdx: number;\r\n  readonly scalesInputIdx: number;\r\n  readonly sizesInputIdx: number;\r\n}\r\n\r\nconst upsampleProgramMetadata = {\r\n  name: 'Upsample',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...upsampleProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\r\n\r\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\r\n\r\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\r\n  const isResize = (opset >= 10);\r\n\r\n  // processing node attributes\r\n  const mode = node.attributes.getString('mode', 'nearest');\r\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\r\n    throw new Error(`unrecognized mode: ${mode}`);\r\n  }\r\n\r\n  let scales: number[] = [];\r\n  if (opset < 9) {\r\n    scales = node.attributes.getFloats('scales');\r\n    scalesValidation(scales, mode, isResize);\r\n  }\r\n\r\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n  const coordinateTransformMode =\r\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n  if ([\r\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\r\n      ].indexOf(coordinateTransformMode) === -1) {\r\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\r\n  }\r\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\r\n  const useExtrapolation = needRoiInput;\r\n\r\n  const nearestMode =\r\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\r\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\r\n  }\r\n\r\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\r\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\r\n  if (excludeOutside && mode !== 'cubic') {\r\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n  }\r\n\r\n  const useNearest2xOptimization =\r\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\r\n\r\n  let roiInputIdx = 0;\r\n  let scalesInputIdx = 0;\r\n  let sizesInputIdx = 0;\r\n\r\n  if (opset > 10) {\r\n    // handle when roiInput is not given\r\n    if (node.inputs.length > 2) {\r\n      roiInputIdx = 1;\r\n      scalesInputIdx = 2;\r\n      sizesInputIdx = 3;\r\n    } else {\r\n      scalesInputIdx = 1;\r\n      sizesInputIdx = 2;\r\n    }\r\n  } else if (opset === 9) {\r\n    scalesInputIdx = 1;\r\n  }\r\n\r\n  return createAttributeWithCacheKey({\r\n    opset,\r\n    isResize,\r\n    mode,\r\n    scales,\r\n    extrapolationValue,\r\n    coordinateTransformMode,\r\n    useExtrapolation,\r\n    needRoiInput,\r\n    nearestMode,\r\n    cubicCoefficientA,\r\n    excludeOutside,\r\n    useNearest2xOptimization,\r\n    roiInputIdx,\r\n    scalesInputIdx,\r\n    sizesInputIdx\r\n  });\r\n};\r\n\r\nconst createUpsampleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [inputWidth, inputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\r\n\r\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\r\n      const [outputWidth, outputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\r\n      const dim = outputShape.length;\r\n\r\n      const outputPitches = new Array<number>(dim);\r\n      const inputPitches = new Array<number>(dim);\r\n      let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n      for (let d = dim - 1; d >= 0; d--) {\r\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n        precalculatedPitches += `\r\n        output_pitches[${d}] = ${outputPitches[d]};\r\n        input_pitches[${d}] = ${inputPitches[d]};\r\n        `;\r\n      }\r\n      const getInputFloatFunction = `\r\n      float getInputFloat(int index) {\r\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\r\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n        return value;\r\n      }\r\n      `;\r\n\r\n      const shaderSource = attributes.mode === 'nearest' ?\r\n          // nearest\r\n          `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[${dim}]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int d, m;\r\n      for (int dim = 0; dim < ${dim}; ++dim) {\r\n        d = output_index / output_pitches[dim];\r\n        m = output_index - d * output_pitches[dim];\r\n        output_index = m;\r\n\r\n        if (scales[dim] != 1 && d > 0) {\r\n          int d2 = d / scales[dim];\r\n          m = d - d2 * scales[dim];\r\n          d = d2;\r\n        }\r\n        input_index += input_pitches[dim] * d;\r\n      }\r\n\r\n      return getInputFloat(input_index);\r\n    }` :\r\n          dim === 4 ?\r\n          // bilinear 4D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[4]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m / output_pitches[1];\r\n      m = m - index_of_dim1 * output_pitches[1];\r\n      index_of_dim2 = m / output_pitches[2];\r\n      m = m - index_of_dim2 * output_pitches[2];\r\n      index_of_dim3 = m;\r\n\r\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n      index_of_input_dim2 = index_of_dim2 / scales[2];\r\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n      index_of_input_dim3 = index_of_dim3 / scales[3];\r\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n      input_index = index_of_dim0 * input_pitches[0] +\r\n            index_of_dim1 * input_pitches[1] +\r\n            index_of_input_dim2 * input_pitches[2] +\r\n            index_of_input_dim3;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim2 = false;\r\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n        // It's the end in dimension 2\r\n        x01 = x00;\r\n        end_of_dim2 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[2]);\r\n      }\r\n\r\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n        // It's the end in dimension 3\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n    }` :\r\n              // bilinear 2D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[2]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m;\r\n\r\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n      index_of_input_dim0 = index_of_dim0 / scales[0];\r\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n      index_of_input_dim1 = index_of_dim1 / scales[1];\r\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim0 = false;\r\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n        // It's the end in dimension 0\r\n        x01 = x00;\r\n        end_of_dim0 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[0]);\r\n      }\r\n\r\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n        // It's the end in dimension 1\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n    }`;\r\n      return {\r\n        ...upsampleProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        variables: [{\r\n          name: 'scales',\r\n          type: 'int',\r\n          arrayLength: attributes.scales.length,\r\n          data: attributes.scales.map(x => Math.ceil(x))\r\n        }]\r\n      };\r\n    };\r\n\r\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\r\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\r\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\r\n      (attribute.opset >= 11 && inputs.length < 2)) {\r\n    throw new Error('invalid inputs.');\r\n  }\r\n\r\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input tensor types.');\r\n  }\r\n};\r\n\r\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\r\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\r\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(output);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.glContext.draw();\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\r\n      void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      const value = variables.find(v => v.name === name)?.data;\r\n      if (type !== 'sampler2D' && !value) {\r\n        throw new Error(`variable '${name}' does not have data defined in program info`);\r\n      }\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1f(location, value as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1i(location, value as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n    if (prefs && prefs.reverseWH) {\r\n      return [wh[1], wh[0]];\r\n    }\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureLayout, TextureType} from './types';\r\n\r\nexport const createTextureLayoutFromTextureType =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\r\n     textureType: TextureType): TextureLayout => {\r\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\r\n      const isPacked = textureType === TextureType.packed;\r\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\r\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\r\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\r\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\r\n          undefined;\r\n      return createTextureLayoutFromShape(\r\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\r\n    };\r\n\r\nexport const calculateTextureWidthAndHeight =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\r\n        [number, number] => {\r\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\r\n          return [layout.width, layout.height];\r\n        };\r\n\r\n/**\r\n * Create a TextureLayout object from shape.\r\n */\r\nexport const createTextureLayoutFromShape =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\r\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\r\n      const isPacked = !!(prefs && prefs.isPacked);\r\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n      const rank = shape.length;\r\n      let inferredDims = shape.slice(0);\r\n      if (rank === 0) {\r\n        inferredDims = [1];\r\n      }\r\n      if (channels === 1) {\r\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n        unpackedShape = shape;\r\n      } else if (isPacked) {\r\n        if (channels !== 4) {\r\n          throw new Error('a packed texture must be 4-channel');\r\n        }\r\n        unpackedShape = shape;\r\n        if (rank > 0) {\r\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n        }\r\n        if (rank > 1) {\r\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n        }\r\n      } else if (!unpackedShape) {\r\n        throw new Error('Unpacked shape is needed when using channels > 1');\r\n      }\r\n      return {\r\n        width,\r\n        height,\r\n        channels,\r\n        isPacked,\r\n        shape: inferredDims,\r\n        strides: ShapeUtil.computeStrides(inferredDims),\r\n        unpackedShape,\r\n        reversedWH: (prefs && prefs.reverseWH)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\r\n    const dataId = td.tensor.dataId;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (this.pendingRead.has(dataId)) {\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\r\n      this.pendingRead.set(dataId, []);\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      // add a fence waiting for the data to be ready\r\n      await this.glContext.createAndWaitForFence();\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      const tensorData = this.toTensorData(dataType, data);\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      this.pendingRead.delete(dataId);\r\n      subscribers?.forEach(resolve => resolve(tensorData));\r\n      return tensorData;\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../tensor';\r\n\r\n/**\r\n * Layout info is used for mapping n-dimensional array to 2D textures\r\n * The layout is created by the TextureLayoutStrategy based on\r\n * the Tensor's dimensions and strides\r\n */\r\nexport interface TextureLayout {\r\n  width: number;\r\n  height: number;\r\n  /**\r\n   * specify the number of value that encoded in a single pixel\r\n   */\r\n  channels: 1|2|3|4;\r\n  /**\r\n   * whether in packed mode or not\r\n   */\r\n  isPacked?: boolean;\r\n  /**\r\n   * the normalized shape\r\n   */\r\n  shape: readonly number[];\r\n  /**\r\n   * the stride of each dimensions, calculated according to shape\r\n   */\r\n  strides: readonly number[];\r\n  /**\r\n   * the original shape(dims) of the corresponding tensor\r\n   */\r\n  unpackedShape: readonly number[];\r\n\r\n  reversedWH?: boolean;\r\n}\r\nexport interface TextureData extends TextureLayout {\r\n  tensor: Tensor;\r\n  texture: WebGLTexture;\r\n}\r\n\r\nexport enum TextureType {\r\n  unpacked,              // <-- normal unpacked texture\r\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\r\n  packed,                // <-- normal packed texture\r\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\r\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  type: Tensor.DataType;\r\n  textureType: TextureType;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * A set of metadata of a shader program.\r\n */\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n  /**\r\n   * texture types for each input\r\n   */\r\n  inputTypes: TextureType[];\r\n  /**\r\n   * names of each input\r\n   */\r\n  inputNames: string[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for output\r\n   */\r\n  output: TensorInfo;\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  shaderSource: string;\r\n  /**\r\n   * whether the shader source contains a customized main function implementation\r\n   */\r\n  hasMain?: boolean;\r\n}\r\n\r\nexport interface VariableInfo {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * Information of uniforms that shader uses\r\n */\r\nexport interface UniformInfo {\r\n  type: 'sampler2D'|VariableInfo['type'];\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface UniformLocation extends UniformInfo {\r\n  location: WebGLUniformLocation;\r\n}\r\n\r\n/**\r\n * Artifact is the result of compilation\r\n * It does not contain input of output data\r\n * However anything that could be run as a \"program\"\r\n */\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  program: WebGLProgram;\r\n  uniformLocations: UniformLocation[];\r\n  attribLocations: {position: number; textureCoord: number};\r\n}\r\nexport declare namespace Artifact {\r\n  type UniformLocations = Artifact['uniformLocations'];\r\n  type AttribLocations = Artifact['attribLocations'];\r\n}\r\n\r\nexport interface UniformData {\r\n  [name: string]: number|number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n\r\nexport function getGlChannels(rank = 6): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  if (!context) {\r\n    try {\r\n      // try to create webgl context from an offscreen canvas\r\n      const offscreenCanvas = createOffscreenCanvas();\r\n      context = createNewWebGLContext(offscreenCanvas, contextId);\r\n    } catch (e) {\r\n      // if failed, fallback to try to use a normal canvas element\r\n      const canvas = createCanvas();\r\n      context = createNewWebGLContext(canvas, contextId);\r\n    }\r\n  }\r\n\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  if (typeof document === 'undefined') {\r\n    throw new TypeError('failed to create canvas: document is not supported');\r\n  }\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n\r\nfunction createOffscreenCanvas(): HTMLCanvasElement {\r\n  if (typeof OffscreenCanvas === 'undefined') {\r\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\r\n  }\r\n  return new OffscreenCanvas(1, 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\nexport interface FenceContext {\r\n  query: WebGLSync|null;\r\n  isFencePassed(): boolean;\r\n}\r\n\r\ntype PollItem = {\r\n  isDoneFn: () => boolean; resolveFn: () => void;\r\n};\r\n\r\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\r\n  let i = 0;\r\n  for (; i < arr.length; ++i) {\r\n    const isDone = arr[i]();\r\n    if (!isDone) {\r\n      break;\r\n    }\r\n  }\r\n  return i - 1;\r\n}\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n\r\n  public async createAndWaitForFence(): Promise<void> {\r\n    const fenceContext = this.createFence(this.gl);\r\n    return this.pollFence(fenceContext);\r\n  }\r\n\r\n  private createFence(gl: WebGLRenderingContext): FenceContext {\r\n    let isFencePassed: () => boolean;\r\n    const gl2 = gl as WebGL2RenderingContext;\r\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n    gl.flush();\r\n    if (query === null) {\r\n      isFencePassed = () => true;\r\n    } else {\r\n      isFencePassed = () => {\r\n        const status = gl2.clientWaitSync(query, 0, 0);\r\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\r\n      };\r\n    }\r\n    return {query, isFencePassed};\r\n  }\r\n\r\n  async pollFence(fenceContext: FenceContext) {\r\n    return new Promise<void>(resolve => {\r\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\r\n    });\r\n  }\r\n\r\n  private itemsToPoll: PollItem[] = [];\r\n\r\n  pollItems(): void {\r\n    // Find the last query that has finished.\r\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\r\n    for (let i = 0; i <= index; ++i) {\r\n      const {resolveFn} = this.itemsToPoll[i];\r\n      resolveFn();\r\n    }\r\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\r\n  }\r\n\r\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\r\n    this.itemsToPoll.push({isDoneFn, resolveFn});\r\n    if (this.itemsToPoll.length > 1) {\r\n      // We already have a running loop that polls.\r\n      return;\r\n    }\r\n    // Start a new loop that polls.\r\n    await repeatedTry(() => {\r\n      this.pollItems();\r\n      // End the loop if no more items to poll.\r\n      return this.itemsToPoll.length === 0;\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event(\r\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\r\n        const outputIndex = this.graph.getOutputIndices()[i];\r\n        const outputTensor = this._values[outputIndex];\r\n        if (outputTensor === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        if (outputIndex === 0) {\r\n          await outputTensor.getData();\r\n        } else {\r\n          // eslint-disable-next-line no-unused-expressions\r\n          outputTensor.data;\r\n        }\r\n        output.push(outputTensor);\r\n      }\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    fuseConvActivationNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          // handle exception when opset > 9 and roi / scales not given\r\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\r\n              nodeProto.opType === 'Resize') {\r\n            continue;\r\n          }\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n    this.fuseConvActivationNodes();\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    // The graph is represented using these two arrays\r\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\r\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\r\n    // newIndices - remapping the graph after reading the flag 'executeNode'\r\n    const newIndices = new Array<number>(this._nodes.length, 0);\r\n    let nodePossition = 0;\r\n\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      // giving new indexes to the nodes based on execution flag\r\n      newIndices[i] = nodePossition;\r\n      if (this._nodes[i].executeNode) {\r\n        if (nodePossition !== i) {\r\n          this._nodes[nodePossition] = this._nodes[i];\r\n        }\r\n        nodePossition++;\r\n\r\n      } else {\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n      }\r\n    }\r\n\r\n    // removing the unused nodes\r\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\r\n\r\n    // Updating this._allData according to the new this._nodes\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      const currentData = this._allData[i];\r\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\r\n        currentData._from = newIndices[currentData._from];\r\n      }\r\n\r\n      for (let j = 0; j < currentData._to.length; j++) {\r\n        if (currentData._to[j] >= 0) {\r\n          currentData._to[j] = newIndices[currentData._to[j]];\r\n        } else {\r\n          throw new Error('Trying to update a removed node');\r\n        }\r\n      }\r\n    }\r\n\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\r\n   * An input validation must be done before calling this function.\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    for (let i = 0; i < node.inputs.length; i++) {\r\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\r\n      // should not happen\r\n      if (delIndex === -1) {\r\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n      }\r\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\r\n    }\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n      case 'Clip':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          const child = this._nodes[next[0]];\r\n          if (child.opType === 'Clip') {\r\n            if (child.inputs.length === 1) {\r\n              try {\r\n                node.attributes.set(\r\n                    'activation_params', 'floats',\r\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\r\n              } catch (e) {\r\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\r\n              }\r\n            } else if (\r\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\r\n                this._allData[child.inputs[2]].tensor !== undefined) {\r\n              node.attributes.set('activation_params', 'floats', [\r\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\r\n              ]);\r\n            } else {\r\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\r\n              continue;\r\n            }\r\n          }\r\n          node.attributes.set('activation', 'string', (child.opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  async end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {LongUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\r\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\r\n\r\nexport interface Operator {\r\n  readonly impl: OperatorImplementation<unknown>;\r\n  readonly context: Graph.Node|unknown;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {OperatorImplementation, OperatorInitialization} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\nexport declare namespace OpSet {\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\r\n  /**\r\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\r\n   * operatorInitialization (optional)\r\n   */\r\n  type ResolveRule = [\r\n    string, Domain, string, OperatorImplementation<Graph.Node>\r\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opImpl = rule[3];\r\n    const opInit = rule[4];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return {opImpl, opInit};\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16,\r\n    FLOAT8E4M3FN = 17,\r\n    FLOAT8E4M3FNUZ = 18,\r\n    FLOAT8E5M2 = 19,\r\n    FLOAT8E5M2FNUZ = 20,\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\n\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(buf, isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\n\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n    int64: BigInt64Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        this.cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        value.data[i] = decodeUtf8String(str);\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'int64':\r\n      return BigInt64Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]) as number, b.get([]) as number));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]) as number;\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]) as number;\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA) as number;\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB) as number;\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\r\n  // which values are signed integers.\r\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\r\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n\r\nexport function decodeUtf8String(buffer: Uint8Array): string {\r\n  return new TextDecoder().decode(buffer);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// This file is generated by /js/scripts/update-version.ts\r\n// Do not modify file content manually.\r\n\r\nexport const version = '1.16.0';\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {configureLogger, LOG_DEBUG} from './log';\r\nimport {TensorView} from './tensor';\r\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\r\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\r\nimport {ProgramManager} from './webgpu/program-manager';\r\nimport {ComputeContext, GpuData, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\r\n\r\n/**\r\n * get a unique key representing the program from the program info, input shapes and types.\r\n *\r\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\r\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\r\n *\r\n */\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensors: readonly TensorView[]): string => {\r\n      // final key format:\r\n      // <PROGRAM_NAME>[<PROGRAM_CUSTOM_CACHE_HINT>]:<INPUTS_INFO_0>|<INPUTS_INFO_1>|...\r\n      const inputInfos = inputTensors.map(tensor => `${tensor.dataType};${tensor.dims.join(',')}`).join('|');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputInfos;\r\n      return key;\r\n    };\r\n\r\n/**\r\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\r\n * the first parameter so that it is stored for future use.\r\n */\r\nexport class WebGpuBackend {\r\n  device: GPUDevice;\r\n  /**\r\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\r\n   */\r\n  gpuDataManager: GpuDataManager;\r\n  /**\r\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\r\n   * artifacts mapping\r\n   */\r\n  programManager: ProgramManager;\r\n\r\n  /**\r\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\r\n   * `null` means no kernel is being computed.\r\n   * only one kernel can be computed at a moment.\r\n   */\r\n  currentKernelId: number|null = null;\r\n  /**\r\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\r\n   */\r\n  private temporaryData: GpuData[];\r\n  /**\r\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\r\n   */\r\n  private kernelPersistentData: Map<number, GpuData[]>;\r\n  /**\r\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\r\n   */\r\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\r\n  /**\r\n   * get the custom data of the current kernel\r\n   */\r\n  get currentKernelCustomData(): {[key: string]: unknown} {\r\n    if (this.currentKernelId === null) {\r\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\r\n    }\r\n\r\n    let data = this.kernelCustomData.get(this.currentKernelId);\r\n    if (!data) {\r\n      data = {};\r\n      this.kernelCustomData.set(this.currentKernelId, data);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\r\n   */\r\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\r\n\r\n  commandEncoder: GPUCommandEncoder|null = null;\r\n  computePassEncoder: GPUComputePassEncoder|null = null;\r\n  pendingDispatchNumber = 0;\r\n\r\n  supportTimestampQuery = false;\r\n  profilingQuerySet: GPUQuerySet;\r\n  profilingQueryData: GpuData;\r\n  profilingTimeBase?: bigint;\r\n\r\n  env: Env;\r\n\r\n  async initialize(env: Env): Promise<void> {\r\n    if (!navigator.gpu) {\r\n      // WebGPU is not available.\r\n      throw new Error('WebGpuBackend: WebGPU is not available.');\r\n    }\r\n\r\n    const adapter = await navigator.gpu.requestAdapter();\r\n    if (!adapter) {\r\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\r\n    }\r\n\r\n    this.env = env;\r\n    const deviceDescriptor: GPUDeviceDescriptor = {\r\n      requiredLimits: {\r\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\r\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\r\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\r\n        maxBufferSize: adapter.limits.maxBufferSize,\r\n        maxComputeInvocationsPerWorkgroup: adapter.limits.maxComputeInvocationsPerWorkgroup,\r\n        maxComputeWorkgroupSizeX: adapter.limits.maxComputeWorkgroupSizeX,\r\n        maxComputeWorkgroupSizeY: adapter.limits.maxComputeWorkgroupSizeY,\r\n        maxComputeWorkgroupSizeZ: adapter.limits.maxComputeWorkgroupSizeZ,\r\n      },\r\n    };\r\n    // WebGPU Spec: Timestamp Queries Inside Passes\r\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\r\n    if (adapter.features.has('timestamp-query-inside-passes')) {\r\n      this.supportTimestampQuery = true;\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\r\n    }\r\n\r\n    this.device = await adapter.requestDevice(deviceDescriptor);\r\n    this.gpuDataManager = createGpuDataManager(this);\r\n    this.programManager = new ProgramManager(this);\r\n    this.kernels = new Map();\r\n    this.kernelPersistentData = new Map();\r\n    this.kernelCustomData = new Map();\r\n\r\n    // set up flags for logger\r\n    configureLogger(env.logLevel!, !!env.debug);\r\n\r\n    // TODO: set up flags\r\n\r\n    this.device.onuncapturederror = ev => {\r\n      if (ev.error instanceof GPUValidationError) {\r\n        // eslint-disable-next-line no-console\r\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\r\n      }\r\n    };\r\n\r\n    if (this.supportTimestampQuery) {\r\n      this.profilingQuerySet = this.device.createQuerySet({\r\n        type: 'timestamp',\r\n        count: 2,\r\n      });\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\r\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\r\n    //\r\n    // revisit this place if we get real requirement to dispose the instance.\r\n  }\r\n\r\n  getCommandEncoder(): GPUCommandEncoder {\r\n    if (!this.commandEncoder) {\r\n      this.commandEncoder = this.device.createCommandEncoder();\r\n    }\r\n    return this.commandEncoder;\r\n  }\r\n\r\n  getComputePassEncoder(): GPUComputePassEncoder {\r\n    if (!this.computePassEncoder) {\r\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\r\n    }\r\n    return this.computePassEncoder;\r\n  }\r\n\r\n  endComputePass(): void {\r\n    if (this.computePassEncoder) {\r\n      this.computePassEncoder.end();\r\n      this.computePassEncoder = null;\r\n    }\r\n  }\r\n\r\n  flush(): void {\r\n    this.endComputePass();\r\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\r\n    this.gpuDataManager.refreshPendingBuffers();\r\n    this.commandEncoder = null;\r\n    this.pendingDispatchNumber = 0;\r\n  }\r\n\r\n  /**\r\n   * run a WebGPU program.\r\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\r\n   * can be called and return a ProgramInfo instance\r\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\r\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\r\n   * index to the kernel's output.\r\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\r\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\r\n   * or persistent (owned by the current kernel)\r\n   * @returns a TensorView array representing the result.\r\n   */\r\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\r\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\r\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\r\n    if (inputs.length !== program.inputTypes.length) {\r\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\r\n    }\r\n\r\n    // create info for inputs\r\n    const inputDatas: GpuData[] = [];\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\r\n      if (!gpuData) {\r\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\r\n      }\r\n      inputDatas[i] = gpuData;\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputs);\r\n    let artifact = this.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // check output indices\r\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\r\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\r\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\r\n    }\r\n\r\n    // create info for outputs\r\n    const outputTensorViews: TensorView[] = [];\r\n    const outputDatas: GpuData[] = [];\r\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\r\n      // value -1 and -2 are used for creating temporary and persistent outputs.\r\n      // value -3 is used for placeholder output. So -3, -2, -1 and 0, 1, 2, ... are valid\r\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\r\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -3 ||\r\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\r\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\r\n      }\r\n      if (validatedOutputIndices[i] === -3) {\r\n        continue;\r\n      }\r\n      const isTemporary = validatedOutputIndices[i] === -1;\r\n      const isPersistent = validatedOutputIndices[i] === -2;\r\n      const tensorView = (isTemporary || isPersistent) ?\r\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\r\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\r\n      const gpuData = this.gpuDataManager.get(tensorView.data);\r\n      if (!gpuData) {\r\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\r\n      }\r\n      if (isTemporary) {\r\n        this.temporaryData.push(gpuData);\r\n      }\r\n      if (isPersistent) {\r\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\r\n        if (!persistentData) {\r\n          persistentData = [];\r\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\r\n        }\r\n        persistentData.push(gpuData);\r\n      }\r\n      outputTensorViews.push(tensorView);\r\n      outputDatas.push(gpuData);\r\n    }\r\n\r\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\r\n\r\n    if (!artifact) {\r\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\r\n      this.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    LOG_DEBUG(\r\n        'info',\r\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\r\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\r\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\r\n\r\n    return outputTensorViews;\r\n  }\r\n\r\n  upload(gpuDataId: number, data: Uint8Array): void {\r\n    this.gpuDataManager.upload(gpuDataId, data);\r\n  }\r\n\r\n  memcpy(src: number, dst: number): void {\r\n    this.gpuDataManager.memcpy(src, dst);\r\n  }\r\n\r\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\r\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\r\n\r\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\r\n    // the buffer is up-to-date.\r\n    const data = getTargetBuffer();\r\n    data.set(new Uint8Array(arrayBuffer, 0, data.byteLength));\r\n  }\r\n\r\n  alloc(size: number): number {\r\n    return this.gpuDataManager.create(size).id;\r\n  }\r\n\r\n  free(ptr: number): number {\r\n    return this.gpuDataManager.release(ptr);\r\n  }\r\n\r\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\r\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\r\n    if (!op) {\r\n      throw new Error(`kernel not implemented: ${name}`);\r\n    }\r\n\r\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\r\n  }\r\n\r\n  releaseKernel(kernelId: number): void {\r\n    const persistentData = this.kernelPersistentData.get(kernelId);\r\n    if (persistentData) {\r\n      for (const data of persistentData) {\r\n        this.gpuDataManager.release(data.id);\r\n      }\r\n      this.kernelPersistentData.delete(kernelId);\r\n    }\r\n\r\n    this.kernelCustomData.delete(kernelId);\r\n    this.kernels.delete(kernelId);\r\n  }\r\n\r\n  computeKernel(kernelId: number, context: ComputeContext): number {\r\n    const kernel = this.kernels.get(kernelId);\r\n    if (!kernel) {\r\n      throw new Error(`kernel not created: ${kernelId}`);\r\n    }\r\n    const [name, kernelEntry, attributes] = kernel;\r\n    if (this.currentKernelId !== null) {\r\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\r\n    }\r\n    this.currentKernelId = kernelId;\r\n\r\n    // parse attributes if necessary\r\n    if (attributes[0]) {\r\n      attributes[1] = attributes[0](attributes[1]);\r\n      attributes[0] = undefined;\r\n    }\r\n\r\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\r\n\r\n    this.temporaryData = [];\r\n    try {\r\n      kernelEntry(context, attributes[1]);\r\n      return 0;  // ORT_OK\r\n    } catch (e) {\r\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\r\n      return 1;  // ORT_FAIL\r\n    } finally {\r\n      for (const data of this.temporaryData) {\r\n        this.gpuDataManager.release(data.id);\r\n      }\r\n      this.temporaryData = [];\r\n      this.currentKernelId = null;\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {OrtWasmModule} from '../binding/ort-wasm';\r\nimport {DataType, getTensorElementSize} from '../wasm-common';\r\n\r\nimport {WebGpuBackend} from './backend-webgpu';\r\nimport {LOG_DEBUG} from './log';\r\nimport {TensorView} from './tensor';\r\nimport {ShapeUtil} from './util';\r\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\r\n\r\n/* eslint-disable no-bitwise */\r\n\r\nclass TensorViewImpl implements TensorView {\r\n  constructor(\r\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\r\n      public readonly dims: readonly number[]) {}\r\n\r\n  getFloat32Array(): Float32Array {\r\n    if (this.dataType !== DataType.float) {\r\n      throw new Error('Invalid data type');\r\n    }\r\n    const elementCount = ShapeUtil.size(this.dims);\r\n    return elementCount === 0 ? new Float32Array() :\r\n                                new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\r\n  }\r\n\r\n  getBigInt64Array(): BigInt64Array {\r\n    if (this.dataType !== DataType.int64) {\r\n      throw new Error('Invalid data type');\r\n    }\r\n    const elementCount = ShapeUtil.size(this.dims);\r\n    return elementCount === 0 ? new BigInt64Array() :\r\n                                new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\r\n  }\r\n\r\n  getInt32Array(): Int32Array {\r\n    if (this.dataType !== DataType.int32) {\r\n      throw new Error('Invalid data type');\r\n    }\r\n    const elementCount = ShapeUtil.size(this.dims);\r\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\r\n  }\r\n\r\n  reshape(newDims: readonly number[]): TensorView {\r\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\r\n      throw new Error('Invalid new shape');\r\n    }\r\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\r\n  }\r\n}\r\n\r\nclass ComputeContextImpl implements ComputeContext {\r\n  readonly opKernelContext: number;\r\n  readonly inputs: readonly TensorView[];\r\n  readonly outputCount: number;\r\n  get kernelCustomData(): {[key: string]: unknown} {\r\n    return this.backend.currentKernelCustomData;\r\n  }\r\n  get customDataBuffer(): Uint8Array {\r\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\r\n  }\r\n  private customDataOffset = 0;\r\n  private customDataSize = 0;\r\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\r\n    const heapU32 = module.HEAPU32;\r\n\r\n    // extract context data\r\n    let dataIndex = (contextDataOffset >> 2);\r\n    this.opKernelContext = heapU32[dataIndex++];\r\n    const inputCount = heapU32[dataIndex++];\r\n    this.outputCount = heapU32[dataIndex++];\r\n    this.customDataOffset = heapU32[dataIndex++];\r\n    this.customDataSize = heapU32[dataIndex++];\r\n\r\n    const inputs: TensorView[] = [];\r\n    for (let i = 0; i < inputCount; i++) {\r\n      const dataType = heapU32[dataIndex++];\r\n      const data = heapU32[dataIndex++];\r\n      const dim = heapU32[dataIndex++];\r\n      const dims: number[] = [];\r\n      for (let d = 0; d < dim; d++) {\r\n        dims.push(heapU32[dataIndex++]);\r\n      }\r\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\r\n    }\r\n    this.inputs = inputs;\r\n  }\r\n\r\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\r\n      TensorView[] {\r\n    // prepare inputs. inputs should always be valid data.\r\n    const mappedInputs =\r\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\r\n    // prepare outputs.\r\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\r\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\r\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\r\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\r\n      const elementSize = getTensorElementSize(dataType);\r\n      if (!elementSize) {\r\n        throw new Error(`Unsupported data type: ${dataType}`);\r\n      }\r\n      const bufferSize = elementSize * ShapeUtil.size(dims);\r\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\r\n    };\r\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\r\n  }\r\n\r\n  output(index: number, dims: readonly number[]): number {\r\n    const stack = this.module.stackSave();\r\n    try {\r\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\r\n      let offset = data >> 2;\r\n      this.module.HEAPU32[offset++] = dims.length;\r\n      for (let i = 0; i < dims.length; i++) {\r\n        this.module.HEAPU32[offset++] = dims[i];\r\n      }\r\n      return this.module._JsepOutput(this.opKernelContext, index, data);\r\n    } finally {\r\n      this.module.stackRestore(stack);\r\n    }\r\n  }\r\n}\r\n\r\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\r\n  const init = module.jsepInit;\r\n  if (init && navigator.gpu) {\r\n    if (!env.wasm.simd) {\r\n      throw new Error(\r\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\r\n    }\r\n    const backend = new WebGpuBackend();\r\n    await backend.initialize(env);\r\n\r\n    init(\r\n        // backend\r\n        {backend},\r\n\r\n        // jsepAlloc()\r\n        (size: number) => backend.alloc(size),\r\n\r\n        // jsepFree()\r\n        (ptr: number) => backend.free(ptr),\r\n\r\n        // jsepCopy(src, dst, size, isSourceGpu)\r\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\r\n          if (isSourceGpu) {\r\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\r\n            backend.memcpy(src, dst);\r\n          } else {\r\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\r\n            const data = module.HEAPU8.subarray(src, src + size);\r\n            backend.upload(dst, data);\r\n          }\r\n        },\r\n\r\n        // jsepCopyAsync(src, dst, size)\r\n        async(gpuDataId: number, dataOffset: number, size: number):\r\n            Promise<void> => {\r\n              LOG_DEBUG(\r\n                  'verbose',\r\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\r\n\r\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\r\n            },\r\n\r\n        // jsepCreateKernel\r\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\r\n\r\n        // jsepReleaseKernel\r\n        (kernel: number) => backend.releaseKernel(kernel),\r\n\r\n        // jsepRun\r\n        (kernel: number, contextDataOffset: number) => {\r\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\r\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\r\n          return backend.computeKernel(kernel, context);\r\n        });\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {logLevelStringToEnum} from '../wasm-common';\r\n\r\ntype LogLevel = NonNullable<Env['logLevel']>;\r\ntype MessageString = string;\r\ntype MessageFunction = () => string;\r\ntype Message = MessageString|MessageFunction;\r\n\r\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\r\n\r\nconst doLog = (level: number, message: string): void => {\r\n  // eslint-disable-next-line no-console\r\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\r\n};\r\n\r\nlet configLogLevel: LogLevel|undefined;\r\nlet debug: boolean|undefined;\r\n\r\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\r\n  configLogLevel = $configLogLevel;\r\n  debug = $debug;\r\n};\r\n\r\n/**\r\n * A simple logging utility to log messages to the console.\r\n */\r\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\r\n  const messageLevel = logLevelStringToEnum(logLevel);\r\n  const configLevel = logLevelStringToEnum(configLogLevel);\r\n  if (messageLevel >= configLevel) {\r\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\r\n  }\r\n};\r\n\r\n/**\r\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\r\n */\r\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\r\n  if (debug) {\r\n    LOG(...args);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable no-param-reassign */\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\nexport class ShapeUtil {\r\n  /**\r\n   * calculate the size (number of elements)\r\n   */\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  /**\r\n   * calculate the size (number of elements) from the given axis (inclusive)\r\n   */\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  /**\r\n   * calculate the size (number of elements) to the given axis (exclusive)\r\n   */\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  /**\r\n   * calculate the size (number of elements) from and to the given axis [start, end)\r\n   */\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be negative.\r\n      if (dims[i] < 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]): void {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\r\n          dim + inputDims.length - 2, autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\n/**\r\n * create a new object from the given attribute, and add a cacheKey property to it\r\n */\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGpuBackend} from '../backend-webgpu';\r\nimport {LOG_DEBUG} from '../log';\r\n\r\nimport {GpuData, GpuDataId, GpuDataType} from './types';\r\n\r\n/**\r\n * manages GpuDataId -> GpuBuffer\r\n */\r\nexport interface GpuDataManager {\r\n  /**\r\n   * copy data from CPU to GPU.\r\n   */\r\n  upload(id: GpuDataId, data: Uint8Array): void;\r\n  /**\r\n   * copy data from GPU to GPU.\r\n   */\r\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\r\n  /**\r\n   * create new data on GPU.\r\n   */\r\n  create(size: number, usage?: number): GpuData;\r\n  /**\r\n   * get GPU data by ID.\r\n   */\r\n  get(id: GpuDataId): GpuData|undefined;\r\n  /**\r\n   * release the data on GPU by ID.\r\n   *\r\n   * @return size of the data released\r\n   */\r\n  release(id: GpuDataId): number;\r\n  /**\r\n   * copy data from GPU to CPU.\r\n   */\r\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\r\n\r\n  /**\r\n   * refresh the buffers that marked for release.\r\n   *\r\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\r\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\r\n   * actually released.\r\n   */\r\n  refreshPendingBuffers(): void;\r\n\r\n  /**\r\n   * destroy all gpu buffers. Call this when the session.release is called.\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\ninterface StorageCacheValue {\r\n  gpuData: GpuData;\r\n  originalSize: number;\r\n}\r\n\r\ninterface DownloadCacheValue {\r\n  data: Promise<ArrayBufferLike>;\r\n}\r\n\r\n/**\r\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\r\n */\r\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\r\n\r\nlet guid = 0;\r\nconst createNewGpuDataId = () => guid++;\r\n\r\nclass GpuDataManagerImpl implements GpuDataManager {\r\n  // GPU Data ID => GPU Data ( storage buffer )\r\n  storageCache: Map<GpuDataId, StorageCacheValue>;\r\n\r\n  // GPU Data ID => GPU Data ( read buffer )\r\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\r\n\r\n  // pending buffers for uploading ( data is unmapped )\r\n  private buffersForUploadingPending: GPUBuffer[];\r\n  // pending buffers for computing\r\n  private buffersPending: GPUBuffer[];\r\n\r\n  // The reusable storage buffers for computing.\r\n  private freeBuffers: Map<number, GPUBuffer[]>;\r\n\r\n  constructor(private backend: WebGpuBackend) {\r\n    this.storageCache = new Map();\r\n    this.downloadCache = new Map();\r\n    this.freeBuffers = new Map();\r\n    this.buffersForUploadingPending = [];\r\n    this.buffersPending = [];\r\n  }\r\n\r\n  upload(id: GpuDataId, data: Uint8Array): void {\r\n    const srcArrayBuffer = data.buffer;\r\n    const srcOffset = data.byteOffset;\r\n    const srcLength = data.byteLength;\r\n    const size = calcNormalizedBufferSize(srcLength);\r\n\r\n    // get destination gpu buffer\r\n    const gpuDataCache = this.storageCache.get(id);\r\n    if (!gpuDataCache) {\r\n      throw new Error('gpu data for uploading does not exist');\r\n    }\r\n    if (gpuDataCache.originalSize !== srcLength) {\r\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\r\n    }\r\n\r\n    // create gpu buffer\r\n    const gpuBufferForUploading = this.backend.device.createBuffer(\r\n        // eslint-disable-next-line no-bitwise\r\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\r\n\r\n    // copy (upload) data\r\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\r\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\r\n    gpuBufferForUploading.unmap();\r\n\r\n\r\n    // GPU copy\r\n    const commandEncoder = this.backend.getCommandEncoder();\r\n    this.backend.endComputePass();\r\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\r\n\r\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\r\n\r\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\r\n  }\r\n\r\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\r\n    // get source gpu buffer\r\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\r\n    if (!sourceGpuDataCache) {\r\n      throw new Error('source gpu data for memcpy does not exist');\r\n    }\r\n    // get destination gpu buffer\r\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\r\n    if (!destinationGpuDataCache) {\r\n      throw new Error('destination gpu data for memcpy does not exist');\r\n    }\r\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\r\n      throw new Error('inconsistent source and destination gpu data size');\r\n    }\r\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\r\n\r\n    // GPU copy\r\n    const commandEncoder = this.backend.getCommandEncoder();\r\n    this.backend.endComputePass();\r\n    commandEncoder.copyBufferToBuffer(\r\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\r\n  }\r\n\r\n  // eslint-disable-next-line no-bitwise\r\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\r\n    const bufferSize = calcNormalizedBufferSize(size);\r\n\r\n    let gpuBuffer;\r\n    // Currently, only storage buffers are reused.\r\n    // eslint-disable-next-line no-bitwise\r\n    if ((usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\r\n      let buffers = this.freeBuffers.get(bufferSize);\r\n      if (!buffers) {\r\n        buffers = [];\r\n        this.freeBuffers.set(bufferSize, buffers);\r\n      }\r\n      if (buffers.length > 0) {\r\n        gpuBuffer = buffers.pop() as GPUBuffer;\r\n      } else {\r\n        // create gpu buffer\r\n        gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\r\n      }\r\n    } else {\r\n      // create gpu buffer\r\n      gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\r\n    }\r\n\r\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\r\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\r\n\r\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\r\n    return gpuData;\r\n  }\r\n\r\n  get(id: GpuDataId): GpuData|undefined {\r\n    return this.storageCache.get(id)?.gpuData;\r\n  }\r\n\r\n  release(id: GpuDataId): number {\r\n    const cachedData = this.storageCache.get(id);\r\n    if (!cachedData) {\r\n      throw new Error('releasing data does not exist');\r\n    }\r\n\r\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\r\n\r\n    this.storageCache.delete(id);\r\n    this.buffersPending.push(cachedData.gpuData.buffer);\r\n    // cachedData.gpuData.buffer.destroy();\r\n\r\n    const downloadingData = this.downloadCache.get(id);\r\n    if (downloadingData) {\r\n      this.downloadCache.delete(id);\r\n    }\r\n\r\n    return cachedData.originalSize;\r\n  }\r\n\r\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\r\n    const downloadData = this.downloadCache.get(id);\r\n    if (downloadData) {\r\n      return downloadData.data;\r\n    }\r\n\r\n    const cachedData = this.storageCache.get(id);\r\n    if (!cachedData) {\r\n      throw new Error('data does not exist');\r\n    }\r\n\r\n    const commandEncoder = this.backend.getCommandEncoder();\r\n    this.backend.endComputePass();\r\n    const bufferSize = calcNormalizedBufferSize(cachedData.originalSize);\r\n    const gpuReadBuffer = this.backend.device.createBuffer(\r\n        // eslint-disable-next-line no-bitwise\r\n        {size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\r\n    commandEncoder.copyBufferToBuffer(\r\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\r\n        0 /* destination offset */, bufferSize /* size */\r\n    );\r\n    this.backend.flush();\r\n\r\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\r\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\r\n        const data = gpuReadBuffer.getMappedRange().slice(0);\r\n        gpuReadBuffer.destroy();\r\n        resolve(data);\r\n      });\r\n    });\r\n\r\n    this.downloadCache.set(id, {data: readDataPromise});\r\n\r\n    return readDataPromise;\r\n  }\r\n\r\n  refreshPendingBuffers(): void {\r\n    for (const buffer of this.buffersForUploadingPending) {\r\n      // upload buffer is only useful in the session creation time. So we don't need to reuse them in session running.\r\n      buffer.destroy();\r\n    }\r\n    this.buffersForUploadingPending = [];\r\n    for (const buffer of this.buffersPending) {\r\n      // eslint-disable-next-line no-bitwise\r\n      if ((buffer.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\r\n        // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\r\n        this.freeBuffers.get(buffer.size)!.push(buffer);\r\n      } else {\r\n        buffer.destroy();\r\n      }\r\n    }\r\n    this.buffersPending = [];\r\n  }\r\n\r\n  dispose() {\r\n    this.freeBuffers.forEach((buffers) => {\r\n      buffers.forEach(buffer => {\r\n        buffer.destroy();\r\n      });\r\n    });\r\n\r\n    this.storageCache.forEach((storage) => {\r\n      storage.gpuData.buffer.destroy();\r\n    });\r\n\r\n    this.storageCache = new Map();\r\n    this.downloadCache = new Map();\r\n    this.freeBuffers = new Map();\r\n  }\r\n}\r\n\r\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\r\n    new GpuDataManagerImpl(...args);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {argMax, argMin, parseArgMinMaxAttributes} from './ops/argminmax';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\r\nimport {expand} from './ops/expand';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributes} from './ops/gemm';\r\nimport {instanceNorm, parseInstanceNormAttributes} from './ops/instance-norm';\r\nimport {layerNorm, parseLayerNormAttributes} from './ops/layer-norm';\r\nimport {matMul} from './ops/matmul';\r\nimport * as pool from './ops/pool';\r\nimport {parseReduceAttributes, reduceL1, reduceL2, reduceLogSum, reduceLogSumExp, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum, reduceSumSquare} from './ops/reduce';\r\nimport {parseResizeAttributes, resize} from './ops/resize';\r\nimport {parseSkipLayerNormAttributes, skipLayerNorm} from './ops/skip-layer-norm';\r\nimport {parseSliceAttributes, slice} from './ops/slice';\r\nimport {parseSoftmaxAttributes, softmax} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {ComputeContext} from './types';\r\n\r\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\r\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\r\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\r\n\r\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\r\n  ['Abs', [unaryOps.abs]],\r\n  ['Acos', [unaryOps.acos]],\r\n  ['Acosh', [unaryOps.acosh]],\r\n  ['Add', [binaryOps.add]],\r\n  ['ArgMax', [argMax, parseArgMinMaxAttributes]],\r\n  ['ArgMin', [argMin, parseArgMinMaxAttributes]],\r\n  ['Asin', [unaryOps.asin]],\r\n  ['Asinh', [unaryOps.asinh]],\r\n  ['Atan', [unaryOps.atan]],\r\n  ['Atanh', [unaryOps.atanh]],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\r\n  ['Cast', [unaryOps.cast, unaryOps.parseCastAttributes]],\r\n  ['Ceil', [unaryOps.ceil]],\r\n  ['ClipV10', [unaryOps.clipV10]],\r\n  ['Clip', [unaryOps.clip]],\r\n  ['Concat', [concat, parseConcatAttributes]],\r\n  ['Conv', [conv, parseConvAttributes]],\r\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\r\n  ['Cos', [unaryOps.cos]],\r\n  ['Cosh', [unaryOps.cosh]],\r\n  ['Div', [binaryOps.div]],\r\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\r\n  ['Erf', [unaryOps.erf]],\r\n  ['Exp', [unaryOps.exp]],\r\n  ['Expand', [expand]],\r\n  ['Floor', [unaryOps.floor]],\r\n  ['Gather', [gather, parseGatherAttributes]],\r\n  ['Gelu', [unaryOps.gelu]],\r\n  ['Gemm', [gemm, parseGemmAttributes]],\r\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\r\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\r\n  ['InstanceNormalization', [instanceNorm, parseInstanceNormAttributes]],\r\n  ['LayerNormalization', [layerNorm, parseLayerNormAttributes]],\r\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\r\n  ['Log', [unaryOps.log]],\r\n  ['MatMul', [matMul]],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\r\n  ['Mul', [binaryOps.mul]],\r\n  ['Neg', [unaryOps.neg]],\r\n  ['Pow', [binaryOps.pow]],\r\n  ['Reciprocal', [unaryOps.reciprocal]],\r\n  ['ReduceMin', [reduceMin, parseReduceAttributes]],\r\n  ['ReduceMean', [reduceMean, parseReduceAttributes]],\r\n  ['ReduceMax', [reduceMax, parseReduceAttributes]],\r\n  ['ReduceSum', [reduceSum, parseReduceAttributes]],\r\n  ['ReduceProd', [reduceProd, parseReduceAttributes]],\r\n  ['ReduceL1', [reduceL1, parseReduceAttributes]],\r\n  ['ReduceL2', [reduceL2, parseReduceAttributes]],\r\n  ['ReduceLogSum', [reduceLogSum, parseReduceAttributes]],\r\n  ['ReduceLogSumExp', [reduceLogSumExp, parseReduceAttributes]],\r\n  ['ReduceSumSquare', [reduceSumSquare, parseReduceAttributes]],\r\n  ['Relu', [unaryOps.relu]],\r\n  ['Resize', [resize, parseResizeAttributes]],\r\n  ['Sigmoid', [unaryOps.sigmoid]],\r\n  ['Sin', [unaryOps.sin]],\r\n  ['Sinh', [unaryOps.sinh]],\r\n  ['Slice', [slice, parseSliceAttributes]],\r\n  ['SkipLayerNormalization', [skipLayerNorm, parseSkipLayerNormAttributes]],\r\n  ['Split', [split, parseSplitAttributes]],\r\n  ['Sqrt', [unaryOps.sqrt]],\r\n  ['Softmax', [softmax, parseSoftmaxAttributes]],\r\n  ['Sub', [binaryOps.sub]],\r\n  ['Tan', [unaryOps.tan]],\r\n  ['Tanh', [unaryOps.tanh]],\r\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\r\n  ['Tile', [tile]],\r\n  ['Transpose', [transpose, parseTransposeAttributes]],\r\n]);\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid' | 'gelu';\r\n\r\nexport const typeSnippet = (component: number) => {\r\n  switch (component) {\r\n    case 1:\r\n      return 'f32';\r\n    case 2:\r\n      return 'vec2<f32>';\r\n    case 3:\r\n      return 'vec3<f32>';\r\n    case 4:\r\n      return 'vec4<f32>';\r\n    default:\r\n      throw new Error(`${component}-component is not supported.`);\r\n  }\r\n};\r\n\r\nexport const activationFnSnippet =\r\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\r\n      if (!activation) {\r\n        return '';\r\n      }\r\n\r\n      // TODO: add implementations\r\n      return '';\r\n    };\r\n\r\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\r\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\r\n      ${activation ? 'value = activation(value, coords);' : ''}\r\n      `;\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nimport {LOG_DEBUG} from '../../../log';\r\nimport {TensorView} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\r\nimport {ConvAttributes} from '../conv';\r\n\r\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\r\nimport {utilFunctions} from './conv_util';\r\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\r\n\r\nconst conv2dCommonSnippet =\r\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\r\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\r\n     innerElementSize = 4): string => {\r\n      const getXSnippet = (innerElementSize: number) => {\r\n        switch (innerElementSize) {\r\n          case 1:\r\n            return 'resData = x[xIndex];';\r\n          case 3:\r\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\r\n          case 4:\r\n            return 'resData = x[xIndex / 4];';\r\n          default:\r\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\r\n        }\r\n      };\r\n      const getWSnippet = (innerElementSize: number) => {\r\n        switch (innerElementSize) {\r\n          case 1:\r\n            return 'return w[row * wShape[3] + colIn];';\r\n          case 4:\r\n            return 'return w[row * wShape[3] / 4 + colIn];';\r\n          default:\r\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\r\n        }\r\n      };\r\n      const coordASnippet = isChannelsLast ? `\r\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\r\n    ` :\r\n                                             `\r\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\r\n    `;\r\n\r\n      const coordResSnippet = isChannelsLast ? `\r\n    let coords = vec4<i32>(\r\n      batch,\r\n      row / outWidth,\r\n      row % outWidth,\r\n      col);\r\n    ` :\r\n                                               `\r\n    let coords = vec4<i32>(\r\n      batch,\r\n      row,\r\n      col / outWidth,\r\n      col % outWidth);\r\n    `;\r\n\r\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\r\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\r\n      const row = isChannelsLast ? 'row' : 'col';\r\n      const col = isChannelsLast ? 'col' : 'row';\r\n      const readXSnippet = `\r\n    let inChannels = wShape[2];\r\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\r\n    let outRow = ${row} / outWidth;\r\n    let outCol = ${row} % outWidth;\r\n\r\n    let WRow = ${col} / (filterDims[1] * inChannels);\r\n    let WCol = ${col} / inChannels % filterDims[1];\r\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\r\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\r\n    let xCh = ${col} % inChannels;\r\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\r\n    // The bounds checking is always needed since we use it to pad zero for\r\n    // the 'same' padding type.\r\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\r\n      ${coordASnippet}\r\n      let xIndex = getIndexFromCoords4D(coord, xShape);\r\n      ${getXSnippet(innerElementSizeX)}\r\n    }\r\n    return resData;`;\r\n\r\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\r\n    let col = colIn * ${innerElementSizeX};\r\n    ${readXSnippet}` :\r\n                                                                `\r\n    let col = colIn * ${innerElementSizeX};\r\n    if (row < dimAOuter && col < dimInner) {\r\n      ${readXSnippet}\r\n    }\r\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\r\n                                       (fitInner && fitBOuter ? `\r\n    let col = colIn * ${innerElementSizeX};\r\n    ${readXSnippet}` :\r\n                                                                `\r\n    let col = colIn * ${innerElementSizeX};\r\n    if (row < dimInner && col < dimBOuter) {\r\n      ${readXSnippet}\r\n    }\r\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\r\n\r\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\r\n\r\n      const resType = typeSnippet(innerElementSize);\r\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\r\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\r\n      const userCode = `\r\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\r\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\r\n      ${isChannelsLast ? sampleX : sampleW}\r\n    }\r\n\r\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\r\n      ${isChannelsLast ? sampleW : sampleX}\r\n    }\r\n\r\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\r\n      let col = colIn * ${innerElementSize};\r\n      if (row < dimAOuter && col < dimBOuter)\r\n      {\r\n      var value = valueIn;\r\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\r\n      ${coordResSnippet}\r\n      ${biasActivationSnippet(addBias, activation)}\r\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\r\n      }\r\n    }`;\r\n      return userCode;\r\n    };\r\n\r\nexport const createConv2DMatMulProgramInfo =\r\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\r\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\r\n     sequentialAccessByThreads: boolean): ProgramInfo => {\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\r\n      const batchSize = outputShape[0];\r\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\r\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\r\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\r\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\r\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\r\n          outChannels % 4 === 0;\r\n\r\n      // TODO: fine tune size\r\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\r\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\r\n      const workGroupSize: [number, number, number] =\r\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\r\n      const elementsPerThread =\r\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\r\n      const dispatch = [\r\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\r\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\r\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\r\n      ];\r\n\r\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\r\n\r\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\r\n\r\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\r\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\r\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\r\n\r\n      const fitAOuter = dimAOuter % tileAOuter === 0;\r\n      const fitBOuter = dimBOuter % tileBOuter === 0;\r\n      const fitInner = dimInner % tileInner === 0;\r\n\r\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\r\n\r\n      const declareInputs = [\r\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\r\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\r\n      ];\r\n      let declareFunctions = `\r\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\r\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\r\n      }\r\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\r\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\r\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\r\n      }`;\r\n      if (hasBias) {\r\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\r\n        declareFunctions += `\r\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\r\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\r\n        }`;\r\n      }\r\n\r\n      return {\r\n        ...metadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\r\n        getShaderSource: () => `\r\n        ${utilFunctions}\r\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\r\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\r\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\r\n        ${declareInputs.join('')}\r\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\r\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\r\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\r\n\r\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\r\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\r\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\r\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\r\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\r\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\r\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\r\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\r\n        const dimAOuter : i32 = ${dimAOuter};\r\n        const dimBOuter : i32 = ${dimBOuter};\r\n        const dimInner : i32 = ${dimInner};\r\n        ${declareFunctions}\r\n        ${\r\n            conv2dCommonSnippet(\r\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\r\n                elementsSize[1], elementsSize[2])}\r\n            ${\r\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\r\n                     makeMatMulPackedSource(\r\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\r\n                         sequentialAccessByThreads)}`\r\n      };\r\n    };\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\r\n\r\nimport {LOG_DEBUG} from '../../../log';\r\nimport {TensorView} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\r\nimport {inputVariable, outputVariable, ShaderHelper} from '../common';\r\nimport {ConvTransposeAttributes} from '../conv-transpose';\r\n\r\nconst createConvTranspose2DOpProgramShaderSource =\r\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\r\n     outputShape: readonly number[], hasBias: boolean, elementsPerThread: readonly number[]): string => {\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      const rowDim = isChannelsLast ? 1 : 2;\r\n      const colDim = isChannelsLast ? 2 : 3;\r\n      const channelDim = isChannelsLast ? 3 : 1;\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\r\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\r\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\r\n      const workPerThread = isVec4 ? 2 : 1;\r\n\r\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\r\n\r\n      const declareInputs = [\r\n        `@group(0) @binding(0) var<storage, read> Dy: array<${\r\n            isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\r\n        `@group(0) @binding(1) var<storage, read> W: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\r\n      ];\r\n      let declareFunctions = `\r\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\r\n    result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\r\n  }`;\r\n      if (hasBias) {\r\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\r\n        declareFunctions += `\r\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\r\n      return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\r\n    }`;\r\n      }\r\n      const w = inputVariable('W', inputs[1].dataType, inputs[1].dims);\r\n      const dy = inputVariable('Dy', inputs[0].dataType, inputs[0].dims);\r\n      const output = outputVariable('result', inputs[0].dataType, outputShape);\r\n      const codeSnippet4 = `{\r\n        let batch: u32 = global_id.z / outShape[1];\r\n        let r = global_id.z % outShape[1];\r\n        let c = global_id.y * ${workPerThread};\r\n        let d1: u32 = global_id.x * 4;\r\n\r\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\r\n\r\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        var dotProd: array<vec4<f32>, ${workPerThread}>;\r\n        for (var i = 0; i < ${workPerThread}; i++) {\r\n          dotProd[i] = vec4<f32>(0.0);\r\n        }\r\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\r\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\r\n          let wRPerm: u32= filterDims[0] - 1 - wR;\r\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\r\n              fract(dyR) > 0.0) {\r\n            continue;\r\n          }\r\n          let idyR: u32 = u32(dyR);\r\n\r\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\r\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\r\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\r\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\r\n            var bDyCVal = true;\r\n            var bDyCVal2 = true;\r\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\r\n                fract(dyC) > 0.0) {\r\n              bDyCVal = false;\r\n            }\r\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\r\n                fract(dyC2) > 0.0) {\r\n              bDyCVal2 = false;\r\n            }\r\n\r\n            let idyC: u32 = u32(dyC);\r\n            let idyC2: u32 = u32(dyC2);\r\n            if (bDyCVal && bDyCVal2) {\r\n              let d2Length = outBackprop[3];\r\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\r\n                let wValue0 = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                let wValue1 = ${w.get('d2', 'd1 + 1', 'wRPerm', 'wCPerm')};\r\n                let wValue2 = ${w.get('d2', 'd1 + 2', 'wRPerm', 'wCPerm')};\r\n                let wValue3 = ${w.get('d2', 'd1 + 3', 'wRPerm', 'wCPerm')};\r\n\r\n                var xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let tmpval = vec4<f32>(xValue * wValue0,\r\n                                      xValue * wValue1,\r\n                                      xValue * wValue2,\r\n                                      xValue * wValue3);\r\n                dotProd[0] = dotProd[0] + tmpval;\r\n\r\n                xValue =  ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC2', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC2')};\r\n\r\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\r\n                                                    xValue * wValue1,\r\n                                                    xValue * wValue2,\r\n                                                    xValue * wValue3);\r\n              }\r\n            } else if (bDyCVal) {\r\n              let d2Length = outBackprop[3];\r\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\r\n                let wValue0 = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                let wValue1 = ${w.get('d2', 'd1 + 1', 'wRPerm', 'wCPerm')};\r\n                let wValue2 = ${w.get('d2', 'd1 + 2', 'wRPerm', 'wCPerm')};\r\n                let wValue3 = ${w.get('d2', 'd1 + 3', 'wRPerm', 'wCPerm')};\r\n\r\n                var xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let tmpval = vec4<f32>(xValue * wValue0,\r\n                                      xValue * wValue1,\r\n                                      xValue * wValue2,\r\n                                      xValue * wValue3);\r\n                dotProd[0] = dotProd[0] + tmpval;\r\n              }\r\n            } else if (bDyCVal2) {\r\n              let d2Length = outBackprop[3];\r\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\r\n                let wValue0 = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                let wValue1 = ${w.get('d2', 'd1 + 1', 'wRPerm', 'wCPerm')};\r\n                let wValue2 = ${w.get('d2', 'd1 + 2', 'wRPerm', 'wCPerm')};\r\n                let wValue3 = ${w.get('d2', 'd1 + 3', 'wRPerm', 'wCPerm')};\r\n\r\n                var xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let tmpval = vec4<f32>(xValue * wValue0,\r\n                                      xValue * wValue1,\r\n                                      xValue * wValue2,\r\n                                      xValue * wValue3);\r\n                dotProd[1] = dotProd[1] + tmpval;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\r\n          ${output.set('batch', 'r', 'c+i', 'd1', 'dotProd[i]')};\r\n        }\r\n      }`;\r\n      const codeSnippet = `\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n          let batch = outputIndices[0];\r\n          let d1 = outputIndices[${channelDim}];\r\n          let dyCorner = vec2<i32>(i32(outputIndices[${rowDim}]), i32(outputIndices[${colDim}])) - pads;\r\n          let dyRCorner = dyCorner.x;\r\n          let dyCCorner = dyCorner.y;\r\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\r\n          // ? = to be determined. : = across all values in that axis.\r\n          var dotProd = 0.0;\r\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\r\n            if (wR % dilations.x != 0) {\r\n              continue;\r\n            }\r\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\r\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\r\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\r\n                wRPerm < 0) {\r\n              continue;\r\n            }\r\n            let idyR: u32 = u32(dyR);\r\n\r\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\r\n              if (wC % dilations.y != 0) {\r\n                continue;\r\n              }\r\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\r\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\r\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\r\n                  fract(dyC) > 0.0 || wCPerm < 0) {\r\n                continue;\r\n              }\r\n              let idyC: u32 = u32(dyC);\r\n\r\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\r\n                let xValue = ${\r\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'd2') : dy.get('batch', 'd2', 'idyR', 'idyC')};\r\n                let wValue = ${w.get('d2', 'd1', 'wRPerm', 'wCPerm')};\r\n                dotProd = dotProd + xValue * wValue;\r\n              }\r\n            }\r\n          }\r\n          ${output.setByOffset('global_idx', 'dotProd')};\r\n        `;\r\n\r\n      const shader = `\r\n  ${declareFunctions}\r\n  ${declareInputs.join('\\n')}\r\n  @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;\r\n  const outShape : vec4<u32> = vec4<u32>(${outputShape.join(',')});\r\n  const outBackprop : vec4<u32> = vec4<u32>(${inputs[0].dims.join(',')});\r\n  const strides : vec2<u32> = vec2<u32>(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const filterDims : vec2<u32> = vec2<u32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${\r\n          attributes.kernelShape[isChannelsLast ? 2 : 3]});\r\n  const dilations : vec2<u32> = vec2<u32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\r\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\r\n          ${\r\n          attributes.dilations[0] <= 1 ?\r\n              0 :\r\n              (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\r\n          ${\r\n          attributes.dilations[1] <= 1 ?\r\n              0 :\r\n              (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\r\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\r\n                                     i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\r\n    ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)};\r\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\r\n\r\n      // TODO: use shaderHelper.declareVariables() to declare variables so that those impl() calls can be removed.\r\n      return `  ${w.impl()}\r\n  ${dy.impl()}\r\n  ${output.impl()}\r\n  ${shader}`;\r\n    };\r\n\r\nexport const createConvTranspose2DProgramInfo =\r\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvTransposeAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      const outputShape = attributes.outputShape;\r\n      const batchSize = outputShape[0];\r\n      const outWidth = outputShape[isChannelsLast ? 1 : 2];\r\n      const outHeight = outputShape[isChannelsLast ? 2 : 3];\r\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\r\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\r\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\r\n\r\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\r\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\r\n      const workGroupSize: [number, number, number] =\r\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\r\n      const elementsPerThread =\r\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\r\n      const dispatch = [\r\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\r\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\r\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\r\n      ];\r\n      LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\r\n\r\n      return {\r\n        ...metadata,\r\n        outputs: [{\r\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\r\n          dataType: inputs[0].dataType,\r\n          gpuDataType: GpuDataType.default\r\n        }],\r\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\r\n        getShaderSource: (shaderHelper: ShaderHelper) => createConvTranspose2DOpProgramShaderSource(\r\n            shaderHelper, inputs, attributes, outputShape, hasBias, elementsPerThread),\r\n      };\r\n    };\r\n","/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nexport const utilFunctions = `\r\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\r\n  return dot(coords, vec4<i32>(\r\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\r\n}\r\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\r\n  return dot(coords, vec4<i32>(\r\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\r\n}\r\n`;\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\r\n//\r\n// modified to fit the needs of the project\r\n\r\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\r\n  if (transpose) {\r\n    return `\r\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n          kStart + inputRow,\r\n          globalRowStart / innerElementSize + inputCol);\r\n        `;\r\n\r\n  } else {\r\n    return `\r\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n          globalRow + innerRow,\r\n          kStart / innerElementSize + inputCol);\r\n        `;\r\n  }\r\n};\r\n\r\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\r\n  if (transposeA) {\r\n    return `\r\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\r\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\r\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\r\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\r\n        for (var i = 0; i < rowPerThread; i = i + 1) {\r\n          acc[i] = BCached0 * ACached0[i] + acc[i];\r\n          acc[i] = BCached1 * ACached1[i] + acc[i];\r\n          acc[i] = BCached2 * ACached2[i] + acc[i];\r\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\r\n        }`;\r\n  } else {\r\n    return `\r\n        for (var i = 0; i < rowPerThread; i = i + 1) {\r\n          let ACached = mm_Asub[tileRow + i][k];\r\n          acc[i] = BCached0 * ACached.x + acc[i];\r\n          acc[i] = BCached1 * ACached.y + acc[i];\r\n          acc[i] = BCached2 * ACached.z + acc[i];\r\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\r\n        }`;\r\n  }\r\n};\r\n\r\nexport const makeMatMulPackedVec4Source =\r\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\r\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\r\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\r\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\r\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\r\n      const tileAHight = transposeA ? tileInner : tileAOuter;\r\n      const innerElementSize = tileAWidth / workgroupSize[0];\r\n      const rowPerThreadB = tileInner / workgroupSize[1];\r\n\r\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\r\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\r\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\r\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\r\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\r\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\r\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\r\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\r\n            workPerThread[0]} must be 4.`);\r\n      }\r\n      return `\r\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\r\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\r\n\r\nconst rowPerThread = ${workPerThread[1]};\r\nconst colPerThread = ${workPerThread[0]};\r\nconst innerElementSize = ${innerElementSize};\r\nconst tileInner = ${tileInner};\r\n\r\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\r\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\r\n        @builtin(global_invocation_id) globalId : vec3<u32>,\r\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\r\n  let localRow = i32(localId.y);\r\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\r\n  let tileCol = i32(localId.x);\r\n\r\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\r\n  let globalCol = i32(globalId.x);\r\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\r\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\r\n\r\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\r\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\r\n\r\n  var acc: array<vec4<f32>, rowPerThread>;\r\n\r\n  // Loop over shared dimension.\r\n  let tileRowB = localRow * ${rowPerThreadB};\r\n  for (var t = 0; t < numTiles; t = t + 1) {\r\n      // Load one tile of A into local memory.\r\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n          let inputRow = tileRow + innerRow;\r\n          let inputCol = tileCol;\r\n          ${writeDataToSubAVec4Snippet(transposeA)}\r\n      }\r\n\r\n      // Load one tile of B into local memory.\r\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\r\n          let inputRow = tileRowB + innerRow;\r\n          let inputCol = tileCol;\r\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\r\n      }\r\n      kStart = kStart + tileInner;\r\n      workgroupBarrier();\r\n\r\n      // Compute acc values for a single thread.\r\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\r\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\r\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\r\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\r\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\r\n\r\n          ${calculateResultSnippet(transposeA, innerElementSize)}\r\n      }\r\n\r\n      workgroupBarrier();\r\n  }\r\n\r\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\r\n  }\r\n}`;\r\n    };\r\n\r\nconst writeDataToSubASnippet = (transpose: boolean) => {\r\n  if (transpose) {\r\n    return `\r\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n              kStart + inputRow,\r\n              globalRowStart + inputCol);\r\n            `;\r\n\r\n  } else {\r\n    return `\r\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\r\n              globalRowStart + inputRow,\r\n              kStart + inputCol);\r\n            `;\r\n  }\r\n};\r\n\r\nconst readDataFromSubASnippet = (transposeA: boolean) =>\r\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\r\n\r\n// sequentialAccessByThreads means sequential data in memory is accessed by\r\n// threads, instead of a single thread (default behavior).\r\nexport const makeMatMulPackedSource =\r\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\r\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\r\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\r\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\r\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\r\n      const tileAHight = transposeA ? tileInner : tileAOuter;\r\n\r\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\r\n            tileInner % workgroupSize[1] === 0)) {\r\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\r\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\r\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\r\n      }\r\n      const rowPerThreadA = tileAHight / workgroupSize[1];\r\n      const colPerThreadA = tileAWidth / workgroupSize[0];\r\n      const rowPerThreadB = tileInner / workgroupSize[1];\r\n      const matmulSnippet = sequentialAccessByThreads ?\r\n          `\r\n    let localRow = i32(localId.y);\r\n    let localCol = i32(localId.x);\r\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\r\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\r\n\r\n    // Loop over shared dimension.\r\n    for (var t = 0; t < numTiles; t = t + 1) {\r\n      // Load one tile of A into local memory.\r\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\r\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\r\n          ${writeDataToSubASnippet(transposeA)}\r\n        }\r\n      }\r\n      // Load one tile of B into local memory.\r\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\r\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\r\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\r\n            kStart + inputRow,\r\n            globalColStart + inputCol);\r\n        }\r\n      }\r\n      kStart = kStart + tileInner;\r\n      workgroupBarrier();\r\n\r\n      // Compute acc values for a single thread.\r\n      var BCached : array<f32, colPerThread>;\r\n      for (var k = 0; k < tileInner; k = k + 1) {\r\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\r\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\r\n        }\r\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n          let ACached = ${\r\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\r\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\r\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\r\n                ACached * BCached[innerCol];\r\n          }\r\n        }\r\n      }\r\n      workgroupBarrier();\r\n    }\r\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\r\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\r\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\r\n      }\r\n    }\r\n    ` :\r\n          `\r\nlet tileRow = i32(localId.y) * rowPerThread;\r\nlet tileCol = i32(localId.x) * colPerThread;\r\n\r\nlet globalRow = i32(globalId.y) * rowPerThread;\r\nlet globalCol = i32(globalId.x) * colPerThread;\r\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\r\n\r\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\r\nlet tileColA = i32(localId.x) * ${colPerThreadA};\r\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\r\n// Loop over shared dimension.\r\nfor (var t = 0; t < numTiles; t = t + 1) {\r\n  // Load one tile of A into local memory.\r\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\r\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\r\n      let inputRow = tileRowA + innerRow;\r\n      let inputCol = tileColA + innerCol;\r\n      ${writeDataToSubASnippet(transposeA)}\r\n    }\r\n  }\r\n\r\n  // Load one tile of B into local memory.\r\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\r\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n      let inputRow = tileRowB + innerRow;\r\n      let inputCol = tileCol + innerCol;\r\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\r\n        kStart + inputRow,\r\n        globalCol + innerCol);\r\n    }\r\n  }\r\n  kStart = kStart + tileInner;\r\n  workgroupBarrier();\r\n\r\n  // Compute acc values for a single thread.\r\n  var BCached : array<f32, colPerThread>;\r\n  for (var k = 0; k < tileInner; k = k + 1) {\r\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\r\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\r\n    }\r\n\r\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      ${readDataFromSubASnippet(transposeA)}\r\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\r\n      }\r\n    }\r\n  }\r\n\r\n  workgroupBarrier();\r\n}\r\n\r\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\r\n        acc[innerRow][innerCol]);\r\n  }\r\n}\r\n`;\r\n\r\n      return `\r\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\r\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\r\n  const rowPerThread = ${workPerThread[1]};\r\n  const colPerThread = ${workPerThread[0]};\r\n  const tileInner = ${tileInner};\r\n\r\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\r\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\r\n        @builtin(global_invocation_id) globalId : vec3<u32>,\r\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\r\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\r\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\r\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\r\n\r\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\r\n\r\n    // Without this initialization strange values show up in acc.\r\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\r\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\r\n        acc[innerRow][innerCol] = 0.0;\r\n      }\r\n    }\r\n    ${matmulSnippet}\r\n  }\r\n`;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// TODO: this is the same naive implementation we use for reduce that has\r\n// performance limitations when the reduced axis is long. Need to add\r\n// a optimized codepath for this.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {createReduceProgramInfo, ReduceOp} from './reduce';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\r\n    throw new Error('ArgMinMaxOp op requires 1 or 2 inputs.');\r\n  }\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport interface ArgMinMaxAttributes extends AttributeWithCacheKey {\r\n  keepDims: boolean;\r\n  axis: number;\r\n  selectLastIndex: number;\r\n}\r\n\r\nconst createArgMinMaxAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: ArgMinMaxAttributes): ArgMinMaxAttributes =>\r\n        createAttributeWithCacheKey(\r\n            {axis: attributes.axis, keepDims: attributes.keepDims, selectLastIndex: attributes.selectLastIndex});\r\n\r\nconst createArgMinMaxProgramInfoLoader =\r\n    (inputs: readonly TensorView[], name: string, attributes: ArgMinMaxAttributes, reduceOp: ReduceOp):\r\n        ProgramInfoLoader => {\r\n          const updatedAttributes: ArgMinMaxAttributes =\r\n              inputs.length === 1 ? attributes : createArgMinMaxAttributesFromInputs(inputs, attributes);\r\n          const cacheHint = updatedAttributes.cacheKey + inputs.map(x => x.dims.toString()).join('_');\r\n          const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint};\r\n          return {\r\n            ...metadata,\r\n            get: () => createReduceProgramInfo(\r\n                metadata, [inputs[0]], reduceOp, [updatedAttributes.axis], DataType.int64, updatedAttributes.keepDims)\r\n          };\r\n        };\r\n\r\n\r\nexport const argMin = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n    return [\r\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\r\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '<=' : '<'} value) {\r\n         value = ${input.getByOffset('inputOffset')};\r\n         bestIndex = i32(lastIndex);\r\n       }`,\r\n      '', output.setByOffset('global_idx', 'bestIndex')\r\n    ];\r\n  };\r\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'ArgMin', attributes, argMinMaxOp), {inputs: [0]});\r\n};\r\n\r\nexport const argMax = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n    return [\r\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\r\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '>=' : '>'} value) {\r\n         value = ${input.getByOffset('inputOffset')};\r\n         bestIndex = i32(lastIndex);\r\n       }`,\r\n      '', output.setByOffset('global_idx', 'bestIndex')\r\n    ];\r\n  };\r\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'argMax', attributes, argMinMaxOp), {inputs: [0]});\r\n};\r\n\r\nexport const parseArgMinMaxAttributes = (attributes: Record<string, unknown>): ArgMinMaxAttributes =>\r\n    createAttributeWithCacheKey(attributes as Omit<ArgMinMaxAttributes, keyof AttributeWithCacheKey>);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\ntype BuiltinFunctionName = string;\r\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\r\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\r\n  scalar: BinaryCustomExpression;\r\n  vector: BinaryCustomExpression;\r\n};\r\n\r\nconst createBinaryOpProgramShader =\r\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\r\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, typeA: number, typeB: number,\r\n     typeOutput: number, additionalImplementation?: string) => {\r\n      const outputSize = ShapeUtil.size(dimsOutput);\r\n      const vecSize = Math.ceil(outputSize / 4);\r\n\r\n      let expressionScalar: BinaryCustomExpression;\r\n      let expressionVector: BinaryCustomExpression;\r\n      if (typeof funcCall === 'string') {\r\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\r\n      } else if (typeof funcCall === 'function') {\r\n        expressionScalar = expressionVector = funcCall;\r\n      } else {\r\n        expressionScalar = funcCall.scalar;\r\n        expressionVector = funcCall.vector;\r\n      }\r\n\r\n      let broadcastImpl = '';\r\n      const output = outputVariable('outputData', typeOutput, dimsOutput, 4);\r\n      const a = inputVariable('aData', typeA, dimsA, 4);\r\n      const b = inputVariable('bData', typeB, dimsB, 4);\r\n      if (doBroadcast) {\r\n        const calcOffsetImpl = (dims: readonly number[]) => {\r\n          const strides = ShapeUtil.computeStrides(dims);\r\n          const offsets: string[] = [];\r\n          for (let i = dims.length - 1; i >= 0; i--) {\r\n            const idx = dimsOutput.length === 0 ? '0u' :\r\n                (dimsOutput.length === 1)       ? 'outputIndices' :\r\n                                                  `outputIndices[${i + dimsOutput.length - dims.length}]`;\r\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\r\n          }\r\n          return offsets.length > 0 ? offsets.join('+') : '0u';\r\n        };\r\n\r\n        broadcastImpl = `\r\n  fn calcOffsetA(outputIndices: ${output.type.indices}) -> u32 {\r\n    return ${calcOffsetImpl(dimsA)};\r\n  }\r\n\r\n  fn calcOffsetB(outputIndices: ${output.type.indices}) -> u32 {\r\n    return ${calcOffsetImpl(dimsB)};\r\n  }\r\n  `;\r\n      }\r\n\r\n      let assignment: string;\r\n      if (vectorize) {\r\n        if (doBroadcast) {\r\n          assignment = `\r\n      let outputIndices = ${output.offsetToIndices('global_idx * 4u')};\r\n      let offsetA = calcOffsetA(outputIndices);\r\n      let offsetB = calcOffsetB(outputIndices);\r\n      ${\r\n              output.setByOffset(\r\n                  'global_idx', expressionVector(a.getByOffset('offsetA / 4u'), b.getByOffset('offsetB / 4u')))}`;\r\n        } else {\r\n          assignment = output.setByOffset(\r\n              'global_idx', expressionVector(a.getByOffset('global_idx'), b.getByOffset('global_idx')));\r\n        }\r\n      } else {\r\n        if (!doBroadcast) {\r\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\r\n        }\r\n        const singleAssignment = (x: number) => {\r\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\r\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\r\n          return `\r\n      let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\r\n      let offsetA${x} = calcOffsetA(outputIndices${x});\r\n      let offsetB${x} = calcOffsetB(outputIndices${x});\r\n      let indexA${x} = offsetA${x} / 4u;\r\n      let indexB${x} = offsetB${x} / 4u;\r\n      let componentA${x} = offsetA${x} % 4u;\r\n      let componentB${x} = offsetB${x} % 4u;\r\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\r\n        };\r\n\r\n        assignment = `\r\n      ${singleAssignment(0)}\r\n      ${singleAssignment(1)}\r\n      ${singleAssignment(2)}\r\n      ${singleAssignment(3)}`;\r\n      }\r\n\r\n      return `\r\n  ${shaderHelper.declareVariables(a, b, output)}\r\n\r\n  ${additionalImplementation ?? ''}\r\n  ${broadcastImpl}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\r\n    ${assignment}\r\n  }`;\r\n    };\r\n\r\nconst createBinaryOpProgramInfo =\r\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\r\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\r\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\r\n      let outputShape = a.dims;\r\n      let outputSize = ShapeUtil.size(a.dims);\r\n\r\n      let vectorize = false;\r\n\r\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        outputSize = ShapeUtil.size(outputShape);\r\n\r\n        // check whether vectorize can be enabled\r\n        let sharedDimension = 1;\r\n        for (let i = 0; i < outputShape.length; i++) {\r\n          const dimA = a.dims[a.dims.length - i] ?? 1;\r\n          const dimB = b.dims[b.dims.length - i] ?? 1;\r\n          if (dimA === dimB) {\r\n            sharedDimension *= dimA;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        if (sharedDimension % 4 === 0) {\r\n          vectorize = true;\r\n        }\r\n      } else {\r\n        // element-wise\r\n        vectorize = true;\r\n      }\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\r\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, a.dataType, b.dataType,\r\n            outputDataType, additionalImplementation),\r\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () =>\r\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\r\n      };\r\n    };\r\n\r\nconst createBinaryOpProgramInfoLoader =\r\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\r\n     cacheKey?: string): ProgramInfoLoader => {\r\n      const metadata:\r\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\r\n      return {\r\n        ...metadata,\r\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\r\n      };\r\n    };\r\n\r\nexport const add = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\r\n};\r\n\r\nexport const div = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\r\n};\r\n\r\nexport const mul = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\r\n};\r\n\r\nexport const pow = (context: ComputeContext): void => {\r\n  const type = inputVariable('input', context.inputs[0].dataType, context.inputs[0].dims).type.value;\r\n  const roundStr = type === 'i32' ? 'round' : '';\r\n  context.compute(createBinaryOpProgramInfoLoader(\r\n      context.inputs, 'Pow',\r\n      ({scalar: (a, b) => `pow_custom(${a},${b})`, vector: (a, b) => `pow_vector_custom(${a},${b})`}),\r\n      `\r\n    fn pow_custom(a : ${type}, b : ${type}) -> ${type} {\r\n      if (b == ${type}(0.0)) {\r\n        return ${type}(1.0);\r\n      } else if (a < ${type}(0.0) && f32(b) != floor(f32(b))) {\r\n        return ${type}(pow(f32(a), f32(b))); // NaN\r\n      }\r\n      return select(sign(a), ${type}(1.0), round(f32(abs(b) % ${type}(2.0))) != 1.0) * ${type}(${\r\n          roundStr}(pow(f32(abs(a)), f32(b))));\r\n    }\r\n    fn pow_vector_custom(a : vec4<${type}>, b : vec4<${type}>) -> vec4<${type}> {\r\n      // TODO: implement vectorized pow\r\n      return vec4<${type}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\r\n    }\r\n      `));\r\n};\r\n\r\nexport const sub = (context: ComputeContext): void => {\r\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {ShapeUtil} from '../../util';\r\n\r\n/**\r\n * constant value for a workgroup size.\r\n *\r\n * We definitely can do further optimization in future, but for now we use 64.\r\n *\r\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\r\n *                needs something different.\r\n *\r\n * from: https://surma.dev/things/webgpu/\r\n **/\r\nexport const WORKGROUP_SIZE = 64;\r\n\r\ninterface IndicesHelperTypes {\r\n  /**\r\n   * WGSL type of indices expression\r\n   */\r\n  readonly indices: string;\r\n\r\n  /**\r\n   * WGSL type of a value\r\n   */\r\n  readonly value: string;\r\n\r\n  /**\r\n   * WGSL type of storage type representing a value\r\n   *\r\n   * This is usually the same to `value`, but for some type (eg. bool), we need to use `u32` as storage type for\r\n   * value type `vec4<bool>`\r\n   */\r\n  readonly storage: string;\r\n\r\n  /**\r\n   * tensor type as represented in TensorView\r\n   */\r\n  readonly tensor: number;\r\n}\r\n\r\n/**\r\n * A helper class for generating WGSL code for manipulating indices and data for a shader's input or output.\r\n *\r\n * This class is designed to offer a unified way to generate WGSL code for manipulating indices and data for a shader's\r\n * input or output.\r\n *\r\n * The following is a list of terminologies used in this class:\r\n * - `offset`: a uint32 value representing the offset of an element in the data buffer.\r\n * - `indices`: an abstraction of a multi-dimensional array's indices representing the data's index on each dimension.\r\n * - `value`: a value of a data element.\r\n *\r\n * Users are expected to create an instance of this class for each shader's input or output, and use the instance to\r\n * generate WGSL code for manipulating indices and data. The following 2 exported functions are for users to call to\r\n * create an instance of an indices helper:\r\n * - `inputVariable()`: create an indices helper instance for an input.\r\n * - `outputVariable()`: create an indices helper instance for an output.\r\n *\r\n * An indices helper instance contains helper functions for the following operations:\r\n * - access readonly basic information, including: `name`(the name of the input or output), `usage`(whether it's an\r\n * input or an output) and `shape`(the passed in shape).\r\n * - `type`: access readonly type information, including: `indices`(the type of indices), `value`(the type of value at\r\n * runtime), `storage`(the type of value at storage) and `tensor`(the tensor type as represented in TensorView).\r\n * - generate WGSL code for getting indices from offset. Use `offsetToIndices()` for WGSL code snippet to calculate\r\n * indices from offset, and use `indicesToOffset()` for WGSL code snippet to calculate offset from indices.\r\n * - to manipulate an instance of indices, use `setIndices()` and `getIndices()` to set and get the indices on an\r\n * indices variable.\r\n * - to manipulate data, use `set()`/`get()` to access data at the given indices from parameter list, use\r\n * `setByIndices()`/`getByIndices()` to access data at the given indices from an indices variable, and use\r\n * `setByOffset()`/`getByOffset()` to access data at the given offset.\r\n * - `impl`: get WGSL code of function implementation for the util functions mentioned above.\r\n */\r\nexport interface IndicesHelper {\r\n  /**\r\n   * get WGSL code of function implementation for the util functions.\r\n   *\r\n   */\r\n  readonly impl: () => string;\r\n\r\n  /**\r\n   * get type info\r\n   */\r\n  readonly type: IndicesHelperTypes;\r\n\r\n  /**\r\n   * WGSL code of a expression for getting indices from offset.\r\n   *\r\n   * @param varOffset - a u32 expression representing the offset.\r\n   *\r\n   * @returns an `type.indices` expression\r\n   */\r\n  readonly offsetToIndices: (varOffset: string) => string;\r\n\r\n  /**\r\n   * WGSL code of an `u32` expression for getting offset from indices.\r\n   *\r\n   * @param varIndices - a `type.indices` expression representing the indices.\r\n   *\r\n   * @returns an `u32` expression\r\n   */\r\n  readonly indicesToOffset: (varIndices: string) => string;\r\n\r\n  /**\r\n   * WGSL code of generating an indices literal\r\n   *\r\n   * @param init - initial value.\r\n   */\r\n  readonly indices: (...init: ReadonlyArray<number|string>) => string;\r\n\r\n  /**\r\n   * WGSL code of a statement for setting indices.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   * @param idx - the index of the indices to set. can be a number or a string (WGSL `u32` expression).\r\n   * @param value - the value to set. can be a number or a string (WGSL `u32` expression).\r\n   *\r\n   * @returns a WGSL statement\r\n   */\r\n  readonly indicesSet: (varIndices: string, idx: number|string, value: number|string) => void;\r\n\r\n  /**\r\n   * WGSL code of an `u32` expression for getting indices.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   * @param idx - the index of the indices to get. can be a number or a string (WGSL `u32` expression).\r\n   *\r\n   * @returns an `u32` expression\r\n   */\r\n  readonly indicesGet: (varIndices: string, idx: number|string) => string;\r\n\r\n  /**\r\n   * WGSL code for a statement for setting data at the given indices.\r\n   *\r\n   * @param indicesAndValue - an array of numbers or strings (WGSL `u32` expression) representing the indices, followed\r\n   *     by the value to set. This array should have exactly `shape.length + 1` elements.\r\n   */\r\n  readonly set: (...indicesAndValue: ReadonlyArray<number|string>) => string;\r\n\r\n  /**\r\n   * WGSL code for a statement for setting data at the given indices variable.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   * @param value - the value to set. should be a WGSL expression.\r\n   */\r\n  readonly setByIndices: (varIndices: string, value: string) => string;\r\n\r\n  /**\r\n   * WGSL code for a statement for setting data at the given offset.\r\n   *\r\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\r\n   * @param value - the value to set. should be a WGSL expression.\r\n   */\r\n  readonly setByOffset: (offset: number|string, value: string) => string;\r\n\r\n  /**\r\n   * WGSL code for an expression for getting data at the given indices.\r\n   *\r\n   * @param indices - an array of numbers or strings (WGSL `u32` expression) representing the indices.\r\n   */\r\n  readonly get: (...indices: ReadonlyArray<number|string>) => string;\r\n\r\n  /**\r\n   * WGSL code for an expression for getting data at the given indices variable.\r\n   *\r\n   * @param varIndices - a variable name for the indices.\r\n   */\r\n  readonly getByIndices: (varIndices: string) => string;\r\n\r\n  /**\r\n   * WGSL code for an expression for getting data at the given offset.\r\n   *\r\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\r\n   */\r\n  readonly getByOffset: (offset: number|string) => string;\r\n\r\n  /**\r\n   * name of the data variable\r\n   */\r\n  readonly name: string;\r\n\r\n  /**\r\n   * whether the helper is for an input or an output.\r\n   */\r\n  readonly usage: 'input'|'output';\r\n\r\n  /**\r\n   * the shape of the input or output.\r\n   */\r\n  readonly shape: readonly number[];\r\n}\r\n\r\nconst getWgslMappedType = (type: number, components: 1|2|3|4): string|[string, string] => {\r\n  // return type is [ storage type, runtime type ] or a single string for both\r\n  switch (type) {\r\n    // TODO: enable after \"shader-f16\" WSGL extension release\r\n    // case DataType.float16:\r\n    //   return components > 1 ? `vec${components}<f16>` : 'f16';\r\n    case DataType.float:\r\n      return components > 1 ? `vec${components}<f32>` : 'f32';\r\n    case DataType.int32:\r\n      return components > 1 ? `vec${components}<i32>` : 'i32';\r\n    case DataType.uint32:\r\n      return components > 1 ? `vec${components}<u32>` : 'u32';\r\n    case DataType.int64:\r\n      if (components > 1) {\r\n        throw new Error('currently not supported vecX of uint64 yet');\r\n      }\r\n      return ['vec2<u32>', 'i32'];\r\n    case DataType.uint64:\r\n      if (components > 1) {\r\n        throw new Error('currently not supported vecX of uint64 yet');\r\n      }\r\n      return ['vec2<u32>', 'u32'];\r\n    case DataType.bool:\r\n      if (components !== 4) {\r\n        throw new Error('bool must be vec4');\r\n      }\r\n      return ['u32', 'vec4<bool>'];\r\n\r\n    default:\r\n      throw new Error(`Unknown data type: ${type}`);\r\n  }\r\n};\r\n\r\nexport const tensorTypeToWsglStorageType = (type: DataType, components: 1|2|3|4 = 1) => {\r\n  const mappedType = getWgslMappedType(type, components);\r\n  return typeof mappedType === 'string' ? mappedType : mappedType[0];\r\n};\r\n\r\n/**\r\n * A helper function to get a IndicesHelper for a given input or output.\r\n *\r\n * @param name - the name of the input or output.\r\n * @param tensorType - the tensor type of the input or output.\r\n * @param shape - the tensor shape of the input or output.\r\n * @param isInput - whether the helper is for an input or an output.\r\n * @param components - indicates the number of components of each element. 1 for scalar, 2 for vec2, 3 for vec3, 4 for\r\n *    vec4.\r\n */\r\nconst createIndicesHelper =\r\n    (name: string, tensorType: number, shape: readonly number[], isInput: boolean,\r\n     components: 1|2|3|4): IndicesHelper => {\r\n      const rank = shape.length;\r\n      const indicesType = rank < 2 ? 'u32' : rank <= 4 ? `vec${rank}<u32>` : `array<u32, ${rank}>`;\r\n      const mappedType = getWgslMappedType(tensorType, components);\r\n      const valueType = typeof mappedType === 'string' ? mappedType : mappedType[1];\r\n      const storageType = typeof mappedType === 'string' ? mappedType : mappedType[0];\r\n      const type = {indices: indicesType, value: valueType, storage: storageType, tensor: tensorType};\r\n\r\n      const normalizeDim = (dim: number|string): string => typeof dim === 'string' ? dim : `${dim}u`;\r\n\r\n      const implementationUsed = {\r\n        offsetToIndices: false,\r\n        indicesToOffset: false,\r\n        set: false,\r\n        setByIndices: false,\r\n        get: false,\r\n        getByIndices: false,\r\n      };\r\n\r\n      const strides = ShapeUtil.computeStrides(shape);\r\n      let o2iSnippet = '';\r\n      for (let i = 0; i < rank - 1; i++) {\r\n        o2iSnippet += `\r\n    let dim${i} = current / ${strides[i]}u;\r\n    let rest${i} = current % ${strides[i]}u;\r\n    indices[${i}] = dim${i};\r\n    current = rest${i};\r\n    `;\r\n      }\r\n      o2iSnippet += `indices[${rank - 1}] = current;`;\r\n\r\n      const offsetToIndicesImplementation = rank < 2 ? '' : `\r\n  fn o2i_${name}(offset: u32) -> ${type.indices} {\r\n    var indices: ${type.indices};\r\n    var current = offset;\r\n    ${o2iSnippet}\r\n    return indices;\r\n  }`;\r\n\r\n      const offsetToIndices = (varOffset: string) => {\r\n        implementationUsed.offsetToIndices = true;\r\n        return rank < 2 ? varOffset : `o2i_${name}(${varOffset})`;\r\n      };\r\n\r\n      const offsets: string[] = [];\r\n      if (rank >= 2) {\r\n        for (let i = rank - 1; i >= 0; i--) {\r\n          offsets.push(`${strides[i]}u * (indices[${i}])`);\r\n        }\r\n      }\r\n\r\n      const indicesToOffsetImplementation = rank < 2 ? '' : `\r\n  fn i2o_${name}(indices: ${type.indices}) -> u32 {\r\n    return ${offsets.join('+')};\r\n  }`;\r\n\r\n      const indicesToOffset = (varIndices: string) => {\r\n        implementationUsed.indicesToOffset = true;\r\n        return rank < 2 ? varIndices : `i2o_${name}(${varIndices})`;\r\n      };\r\n\r\n      const indices = (...init: ReadonlyArray<number|string>) =>\r\n          rank === 0 ? '0u' : `${type.indices}(${init.map(normalizeDim).join(',')})`;\r\n\r\n      const indicesGet = (varIndices: string, idx: number|string) => {\r\n        if (rank < 2) {\r\n          return `${varIndices}`;\r\n        } else {\r\n          return `${varIndices}[${idx}]`;\r\n        }\r\n      };\r\n\r\n      const indicesSet = (varIndices: string, idx: number|string, value: string) => {\r\n        if (rank < 2) {\r\n          return `${varIndices}=${value};`;\r\n        } else {\r\n          return `${varIndices}[${idx}]=${value};`;\r\n        }\r\n      };\r\n\r\n      const setByOffset = (offset: number|string, value: string) => (() => {\r\n        if (type.storage === type.value) {\r\n          return `${name}[${offset}]=${value};`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\r\n          // int64, components === 1\r\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), select(0u, 0xFFFFFFFFu, ${value} < 0));`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\r\n          // uint64, components === 1\r\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), 0u);`;\r\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\r\n          // bool, components === 4\r\n          return `${name}[${offset}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${value}));`;\r\n        } else {\r\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\r\n        }\r\n      })();\r\n\r\n      const getByOffset = (offset: number|string) => (() => {\r\n        if (type.storage === type.value) {\r\n          return `${name}[${offset}]`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\r\n          // int64, components === 1\r\n          return `i32(${name}[${offset}].x)`;\r\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\r\n          // uint64, components === 1\r\n          return `u32(${name}[${offset}].x)`;\r\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\r\n          // bool, components === 4\r\n          return `vec4<bool>(bool(${name}[${offset}] & 0xFFu), bool(${name}[${offset}] & 0xFF00u), bool(${name}[${\r\n              offset}] & 0xFF0000u), bool(${name}[${offset}] & 0xFF000000u))`;\r\n        } else {\r\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\r\n        }\r\n      })();\r\n\r\n      const getByIndicesImplementation = rank < 2 ? '' : `\r\n  fn get_${name}ByIndices(indices: ${type.indices}) -> ${valueType} {\r\n    return ${name}[i2o_${name}(indices)];\r\n  }`;\r\n\r\n      const getImplementation = rank < 2 ? '' : (() => {\r\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\r\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\r\n        return `\r\n  fn get_${name}(${params}) -> ${valueType} {\r\n    return get_${name}ByIndices(${indices(dims)});\r\n  }`;\r\n      })();\r\n\r\n      const get = (...indices: ReadonlyArray<number|string>) => {\r\n        if (indices.length !== rank) {\r\n          throw new Error(`indices length must be ${rank}`);\r\n        }\r\n\r\n        const normalizedIndices = indices.map(normalizeDim).join(',');\r\n\r\n        if (rank === 0) {\r\n          return getByOffset('0u');\r\n        } else if (rank === 1) {\r\n          return getByOffset(normalizedIndices[0]);\r\n        } else {\r\n          implementationUsed.get = true;\r\n          implementationUsed.getByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `get_${name}(${normalizedIndices})`;\r\n        }\r\n      };\r\n\r\n      const getByIndices = (varIndices: string) => {\r\n        if (rank < 2) {\r\n          return getByOffset(varIndices);\r\n        } else {\r\n          implementationUsed.getByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `get_${name}ByIndices(${varIndices})`;\r\n        }\r\n      };\r\n\r\n      const setByIndicesImplementation = rank < 2 ? '' : `\r\n  fn set_${name}ByIndices(indices: ${type.indices}, value: ${valueType}) {\r\n    ${setByOffset(`i2o_${name}(indices)`, 'value')}\r\n  }`;\r\n\r\n      const setImplementation = rank < 2 ? '' : (() => {\r\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\r\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\r\n        return `\r\n  fn set_${name}(${params}, value: ${valueType}) {\r\n    set_${name}ByIndices(${indices(dims)}, value);\r\n  }`;\r\n      })();\r\n\r\n      const set = (...indicesAndValue: ReadonlyArray<number|string>) => {\r\n        if (indicesAndValue.length !== rank + 1) {\r\n          throw new Error(`indices length must be ${rank}`);\r\n        }\r\n        const value = indicesAndValue[rank];\r\n        if (typeof value !== 'string') {\r\n          throw new Error('value must be string');\r\n        }\r\n\r\n        const normalizedIndices = indicesAndValue.slice(0, rank).map(normalizeDim).join(',');\r\n\r\n        if (rank === 0) {\r\n          return setByOffset('0u', value);\r\n        } else if (rank === 1) {\r\n          return setByOffset(normalizedIndices[0], value);\r\n        } else {\r\n          implementationUsed.set = true;\r\n          implementationUsed.setByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `set_${name}(${normalizedIndices}, ${value})`;\r\n        }\r\n      };\r\n\r\n      const setByIndices = (varIndices: string, value: string) => {\r\n        if (rank < 2) {\r\n          return setByOffset(varIndices, value);\r\n        } else {\r\n          implementationUsed.setByIndices = true;\r\n          implementationUsed.indicesToOffset = true;\r\n          return `set_${name}ByIndices(${varIndices}, ${value});`;\r\n        }\r\n      };\r\n\r\n      const impl = () => {\r\n        const impls = [];\r\n        if (implementationUsed.offsetToIndices) {\r\n          impls.push(offsetToIndicesImplementation);\r\n        }\r\n        if (implementationUsed.indicesToOffset) {\r\n          impls.push(indicesToOffsetImplementation);\r\n        }\r\n        if (implementationUsed.set) {\r\n          impls.push(setImplementation);\r\n        }\r\n        if (implementationUsed.setByIndices) {\r\n          impls.push(setByIndicesImplementation);\r\n        }\r\n        if (implementationUsed.get) {\r\n          impls.push(getImplementation);\r\n        }\r\n        if (implementationUsed.getByIndices) {\r\n          impls.push(getByIndicesImplementation);\r\n        }\r\n        return impls.join('\\n');\r\n      };\r\n\r\n      return {\r\n        impl,\r\n        type,\r\n        offsetToIndices,\r\n        indicesToOffset,\r\n        indices,\r\n        indicesGet,\r\n        indicesSet,\r\n        set,\r\n        setByOffset,\r\n        setByIndices,\r\n        get,\r\n        getByOffset,\r\n        getByIndices,\r\n        // isVec4,\r\n        usage: isInput ? 'input' : 'output',\r\n        name,\r\n        shape\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a IndicesHelper for an input.\r\n *\r\n * @param name - the name of the input.\r\n * @param type - the tensor type of the input.\r\n * @param shape - the tensor shape of the input.\r\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\r\n * @returns an IndicesHelper for the input.\r\n */\r\nexport const inputVariable =\r\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\r\n        createIndicesHelper(name, type, shape, true, components);\r\n\r\n/**\r\n * Create a IndicesHelper for an output.\r\n *\r\n * @param name - the name of the output.\r\n * @param type - the tensor type of the output.\r\n * @param shape - the tensor shape of the output.\r\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\r\n * @returns an IndicesHelper for the output.\r\n */\r\nexport const outputVariable =\r\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\r\n        createIndicesHelper(name, type, shape, false, components);\r\n\r\n/**\r\n * A ShaderHelper is a helper class for generating WGSL code.\r\n */\r\nexport interface ShaderHelper {\r\n  /**\r\n   * A helper function to generate the start of main function in WGSL source code.\r\n   *\r\n   * @example\r\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n   *  ...\r\n   *\r\n   *  ${shaderHelper.mainStart()}\r\n   *    // your code here inside main() function\r\n   *    ...\r\n   *  }\r\n   * `;\r\n   *\r\n   * @param workgroupSize - an optional workgroup size. default is WORKGROUP_SIZE.\r\n   */\r\n  mainStart(workgroupSize?: number|[number, number, number]): string;\r\n\r\n  /**\r\n   * A helper function to generate the code snippet for guarding against out-of-bounds size.\r\n   *\r\n   * @example\r\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n   *  ...\r\n   *\r\n   *  ${shaderHelper.mainStart()}\r\n   *    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n   *\r\n   *    // your code here inside main() function\r\n   *    ...\r\n   *  }\r\n   * `;\r\n   *\r\n   * @param size - the size of the data to guard against. can be a number or a string (WGSL `u32` expression).\r\n   */\r\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\r\n\r\n  /**\r\n   * A helper function to generate the code snippet for declaring multiple inputs or outputs.\r\n   *\r\n   * @param variables - an array of IndicesHelper for the variables.\r\n   */\r\n  declareVariables(...variables: IndicesHelper[]): string;\r\n\r\n  /**\r\n   * Get additional implementation that needs to be added to the shader source.\r\n   */\r\n  readonly additionalImplementations: string;\r\n}\r\n\r\nclass ShaderHelperImpl implements ShaderHelper {\r\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\r\n\r\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\r\n    // Guard against out-of-bounds work group sizes\r\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\r\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\r\n  }\r\n\r\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\r\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\r\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\r\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\r\n\r\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\r\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\r\n                                             `@builtin(local_invocation_index) local_index : u32,\r\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\r\n    const globalIdxDefinition = is1DimensionDispatch ?\r\n        'let global_idx = global_id.x;' :\r\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\r\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\r\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\r\n\r\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\r\n  fn main(${paramList}) {\r\n    ${globalIdxDefinition}\r\n  `;\r\n  }\r\n\r\n  declareVariable(variable: IndicesHelper, bindingIndex: number): string {\r\n    this.indicesHelpers.push(variable);\r\n    const access = variable.usage === 'input' ? 'read' : 'read_write';\r\n    const storageType = variable.type.storage;\r\n    return `@group(0) @binding(${bindingIndex}) var<storage, ${access}> ${variable.name}: array<${storageType}>;`;\r\n  }\r\n\r\n  declareVariables(...variables: IndicesHelper[]): string {\r\n    let i = 0;\r\n    return variables.filter(v => ShapeUtil.size(v.shape) > 0).map(v => this.declareVariable(v, i++)).join('\\n');\r\n  }\r\n\r\n  private indicesHelpers: IndicesHelper[] = [];\r\n\r\n  get additionalImplementations(): string {\r\n    return this.indicesHelpers.map(i => i.impl()).join('\\n');\r\n  }\r\n}\r\n\r\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\r\n    new ShaderHelperImpl(dispatchGroup);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].dataType;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.dataType !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n\r\nconst createConcatProgramMetadata = (inputCount: number, cacheHint: string) =>\r\n    ({name: 'Concat', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\r\n\r\nconst calculateInputIndexImpl = (numberOfTensors: number): string => `\r\n  fn calculateInputIndex(index: u32) -> u32 {\r\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\r\n      if (index < sizeInConcatAxis[i]) {\r\n        return i;\r\n      }\r\n    }\r\n    return ${numberOfTensors}u;\r\n  }`;\r\n\r\nconst assignOutputData = (inputs: readonly IndicesHelper[], output: IndicesHelper) => {\r\n  const numberOfTensors = inputs.length;\r\n\r\n  const codeLines: string[] = [];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    const returnSnippet = output.setByOffset('global_idx', inputs[i].getByIndices('indices'));\r\n    if (numberOfTensors === 1) {\r\n      codeLines.push(returnSnippet);\r\n    } else if (i === 0) {\r\n      codeLines.push(`if (inputIndex == ${i}u) { ${returnSnippet} }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(`else { ${returnSnippet} }`);\r\n    } else {\r\n      codeLines.push(`else if (inputIndex == ${i}) { ${returnSnippet} }`);\r\n    }\r\n  }\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst createConcatProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === adjustedAxis) {\r\n            outputShape[adjustedAxis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      const inputVars = new Array<IndicesHelper>(inputs.length);\r\n      const dataType = inputs[0].dataType;\r\n\r\n      let previousSum = 0;\r\n      for (let i = 0; i < inputs.length; ++i) {\r\n        previousSum += inputs[i].dims[adjustedAxis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n\r\n        inputVars[i] = inputVariable(`input${i}`, dataType, inputs[i].dims);\r\n      }\r\n\r\n      const output = outputVariable('output', dataType, outputShape);\r\n\r\n      const indicesAxis = output.indicesGet('indices', adjustedAxis);\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  ${shaderHelper.declareVariables(...inputVars, output)}\r\n\r\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\r\n  ${calculateInputIndexImpl(sizeInConcatAxis.length)}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    var indices = ${output.offsetToIndices('global_idx')};\r\n\r\n    let inputIndex = calculateInputIndex(${indicesAxis});\r\n    if (inputIndex != 0u) {\r\n      ${indicesAxis} -= sizeInConcatAxis[inputIndex - 1u];\r\n    }\r\n\r\n    ${assignOutputData(inputVars, output)}\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createConcatProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createConcatProgramInfo(metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute(createConcatProgramInfoLoader(context.inputs, attributes));\r\n};\r\n\r\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis as number});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nconst createGroupedConvProgramInfo =\r\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\r\n      const xShape = inputs[0].dims;\r\n      const wShape = inputs[1].dims;\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n\r\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\r\n\r\n      const isChannelLast = attributes.format === 'NHWC';\r\n      const outputShape = calculateOutputShape(\r\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\r\n      const x = inputVariable('x', inputs[0].dataType, xShape);\r\n      const w = inputVariable('w', inputs[1].dataType, wShape);\r\n      const inputVars = [x, w];\r\n      if (hasBias) {\r\n        inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims));\r\n      }\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\r\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\r\n\r\n  ${shaderHelper.declareVariables(...inputVars, output)}\r\n\r\n  ${activationFunction}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let outputIndices = ${output.offsetToIndices('global_idx')};\r\n    let batch: u32 = outputIndices[0];\r\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\r\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\r\n          isChannelLast ? 2 : 3}]) * strides - pads;\r\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\r\n\r\n    var value: ${output.type.value} = ${output.type.value}(0);\r\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\r\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\r\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\r\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\r\n\r\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\r\n          continue;\r\n        }\r\n\r\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\r\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\r\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\r\n            continue;\r\n          }\r\n\r\n          let xVal = ${\r\n          isChannelLast ? x.get('batch', 'xHeight', 'xWidth', 'input_channel') :\r\n                          x.get('batch', 'input_channel', 'xHeight', 'xWidth')};\r\n          let wVal = ${w.get('output_channel', 'wInChannel', 'wHeight', 'wWidth')};\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${output.setByOffset('global_idx', 'value')}\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [{\r\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\r\n          dataType: inputs[0].dataType,\r\n          gpuDataType: GpuDataType.default\r\n        }],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\n/**\r\n * naive grouped conv implementation, supports 1d/2d conv\r\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\r\n */\r\nexport const createGroupedConvProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\r\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {createConvTranspose2DProgramInfo} from './3rd-party/conv_backprop_webgpu';\r\nimport {ConvAttributes} from './conv';\r\nimport {parseInternalActivationAttributes} from './fuse-utils';\r\n\r\nconst computeTotalPad =\r\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\r\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\r\n\r\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\r\n  const smallPad = Math.floor(totalPad / 2);\r\n  if (autoPad === 'SAME_UPPER') {\r\n    pads[head] = smallPad;\r\n    pads[tail] = totalPad - smallPad;\r\n  } else if (autoPad === 'SAME_LOWER') {\r\n    pads[head] = totalPad - smallPad;\r\n    pads[tail] = smallPad;\r\n  }\r\n};\r\n\r\nconst calculateOutputShapeAndPads =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\r\n     group: number, pads: number[], strides: readonly number[], isChannelLast: boolean, outputPadding: number[],\r\n     outputShape: number[]) => {\r\n      const spatialRank = inputShape.length - 2;\r\n      const updateOutputShape = outputShape.length === 0;\r\n      if (outputPadding.length === 0) {\r\n        for (let i = 0; i < spatialRank; ++i) {\r\n          outputPadding.push(0);\r\n        }\r\n      }\r\n      const batchSize = inputShape[0];\r\n      const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\r\n      for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\r\n        const inSize = inputShape[j];\r\n        const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\r\n        const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\r\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\r\n        if (updateOutputShape) {\r\n          outputShape.push(\r\n              strides[i] * (inSize - 1) + outputPadding[i] + (kernelShape[j] - 1) * dilations[i] + 1 - pads[i] -\r\n              pads[i + spatialRank]);\r\n        }\r\n      }\r\n      outputShape.splice(0, 0, batchSize);\r\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\r\n    };\r\n\r\nexport interface ConvTransposeAttributes extends ConvAttributes {\r\n  readonly outputPadding: readonly number[];\r\n  readonly outputShape: readonly number[];\r\n}\r\n\r\n\r\nconst getAdjustedConvTransposeAttributes =\r\n    <T extends ConvTransposeAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\r\n      const kernelShape = attributes.kernelShape.slice();\r\n      // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n      if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 0) === 0) {\r\n        kernelShape.length = 0;\r\n        for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n          kernelShape.push(inputs[1].dims[i]);\r\n        }\r\n      }\r\n      const isChannelsLast = attributes.format === 'NHWC';\r\n      kernelShape.splice(0, 0, inputs[1].dims[0]);\r\n      kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\r\n\r\n      const pads = attributes.pads.slice();\r\n      const outputShape = attributes.outputShape.slice();\r\n      const outputPadding = attributes.outputPadding.slice();\r\n      const inputShape = inputs[0].dims;\r\n      let dilations = attributes.dilations.slice();\r\n      if (dilations.reduce((a, b) => a + b, 0) === 0) {\r\n        const spatialRank = inputs[0].dims.length - 2;\r\n        dilations = new Array(spatialRank).fill(1);\r\n      }\r\n      let strides = attributes.strides.slice();\r\n      if (strides.reduce((a, b) => a + b, 0) === 0) {\r\n        const spatialRank = inputs[0].dims.length - 2;\r\n        strides = new Array(spatialRank).fill(1);\r\n      }\r\n      // If outputShape is not specified in the attributes of this op, infer it from the parameters\r\n      // Similarly, automatically infer pads if not specified\r\n      calculateOutputShapeAndPads(\r\n          inputShape, kernelShape, dilations, attributes.autoPad, attributes.group, pads, strides, isChannelsLast,\r\n          outputPadding, outputShape);\r\n\r\n      // always return a new object so does not modify the original attributes\r\n      const newAttributes: T = Object.assign({}, attributes);\r\n      Object.assign(\r\n          newAttributes,\r\n          {kernelShape, pads, outputPadding, outputShape, dilations, strides, cacheKey: attributes.cacheKey});\r\n      return newAttributes;\r\n    };\r\n\r\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const format = attributes.format as 'NHWC' | 'NCHW';\r\n  const autoPad =\r\n      ['NOTSET', 'VALID', 'SAME_UPPER',\r\n       'SAME_LOWER'][typeof attributes.autoPad == 'undefined' ? 0 : attributes.autoPad as number];\r\n  const dilations = attributes.dilations as [number, number];\r\n  const group = attributes.group as number;\r\n  const kernelShape = attributes.kernelShape as [number, number];\r\n  const pads = attributes.pads as [number, number, number, number];\r\n  const strides = attributes.strides as [number, number];\r\n  const wIsConst = (attributes.wIsConst as () => boolean)();\r\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\r\n  const outputShape = attributes.outputShape as [number, number];\r\n  return createAttributeWithCacheKey({\r\n    autoPad,\r\n    format,\r\n    dilations,\r\n    group,\r\n    kernelShape,\r\n    outputPadding,\r\n    outputShape,\r\n    pads,\r\n    strides,\r\n    wIsConst,\r\n    ...activationAttributes\r\n  });\r\n};\r\n\r\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\r\n    throw new Error('filter does not have same dimension as input');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\r\n  const filterInChannel = inputs[1].dims[0];\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  const featureMaps = inputs[1].dims[1] * attributes.group;\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\r\n  // wrong dilations dimension\r\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\r\n  // Wrong strides dimension\r\n  if (stridesSet && attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\r\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // Wrong output padding dimension\r\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\r\n    throw new Error(`output_padding should be ${spatialRank}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\r\n  if (kernelShapeSet && attributes.kernelShape.length !== 0 &&\r\n      attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // as with kernelShape, must have same number of spatial dims as input\r\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\r\n    throw new Error('invalid output shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\r\n    throw new Error('ConvTranspose input(bias) should be float tensor');\r\n  }\r\n};\r\n\r\nconst createConvTranspose2DProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'ConvTranspose2D',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nconst createConvTranspose2DProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\r\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\r\n      const hasBias = inputs.length === 3;\r\n      const metadata = createConvTranspose2DProgramMetadata(hasBias, attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createConvTranspose2DProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\r\n      };\r\n    };\r\n\r\nconst convTranspose2d =\r\n    (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\r\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\r\n\r\n      context.compute(createConvTranspose2DProgramInfoLoader(inputs, adjustedAttributes));\r\n    };\r\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\r\n  // extend the input to 2D by adding H dimension\r\n  const isChannelLast = attributes.format === 'NHWC';\r\n\r\n  const inputs = [\r\n    context.inputs[0].reshape(\r\n        isChannelLast ?\r\n            // [N, W, C] -> [N, H=1, W, C]\r\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\r\n            // [N, C, W] -> [N, C, H=1, W]\r\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\r\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\r\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\r\n  ];\r\n  if (inputs.length === 3) {\r\n    inputs.push(context.inputs[2]);\r\n  }\r\n  let kernelShape = attributes.kernelShape;\r\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\r\n    kernelShape = [context.inputs[1].dims[2]];\r\n  }\r\n  let dilations = attributes.dilations;\r\n  if (dilations.length === 0 || dilations[0] === 0) {\r\n    dilations = [1];\r\n  }\r\n  let strides = attributes.strides;\r\n  if (strides.length === 0 || strides[0] === 0) {\r\n    strides = [1];\r\n  }\r\n  let pads = attributes.pads;\r\n  if (pads.length === 0) {\r\n    pads = [0, 0];\r\n  }\r\n  pads = [0, pads[0], 0, pads[1]];\r\n  strides = [1].concat(strides);\r\n  dilations = [1].concat(dilations);\r\n  kernelShape = [1].concat(kernelShape);\r\n  const adjustedAttributes =\r\n      getAdjustedConvTransposeAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\r\n  context.compute(createConvTranspose2DProgramInfoLoader(\r\n      inputs, adjustedAttributes,\r\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] :\r\n                                     [outputShape[0], outputShape[1], outputShape[3]]));\r\n};\r\n\r\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\r\n  validateInputs(context.inputs, attributes);\r\n  if (context.inputs[0].dims.length === 3) {\r\n    convTranspose1d(context, attributes);\r\n  } else {\r\n    convTranspose2d(context, context.inputs, attributes);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {PoolConvUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext} from '../types';\r\n\r\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      outputShape.splice(0, 0, batchSize);\r\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly format: 'NHWC'|'NCHW';\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly wIsConst: boolean;\r\n}\r\n\r\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\r\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\r\n\r\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\r\n    throw new Error('currently only support conv 1D and 2D');\r\n  }\r\n\r\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\r\n    throw new Error('filter does not have same dimension as input');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n    if (kernelShape[i - 2] === 0) {\r\n      kernelShape[i - 2] = inputs[1].dims[i];\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\r\n      attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const format = attributes.format as 'NHWC' | 'NCHW';\r\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\r\n  const dilations = attributes.dilations as [number, number];\r\n  const group = attributes.group as number;\r\n  const kernelShape = attributes.kernel_shape as [number, number];\r\n  const pads = attributes.pads as [number, number, number, number];\r\n  const strides = attributes.strides as [number, number];\r\n  const wIsConst = (attributes.w_is_const as () => boolean)();\r\n\r\n  return createAttributeWithCacheKey(\r\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\r\n};\r\n\r\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\r\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n\r\n  // check attributes\r\n\r\n  const hasBias = inputs.length === 3;\r\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\r\n  const isChannelsLast = attributes.format === 'NHWC';\r\n\r\n  // const batchSize = context.inputs[0].dims[0];\r\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\r\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\r\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\r\n  const weightHeight = inputs[1].dims[2];\r\n  const weightWidth = inputs[1].dims[3];\r\n\r\n  const outputShape = calculateOutputShape(\r\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\r\n      isChannelsLast);\r\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\r\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\r\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\r\n\r\n  const sameSize =\r\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\r\n  if (sameSize ||\r\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\r\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\r\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\r\n        attributes.autoPad === 'VALID'))) {\r\n    // TODO: implement conv2dByMatMul()\r\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\r\n    return;\r\n  }\r\n\r\n  if (!isChannelsLast || attributes.group !== 1) {\r\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\r\n    return;\r\n  }\r\n\r\n  // TODO: implement conv2dWithIm2Col()\r\n\r\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\r\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\r\n  const dimInner = weightHeight * weightWidth * inputChannels;\r\n\r\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\r\n\r\n  // STEP.1: transpose weight\r\n  const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\r\n      context.compute(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: weightTransposeAttribute.cacheKey,\r\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\r\n          },\r\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\r\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\r\n    context.kernelCustomData.wT = transposedWeight;\r\n  }\r\n\r\n  // STEP.2: prepare reshaped inputs\r\n  const convInputs = [inputs[0], transposedWeight];\r\n  if (hasBias) {\r\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\r\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\r\n    } else {\r\n      convInputs.push(inputs[2]);\r\n    }\r\n  }\r\n\r\n  // STEP.3: compute matmul\r\n  context.compute(\r\n      createConv2DMatMulProgramInfoLoader(\r\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\r\n          sequentialAccessByThreads),\r\n      {inputs: convInputs});\r\n};\r\n\r\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\r\n  // extend the input to 2D by adding H dimension\r\n  const isChannelLast = attributes.format === 'NHWC';\r\n  const inputs = [\r\n    context.inputs[0].reshape(\r\n        isChannelLast ?\r\n            // [N, W, C] -> [N, H=1, W, C]\r\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\r\n            // [N, C, W] -> [N, C, H=1, W]\r\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\r\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\r\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\r\n  ];\r\n  if (context.inputs.length === 3) {\r\n    inputs.push(context.inputs[2]);\r\n  }\r\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\r\n  const strides = [1].concat(attributes.strides);\r\n  const dilations = [1].concat(attributes.dilations);\r\n  const kernelShape = [1].concat(attributes.kernelShape);\r\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\r\n  context.compute(createGroupedConvProgramInfoLoader(\r\n      inputs, adjustedAttributes,\r\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\r\n};\r\n\r\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\r\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\r\n  if (context.inputs[0].dims.length === 3) {\r\n    conv1d(context, attributes);\r\n  } else {\r\n    conv2d(context, context.inputs, attributes);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\r\nimport {ConvAttributes} from './conv';\r\n\r\n\r\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'Conv2DMatMul',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nexport const createConv2DMatMulProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\r\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\r\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createConv2DMatMulProgramInfo(\r\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\r\n            sequentialAccessByThreads)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport const expandProgramMetadata = {\r\n  name: 'Expand',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Expand requires 2 input.');\r\n  }\r\n  const inputShape = inputs[0].dims;\r\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\r\n\r\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\r\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\r\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\r\n    if (shape[shapeIndex] !== inputShape[inputShapeIndex] && shape[shapeIndex] !== 1 &&\r\n        inputShape[inputShapeIndex] !== 1) {\r\n      throw new Error('Expand requires shape to be broadcastable to input');\r\n    }\r\n  }\r\n};\r\n\r\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\r\n  const diff = shape1.length - shape2.length;\r\n  const shape: number[] = [];\r\n  for (let i = 0; i < diff; ++i) {\r\n    shape.push(shape1[i]);\r\n  }\r\n  for (let i = 0; i < shape2.length; ++i) {\r\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\r\n  }\r\n  return shape;\r\n};\r\n\r\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\r\n    (inputShape.length > shape.length) ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\r\n\r\n\r\nconst createExpandProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\r\n  const inputShape = inputs[0].dims;\r\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\r\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n\r\n  const dataType = inputs[0].dataType;\r\n  const input = inputVariable('input', dataType, inputShape);\r\n  const output = outputVariable('output', dataType, outputShape);\r\n\r\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const inputShape = ${input.indices(...inputShape)};\r\n  ${shaderHelper.declareVariables(input, output)}\r\n  ${shaderHelper.mainStart()}\r\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n    let outputIndices = ${output.offsetToIndices('global_idx')};\r\n    var inputIndices: ${input.type.indices};\r\n    for (var i = 0; i < ${inputShape.length}; i++) {\r\n      if (${input.indicesGet('inputShape', 'i')} == 1) {\r\n        ${input.indicesSet('inputIndices', 'i', 0)}\r\n      } else {\r\n        ${\r\n      input.indicesSet(\r\n          'inputIndices', 'i', output.indicesGet('outputIndices', `i + ${outputShape.length - inputShape.length}`))}\r\n      }\r\n    }\r\n    ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\r\n  }`;\r\n  return {\r\n    ...metadata,\r\n    getShaderSource,\r\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n  };\r\n};\r\n\r\nexport const expand = (context: ComputeContext): void => {\r\n  validateInputs(context.inputs);\r\n  const outputShape = Array.from(context.inputs[1].getBigInt64Array(), Number);\r\n  const cacheHint = outputShape.toString();\r\n  context.compute(\r\n      {...expandProgramMetadata, cacheHint, get: () => createExpandProgramInfo(expandProgramMetadata, context.inputs)},\r\n      {inputs: [0]});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport const getActicationSnippet =\r\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\r\n      switch (attributes.activation) {\r\n        case 'Relu':\r\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\r\n        case 'Sigmoid':\r\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\r\n        case 'Clip':\r\n          return {\r\n            activationFunction:\r\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\r\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\r\n          };\r\n          // TODO: adding other activations that can be fused.\r\n        default:\r\n          return {activationFunction: '', applyActivation: ''};\r\n      }\r\n    };\r\n\r\nexport const parseInternalActivationAttributes =\r\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\r\n      const activation = attributes?.activation as string || '';\r\n\r\n      if (activation === 'Clip') {\r\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\r\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n      }\r\n      return {activation, activationCacheKey: activation};\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\n\r\nexport interface GatherAttributes extends AttributeWithCacheKey {\r\n  axis: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GatherAttributes): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const indicesShape = inputs[1].dims;\r\n\r\n      const inputRank = inputShape.length;\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\r\n\r\n      const outputShape = inputShape.slice(0);\r\n      outputShape.splice(axis, 1, ...indicesShape);\r\n\r\n      const inputDataType = inputs[0].dataType;\r\n      const block = ShapeUtil.sizeFromDimension(inputShape, axis + 1);\r\n      const elementSize = [DataType.int64, DataType.uint64, DataType.double].includes(inputDataType) ? 2 : 1;\r\n      const indicesElementSize = inputs[1].dataType === DataType.int64 ? 2 : 1;\r\n      const blockSize = elementSize * block;\r\n      const M = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const N = ShapeUtil.size(indicesShape);\r\n      const dataBatchElements = ShapeUtil.sizeFromDimension(inputShape, axis) * elementSize;\r\n      const gatheredBatchElements = N * block * elementSize;\r\n      const axisDimLimit = inputShape[axis];\r\n\r\n      const inputSize = ShapeUtil.size(inputShape) * elementSize;\r\n      const outputSize = ShapeUtil.size(outputShape) * elementSize;\r\n\r\n      const totalGathers = M * N;\r\n      // int64 indices would be treated as little endian i32 with assumption they fall in i32 limits\r\n      // That assumption is safe as it's not possible to allocate >2gb buffer for input tensor\r\n      // Input data will be treated as u32 or two u32 for 8-byte tensors\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const N: u32 = ${N};\r\n  const elementSize: u32 = ${elementSize};\r\n  const indicesElementSize: u32 = ${indicesElementSize};\r\n\r\n  @group(0) @binding(0) var<storage, read> input : array<u32>;\r\n  @group(0) @binding(1) var<storage, read> inputIndices : array<i32>;\r\n  @group(0) @binding(2) var<storage, read_write> output: array<u32>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let batch: u32 = global_idx / N;\r\n    let i: u32 = global_idx % N;\r\n\r\n    let srcOffsetBatch: u32 = batch * ${dataBatchElements};\r\n    let dstOffsetBatch: u32 = batch * ${gatheredBatchElements};\r\n    var idx = inputIndices[i * indicesElementSize];\r\n    if (idx < 0) {\r\n        idx = idx + ${axisDimLimit};\r\n    }\r\n\r\n    let srcOffset = srcOffsetBatch + u32(idx) * ${blockSize};\r\n    let dstOffset = dstOffsetBatch + i * ${blockSize};\r\n    if (srcOffset >= ${inputSize}) {\r\n        return;\r\n    }\r\n    if (dstOffset >= ${outputSize}) {\r\n        return;\r\n    }\r\n    for (var j: u32 = 0; j < ${blockSize}; j++) {\r\n        output[dstOffset + j] = input[srcOffset + j];\r\n    }\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [\r\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n        ],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(totalGathers / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const parseGatherAttributes = (attributes: Record<string, unknown>): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis as number});\r\n\r\nexport const gather = (context: ComputeContext, attributes: GatherAttributes): void => {\r\n  const inputs = context.inputs;\r\n  validateInputs(inputs);\r\n\r\n  const metadata = {\r\n    name: 'Gather',\r\n    inputTypes: [GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey,\r\n  };\r\n\r\n  context.compute(createGatherProgramInfo(metadata, context.inputs, attributes));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {GemmUtil, ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (inputs.length < 2 || inputs.length > 3) {\r\n    throw new Error('Invaid input number.');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 0, 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\r\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\r\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n}\r\n\r\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\r\n  if (dims.length === 0) {\r\n    return '0u';\r\n  }\r\n\r\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\r\n  const broadcastN = dims[dims.length - 1] !== n;\r\n\r\n  let offset = '0u';\r\n  if (!broadcastM) {\r\n    offset += `+ m * ${dims[dims.length - 1]}u`;\r\n  }\r\n  if (!broadcastN) {\r\n    offset += '+n';\r\n  }\r\n\r\n  return offset;\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      let line = '';\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += a[k * M + m] * b[n * K + k];';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += a[k * M + m] * b[k * N + n];';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += a[m * K + k] * b[n * K + k];';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += a[m * K + k] * b[k * N + n];';\r\n      }\r\n\r\n      const dataType = 'f32';  // TODO: support other data type\r\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\r\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\r\n      const inputStorageBuffersDeclarations = [\r\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\r\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\r\n      ];\r\n      if (inputs.length === 3) {\r\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\r\n      }\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const M: u32 = ${M}u;\r\n  const N: u32 = ${N}u;\r\n  const K: u32 = ${K}u;\r\n  const alpha = ${dataType}(${attributes.alpha});\r\n  const beta = ${dataType}(${attributes.beta});\r\n\r\n  ${inputStorageBuffersDeclarations.join('\\n')}\r\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let m = global_id.x / N;\r\n    let n = global_id.x % N;\r\n\r\n    var value = ${dataType}(0);\r\n    for (var k: u32 = 0u; k<${K}u; k++) {\r\n      ${line}\r\n    }\r\n\r\n    ${calculateAlpha}\r\n    ${calculateC}\r\n    output[global_id.x] = value;\r\n\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                                      [GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\r\n};\r\n\r\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\r\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\r\n\r\nexport interface InstanceNormAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  format: 'NHWC'|'NCHW';\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('instanceNorm requires 3 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n};\r\n\r\nconst createInstanceNormProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\r\n      const xShape = inputs[0].dims;\r\n      const scale = inputs[1];\r\n      const bias = inputs[2];\r\n\r\n      const outputShape = xShape;\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const axis = 2;\r\n      const normCount = ShapeUtil.sizeToDimension(xShape, axis);\r\n      const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\r\n      const C = xShape[1];\r\n\r\n      const scaleSize = ShapeUtil.size(scale.dims);\r\n      const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\r\n      if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\r\n        throw new Error(`Size of X.shape()[axis:] == ${normSize}.\r\n             Size of scale and bias (if provided) must match this. \r\n             Got scale size of ${scaleSize} and bias size of ${biasSize}`);\r\n      }\r\n\r\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const C: u32 = ${C};\r\n  const normSize: u32 = ${normSize};\r\n  const normSizeTyped: ${dataType} = ${normSize};\r\n  const epsilon: f32 = ${attributes.epsilon};\r\n\r\n  @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\r\n  @group(0) @binding(1) var<storage, read> scale : array<${dataType}>;\r\n  @group(0) @binding(2) var<storage, read> bias : array<${dataType}>;\r\n  @group(0) @binding(3) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let offset = global_idx * normSize;\r\n    if (offset + normSize >= ${outputSize}) { return; }\r\n    var mean: ${dataType} = 0;\r\n\r\n    for (var h: u32 = 0u; h < normSize; h++) {\r\n        mean = mean + x[h + offset];\r\n    }\r\n    mean = mean / normSizeTyped;\r\n\r\n    var squaredNorm: ${dataType} = 0;\r\n    for (var h: u32 = 0u; h < normSize; h++) {\r\n        let deviation: f32 = x[h + offset] - mean;\r\n        squaredNorm = squaredNorm + deviation * deviation;\r\n    }\r\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\r\n    let channelScale = invStdDev * scale[global_idx % C];\r\n    let channelShift = bias[global_idx % C] - mean * channelScale;\r\n    for (var j: u32 = 0; j < normSize; j++) {\r\n        output[j + offset] = x[j + offset] * channelScale + channelShift;\r\n    }\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [\r\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n        ],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createInstanceNormNHWCProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\r\n      const xShape = inputs[0].dims;\r\n      const outputShape = xShape;\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const N = xShape[0];\r\n      const C = xShape[xShape.length - 1];\r\n      const H = ShapeUtil.sizeFromDimension(xShape, 1) / C;\r\n\r\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n\r\n      const normCount = C * N;\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const N: u32 = ${N};\r\n  const H: u32 = ${H};\r\n  const C: u32 = ${C};\r\n  const normSizeTyped: ${dataType} = ${H};\r\n  const imageSize: u32 = ${H * C};\r\n  const epsilon: f32 = ${attributes.epsilon};\r\n\r\n  @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\r\n  @group(0) @binding(1) var<storage, read> scale : array<${dataType}>;\r\n  @group(0) @binding(2) var<storage, read> bias : array<${dataType}>;\r\n  @group(0) @binding(3) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let currentImageNumber = global_idx / C;\r\n    let currentChannelNumber = global_idx % C;\r\n    \r\n    // offset is channel num * N\r\n    let offset = currentImageNumber * imageSize;\r\n    if (offset >= ${outputSize}) { return; }\r\n    var mean: ${dataType} = 0;\r\n\r\n    for (var i: u32 = 0u; i < H; i++) {\r\n        mean = mean + x[offset + i * C + currentChannelNumber];\r\n    }\r\n    mean = mean / normSizeTyped;\r\n\r\n    var squaredNorm: ${dataType} = 0;\r\n    for (var i: u32 = 0u; i < H; i++) {\r\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\r\n        squaredNorm = squaredNorm + deviation * deviation;\r\n    }\r\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\r\n    let channelScale = invStdDev * scale[currentChannelNumber];\r\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\r\n    for (var i: u32 = 0u; i < H; i++) {\r\n        let currentOffset = offset + i * C + currentChannelNumber;\r\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\r\n    }\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        outputs: [\r\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n        ],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const parseInstanceNormAttributes = (attributes: InstanceNormAttributes): InstanceNormAttributes =>\r\n    createAttributeWithCacheKey({epsilon: attributes.epsilon, format: attributes.format});\r\n\r\nexport const instanceNorm = (context: ComputeContext, attributes: InstanceNormAttributes): void => {\r\n  validateInputs(context.inputs);\r\n\r\n  const metadata = {\r\n    name: 'InstanceNormalization',\r\n    inputTypes: [GpuDataType.default, GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey,\r\n  };\r\n\r\n  if (attributes.format === 'NHWC') {\r\n    context.compute(createInstanceNormNHWCProgramInfo(metadata, context.inputs, attributes));\r\n  } else {\r\n    context.compute(createInstanceNormProgramInfo(metadata, context.inputs, attributes));\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\r\n\r\nexport interface LayerNormAttributes extends AttributeWithCacheKey {\r\n  axis: number;\r\n  epsilon: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 2) {\r\n    throw new Error('layerNorm requires at least 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n};\r\n\r\nconst createLayerNormProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: LayerNormAttributes, outputCount: number):\r\n        ProgramInfo => {\r\n          const xShape = inputs[0].dims;\r\n          const scale = inputs[1];\r\n          const bias = inputs[2];\r\n\r\n          const outputShape = xShape;\r\n          const outputSize = ShapeUtil.size(outputShape);\r\n          const axis = ShapeUtil.normalizeAxis(attributes.axis, xShape.length);\r\n          const normCount = ShapeUtil.sizeToDimension(xShape, axis);\r\n          const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\r\n\r\n          const scaleSize = ShapeUtil.size(scale.dims);\r\n          const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\r\n          if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\r\n            throw new Error(`Size of X.shape()[axis:] == ${normSize}.\r\n       Size of scale and bias (if provided) must match this.\r\n       Got scale size of ${scaleSize} and bias size of ${biasSize}`);\r\n          }\r\n\r\n          const meanInvStdDevDim = [];\r\n          for (let i = 0; i < xShape.length; ++i) {\r\n            if (i < axis) {\r\n              meanInvStdDevDim.push(xShape[i]);\r\n            } else {\r\n              meanInvStdDevDim.push(1);\r\n            }\r\n          }\r\n\r\n          const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n\r\n          const hasMeanDataOutput = outputCount > 1;\r\n          const hasInvStdOutput = outputCount > 2;\r\n          let bindingIndex = 0;\r\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const normSize: u32 = ${normSize};\r\n  const normSizeTyped: ${dataType} = ${normSize};\r\n  const epsilon: f32 = ${attributes.epsilon};\r\n\r\n  @group(0) @binding(${bindingIndex++}) var<storage, read> x : array<${dataType}>;\r\n  @group(0) @binding(${bindingIndex++}) var<storage, read> scale : array<${dataType}>;\r\n  ${bias ? `@group(0) @binding(${bindingIndex++}) var<storage, read> bias : array<${dataType}>;` : ''}\r\n  @group(0) @binding(${bindingIndex++}) var<storage, read_write> output : array<${dataType}>;\r\n  ${\r\n              hasMeanDataOutput ?\r\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> meanDataOutput : array<${dataType}>` :\r\n                  ''};\r\n  ${\r\n              hasInvStdOutput ?\r\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> invStdOutput : array<${dataType}>` :\r\n                  ''};\r\n\r\n  ${shaderHelper.mainStart()}\r\n    let offset = global_idx * normSize;\r\n    if (offset >= ${outputSize}) { return; }\r\n    var mean: ${dataType} = 0;\r\n    var meanSquare: ${dataType} = 0;\r\n\r\n    for (var h: u32 = 0u; h < normSize; h++) {\r\n      mean = mean + x[h + offset];\r\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\r\n    }\r\n    mean = mean / normSizeTyped;\r\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\r\n\r\n    for (var j: u32 = 0; j < normSize; j++) {\r\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] ${bias ? '+ bias[j]' : ''};\r\n    }\r\n\r\n    ${hasMeanDataOutput ? 'meanDataOutput[global_idx] = mean' : ''};\r\n    ${hasInvStdOutput ? 'invStdOutput[global_idx] = 1 / meanSquare' : ''};\r\n  }`;\r\n          const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\r\n          if (hasMeanDataOutput) {\r\n            outputs.push(\r\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n            );\r\n          }\r\n          if (hasInvStdOutput) {\r\n            outputs.push(\r\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\r\n            );\r\n          }\r\n\r\n          return {\r\n            ...metadata,\r\n            outputs,\r\n            getShaderSource,\r\n            dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const parseLayerNormAttributes = (attributes: LayerNormAttributes): LayerNormAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis, epsilon: attributes.epsilon});\r\n\r\nexport const layerNorm = (context: ComputeContext, attributes: LayerNormAttributes): void => {\r\n  validateInputs(context.inputs);\r\n\r\n  const metadata = {\r\n    name: 'LayerNormalization',\r\n    inputTypes: context.inputs.length === 2 ? [GpuDataType.default, GpuDataType.default] :\r\n                                              [GpuDataType.default, GpuDataType.default, GpuDataType.default],\r\n    cacheHint: attributes.cacheKey + context.outputCount.toString(10) + context.inputs.length.toString(10),\r\n  };\r\n\r\n  context.compute(createLayerNormProgramInfo(metadata, context.inputs, attributes, context.outputCount));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\r\n\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\r\n                        [GpuDataType.default, GpuDataType.default],\r\n  cacheHint\r\n});\r\n\r\nconst createMatmulProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\r\n        ProgramInfo => {\r\n          const aShape = inputs[0].dims;\r\n          const bShape = inputs[1].dims;\r\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n          if (!outputShape) {\r\n            throw new Error('Can\\'t use matmul on the given tensors');\r\n          }\r\n          const outputSize = ShapeUtil.size(outputShape);\r\n          // TODO: support broadcasting\r\n\r\n          const dataType = 'f32';  // TODO: support other data type\r\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\r\n\r\n          const M = outputShape[outputShape.length - 2];\r\n          const K = aShape[aShape.length - 1];\r\n          const N = outputShape[outputShape.length - 1];\r\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  const M: u32 = ${M}u;\r\n  const N: u32 = ${N}u;\r\n  const K: u32 = ${K}u;\r\n\r\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\r\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\r\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\r\n\r\n  ${activationFunction}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let stack = global_idx / (M * N);\r\n    let mn = global_idx % (M * N);\r\n    let n = global_idx % N;\r\n    let m = mn / N;\r\n\r\n    let offsetA = stack * (M * K);\r\n    let offsetB = stack * (K * N);\r\n\r\n    var value = ${dataType}(0);\r\n    for (var k: u32 = 0u; k<${K}u; k++) {\r\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\r\n    }\r\n    ${applyActivation}\r\n    output[global_idx] = value;\r\n  }`;\r\n          return {\r\n            ...metadata,\r\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n            getShaderSource,\r\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const createMatmulProgramInfoLoader =\r\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n    };\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n};\r\n\r\nexport const matMul = (context: ComputeContext): void => {\r\n  validateInputs(context.inputs);\r\n\r\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\n// TODO: support:\r\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\r\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\r\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\r\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Pool ops supports 2-D inputs only for now.');\r\n  }\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\r\n    input: TensorView, attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\r\n  const isChannelsLast = attributes.format === 'NHWC';\r\n  const inputShapeAsChannelFirst =\r\n      isChannelsLast ? [input.dims[0], input.dims[3], input.dims[1], input.dims[2]] : input.dims.slice();\r\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  const strides = attributes.strides.slice();\r\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\r\n\r\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\r\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  const newAttributes = Object.assign({}, attributes);\r\n  if (hasDilations) {\r\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n  } else {\r\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n  }\r\n  return [\r\n    newAttributes,\r\n    isChannelsLast ?\r\n        [\r\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\r\n          outputShapeAsChannelFirst[1]\r\n        ] :\r\n        outputShapeAsChannelFirst\r\n  ];\r\n};\r\n\r\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\r\n    shaderHelper: ShaderHelper, x: IndicesHelper, outputShape: readonly number[], attributes: AttributeType,\r\n    op1: string, op2: string, start: string): string => {\r\n  const isChannelsLast = attributes.format === 'NHWC';\r\n  const inputDims = x.shape;\r\n  const dataType = x.type.value;\r\n  const rank = inputDims.length;\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n  const output = outputVariable('output', x.type.tensor, outputShape);\r\n\r\n  if (attributes.kernelShape.length <= 2) {\r\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n    const sw = attributes.strides[attributes.strides.length - 1];\r\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\r\n    let codeW = '';\r\n    let codeH = '';\r\n    let codeHEnd = '';\r\n    if (pwStart + pwEnd !== 0) {\r\n      codeW = `\r\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\r\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\r\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\r\n                  pad++;\r\n                  continue;\r\n                }\r\n                let x_val = x[${x.indicesToOffset('xIndices')}];\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      codeW = `\r\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\r\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\r\n                let x_val = x[${x.indicesToOffset('xIndices')}];\r\n                ${op1}\r\n              }`;\r\n    }\r\n\r\n    if (attributes.kernelShape.length === 2) {\r\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n      const sh = attributes.strides[attributes.strides.length - 2];\r\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n      const phEnd = attributes.pads[attributes.pads.length - 2];\r\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\r\n      const dimH = inputDims[dimIdxH];\r\n      if (phStart + phEnd !== 0) {\r\n        codeH = `\r\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\r\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\r\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\r\n                    pad+= ${kw};\r\n                    continue;\r\n                  }\r\n              `;\r\n      } else {\r\n        codeH = `\r\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\r\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\r\n                `;\r\n      }\r\n      codeHEnd = `\r\n              }\r\n            `;\r\n    }\r\n\r\n    const poolingCode = `\r\n            ${shaderHelper.declareVariables(x, output)}\r\n\r\n            ${shaderHelper.mainStart()}\r\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n              let indices = ${output.offsetToIndices('global_idx')};\r\n              var xIndices = ${output.offsetToIndices('global_idx')};\r\n\r\n              var value: ${dataType} = ${dataType}(${start});\r\n              var pad = 0;\r\n              ${codeH}\r\n              ${codeW}\r\n              ${codeHEnd}\r\n              ${op2}\r\n\r\n              output[global_idx] = value;\r\n            }`;\r\n    return poolingCode;\r\n  } else {\r\n    if (isChannelsLast) {\r\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\r\n    }\r\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n    const stridesRank = kernelStrides.length;\r\n    const padsRank = attributes.pads.length;\r\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n    let padCode = '';\r\n    if (hasPads) {\r\n      padCode = `\r\n                if (xIndices[j] >= inputDims[j]) {\r\n                  pad++;\r\n                  isPad = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!isPad) {\r\n                let x_val = x[${x.indicesToOffset('xIndices')}];\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      padCode = `\r\n              }\r\n              let x_val = x[${x.indicesToOffset('xIndices')}];\r\n              ${op1}\r\n            `;\r\n    }\r\n    const poolingCode = `\r\n            ${shaderHelper.declareVariables(x, output)}\r\n\r\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\r\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\r\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\r\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\r\n\r\n            ${shaderHelper.mainStart()}\r\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n              let indices = ${output.offsetToIndices('global_idx')};\r\n              let xIndices = ${output.offsetToIndices('global_idx')};\r\n\r\n              var offsets: array<u32, ${stridesRank}>;\r\n\r\n              var value = ${output.type.value}(${start});\r\n              var pad = 0;\r\n              var isPad = false;\r\n\r\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\r\n                var offset = i;\r\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\r\n                  offsets[j] = offset / kernelStrides[j];\r\n                  offset -= offsets[j] * kernelStrides[j];\r\n                }\r\n                offsets[${stridesRank - 1}] = offset;\r\n\r\n                isPad = false;\r\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\r\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\r\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\r\n                  ${padCode}\r\n              }\r\n              ${op2}\r\n\r\n              output[global_idx] = value;\r\n            }`;\r\n    return poolingCode;\r\n  }\r\n};\r\n\r\nexport interface FormatAttributes {\r\n  readonly format: 'NHWC'|'NCHW';\r\n}\r\n\r\nexport interface PoolCommonAttributes extends FormatAttributes {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\r\n  format: attributes.format as FormatAttributes['format'],\r\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\r\n  ceilMode: attributes.ceil_mode as number,\r\n  kernelShape: attributes.kernel_shape as [number, number],\r\n  strides: attributes.strides as [number, number],\r\n  pads: attributes.pads as [number, number, number, number]\r\n});\r\n\r\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\r\n  readonly countIncludePad: boolean;\r\n}\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n\r\n          const x = inputVariable('x', input.dataType, input.dims);\r\n          const dataType = 'f32';\r\n\r\n          const op1 = 'value += x_val;';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= ${dataType}(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= ${dataType}(${kernelSize} - pad);`;\r\n          }\r\n          return {\r\n            ...metadata,\r\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\r\n            getShaderSource: shaderHelper =>\r\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '0.0'),\r\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\r\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\r\n\r\n  const attr = parsePoolCommonAttributes(attributes);\r\n  // TODO: support attribute 'ceil_mode'\r\n  if (attr.ceilMode !== 0) {\r\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n  }\r\n\r\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\r\n};\r\n\r\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute(\r\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, false, attributes)});\r\n};\r\n\r\nconst globalPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\r\n  const format = attributes.format as FormatAttributes['format'];\r\n  return {format, ...globalPoolAttributes, cacheKey: format};\r\n};\r\n\r\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute(\r\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, true, attributes)});\r\n};\r\n\r\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(x_val, value);\r\n    `;\r\n          const op2 = '';\r\n          const x = inputVariable('x', input.dataType, input.dims);\r\n          return {\r\n            ...metadata,\r\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\r\n            getShaderSource: shaderHelper =>\r\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '-1e5'),\r\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\r\n          };\r\n        };\r\n\r\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, false, attributes)});\r\n};\r\n\r\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\r\n  const storageOrder = attributes.storage_order as number;\r\n  const dilations = attributes.dilations as [number, number];\r\n\r\n  const attr = parsePoolCommonAttributes(attributes);\r\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n  if (storageOrder !== 0) {\r\n    throw new Error('column major storage order is not yet supported for MaxPool');\r\n  }\r\n  if (attr.ceilMode !== 0) {\r\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n  }\r\n\r\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\r\n};\r\n\r\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\r\n  const format = attributes.format as FormatAttributes['format'];\r\n  return {format, ...globalPoolAttributes, cacheKey: format};\r\n};\r\n\r\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\r\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, true, attributes)});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\r\n    throw new Error('Reduce op requires 1 or 2 inputs.');\r\n  }\r\n\r\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid axes input dims.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  keepDims: boolean;\r\n  noopWithEmptyAxes: boolean;\r\n  axes: number[];\r\n}\r\n\r\nexport type ReduceOp =\r\n    (input: IndicesHelper, output: IndicesHelper,\r\n     axes: readonly number[]) => [string, string, string, string, ...string[]];\r\n\r\nconst noOp: ReduceOp = (input) => ['', '', `var value = ${input.getByOffset('inputOffset')};`, ''];\r\nexport const createReduceProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], reduceOp: ReduceOp, axesInput: number[],\r\n     outputDataType: DataType, keepDims = false, noopWithEmptyAxes = false): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const inputShape = inputs[0].dims;\r\n\r\n      const axes = ShapeUtil.normalizeAxes(axesInput, inputs[0].dims.length);\r\n      const reduceOnAllAxes = !noopWithEmptyAxes && axes.length === 0;\r\n      inputShape.forEach((d, i) => {\r\n        if (reduceOnAllAxes || axes.indexOf(i) >= 0) {\r\n          if (keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { // skip this axis}\r\n        } else {\r\n          outputShape.push(d);\r\n        }\r\n      });\r\n\r\n      const idxCopy: string[] = [];  // copy output indexes to input indexes\r\n\r\n      const input = inputVariable('_A', inputs[0].dataType, inputShape);\r\n      const output = outputVariable('output', outputDataType, outputShape);\r\n      const ops = reduceOp(input, output, axes);\r\n      const inputOffsetAssignment = `inputOffset = ${input.indicesToOffset('inputIndices')};`;\r\n      const initinputOffsetLet = `let ${inputOffsetAssignment};`;\r\n      const initinputOffsetVar = `var ${inputOffsetAssignment};`;\r\n      const initinputOffset = (ops[1] === '') ? '' : initinputOffsetVar;\r\n      let reduceOps = ((ops[1] === '') ? initinputOffsetLet : inputOffsetAssignment) + '\\n' + ops[2];\r\n\r\n      for (let k = 0, l = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\r\n          if (keepDims) {\r\n            l++;\r\n          }\r\n          // loop over the d-th axis\r\n          reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n                ${ops[2].includes('lastIndex') ? `let lastIndex = j${k};` : ''}\r\n                ${input.indicesSet('inputIndices', k, `j${k}`)}\r\n                ${reduceOps}\r\n              }`;\r\n        } else {\r\n          idxCopy.push(`${input.indicesSet('inputIndices', k, output.indicesGet('outputIndices', l))};`);\r\n          l++;\r\n        }\r\n      }\r\n\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n        ${shaderHelper.declareVariables(input, output)}\r\n\r\n        ${shaderHelper.mainStart()}\r\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n          var inputIndices: ${input.type.indices};\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n\r\n          ${idxCopy.join('\\n')}\r\n          ${ops[0]}       // init ops for reduce max/min\r\n          ${initinputOffset}\r\n          ${ops[1]}\r\n          ${reduceOps}\r\n          ${ops[3]}\r\n          ${ops.length === 4 ? output.setByOffset('global_idx', 'value') : ops.slice(4).join('\\n')}\r\n        }`;\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createReduceAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: ReduceAttributes): ReduceAttributes => {\r\n      const axes: number[] = [];\r\n      if (inputs[1].dims[0] > 0) {\r\n        inputs[1].getBigInt64Array().forEach(v => axes.push(Number(v)));\r\n      }\r\n      return createAttributeWithCacheKey(\r\n          {axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes});\r\n    };\r\n\r\nconst createReduceProgramInfoLoader =\r\n    (inputs: readonly TensorView[], name: string, attributes: ReduceAttributes,\r\n     reduceOp: ReduceOp): ProgramInfoLoader => {\r\n      const updatedAttributes: ReduceAttributes =\r\n          inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\r\n      const metadata: ProgramMetadata = {\r\n        name,\r\n        inputTypes: [GpuDataType.default],\r\n        cacheHint: updatedAttributes.cacheKey + '_' + inputs[0].dims.map(d => d.toString()).join(',')\r\n      };\r\n      return {\r\n        ...metadata,\r\n        get: () => createReduceProgramInfo(\r\n            metadata, [inputs[0]],\r\n            updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp,\r\n            updatedAttributes.axes, inputs[0].dataType, updatedAttributes.keepDims, updatedAttributes.noopWithEmptyAxes)\r\n      };\r\n    };\r\n\r\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += ${input.getByOffset('inputOffset')};`,\r\n       'value = log(value);',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceLogSum', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += abs(${input.getByOffset('inputOffset')});`,\r\n       '',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL1', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var t = f32(0); var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `t = ${input.getByOffset('inputOffset')}; value += (t * t);`,\r\n       'value = sqrt(value);',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL2', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += exp(${input.getByOffset('inputOffset')});`,\r\n       'value = log(value);',\r\n  ];\r\n  context.compute(\r\n      createReduceProgramInfoLoader(context.inputs, 'ReduceLogSumExp', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, _output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(input.indicesSet('inputIndices', k, 0));\r\n      }\r\n    }\r\n\r\n    return [\r\n      `${idxZero.join('\\n')}`,\r\n      `var value = ${input.getByOffset('inputOffset')};`,\r\n      `value = max(value, ${input.getByOffset('inputOffset')});`,\r\n      '',\r\n    ];\r\n  };\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMax', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output, axes) => {\r\n    let size = 1.0;\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        size *= input.shape[k];\r\n      }\r\n    }\r\n\r\n    return [\r\n      `var value = ${output.type.storage}(0);`,\r\n      '',\r\n      `value += ${input.getByOffset('inputOffset')};`,\r\n      `value = value / ${size}.;`,\r\n    ];\r\n  };\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMean', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, _output, axes) => {\r\n    const idxZero = [];\r\n    for (let k = 0; k < input.shape.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [\r\n      `${idxZero.join('\\n')}`,\r\n      `var value = ${input.getByOffset('inputOffset')};`,\r\n      `value = min(value, ${input.getByOffset('inputOffset')});`,\r\n      '',\r\n    ];\r\n  };\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMin', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(1);`,\r\n       '',\r\n       `value *= ${input.getByOffset('inputOffset')};`,\r\n       '',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceProd', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `value += ${input.getByOffset('inputOffset')};`,\r\n       '',\r\n  ];\r\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceSum', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  const reduceOp: ReduceOp = (input, output) =>\r\n      [`var t = f32(0); var value = ${output.type.storage}(0);`,\r\n       '',\r\n       `t = ${input.getByOffset('inputOffset')}; value += t * t;`,\r\n       '',\r\n  ];\r\n  context.compute(\r\n      createReduceProgramInfoLoader(context.inputs, 'ReduceSumSquare', attributes, reduceOp), {inputs: [0]});\r\n};\r\n\r\nexport const parseReduceAttributes = (attributes: Record<string, unknown>): ReduceAttributes =>\r\n    createAttributeWithCacheKey(attributes as Omit<ReduceAttributes, keyof AttributeWithCacheKey>);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\ntype CoordinateTransformMode = 'half_pixel'|'asymmetric'|'pytorch_half_pixel'|'tf_half_pixel_for_nn'|'align_corners'|\r\n    'tf_crop_and_resize'|'half_pixel_symmetric';\r\n\r\ntype KeepAspectRatioPolicy = 'stretch'|'not_smaller'|'not_larger';\r\n\r\ntype Mode = 'nearest'|'linear'|'cubic';\r\n\r\ntype NearestMode = 'round_prefer_floor'|'round_prefer_ceil'|'floor'|'ceil'|'simple';\r\n\r\nexport interface ResizeAttributes extends AttributeWithCacheKey {\r\n  antialias: number;\r\n  axes: number[];\r\n  coordinateTransformMode: CoordinateTransformMode;\r\n  cubicCoeffA: number;\r\n  excludeOutside: boolean;\r\n  extrapolationValue: number;\r\n  keepAspectRatioPolicy: KeepAspectRatioPolicy;\r\n  mode: Mode;\r\n  nearestMode: NearestMode;\r\n}\r\n\r\nconst validateScales = (scales: number[], attributes: ResizeAttributes): void => {\r\n  scales.every((value) => value > 0 || (() => {\r\n                            throw new Error('Resize requires scales input values to be positive');\r\n                          }));\r\n  // Check scales dims based on mode: LINEAR, CUBIC\r\n  if (scales.length > 0) {\r\n    if (attributes.mode === 'linear') {\r\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\r\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\r\n        throw new Error('Resize requires scales input size to be 2 or 4 for linear mode');\r\n      }\r\n    } else if (attributes.mode === 'cubic') {\r\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\r\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\r\n        throw new Error('Resize requires scales input size to be 2 or 4 for cubic mode');\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst updateScales = (scales: readonly number[], axes: readonly number[], rank: number): number[] => {\r\n  axes.every((value) => value >= 0 && value < rank || (() => {\r\n                          throw new Error('Resize requires axes input values to be positive and less than rank');\r\n                        }));\r\n  const newScales = new Array(rank).fill(1.0);\r\n  axes.forEach((value, index) => newScales[value] = scales[index]);\r\n  return newScales;\r\n};\r\n\r\nconst validateInputs =\r\n    (inputs: readonly TensorView[], attributes: ResizeAttributes, opsetVersion: number, scales: number[],\r\n     sizes: number[], roi: number[]): void => {\r\n      const [roiInputIndex, scalesInputIndex, sizesInputIndex] =\r\n          (opsetVersion > 10) ? [1, 2, 3] : [-1, (inputs.length > 1) ? 1 : -1, -1];\r\n      const rank = inputs[0].dims.length;\r\n      if (roiInputIndex > 0 && inputs.length > roiInputIndex && inputs[roiInputIndex].dims.length > 0) {\r\n        inputs[roiInputIndex].getFloat32Array().forEach((value) => roi.push(value));\r\n\r\n      } else if (attributes.coordinateTransformMode === 'tf_crop_and_resize') {\r\n        throw new Error('Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize');\r\n      }\r\n\r\n      if (scalesInputIndex > 0 && inputs.length > scalesInputIndex && inputs[scalesInputIndex].dims.length > 0) {\r\n        inputs[scalesInputIndex].getFloat32Array().forEach((value) => scales.push(value));\r\n        if (scales.length !== 0 &&\r\n            (scales.length !== rank && (opsetVersion >= 18 && scales.length !== attributes.axes.length))) {\r\n          throw new Error(\r\n              'Resize requires scales input size to be same as input rank or axes size for opset 18 and up');\r\n        }\r\n        validateScales(scales, attributes);\r\n        if (attributes.axes.length > 0) {\r\n          updateScales(scales, attributes.axes, rank).forEach((value, index) => scales[index] = value);\r\n        }\r\n      }\r\n      if (sizesInputIndex > 0 && inputs.length > sizesInputIndex) {\r\n        inputs[sizesInputIndex].getBigInt64Array().forEach((value) => sizes.push(Number(value)));\r\n        if (sizes.length !== rank || (opsetVersion >= 18 && sizes.length === attributes.axes.length)) {\r\n          throw new Error('Resize requires sizes input size to be same as input rank or axes size for opset 18 and up');\r\n        }\r\n      }\r\n\r\n      if (attributes.axes.length > 0) {\r\n        if (scales.length !== attributes.axes.length) {\r\n          throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\r\n        }\r\n        if (sizes.length !== attributes.axes.length) {\r\n          throw new Error(\r\n              'Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\r\n        }\r\n      }\r\n      if (typeof scales !== 'undefined' && typeof sizes !== 'undefined' && scales.length > 0 && sizes.length > rank) {\r\n        throw new Error('Resize requires only of scales or sizes to be specified');\r\n      }\r\n    };\r\n\r\nconst getOriginalCoordinateFromResizedCoordinate = (coordinateTransferMode: CoordinateTransformMode): string =>\r\n    'fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,\\\r\n    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { ' +\r\n    (() => {\r\n      switch (coordinateTransferMode) {\r\n        case 'asymmetric':\r\n          return 'return xResized / xScale;';\r\n        case 'pytorch_half_pixel':\r\n          return 'if (lengthResized > 1) { \\\r\n                    return (xResized + 0.5) / xScale - 0.5; \\\r\n                  } else { \\\r\n                    return 0.0; \\\r\n                  }';\r\n        case 'tf_half_pixel_for_nn':\r\n          return 'return (xResized + 0.5) / xScale;';\r\n        case 'align_corners':\r\n          return 'if (lengthResized == 1) { \\\r\n                    return 0.0; \\\r\n                  } else { \\\r\n                    return xResized * (lengthOriginal - 1) / (lengthResized - 1); \\\r\n                  }';\r\n        case 'tf_crop_and_resize':\r\n          return 'if (lengthResized > 1) { \\\r\n                    return roiStart * (lengthOriginal - 1) + \\\r\n                          (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1); \\\r\n                  } else { \\\r\n                    return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1); \\\r\n                  }';\r\n        case 'half_pixel_symmetric':\r\n          return [\r\n            'const outputWidth = xScale * lengthResized;', 'const adjustment = lengthResized / outputWidth;',\r\n            'const center = lengthOriginal / 2;', 'const offset = center * (1 - adjustment);',\r\n            'return offset + ((xResized + 0.5) / xScale) - 0.5;'\r\n          ].join('\\n');\r\n        case 'half_pixel':\r\n          return 'return ((xResized + 0.5) / xScale) - 0.5;';\r\n        default:\r\n          throw new Error(`Coordinate transform mode ${coordinateTransferMode} is not supported`);\r\n      }\r\n    })() +\r\n    '}';\r\n\r\nconst getNearestPixelFromOriginal = (nearestMode: NearestMode, opsetVersion: number): string =>\r\n    'fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {' + (() => {\r\n      switch (nearestMode) {\r\n        case 'round_prefer_ceil':\r\n          return 'if (fract(xOriginal) == 0.5) { \\\r\n            return ceil(xOriginal); \\\r\n          } else { \\\r\n            return round(xOriginal); \\\r\n          }';\r\n        case 'floor':\r\n          return 'return floor(xOriginal);';\r\n        case 'ceil':\r\n          return 'return ceil(xOriginal);';\r\n        case 'round_prefer_floor':\r\n          return 'if (fract(xOriginal) == 0.5) { \\\r\n                    return floor(xOriginal); \\\r\n                  } else { \\\r\n                    return round(xOriginal); \\\r\n                  }';\r\n        case 'simple':\r\n        default:\r\n          if (opsetVersion < 11) {\r\n            return 'if (isDownSample) \\\r\n                    { \\\r\n                      return ceil(xOriginal); \\\r\n                    } else { \\\r\n                      return xOriginal; \\\r\n                    }';\r\n          }\r\n          throw new Error(`Nearest mode ${nearestMode} is not supported`);\r\n      }\r\n    })() +\r\n    '}';\r\n\r\nconst updateRoI = (roi: readonly number[], axes: readonly number[], rank: number): number[] => {\r\n  const roiTmp = new Array(rank).fill(0).concat(new Array(rank).fill(1));\r\n  const roiLocal = roi.length === 0 ? roiTmp : roi.slice();\r\n  if (axes.length > 0) {\r\n    axes.forEach((v, i) => {\r\n      roiTmp[v] = roiLocal[i];\r\n      roiTmp[i + rank] = roiLocal[axes.length + i];\r\n    });\r\n    return roiTmp;\r\n  }\r\n  return roiLocal;\r\n};\r\n\r\nconst initOutputShape =\r\n    (inputShape: readonly number[], scales: readonly number[], sizes: readonly number[], axes: readonly number[]):\r\n        number[] => {\r\n          let outputShape: number[] = [];\r\n          if (sizes.length > 0) {\r\n            if (axes.length > 0) {\r\n              inputShape.forEach((v) => outputShape.push(v));\r\n              if (Math.max(...axes) > inputShape.length) {\r\n                throw new Error('axes is out of bound');\r\n              }\r\n              axes.forEach((v, i) => outputShape[v] = sizes[i]);\r\n            } else {\r\n              sizes.forEach((v) => outputShape.push(v));\r\n            }\r\n          } else {\r\n            if (scales.length === 0) {\r\n              throw new Error('Resize requires either scales or sizes.');\r\n            } else {\r\n              outputShape = inputShape.map((value, index) => Math.round(value * scales[index]));\r\n            }\r\n          }\r\n          return outputShape;\r\n        };\r\n\r\nconst adjustOutputShape =\r\n    (inputShape: readonly number[], outputShape: readonly number[], scales: number[], attributes: ResizeAttributes):\r\n        number[] => {\r\n          const scaleInPolicy = (() => {\r\n            switch (attributes.keepAspectRatioPolicy) {\r\n              case 'not_larger':\r\n                return attributes.axes.length > 0 ? Math.min(...attributes.axes.map(i => scales[i]), Number.MAX_VALUE) :\r\n                                                    Math.min(...scales, Number.MAX_VALUE);\r\n              case 'not_smaller':\r\n                return attributes.axes.length > 0 ? Math.max(...attributes.axes.map(i => scales[i]), Number.MIN_VALUE) :\r\n                                                    Math.max(...scales, Number.MIN_VALUE);\r\n              default:\r\n                throw new Error(`Keep aspect ratio policy ${attributes.keepAspectRatioPolicy} is not supported`);\r\n            }\r\n          })();\r\n          scales.fill(1.0, 0, scales.length);\r\n          const adjustedOutputShape = inputShape.slice();\r\n          if (attributes.axes.length > 0) {\r\n            attributes.axes.forEach((v) => scales[v] = scaleInPolicy);\r\n            attributes.axes.forEach((v) => adjustedOutputShape[v] = Math.round(inputShape[v] * scales[v]));\r\n          } else {\r\n            scales.fill(scaleInPolicy, 0, scales.length);\r\n            adjustedOutputShape.forEach((v, i) => adjustedOutputShape[i] = Math.round(v * scales[i]));\r\n          }\r\n          return adjustedOutputShape;\r\n        };\r\n\r\nconst calculateOriginalIndicesFromOutputIndices =\r\n    (output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[], scales: readonly number[],\r\n     roi: readonly number[]): string => `\r\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> array<f32, ${\r\n        outputShape.length}> {\r\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n      const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\r\n      const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\r\n      const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\r\n      var originalIndices: array<f32, ${outputShape.length}>;\r\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\r\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\r\n        if (scales[i] == 1.0) {\r\n          originalIndices[i] = f32(outputIndex);\r\n        } else {\r\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\r\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\r\n        }\r\n      }\r\n      return originalIndices;\r\n    }`;\r\n\r\nconst calculateInputIndicesFromOutputIndices =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\r\n     scales: readonly number[], roi: readonly number[], useExtrapolation: boolean): string => `\r\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\r\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n        const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\r\n        const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\r\n        const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\r\n        var inputIndices: ${input.type.indices};\r\n        for (var i:u32 = 0; i < ${outputShape.length}; i++) {\r\n          var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\r\n          var inputIndex: u32;\r\n          if (scales[i] == 1.0) {\r\n            inputIndex = outputIndex;\r\n          } else {\r\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\r\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\r\n            if (!${useExtrapolation} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\r\n              if (original_idx < 0) {\r\n                inputIndex = 0;\r\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\r\n                inputIndex = inputShape[i] - 1;\r\n              } else {\r\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\r\n              }\r\n            } else {\r\n              inputIndex = u32(original_idx);\r\n            }\r\n          }\r\n          ${input.indicesSet('inputIndices', 'i', 'inputIndex')}\r\n        }\r\n        return inputIndices;\r\n    }`;\r\n\r\nconst checkInputIndices = (input: IndicesHelper, inputShape: readonly number[]): string => `\r\n    fn checkInputIndices(inputIndices: ${input.type.indices}) -> bool {\r\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n      for (var i:u32 = 0; i < ${inputShape.length}; i++) {\r\n        var inputIndex = ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'};\r\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }`;\r\n\r\nconst bilinearInterpolation =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\r\n     scales: readonly number[], useExtrapolation: boolean, extrapolationValue: number): string => {\r\n      const [batchIdx, heightIdx, widthIdx, channelIdx] =\r\n          inputShape.length === 2 ? [-1, 0, 1, -1] : (scales[1] === 1.0 ? [0, 2, 3, 1] : [0, 1, 2, 3]);\r\n      return `\r\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\r\n      var inputIndices: ${input.type.indices};\r\n      inputIndices[${heightIdx}] = max(0, min(row, ${inputShape[heightIdx]} - 1));\r\n      inputIndices[${widthIdx}] = max(0, min(col, ${inputShape[widthIdx]} - 1));\r\n      if (${inputShape.length} > 2) {\r\n        inputIndices[${channelIdx}] = channel;\r\n        inputIndices[${batchIdx}] = batch;\r\n      };\r\n      return input[${input.indicesToOffset('inputIndices')}];\r\n    }\r\n\r\n    fn bilinearInterpolation(outputIndices: ${output.type.indices}) -> f32 {\r\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\r\n      var row:f32 = originalIndices[${heightIdx}];\r\n      var col:f32 = originalIndices[${widthIdx}];\r\n      if (${useExtrapolation} && (row < 0 || row > (${inputShape[heightIdx]} - 1) || col < 0 || col > ${\r\n          inputShape[widthIdx]} - 1)) {\r\n        return ${extrapolationValue};\r\n      }\r\n      row = max(0, min(row, ${inputShape[heightIdx]} - 1));\r\n      col = max(0, min(col, ${inputShape[widthIdx]} - 1));\r\n      var row1: u32 = u32(row);\r\n      var col1: u32 = u32(col);\r\n      var row2: u32 = u32(row + 1);\r\n      var col2: u32 = u32(col + 1);\r\n      var channel: u32 = 0;\r\n      var batch: u32 = 0;\r\n      if (${inputShape.length > 2}) {\r\n        channel = u32(originalIndices[${channelIdx}]);\r\n        batch = u32(originalIndices[${batchIdx}]);\r\n      }\r\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\r\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\r\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\r\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\r\n      var dx1: f32 = row - f32(row1);\r\n      var dx2: f32 = f32(row2 ) - row;\r\n      var dy1 = col - f32(col1);\r\n      var dy2 = f32(col2) - col;\r\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\r\n    }`;\r\n    };\r\n\r\nconst bicubicInterpolation =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\r\n     scales: readonly number[], roi: readonly number[], cubicCoeffA: number, useExtrapolation: boolean,\r\n     extrapolationValue: number, excludeOutside: boolean): string => {\r\n      const [heightIdx, widthIdx] = inputShape.length === 2 ? [0, 1] : (scales[1] === 1.0) ? [2, 3] : [1, 2];\r\n\r\n      const createCubicInterpolationFunction = (idx: number): string => {\r\n        const direction = idx === heightIdx ? 'row' : 'col';\r\n        return `\r\n      fn ${direction}CubicInterpolation(inputIndices: ${input.type.indices}, outputIndices: ${\r\n            output.type.indices}) -> f32 {\r\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : `outputIndices[${idx}]`};\r\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${scales[idx]},\r\n        f32(${outputShape[idx]}), f32(${inputShape[idx]}), ${roi[idx]}, ${roi[idx]} + ${inputShape.length});\r\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\r\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\r\n\r\n        if (${useExtrapolation} && (originalIdx < 0 || originalIdx > (${inputShape[idx]} - 1))) {\r\n          return ${extrapolationValue};\r\n        }\r\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\r\n        for (var i: i32 = -1; i < 3; i++) {\r\n          var ${direction}: f32 = originalIdx + f32(i);\r\n          if (${direction} < 0 || ${direction} >= ${inputShape[idx]}) {\r\n            if (${excludeOutside}) {\r\n              coefs[i + 1] = 0.0;\r\n              continue;\r\n            } else if (${useExtrapolation}) {\r\n              return ${extrapolationValue};\r\n            } else {\r\n              ${direction} = max(0, min(${direction}, ${inputShape[idx]} - 1));\r\n            }\r\n          }\r\n          var inputIndicesCopy: ${input.type.indices} = inputIndices;\r\n          inputIndicesCopy[${idx}] = u32(${direction});\r\n          data[i + 1] = ${idx === heightIdx ? `input[${input.indicesToOffset('inputIndicesCopy')}];` : `\r\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\r\n        }\r\n        return cubicInterpolation1D(data, coefs);\r\n      }`;\r\n      };\r\n\r\n      return `\r\n    ${createCubicInterpolationFunction(heightIdx)};\r\n    ${createCubicInterpolationFunction(widthIdx)};\r\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\r\n    var absS = abs(s);\r\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\r\n    var oneMinusAbsS: f32 = 1.0 - absS;\r\n    var twoMinusAbsS: f32 = 2.0 - absS;\r\n    var onePlusAbsS: f32 = 1.0 + absS;\r\n    coeffs[0] = ((${cubicCoeffA} * onePlusAbsS - 5 * ${cubicCoeffA}) * onePlusAbsS + 8 * ${\r\n          cubicCoeffA}) * onePlusAbsS - 4 * ${cubicCoeffA};\r\n    coeffs[1] = ((${cubicCoeffA} + 2) * absS - (${cubicCoeffA} + 3)) * absS * absS + 1;\r\n    coeffs[2] = ((${cubicCoeffA} + 2) * oneMinusAbsS - (${cubicCoeffA} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\r\n    coeffs[3] = ((${cubicCoeffA} * twoMinusAbsS - 5 * ${cubicCoeffA}) * twoMinusAbsS + 8 * ${\r\n          cubicCoeffA}) * twoMinusAbsS - 4 * ${cubicCoeffA};\r\n    return coeffs;\r\n  }\r\n\r\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\r\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\r\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\r\n  }\r\n\r\n  fn bicubicInterpolation(outputIndices: ${output.type.indices}) -> f32 {\r\n    var inputIndices: ${input.type.indices} = outputIndices;\r\n    return colCubicInterpolation(inputIndices, outputIndices);\r\n  }\r\n    `;\r\n    };\r\n\r\nconst createResizeProgramInfo =\r\n    (metadata: ProgramMetadata, inputTensor: TensorView, attributes: ResizeAttributes, opsetVersion: number,\r\n     scalesInput: readonly number[], sizes: readonly number[], roiInput: readonly number[]): ProgramInfo => {\r\n      const inputShape = inputTensor.dims;\r\n      const roi = updateRoI(roiInput, attributes.axes, inputShape.length);\r\n\r\n      let outputShape = initOutputShape(inputShape, scalesInput, sizes, attributes.axes);\r\n      let scales = scalesInput.slice();\r\n      if (scalesInput.length === 0) {\r\n        scales = inputShape.map((value, index) => value === 0 ? 1.0 : outputShape[index] / value);\r\n        if (attributes.keepAspectRatioPolicy !== 'stretch') {\r\n          outputShape = adjustOutputShape(inputShape, outputShape, scales, attributes);\r\n        }\r\n      }\r\n      const output = outputVariable('output', inputTensor.dataType, outputShape);\r\n      const input = inputVariable('input', inputTensor.dataType, inputShape);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n      const noScale = inputShape.length === outputShape.length && inputShape.every((d, i) => d === outputShape[i]);\r\n      const useExtrapolation = attributes.coordinateTransformMode === 'tf_crop_and_resize';\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      ${getOriginalCoordinateFromResizedCoordinate(attributes.coordinateTransformMode)};\r\n      ${(() => {\r\n        switch (attributes.mode) {\r\n          case 'nearest':\r\n            return `\r\n              ${checkInputIndices(input, inputShape)};\r\n              ${getNearestPixelFromOriginal(attributes.nearestMode, opsetVersion)};\r\n              ${\r\n                calculateInputIndicesFromOutputIndices(\r\n                    input, output, inputShape, outputShape, scales, roi, useExtrapolation)};\r\n              `;\r\n          case 'linear':\r\n            return `\r\n              ${calculateOriginalIndicesFromOutputIndices(output, inputShape, outputShape, scales, roi)};\r\n              ${\r\n                bilinearInterpolation(\r\n                    input, output, inputShape, outputShape, scales, useExtrapolation, attributes.extrapolationValue)};\r\n              `;\r\n          case 'cubic':\r\n            return `\r\n            ${\r\n                bicubicInterpolation(\r\n                    input, output, inputShape, outputShape, scales, roi, attributes.cubicCoeffA, useExtrapolation,\r\n                    attributes.extrapolationValue, attributes.excludeOutside)};\r\n            `;\r\n          default:\r\n            throw Error('Invalid resize mode');\r\n        }\r\n      })()};\r\n      ${shaderHelper.declareVariables(input, output)}\r\n      ${shaderHelper.mainStart()}\r\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n        if (${noScale}) {\r\n          output[global_idx] = input[global_idx];\r\n        } else {\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n          var inputIndices: ${input.type.indices};\r\n          ${(() => {\r\n        switch (attributes.mode) {\r\n          case 'nearest':\r\n            return `inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\r\n                  if (checkInputIndices(inputIndices)) {\r\n                    output[global_idx] = input[${input.indicesToOffset('inputIndices')}];\r\n                  } else {\r\n                    output[global_idx] = ${attributes.extrapolationValue};\r\n                  }`;\r\n          case 'linear':\r\n            return 'output[global_idx] = bilinearInterpolation(outputIndices);';\r\n          case 'cubic':\r\n            return 'output[global_idx] = bicubicInterpolation(outputIndices);';\r\n          default:\r\n            throw Error(`Unsupported resize mode: ${attributes.mode}`);\r\n        }\r\n      })()};\r\n        }\r\n      }`;\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const createResizeProgramInfoLoader =\r\n    (input: TensorView, attributes: ResizeAttributes, opsetVersion: number, scales: readonly number[],\r\n     sizes: readonly number[], roi: readonly number[]): ProgramInfoLoader => {\r\n      const metadata: ProgramMetadata = {\r\n        name: 'Resize',\r\n        inputTypes: [GpuDataType.default],\r\n        cacheHint: attributes.cacheKey + opsetVersion.toString() +\r\n            (scales.length > 0 ? '_scales_' + scales.toString() : '') +\r\n            (sizes.length > 0 ? '_sizes_' + sizes.toString() : ''),\r\n      };\r\n      return {\r\n        ...metadata,\r\n        get: () => createResizeProgramInfo(metadata, input, attributes, opsetVersion, scales, sizes, roi)\r\n      };\r\n    };\r\n\r\nconst getOpsetVersionFromCustomDataBuffer = (context: ComputeContext): number => {\r\n  const customDataBuffer = context.customDataBuffer;\r\n  const customDataBuffer32 = new Uint32Array(customDataBuffer, customDataBuffer.byteOffset, 1);\r\n  const opsetVersion = customDataBuffer32[0];\r\n  return opsetVersion;\r\n};\r\n\r\nexport const resize = (context: ComputeContext, attributes: ResizeAttributes): void => {\r\n  const scales: number[] = [];\r\n  const sizes: number[] = [];\r\n  const roi: number[] = [];\r\n  const opsetVersion = getOpsetVersionFromCustomDataBuffer(context);\r\n  validateInputs(context.inputs, attributes, opsetVersion, scales, sizes, roi);\r\n  context.compute(\r\n      createResizeProgramInfoLoader(context.inputs[0], attributes, opsetVersion, scales, sizes, roi), {inputs: [0]});\r\n};\r\n\r\nexport const parseResizeAttributes = (attributes: Record<string, unknown>): ResizeAttributes => {\r\n  const antialias = attributes.antialias as number;\r\n  const axes = attributes.axes as number[];\r\n  const coordinateTransformMode: CoordinateTransformMode =\r\n      attributes.coordinateTransformMode as CoordinateTransformMode;\r\n  const cubicCoeffA = attributes.cubicCoeffA as number;\r\n  const excludeOutside = attributes.excludeOutside as number !== 0;\r\n  const extrapolationValue = attributes.extrapolationValue as number;\r\n  const keepAspectRatioPolicy: KeepAspectRatioPolicy = attributes.keepAspectRatioPolicy as KeepAspectRatioPolicy;\r\n  const mode: Mode = attributes.mode as Mode;\r\n  // If nearestMode is not specified, use simple mode.\r\n  const nearestMode: NearestMode = (attributes.nearestMode === '' ? 'simple' : attributes.nearestMode) as NearestMode;\r\n  return createAttributeWithCacheKey({\r\n    antialias,\r\n    axes,\r\n    coordinateTransformMode,\r\n    cubicCoeffA,\r\n    excludeOutside,\r\n    extrapolationValue,\r\n    keepAspectRatioPolicy,\r\n    mode,\r\n    nearestMode\r\n  });\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\r\n\r\nexport interface SkipLayerNormAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 3) {\r\n    throw new Error('layerNorm requires at least 3 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n  const input: TensorView = inputs[0];\r\n  const skip: TensorView = inputs[1];\r\n  const gamma: TensorView = inputs[2];\r\n\r\n  if (input.dataType !== skip.dataType || input.dataType !== gamma.dataType) {\r\n    throw new Error('All inputs must have the same data type');\r\n  }\r\n\r\n  if (input.dims.length !== 3 && input.dims.length !== 2) {\r\n    throw new Error('Input must be 2D or 3D');\r\n  }\r\n\r\n  if (skip.dims.length !== 3 && skip.dims.length !== 2) {\r\n    throw new Error('Skip must be 2D or 3D');\r\n  }\r\n\r\n  const hiddenSize = input.dims[input.dims.length - 1];\r\n  const sequenceLength = input.dims[input.dims.length - 2];\r\n  if (skip.dims[skip.dims.length - 1] !== hiddenSize) {\r\n    throw new Error('Skip must have the same hidden size as input');\r\n  }\r\n  if (skip.dims[skip.dims.length - 2] !== sequenceLength) {\r\n    throw new Error('Skip must have the same sequence length as input');\r\n  }\r\n\r\n  if (gamma.dims.length !== 1) {\r\n    throw new Error('Gamma must be 1D');\r\n  }\r\n  if (gamma.dims[gamma.dims.length - 1] !== hiddenSize) {\r\n    throw new Error('Gamma must have the same hidden size as input');\r\n  }\r\n  if (inputs.length > 3) {\r\n    const beta: TensorView = inputs[3];\r\n    if (beta.dims.length !== 1) {\r\n      throw new Error('Beta must be 1D');\r\n    }\r\n    if (beta.dims[beta.dims.length - 1] !== hiddenSize) {\r\n      throw new Error('Beta must have the same hidden size as input');\r\n    }\r\n  }\r\n\r\n  if (inputs.length > 4) {\r\n    const bias: TensorView = inputs[4];\r\n    if (bias.dims.length !== 1) {\r\n      throw new Error('Bias must be 1D');\r\n    }\r\n    if (bias.dims[bias.dims.length - 1] !== hiddenSize) {\r\n      throw new Error('Bias must have the same hidden size as input');\r\n    }\r\n  }\r\n};\r\n\r\nconst createSkipLayerNormProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number,\r\n     isTraining: boolean): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const inputSize = ShapeUtil.size(inputShape);\r\n      const outputShape = inputShape;\r\n      const outputSize = inputSize;\r\n      const hiddenSize = inputShape.slice(-1)[0];\r\n      const meanInvStdDevDim = isTraining ? inputShape.slice(0, -1).concat(1) : [];\r\n      const hasBetaInput = inputs.length > 3;\r\n      const hasBiasInput = inputs.length > 4;\r\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\r\n      const hasMeanOutput = isTraining && outputCount > 1;\r\n      const hasInvStdDevOutput = isTraining && outputCount > 2;\r\n      const hasInputSkipBiasSumOutput = outputCount > 3;\r\n      let bindingNumber = 0;\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      const hiddenSize: u32 = ${hiddenSize};\r\n      const epsilon: f32 = ${attributes.epsilon};\r\n\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read> x : array<${dataType}>;\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read> skip : array<${dataType}>;\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read> gamma : array<${dataType}>;\r\n      ${hasBetaInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> beta : array<${dataType}>;` : ''}\r\n      ${hasBiasInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> bias : array<${dataType}>;` : ''}\r\n      @group(0) @binding(${bindingNumber++}) var<storage, read_write> output : array<${dataType}>;\r\n      ${\r\n          hasMeanOutput ?\r\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> meanOutput : array<${dataType}>;` :\r\n              ''}\r\n      ${\r\n          hasInvStdDevOutput ?\r\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> invStdOutput : array<${dataType}>;` :\r\n              ''}\r\n      ${\r\n          hasInputSkipBiasSumOutput ?\r\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> inputSkipBiasSum : array<${dataType}>;` :\r\n              ''}\r\n\r\n      ${shaderHelper.mainStart()}\r\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize / hiddenSize)}\r\n        let offset = global_idx * hiddenSize;\r\n        var sum: f32 = 0.0;\r\n        var squareSum: f32 = 0.0;\r\n        for (var i: u32 = 0; i < hiddenSize; i++) {\r\n          let skipValue = skip[offset + i];\r\n          let biasValue = ${hasBiasInput ? 'bias[i]' : '0.0'};\r\n          let inputValue = x[offset + i];\r\n          let value = inputValue + skipValue + biasValue;\r\n          ${hasInputSkipBiasSumOutput ? 'inputSkipBiasSum[offset + i] = value;' : ''}\r\n          output[offset + i] = value;\r\n          sum += value;\r\n          squareSum += value * value;\r\n        }\r\n        let mean: f32 = sum / f32(hiddenSize);\r\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\r\n        ${hasMeanOutput ? 'meanOutput[global_idx] = mean;' : ''}\r\n        ${hasInvStdDevOutput ? 'invStdOutput[global_idx] = 1.0 / variance;' : ''}\r\n        for (var i: u32 = 0; i < hiddenSize; i++) {\r\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + ${hasBetaInput ? 'beta[i]' : '0.0'};\r\n        }\r\n      }`;\r\n      const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\r\n      if (outputCount > 1) {\r\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n      if (outputCount > 2) {\r\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n      if (outputCount > 3) {\r\n        outputs.push({dims: inputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / hiddenSize / 64)})\r\n      };\r\n    };\r\n\r\nconst createSkipLayerNormProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number, isTraining: boolean):\r\n        ProgramInfoLoader => {\r\n          const inputTypes = new Array(inputs.length).fill(GpuDataType.default);\r\n          const metadata: ProgramMetadata = {\r\n            name: 'SkipLayerNormalization',\r\n            inputTypes,\r\n            cacheHint: attributes.cacheKey,\r\n          };\r\n          return {\r\n            ...metadata,\r\n            get: () => createSkipLayerNormProgramInfo(metadata, inputs, attributes, outputCount, isTraining)\r\n          };\r\n        };\r\n\r\nexport const skipLayerNorm = (context: ComputeContext, attributes: SkipLayerNormAttributes): void => {\r\n  // TODO: initialize isTraining from ComputeContext\r\n  const isTraining = false;\r\n  validateInputs(context.inputs);\r\n  // Mean and InvStdDev are only used in training mode and are not required for inference.\r\n  // They are added here for completeness only.\r\n  const outputs = [0];\r\n  if (context.outputCount > 1) {\r\n    outputs.push(isTraining ? 1 : -3);\r\n  }\r\n  if (context.outputCount > 2) {\r\n    outputs.push(isTraining ? 2 : -3);\r\n  }\r\n  if (context.outputCount > 3) {\r\n    outputs.push(3);\r\n  }\r\n  context.compute(\r\n      createSkipLayerNormProgramInfoLoader(context.inputs, attributes, context.outputCount, isTraining), {outputs});\r\n};\r\n\r\nexport const parseSkipLayerNormAttributes = (attributes: Record<string, unknown>): SkipLayerNormAttributes => {\r\n  const epsilon = attributes.epsilon as number;\r\n  return createAttributeWithCacheKey({epsilon});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly starts: number[];\r\n  readonly ends: number[];\r\n  readonly axes: number[];\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n  if (attributes.axes.length !== 0) {\r\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\r\n      throw new Error('axes, starts and ends must have the same length');\r\n    }\r\n  } else if (attributes.starts.length !== attributes.ends.length) {\r\n    throw new Error('starts and ends must have the same length');\r\n  }\r\n  inputs.slice(1).forEach((_, idx) => {\r\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\r\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\r\n    }\r\n  });\r\n};\r\n\r\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\r\n  const input: number[] = [];\r\n  if (inputs.length > idx) {\r\n    if (inputs[idx].dataType === DataType.int64) {\r\n      inputs[idx].getBigInt64Array().forEach(v => input.push(Number(v)));\r\n    } else if (inputs[idx].dataType === DataType.int32) {\r\n      inputs[idx].getInt32Array().forEach(v => input.push(Number(v)));\r\n    } else {\r\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\r\n    }\r\n  }\r\n  return input;\r\n};\r\n\r\nconst createSliceAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: SliceAttributes): SliceAttributes => {\r\n      if (inputs.length > 1) {\r\n        const starts: number[] = readInput(inputs, 1);\r\n        const ends: number[] = readInput(inputs, 2);\r\n        let axes: number[] = readInput(inputs, 3);\r\n        if (axes.length === 0) {\r\n          axes = [...Array(inputs[0].dims.length).keys()];\r\n        }\r\n        return createAttributeWithCacheKey({starts, ends, axes});\r\n      } else {\r\n        return attributes;\r\n      }\r\n    };\r\n\r\nconst fixStartEndValues =\r\n    (value: number, index: number, inputShape: readonly number[], axes: readonly number[], steps: readonly number[]):\r\n        number => {\r\n          let newValue = value;\r\n          if (value < 0) {\r\n            newValue += inputShape[axes[index]];\r\n          }\r\n          if (steps[index] < 0) {\r\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\r\n          } else {\r\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\r\n          }\r\n        };\r\n\r\nconst calculateInputIndicesImpl =\r\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[]):\r\n        string => `fn calculateInputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\r\n          var inputIndices: ${input.type.indices};\r\n          var carry = 0u;\r\n          for (var i = ${inputShape.length}; i >= 0; i--) {\r\n            var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\r\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\r\n            carry = inputIndex / inputShape[i];\r\n            inputIndex = inputIndex % inputShape[i];\r\n            if (signs[i] < 0) {\r\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\r\n            }\r\n            ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'} = inputIndex;\r\n          }\r\n          return inputIndices;\r\n      }`;\r\n\r\nconst createSliceProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const inputSize = ShapeUtil.size(inputShape);\r\n      const axes = (attributes.axes.length > 0) ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length) :\r\n                                                  [...Array(inputShape.length).keys()];\r\n      let steps = readInput(inputs, 4);\r\n      steps.forEach((step) => step !== 0 || (() => {\r\n                                throw new Error('step cannot be 0');\r\n                              }));\r\n      if (steps.length === 0) {\r\n        steps = Array(axes.length).fill(1);\r\n      }\r\n      const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\r\n\r\n      const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\r\n\r\n      if (axes.length !== inputShape.length) {\r\n        for (let i = 0; i < inputShape.length; ++i) {\r\n          if (!axes.includes(i)) {\r\n            starts.splice(i, 0, 0);\r\n            ends.splice(i, 0, inputShape[i]);\r\n            steps.splice(i, 0, 1);\r\n          }\r\n        }\r\n      }\r\n      const signs = steps.map(step => Math.sign(step));\r\n      // Convert negative steps to positive steps and reverse starts and ends\r\n      steps.forEach((step, i, array) => {\r\n        if (step < 0) {\r\n          const numSteps = (ends[i] - starts[i]) / step;\r\n          const newEnd = starts[i];\r\n          const newStart = newEnd + numSteps * steps[i];\r\n          starts[i] = newStart;\r\n          ends[i] = newEnd;\r\n          array[i] = -step;\r\n        }\r\n      });\r\n\r\n      const outputShape = inputShape.slice(0);\r\n      axes.forEach((axis, _) => {\r\n        outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\r\n      });\r\n\r\n      const outputTensorInfo:\r\n          TensorInfo = {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default};\r\n\r\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\r\n      const input = inputVariable('input', inputs[0].dataType, inputShape);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      ${shaderHelper.declareVariables(input, output)}\r\n        const signs = array<i32, ${signs.length}>(${signs.map(i => `${i}i`).join(',')});\r\n        const starts = array<u32, ${starts.length}>(${starts.map(i => `${i}u`).join(',')});\r\n        const ends = array<u32, ${ends.length}>(${ends.map(i => `${i}u`).join(',')});\r\n        const steps = array<u32, ${steps.length}>(${steps.map(i => `${i}u`).join(',')});\r\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\r\n\r\n        ${calculateInputIndicesImpl(input, output, inputShape, outputShape)}\r\n        ${shaderHelper.mainStart()}\r\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n          let outputIndices = ${output.offsetToIndices('global_idx')};\r\n          let inputIndices = calculateInputIndices(outputIndices);\r\n          ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: [outputTensorInfo],\r\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createSliceProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfoLoader => {\r\n      const updatedAttributes = createSliceAttributesFromInputs(inputs, attributes);\r\n      const metadata: ProgramMetadata = {\r\n        name: 'Slice',\r\n        inputTypes: [GpuDataType.default],\r\n        cacheHint: updatedAttributes.cacheKey + (inputs.length > 4 ? 'steps_' + inputs[4].dims.toString() : '')\r\n      };\r\n      return {...metadata, get: () => createSliceProgramInfo(metadata, inputs, updatedAttributes)};\r\n    };\r\n\r\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\r\n  validateInputs(context.inputs, attributes);\r\n  const programInfoLoader = createSliceProgramInfoLoader(context.inputs, attributes);\r\n  const program = programInfoLoader.get();\r\n  if (ShapeUtil.size(program.outputs[0].dims) > 0) {\r\n    context.compute(programInfoLoader, {inputs: [0]});\r\n  } else {\r\n    // TODO: support empty output\r\n    throw new Error('slice: output size is 0');\r\n  }\r\n};\r\n\r\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\r\n  const starts = attributes.starts as number[];\r\n  const ends = attributes.ends as number[];\r\n  const axes = attributes.axes as number[];\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// TODO: this is the same naive implementation we use for reduce that has\r\n// performance limitations when the reduced axis is long. Need to add\r\n// a optimized codepath for this.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\r\n\r\nimport {ShaderHelper} from './common';\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax op requires 1 input.');\r\n  }\r\n  if (inputs[0].dataType !== DataType.float) {\r\n    throw new Error('Softmax input needs to be float.');\r\n  }\r\n};\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const softmaxProgramMetadata = {\r\n  name: 'Softmax',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\n\r\nconst createSoftmaxProgramInfo = (input: TensorView, attributes: SoftmaxAttributes): ProgramInfo => {\r\n  const dataType = 'f32';\r\n  const shape = input.dims;\r\n  const outputSize = ShapeUtil.size(shape);\r\n  const WG = 64;\r\n  let axis = attributes.axis;\r\n  if (axis < 0) {\r\n    axis = shape.length + axis;\r\n  }\r\n  if (axis < shape.length - 1) {\r\n    throw new Error('softmax only supports last axis for now.');\r\n  }\r\n\r\n  const cols = shape[axis];\r\n  const rows = outputSize / cols;\r\n\r\n  const getShaderSource = (_shaderHelper: ShaderHelper) => `\r\n      var<workgroup> rowMaxShared : ${dataType};\r\n      var<workgroup> rowSumShared : ${dataType};\r\n      var<workgroup> threadShared : array<${dataType}, ${WG}>;\r\n\r\n      @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\r\n      @group(0) @binding(1) var<storage, read_write> result : array<${dataType}>;\r\n\r\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${dataType} {\r\n        let index = row * row_stride + col;\r\n        return x[index];\r\n      }\r\n\r\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${dataType}) {\r\n        let index = row * row_stride + col;\r\n        result[index] = value;\r\n      }\r\n\r\n      @compute @workgroup_size(${WG}, 1, 1)\r\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\r\n        let gindex = i32(global_id.x);\r\n        let lindex = i32(local_id.x);\r\n        const wg = ${WG};\r\n        let row = gindex / wg;\r\n        let cols = ${cols};\r\n        let row_stride : i32 = ${cols};\r\n\r\n        // find the rows max\r\n        var threadMax = -3.402823e+38f; // 6.2.4 in wgsl spec\r\n        for (var col = lindex; col < cols; col += wg) {\r\n          let value = getValue(row, col, row_stride);\r\n          threadMax = max(threadMax, value);\r\n        }\r\n        if (lindex < cols) {\r\n          threadShared[lindex] = threadMax;\r\n        }\r\n        workgroupBarrier();\r\n\r\n        var reduceSize = min(cols, wg);\r\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\r\n          reduceSize = currSize + (reduceSize & 1);\r\n          if (lindex < currSize) {\r\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\r\n          }\r\n          workgroupBarrier();\r\n        }\r\n        if (lindex == 0) {\r\n          rowMaxShared = threadShared[0];\r\n        }\r\n        workgroupBarrier();\r\n\r\n        // find the rows sum\r\n        var threadSum = 0.0;\r\n        for (var col = lindex; col < cols; col += wg) {\r\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\r\n          threadSum += subExp;\r\n        }\r\n        threadShared[lindex] = threadSum;\r\n        workgroupBarrier();\r\n\r\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\r\n          if (lindex < currSize) {\r\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\r\n          }\r\n          workgroupBarrier();\r\n        }\r\n        if (lindex == 0) {\r\n          rowSumShared = threadShared[0];\r\n        }\r\n        workgroupBarrier();\r\n\r\n        // calculate final value for each element in the row\r\n        for (var col = lindex; col < cols; col += wg) {\r\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\r\n          setValue(row, col, row_stride, value);\r\n        }\r\n      }`;\r\n  return {\r\n    ...softmaxProgramMetadata,\r\n    outputs: [{dims: shape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\r\n    getShaderSource,\r\n    dispatchGroup: () => ({x: rows})\r\n  };\r\n};\r\n\r\n\r\nexport const softmax = (context: ComputeContext, attributes: SoftmaxAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute({\r\n    ...softmaxProgramMetadata,\r\n    cacheHint: attributes.cacheKey,\r\n    get: () => createSoftmaxProgramInfo(context.inputs[0], attributes)\r\n  });\r\n};\r\n\r\nexport const parseSoftmaxAttributes = (attributes: Record<string, unknown>): SoftmaxAttributes =>\r\n    createAttributeWithCacheKey({axis: attributes.axis as number});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly numOutputs: number;\r\n  readonly splitSizes: number[];\r\n}\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n};\r\n\r\nconst createSplitAttributesFromInputs =\r\n    (inputs: readonly TensorView[], attributes: SplitAttributes): SplitAttributes => {\r\n      const splitSizes: number[] = [];\r\n      let numOutputs: number = attributes.numOutputs;\r\n      if (inputs[1].dims[0] > 0) {\r\n        inputs[1].getBigInt64Array().forEach(v => splitSizes.push(Number(v)));\r\n        numOutputs = splitSizes.length;\r\n      }\r\n      return createAttributeWithCacheKey({numOutputs, axis: attributes.axis, splitSizes});\r\n    };\r\n\r\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\r\nfn calculateOutputIndex(index: u32) -> u32 {\r\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\r\n    if (index < sizeInConcatAxis[i]) {\r\n        return i;\r\n    }\r\n    }\r\n    return ${numberOfTensors}u;\r\n}`;\r\nconst writeBufferDataImpl = (outputs: readonly IndicesHelper[]) => {\r\n  const numberOfTensors = outputs.length;\r\n  const codeLines: string[] = [];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    const returnSnippet = outputs[i].setByIndices('indices', 'input[global_idx]');\r\n    if (numberOfTensors === 1) {\r\n      codeLines.push(returnSnippet);\r\n    } else if (i === 0) {\r\n      codeLines.push(`if (outputNumber == ${i}u) { ${returnSnippet} }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(`else { ${returnSnippet} }`);\r\n    } else {\r\n      codeLines.push(`else if (outputNumber == ${i}) { ${returnSnippet} }`);\r\n    }\r\n  }\r\n  return `\r\n      fn writeBufferData(outputNumber: u32, indices: ${outputs[0].type.indices}, global_idx: u32) {\r\n        ${codeLines.join('\\n')}\r\n      }`;\r\n};\r\n\r\nconst createSplitProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const inputSize = ShapeUtil.size(inputShape);\r\n      const dataType = inputs[0].dataType;\r\n      const rank = inputShape.length;\r\n      const axis = attributes.axis;\r\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\r\n      const outputs = new Array<IndicesHelper>(attributes.numOutputs);\r\n      const input = inputVariable('input', dataType, inputShape);\r\n      const sizeInConcatAxis = new Array<number>(attributes.numOutputs);\r\n      const outputsTensorInfo: TensorInfo[] = [];\r\n      const outputShapes: number[][] = [];\r\n      let previousSum = 0;\r\n      for (let i = 0; i < attributes.numOutputs; i++) {\r\n        previousSum += attributes.splitSizes[i];\r\n        sizeInConcatAxis[i] = previousSum;\r\n        const outputShape = inputShape.slice();\r\n        outputShape[attributes.axis] = attributes.splitSizes[i];\r\n        outputShapes.push(outputShape);\r\n        outputs[i] = outputVariable(`output${i}`, dataType, outputShapes[i]);\r\n        outputsTensorInfo.push({dims: outputShapes[i], dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\r\n      }\r\n      const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  ${shaderHelper.declareVariables(input, ...outputs)}\r\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\r\n  ${calculateOutputIndexImpl(sizeInConcatAxis.length)}\r\n  ${writeBufferDataImpl(outputs)}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(inputSize)}\r\n\r\n    var indices = ${input.offsetToIndices('global_idx')};\r\n    let outputNumber = calculateOutputIndex(${indicesAxis});\r\n    if (outputNumber != 0) {\r\n        ${indicesAxis} -= sizeInConcatAxis[outputNumber - 1u];\r\n    }\r\n    writeBufferData(outputNumber, indices, global_idx);\r\n  }`;\r\n      return {\r\n        ...metadata,\r\n        getShaderSource,\r\n        outputs: outputsTensorInfo,\r\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nconst createSplitProgramInfoLoader =\r\n    (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfoLoader => {\r\n      const updatedAttributes = inputs.length === 1 ? attributes : createSplitAttributesFromInputs(inputs, attributes);\r\n      const metadata:\r\n          ProgramMetadata = {name: 'Split', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\r\n      return {...metadata, get: () => createSplitProgramInfo(metadata, [inputs[0]], updatedAttributes)};\r\n    };\r\n\r\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute(createSplitProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\r\n};\r\n\r\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\r\n  const axis = attributes.axis as number;\r\n  const splitSizes: number[] = attributes.splitSizes as number[];\r\n  const numOutputs = attributes.numOutputs as number < 0 ? splitSizes.length : attributes.numOutputs as number;\r\n  if (numOutputs !== splitSizes.length) {\r\n    throw new Error('numOutputs and splitSizes lengh must be equal');\r\n  }\r\n  return createAttributeWithCacheKey({axis, numOutputs, splitSizes});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport const tileProgramMetadata = {\r\n  name: 'Tile',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\nconst getRepeats = (repeatsTensorView: TensorView): readonly number[] =>\r\n    Array.from(repeatsTensorView.getBigInt64Array(), Number);\r\n\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.int32 &&\r\n      inputs[0].dataType !== DataType.uint32) {\r\n    throw new Error('Tile only support float, int32, and uint32 data types');\r\n  }\r\n\r\n  if (inputs[1].dataType !== DataType.int64) {\r\n    throw new Error('Tile `repeats` input should be of int64 data type');\r\n  }\r\n\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('Tile `repeats` input should be 1-D');\r\n  }\r\n\r\n  const repeats: readonly number[] = getRepeats(inputs[1]);\r\n\r\n  if (repeats.length !== inputs[0].dims.length) {\r\n    throw new Error('Tile `repeats` input should have same number of elements as rank of input data tensor');\r\n  }\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], repeats: readonly number[]): readonly number[] => {\r\n  const outputShape: number[] = [];\r\n\r\n  for (let i = 0; i < inputShape.length; ++i) {\r\n    outputShape.push(inputShape[i] * repeats[i]);\r\n  }\r\n\r\n  return outputShape;\r\n};\r\n\r\nexport const createTileProgramInfo =\r\n    (tileProgramMetadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\r\n      const inputShape = inputs[0].dims;\r\n      const repeats: readonly number[] = getRepeats(inputs[1]);\r\n      const outputShape = getOutputShape(inputShape, repeats);\r\n      const outputSize = ShapeUtil.size(outputShape);\r\n\r\n      const dataType = inputs[0].dataType;\r\n      const input = inputVariable('input', dataType, inputShape);\r\n      const output = outputVariable('output', dataType, outputShape);\r\n\r\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n      const inputShape = ${input.indices(...inputShape)};\r\n      ${shaderHelper.declareVariables(input, output)}\r\n      ${shaderHelper.mainStart()}\r\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n      let outputIndices = ${output.offsetToIndices('global_idx')};\r\n      var inputIndices: ${input.type.indices};\r\n      for (var i = 0; i < ${inputShape.length}; i++) {\r\n        let inputDimValue = ${output.indicesGet('outputIndices', 'i')}  % ${input.indicesGet('inputShape', 'i')};\r\n\r\n        ${input.indicesSet('inputIndices', 'i', 'inputDimValue')}\r\n      }\r\n      ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\r\n    }`;\r\n\r\n      return {\r\n        ...tileProgramMetadata,\r\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\r\n        getShaderSource,\r\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n      };\r\n    };\r\n\r\nexport const tile = (context: ComputeContext): void => {\r\n  validateInputs(context.inputs);\r\n  const repeats: readonly number[] = getRepeats(context.inputs[1]);\r\n  const cacheHint = repeats.toString();\r\n  context.compute(\r\n      {...tileProgramMetadata, cacheHint, get: () => createTileProgramInfo(tileProgramMetadata, context.inputs)},\r\n      {inputs: [0]});\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\r\n\r\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nexport const transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputTypes: [GpuDataType.default]\r\n};\r\n\r\nconst validateInputs = (inputs: readonly TensorView[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.int32 &&\r\n      inputs[0].dataType !== DataType.uint32) {\r\n    throw new Error('Transpose only support float, int32, and uint32 data types');\r\n  }\r\n};\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\r\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\r\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\r\n\r\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\r\n    var a: ${input.type.indices};`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(input.indicesSet('a', perm[i], `i[${i}]`));\r\n  }\r\n  reverseFunc.push('return a;}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nexport const createTransposeProgramInfo = (inputTensor: TensorView, permAttr: number[]): ProgramInfo => {\r\n  const dataType = inputTensor.dataType;\r\n  const inputShape = inputTensor.dims;\r\n  const perm = getAdjustedPerm(inputShape, permAttr);\r\n  const outputShape = getOutputShape(inputShape, perm);\r\n  const rank = inputShape.length;\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n  // A dims=[${inputs[0].dims.toString()}]\r\n  // out Dims=[${unpackedOutputShape.toString()}]\r\n  // based on perm=[${perm.toString()}]\r\n\r\n  const output = outputVariable('output', dataType, outputShape);\r\n  const input = inputVariable('a', dataType, inputShape);\r\n\r\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\r\n  ${shaderHelper.declareVariables(input, output)}\r\n\r\n  ${permFunctionBody(perm, rank, input, output)}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\r\n\r\n    let indices = ${output.offsetToIndices('global_idx')};\r\n    let aIndices = perm(indices);\r\n\r\n    ${output.setByOffset('global_idx', input.getByIndices('aIndices'))}\r\n  }`;\r\n  return {\r\n    ...transposeProgramMetadata,\r\n    outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\r\n    getShaderSource,\r\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\r\n  };\r\n};\r\n\r\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\r\n  validateInputs(context.inputs);\r\n  context.compute({\r\n    ...transposeProgramMetadata,\r\n    cacheHint: attributes.cacheKey,\r\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\r\n  });\r\n};\r\n\r\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\r\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {DataType} from '../../../wasm-common';\r\nimport {TensorView} from '../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\r\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\r\n\r\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\r\n\r\ntype BuiltinFunctionName = string;\r\ntype ElementwiseCustomExpression = (expression: string) => string;\r\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\r\n\r\nconst createElementwiseProgramShader =\r\n    (shaderHelper: ShaderHelper, datasize: number, inputDataType: number, outputDataType: number,\r\n     funcCall: ElementwiseFunctionCall, additionalImplementation?: string): string => {\r\n      const vecSize = Math.ceil(datasize / 4);\r\n\r\n      let expression = '';\r\n      if (typeof funcCall === 'string') {\r\n        expression = `${funcCall}(a)`;\r\n      } else {\r\n        expression = funcCall('a');\r\n      }\r\n\r\n      const input = inputVariable('inputData', inputDataType, [vecSize], 4);\r\n      const output = outputVariable('outputData', outputDataType, [vecSize], 4);\r\n\r\n      return `\r\n  ${shaderHelper.declareVariables(input, output)}\r\n\r\n  ${additionalImplementation ?? ''}\r\n\r\n  ${shaderHelper.mainStart()}\r\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\r\n\r\n    let a = ${input.getByOffset('global_idx')};\r\n    ${output.setByOffset('global_idx', expression)}\r\n  }`;\r\n    };\r\n\r\nconst createElementwiseProgramInfo =\r\n    (metadata: ProgramMetadata, input: TensorView, outputDataType: number, funcCall: ElementwiseFunctionCall,\r\n     additionalImplementation?: string): ProgramInfo => ({\r\n      ...metadata,\r\n      getShaderSource: shaderHelper => createElementwiseProgramShader(\r\n          shaderHelper, ShapeUtil.size(input.dims), input.dataType, outputDataType, funcCall, additionalImplementation),\r\n      outputs: [{dims: input.dims, dataType: outputDataType, gpuDataType: GpuDataType.default}],\r\n      dispatchGroup: (inputTensors) =>\r\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\r\n    });\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\r\n     cacheKey?: string, outputDataType: number = input.dataType): ProgramInfoLoader => {\r\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\r\n      return {\r\n        ...metadata,\r\n        get: () => createElementwiseProgramInfo(metadata, input, outputDataType, funcCall, additionalImplementation)\r\n      };\r\n    };\r\n\r\nexport const abs = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\r\n};\r\n\r\nexport const acos = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\r\n};\r\n\r\nexport const acosh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\r\n};\r\n\r\nexport const asin = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\r\n};\r\n\r\nexport const asinh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\r\n};\r\n\r\nexport const atan = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\r\n};\r\nexport const atanh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\r\n};\r\n\r\nexport interface CastAttributes extends AttributeWithCacheKey {\r\n  readonly to: number;\r\n  readonly saturate?: boolean;\r\n}\r\n\r\nexport const parseCastAttributes = (attributes: Record<string, unknown>): CastAttributes =>\r\n    createAttributeWithCacheKey(attributes as {to: number});\r\n\r\n\r\nexport const cast = (context: ComputeContext, attributes: CastAttributes): void => {\r\n  let func: ElementwiseFunctionCall;\r\n  switch (attributes.to) {\r\n    case DataType.float:\r\n      func = 'vec4<f32>';\r\n      break;\r\n    case DataType.uint32:\r\n      func = 'vec4<u32>';\r\n      break;\r\n    case DataType.int32:\r\n      func = 'vec4<i32>';\r\n      break;\r\n    case DataType.bool:\r\n      func = 'vec4<bool>';\r\n      break;\r\n    default:\r\n      throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${attributes.to}`);\r\n  }\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Cast', func, undefined, attributes.cacheKey, attributes.to));\r\n};\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\r\n  context.compute(\r\n      createElementwiseProgramInfoLoader(\r\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\r\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\r\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\r\n`,\r\n          attributes.cacheKey),\r\n      {inputs: [0]});\r\n};\r\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\r\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const clip = (context: ComputeContext): void => {\r\n  const attributes = generateClipAttributesFromInputs(context.inputs);\r\n  clipV10(context, attributes);\r\n};\r\n\r\nexport const ceil = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\r\n};\r\n\r\nexport const cos = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\r\n};\r\n\r\nexport const cosh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\r\n};\r\n\r\nexport interface AlphaAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\r\n    createAttributeWithCacheKey(attributes as {alpha: number});\r\n\r\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\r\n  const elu_alpha_: f32 = f32(${attributes.alpha});\r\n\r\n  fn elu_f32(a: f32) -> f32 {\r\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\r\n  }\r\n\r\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\r\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\r\n  }`,\r\n      attributes.cacheKey));\r\n};\r\n\r\nexport const erfImpl = (dataType: string) => `\r\nconst r0: f32 = 0.3275911;\r\nconst r1: f32 = 0.254829592;\r\nconst r2: f32 = -0.284496736;\r\nconst r3: f32 = 1.421413741;\r\nconst r4: f32 = -1.453152027;\r\nconst r5: f32 = 1.061405429;\r\n\r\nfn erf_vf32(v: ${dataType}) -> ${dataType} {\r\n  let absv = abs(v);\r\n  let x = 1.0 / (1.0 + r0 * absv);\r\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\r\n}`;\r\n\r\nexport const erf = (context: ComputeContext): void => {\r\n  context.compute(\r\n      createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, erfImpl('vec4<f32>')));\r\n};\r\n\r\nexport const exp = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\r\n};\r\n\r\nexport const floor = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\r\n};\r\n\r\nexport const gelu = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Gelu', a => `0.5 * ${a} * (1.0 + erf_vf32(${a} * 0.7071067811865475))`,\r\n      erfImpl('vec4<f32>')));\r\n};\r\n\r\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\r\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\r\n};\r\n\r\nexport const neg = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\r\n};\r\n\r\nexport const reciprocal = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\r\n};\r\n\r\nexport const relu = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\r\n};\r\n\r\nexport const sigmoid = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\r\n};\r\n\r\nexport const sin = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\r\n};\r\n\r\nexport const sinh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\r\n};\r\n\r\nexport const sqrt = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\r\n};\r\n\r\nexport const tan = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\r\n};\r\n\r\nexport const tanh = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\r\n};\r\n\r\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\r\n  context.compute(createElementwiseProgramInfoLoader(\r\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\r\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\r\n  return 0;\r\n};\r\n\r\nexport const log = (context: ComputeContext): void => {\r\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Log', 'log'));\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGpuBackend} from '../backend-webgpu';\r\nimport {LOG_DEBUG} from '../log';\r\n\r\nimport {createShaderHelper} from './ops/common';\r\nimport {Artifact, GpuData, ProgramInfo} from './types';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  attributesBound: boolean;\r\n\r\n  constructor(private backend: WebGpuBackend) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\r\n    const device = this.backend.device;\r\n    const computePassEncoder = this.backend.getComputePassEncoder();\r\n    const profilingEnabled = this.backend.supportTimestampQuery && this.backend.env.webgpu.profilingMode === 'default';\r\n    if (profilingEnabled) {\r\n      // profiling write start timestamp\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\r\n    }\r\n\r\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\r\n    const entries = [];\r\n    for (const input of inputs) {\r\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\r\n    }\r\n    for (const output of outputs) {\r\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\r\n    }\r\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\r\n    computePassEncoder.setBindGroup(0, bindGroup);\r\n\r\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\r\n\r\n    this.backend.pendingDispatchNumber++;\r\n\r\n    if (profilingEnabled) {\r\n      // profiling write end timestamp\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\r\n      if (this.backend.profilingQueryData == null) {\r\n        this.backend.profilingQueryData =\r\n            // eslint-disable-next-line no-bitwise\r\n            this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\r\n      }\r\n      // eslint-disable-next-line no-bitwise\r\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\r\n\r\n      this.backend.endComputePass();\r\n      this.backend.getCommandEncoder().resolveQuerySet(\r\n          this.backend.profilingQuerySet, 0, 2, this.backend.profilingQueryData.buffer, 0);\r\n      this.backend.getCommandEncoder().copyBufferToBuffer(\r\n          this.backend.profilingQueryData.buffer, 0, syncData.buffer, 0, 16);\r\n      this.backend.flush();\r\n\r\n      const kernelId = this.backend.currentKernelId!;\r\n      const kernelName = this.backend.kernels.get(kernelId)![0];\r\n\r\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\r\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\r\n        const startTimeU64 = mappedData[0];\r\n        const endTimeU64 = mappedData[1];\r\n\r\n        syncData.buffer.unmap();\r\n\r\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\r\n          this.backend.profilingTimeBase = startTimeU64;\r\n        }\r\n\r\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\r\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\r\n\r\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\r\n          throw new RangeError('incorrect timestamp range');\r\n        }\r\n\r\n        this.backend.gpuDataManager.release(syncData.id);\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\r\n      });\r\n    }\r\n\r\n    if (this.backend.pendingDispatchNumber >= 16) {\r\n      this.backend.flush();\r\n    }\r\n  }\r\n  dispose(): void {\r\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\r\n    const device = this.backend.device;\r\n\r\n    const shaderHelper = createShaderHelper(normalizedDispatchGroupSize);\r\n    const userCode = programInfo.getShaderSource(shaderHelper);\r\n    const code = `${shaderHelper.additionalImplementations}\\n${userCode}`;\r\n    const shaderModule = device.createShaderModule({code});\r\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\r\n\r\n    const computePipeline =\r\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\r\n\r\n    return {programInfo, computePipeline};\r\n  }\r\n\r\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\r\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\r\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\r\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\r\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\r\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\r\n      return [x, y, z];\r\n    }\r\n    const size = x * y * z;\r\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\r\n    if (dispatchAverage > limitPerDimension) {\r\n      dispatchAverage = Math.ceil(Math.cbrt(size));\r\n      if (dispatchAverage > limitPerDimension) {\r\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\r\n      }\r\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\r\n    } else {\r\n      return [dispatchAverage, dispatchAverage, 1];\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor, TensorView} from '../tensor';\r\n\r\nimport {ShaderHelper} from './ops/common';\r\n\r\nexport enum GpuDataType {\r\n  default = 0,\r\n  upload = 1,\r\n  profile = 2\r\n}\r\nexport type GpuDataId = number;\r\n\r\nexport interface GpuData {\r\n  type: GpuDataType;\r\n  id: GpuDataId;\r\n  buffer: GPUBuffer;\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  dataType: number;\r\n  gpuDataType: GpuDataType;\r\n}\r\n\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * gpu data types for each input\r\n   */\r\n  inputTypes: GpuDataType[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for outputs\r\n   */\r\n  outputs: TensorInfo[];\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\r\n  /**\r\n   * default is \"main\"\r\n   */\r\n  // entryPoint: string;\r\n\r\n  dispatchGroup: (inputs: readonly TensorView[]) => {\r\n    x: number;\r\n    y?: number;\r\n    z?: number;\r\n  };\r\n}\r\n\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  computePipeline: GPUComputePipeline;\r\n}\r\n\r\nexport interface ComputeContextInputsOutputsMapping {\r\n  /**\r\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\r\n   * - if it's a number, it's the index of the kernel's input\r\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\r\n   *\r\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\r\n   */\r\n  readonly inputs?: ReadonlyArray<TensorView|number>;\r\n  /**\r\n   * specify the mapping to the program's outputs. the value must be a number.\r\n   * - if it's a non-negative number, it's the index of the kernel's output\r\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\r\n   * the kernel is executed.\r\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\r\n   * kernel is released.\r\n   *\r\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\r\n   */\r\n  readonly outputs?: readonly number[];\r\n}\r\n\r\n/**\r\n * A ComputeContext instance carries the states that representing the current running of a kernel.\r\n */\r\nexport interface ComputeContext {\r\n  /**\r\n   * stores the pointer to OpKernelContext\r\n   */\r\n  readonly opKernelContext: number;\r\n\r\n  /**\r\n   * a list of inputs, each input is an instance of TensorView\r\n   */\r\n  readonly inputs: readonly TensorView[];\r\n\r\n  /**\r\n   * a custom data object that can be used to store any data that is needed by the kernel\r\n   */\r\n  readonly kernelCustomData: {[key: string]: unknown};\r\n\r\n  /**\r\n   * a buffer that can be used to access custom data created each time the kernel is executed\r\n   */\r\n  readonly customDataBuffer: Uint8Array;\r\n\r\n  /**\r\n   * a number of outputs for the node\r\n   */\r\n  readonly outputCount: number;\r\n\r\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\r\n      TensorView[];\r\n  output(index: number, dims: readonly number[]): number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport * as core from './wasm-core-impl';\r\nimport {initializeWebAssembly} from './wasm-factory';\r\n\r\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\r\nlet proxyWorker: Worker|undefined;\r\nlet initializing = false;\r\nlet initialized = false;\r\nlet aborted = false;\r\n\r\n// resolve; reject\r\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\r\n\r\nlet initWasmCallbacks: PromiseCallbacks;\r\nlet initOrtCallbacks: PromiseCallbacks;\r\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\r\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\r\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\r\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\r\n\r\nconst ensureWorker = (): void => {\r\n  if (initializing || !initialized || aborted || !proxyWorker) {\r\n    throw new Error('worker not ready');\r\n  }\r\n};\r\n\r\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\r\n  switch (ev.data.type) {\r\n    case 'init-wasm':\r\n      initializing = false;\r\n      if (ev.data.err) {\r\n        aborted = true;\r\n        initWasmCallbacks[1](ev.data.err);\r\n      } else {\r\n        initialized = true;\r\n        initWasmCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'init-ort':\r\n      if (ev.data.err) {\r\n        initOrtCallbacks[1](ev.data.err);\r\n      } else {\r\n        initOrtCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'create_allocate':\r\n      if (ev.data.err) {\r\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'create_finalize':\r\n      if (ev.data.err) {\r\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'create':\r\n      if (ev.data.err) {\r\n        createSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'release':\r\n      if (ev.data.err) {\r\n        releaseSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        releaseSessionCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    case 'run':\r\n      if (ev.data.err) {\r\n        runCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        runCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'end-profiling':\r\n      if (ev.data.err) {\r\n        endProfilingCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        endProfilingCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    default:\r\n  }\r\n};\r\n\r\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\r\n\r\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    if (initialized) {\r\n      return;\r\n    }\r\n    if (initializing) {\r\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\r\n    }\r\n    if (aborted) {\r\n      throw new Error('previous call to \\'initWasm()\\' failed.');\r\n    }\r\n\r\n    initializing = true;\r\n\r\n    // overwrite wasm filepaths\r\n    if (env.wasm.wasmPaths === undefined) {\r\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\r\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\r\n      }\r\n    }\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      proxyWorker?.terminate();\r\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\r\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\r\n      proxyWorker.onmessage = onProxyWorkerMessage;\r\n      initWasmCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\r\n      proxyWorker.postMessage(message);\r\n    });\r\n\r\n  } else {\r\n    return initializeWebAssembly(env.wasm);\r\n  }\r\n};\r\n\r\nexport const initializeRuntime = async(env: Env): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      initOrtCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    await core.initRuntime(env);\r\n  }\r\n};\r\n\r\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableModeldata>((resolve, reject) => {\r\n      createSessionAllocateCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSessionAllocate(model);\r\n  }\r\n};\r\n\r\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\r\n    Promise<SerializableSessionMetadata> => {\r\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n        ensureWorker();\r\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n          createSessionFinalizeCallbacks.push([resolve, reject]);\r\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\r\n          proxyWorker!.postMessage(message);\r\n        });\r\n      } else {\r\n        return core.createSessionFinalize(modeldata, options);\r\n      }\r\n    };\r\n\r\nexport const createSession =\r\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n      createSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSession(model, options);\r\n  }\r\n};\r\n\r\nexport const releaseSession = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      releaseSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.releaseSession(sessionId);\r\n  }\r\n};\r\n\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\r\n      runCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\r\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\r\n    });\r\n  } else {\r\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\r\n  }\r\n};\r\n\r\nexport const endProfiling = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      endProfilingCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.endProfiling(sessionId);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\r\n\r\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let runOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const runOptions: InferenceSession.RunOptions = options || {};\r\n\r\n  try {\r\n    if (options?.logSeverityLevel === undefined) {\r\n      runOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      runOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.terminate === undefined) {\r\n      runOptions.terminate = false;\r\n    }\r\n\r\n    let tagDataOffset = 0;\r\n    if (options?.tag !== undefined) {\r\n      tagDataOffset = allocWasmString(options.tag, allocs);\r\n    }\r\n\r\n    runOptionsHandle = wasm._OrtCreateRunOptions(\r\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\r\n    if (runOptionsHandle === 0) {\r\n      checkLastError('Can\\'t create run options.');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [runOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    allocs.forEach(alloc => wasm._free(alloc));\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {promisify} from 'util';\r\n\r\nimport {SerializableModeldata} from './proxy-messages';\r\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\r\n\r\nlet runtimeInitialized: boolean;\r\n\r\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\r\n  private sessionId: number;\r\n\r\n  inputNames: string[];\r\n  outputNames: string[];\r\n\r\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\r\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\r\n    // response is freed once we return\r\n    const response = await fetch(path);\r\n    if (response.status !== 200) {\r\n      throw new Error(`failed to load model: ${path}`);\r\n    }\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\r\n  }\r\n\r\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\r\n    if (!runtimeInitialized) {\r\n      await initializeRuntime(env);\r\n      runtimeInitialized = true;\r\n    }\r\n\r\n    if (typeof pathOrBuffer === 'string') {\r\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\r\n        // node\r\n        const model = await promisify(readFile)(pathOrBuffer);\r\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\r\n      } else {\r\n        // browser\r\n        // fetch model and move to wasm heap.\r\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\r\n        // create the session\r\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\r\n      }\r\n    } else {\r\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\r\n    }\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    return releaseSession(this.sessionId);\r\n  }\r\n\r\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\r\n      Promise<SessionHandler.ReturnType> {\r\n    const inputArray: Tensor[] = [];\r\n    const inputIndices: number[] = [];\r\n    Object.entries(feeds).forEach(kvp => {\r\n      const name = kvp[0];\r\n      const tensor = kvp[1];\r\n      const index = this.inputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid input '${name}'`);\r\n      }\r\n      inputArray.push(tensor);\r\n      inputIndices.push(index);\r\n    });\r\n\r\n    const outputIndices: number[] = [];\r\n    Object.entries(fetches).forEach(kvp => {\r\n      const name = kvp[0];\r\n      // TODO: support pre-allocated output\r\n      const index = this.outputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid output '${name}'`);\r\n      }\r\n      outputIndices.push(index);\r\n    });\r\n\r\n    const outputs =\r\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\r\n\r\n    const result: SessionHandler.ReturnType = {};\r\n    for (let i = 0; i < outputs.length; i++) {\r\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  startProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n\r\n  endProfiling(): void {\r\n    void endProfiling(this.sessionId);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\r\n\r\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\r\n  switch (graphOptimizationLevel) {\r\n    case 'disabled':\r\n      return 0;\r\n    case 'basic':\r\n      return 1;\r\n    case 'extended':\r\n      return 2;\r\n    case 'all':\r\n      return 99;\r\n    default:\r\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\r\n  }\r\n};\r\n\r\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\r\n  switch (executionMode) {\r\n    case 'sequential':\r\n      return 0;\r\n    case 'parallel':\r\n      return 1;\r\n    default:\r\n      throw new Error(`unsupported execution mode: ${executionMode}`);\r\n  }\r\n};\r\n\r\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\r\n  if (!options.extra) {\r\n    options.extra = {};\r\n  }\r\n  if (!options.extra.session) {\r\n    options.extra.session = {};\r\n  }\r\n  const session = options.extra.session as Record<string, string>;\r\n  if (!session.use_ort_model_bytes_directly) {\r\n    // eslint-disable-next-line camelcase\r\n    session.use_ort_model_bytes_directly = '1';\r\n  }\r\n\r\n  // if using JSEP with WebGPU, always disable memory pattern\r\n  if (options.executionProviders &&\r\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\r\n    options.enableMemPattern = false;\r\n  }\r\n};\r\n\r\nconst setExecutionProviders =\r\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\r\n     allocs: number[]): void => {\r\n      for (const ep of executionProviders) {\r\n        let epName = typeof ep === 'string' ? ep : ep.name;\r\n\r\n        // check EP name\r\n        switch (epName) {\r\n          case 'xnnpack':\r\n            epName = 'XNNPACK';\r\n            break;\r\n          case 'webnn':\r\n            epName = 'WEBNN';\r\n            if (typeof ep !== 'string') {\r\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\r\n              if (webnnOptions?.deviceType) {\r\n                const keyDataOffset = allocWasmString('deviceType', allocs);\r\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\r\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\r\n                    0) {\r\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\r\n                }\r\n              }\r\n              if (webnnOptions?.powerPreference) {\r\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\r\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\r\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\r\n                    0) {\r\n                  checkLastError(\r\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          case 'webgpu':\r\n            epName = 'JS';\r\n            break;\r\n          case 'wasm':\r\n          case 'cpu':\r\n            continue;\r\n          default:\r\n            throw new Error(`not supported execution provider: ${epName}`);\r\n        }\r\n\r\n        const epNameDataOffset = allocWasmString(epName, allocs);\r\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\r\n          checkLastError(`Can't append execution provider: ${epName}.`);\r\n        }\r\n      }\r\n    };\r\n\r\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let sessionOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\r\n  appendDefaultOptions(sessionOptions);\r\n\r\n  try {\r\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\r\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\r\n    const logIdDataOffset =\r\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\r\n\r\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\r\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\r\n    }\r\n\r\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\r\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\r\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\r\n    }\r\n\r\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\r\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\r\n        0;\r\n\r\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\r\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\r\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\r\n        optimizedModelFilePathOffset);\r\n    if (sessionOptionsHandle === 0) {\r\n      checkLastError('Can\\'t create session options.');\r\n    }\r\n\r\n    if (sessionOptions.executionProviders) {\r\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\r\n    }\r\n\r\n    if (sessionOptions.extra !== undefined) {\r\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [sessionOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (sessionOptionsHandle !== 0) {\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n    }\r\n    allocs.forEach(alloc => wasm._free(alloc));\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from 'onnxruntime-common';\r\n\r\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\r\n\r\n/**\r\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\r\n */\r\nexport const enum DataType {\r\n  undefined = 0,\r\n  float = 1,\r\n  uint8 = 2,\r\n  int8 = 3,\r\n  uint16 = 4,\r\n  int16 = 5,\r\n  int32 = 6,\r\n  int64 = 7,\r\n  string = 8,\r\n  bool = 9,\r\n  float16 = 10,\r\n  double = 11,\r\n  uint32 = 12,\r\n  uint64 = 13,\r\n  complex64 = 14,\r\n  complex128 = 15,\r\n  bfloat16 = 16\r\n}\r\n\r\n/**\r\n * Map string tensor data to enum value\r\n */\r\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\r\n  switch (type) {\r\n    case 'int8':\r\n      return DataType.int8;\r\n    case 'uint8':\r\n      return DataType.uint8;\r\n    case 'bool':\r\n      return DataType.bool;\r\n    case 'int16':\r\n      return DataType.int16;\r\n    case 'uint16':\r\n      return DataType.uint16;\r\n    case 'int32':\r\n      return DataType.int32;\r\n    case 'uint32':\r\n      return DataType.uint32;\r\n    case 'float16':\r\n      return DataType.float16;\r\n    case 'float32':\r\n      return DataType.float;\r\n    case 'float64':\r\n      return DataType.double;\r\n    case 'string':\r\n      return DataType.string;\r\n    case 'int64':\r\n      return DataType.int64;\r\n    case 'uint64':\r\n      return DataType.uint64;\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Map enum value to string tensor data\r\n */\r\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\r\n  switch (typeProto) {\r\n    case DataType.int8:\r\n      return 'int8';\r\n    case DataType.uint8:\r\n      return 'uint8';\r\n    case DataType.bool:\r\n      return 'bool';\r\n    case DataType.int16:\r\n      return 'int16';\r\n    case DataType.uint16:\r\n      return 'uint16';\r\n    case DataType.int32:\r\n      return 'int32';\r\n    case DataType.uint32:\r\n      return 'uint32';\r\n    case DataType.float16:\r\n      return 'float16';\r\n    case DataType.float:\r\n      return 'float32';\r\n    case DataType.double:\r\n      return 'float64';\r\n    case DataType.string:\r\n      return 'string';\r\n    case DataType.int64:\r\n      return 'int64';\r\n    case DataType.uint64:\r\n      return 'uint64';\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${typeProto}`);\r\n  }\r\n};\r\n\r\n/**\r\n * get tensor element size in bytes by the given data type\r\n * @returns size in integer or undefined if the data type is not supported\r\n */\r\nexport const getTensorElementSize = (dateType: number): number|\r\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\r\n\r\n/**\r\n * get typed array constructor by the given tensor type\r\n */\r\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\r\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\r\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\r\n      switch (type) {\r\n        case 'float16':\r\n          return Uint16Array;\r\n        case 'float32':\r\n          return Float32Array;\r\n        case 'uint8':\r\n          return Uint8Array;\r\n        case 'int8':\r\n          return Int8Array;\r\n        case 'uint16':\r\n          return Uint16Array;\r\n        case 'int16':\r\n          return Int16Array;\r\n        case 'int32':\r\n          return Int32Array;\r\n        case 'bool':\r\n          return Uint8Array;\r\n        case 'float64':\r\n          return Float64Array;\r\n        case 'uint32':\r\n          return Uint32Array;\r\n        case 'int64':\r\n          return BigInt64Array;\r\n        case 'uint64':\r\n          return BigUint64Array;\r\n        default:\r\n          throw new Error(`unsupported type: ${type}`);\r\n      }\r\n    };\r\n\r\n/**\r\n * Map string log level to integer value\r\n */\r\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\r\n  switch (logLevel) {\r\n    case 'verbose':\r\n      return 0;\r\n    case 'info':\r\n      return 1;\r\n    case 'warning':\r\n      return 2;\r\n    case 'error':\r\n      return 3;\r\n    case 'fatal':\r\n      return 4;\r\n    default:\r\n      throw new Error(`unsupported logging level: ${logLevel}`);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\r\n\r\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport {setRunOptions} from './run-options';\r\nimport {setSessionOptions} from './session-options';\r\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError} from './wasm-utils';\r\n\r\n/**\r\n * get the input/output count of the session.\r\n * @param sessionHandle the handle representing the session. should be non-zero.\r\n * @returns a tuple including 2 numbers, representing the input count and output count.\r\n */\r\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\r\n  const wasm = getInstance();\r\n  const stack = wasm.stackSave();\r\n  try {\r\n    const dataOffset = wasm.stackAlloc(8);\r\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\r\n    if (errorCode !== 0) {\r\n      checkLastError('Can\\'t get session input/output count.');\r\n    }\r\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\r\n  } finally {\r\n    wasm.stackRestore(stack);\r\n  }\r\n};\r\n\r\n/**\r\n * initialize ORT environment.\r\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\r\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\r\n */\r\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\r\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\r\n  if (errorCode !== 0) {\r\n    checkLastError('Can\\'t initialize onnxruntime.');\r\n  }\r\n};\r\n\r\n/**\r\n * intialize runtime environment.\r\n * @param env passed in the environment config object.\r\n */\r\nexport const initRuntime = async(env: Env): Promise<void> => {\r\n  // init ORT\r\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\r\n\r\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\r\n    // init JSEP if available\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\r\n    const initJsep = require('./jsep/init').init;\r\n    await initJsep(getInstance(), env);\r\n  }\r\n};\r\n\r\n/**\r\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\r\n */\r\ntype SessionMetadata = [number, number[], number[]];\r\n\r\nconst activeSessions = new Map<number, SessionMetadata>();\r\n\r\n/**\r\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\r\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\r\n */\r\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\r\n  const wasm = getInstance();\r\n  const modelDataOffset = wasm._malloc(model.byteLength);\r\n  if (modelDataOffset === 0) {\r\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\r\n  }\r\n  wasm.HEAPU8.set(model, modelDataOffset);\r\n  return [modelDataOffset, model.byteLength];\r\n};\r\n\r\n/**\r\n * create an inference session using the prepared buffer containing the model data.\r\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\r\n * @param options an optional session options object.\r\n * @returns a 3-elements tuple containing [session handle, input names, output names]\r\n */\r\nexport const createSessionFinalize =\r\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const wasm = getInstance();\r\n\r\n      let sessionHandle = 0;\r\n      let sessionOptionsHandle = 0;\r\n      let allocs: number[] = [];\r\n      const inputNamesUTF8Encoded = [];\r\n      const outputNamesUTF8Encoded = [];\r\n\r\n      try {\r\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\r\n\r\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\r\n        if (sessionHandle === 0) {\r\n          checkLastError('Can\\'t create a session.');\r\n        }\r\n\r\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\r\n\r\n        const inputNames = [];\r\n        const outputNames = [];\r\n        for (let i = 0; i < inputCount; i++) {\r\n          const name = wasm._OrtGetInputName(sessionHandle, i);\r\n          if (name === 0) {\r\n            checkLastError('Can\\'t get an input name.');\r\n          }\r\n          inputNamesUTF8Encoded.push(name);\r\n          inputNames.push(wasm.UTF8ToString(name));\r\n        }\r\n        for (let i = 0; i < outputCount; i++) {\r\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\r\n          if (name === 0) {\r\n            checkLastError('Can\\'t get an output name.');\r\n          }\r\n          outputNamesUTF8Encoded.push(name);\r\n          outputNames.push(wasm.UTF8ToString(name));\r\n        }\r\n\r\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\r\n        return [sessionHandle, inputNames, outputNames];\r\n      } catch (e) {\r\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n\r\n        if (sessionHandle !== 0) {\r\n          wasm._OrtReleaseSession(sessionHandle);\r\n        }\r\n        throw e;\r\n      } finally {\r\n        wasm._free(modelData[0]);\r\n        if (sessionOptionsHandle !== 0) {\r\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n        }\r\n        allocs.forEach(alloc => wasm._free(alloc));\r\n      }\r\n    };\r\n\r\n\r\n/**\r\n * create an instance of InferenceSession.\r\n * @returns the metadata of InferenceSession. 0-value handle for failure.\r\n */\r\nexport const createSession =\r\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const modelData: SerializableModeldata = createSessionAllocate(model);\r\n      return createSessionFinalize(modelData, options);\r\n    };\r\n\r\nexport const releaseSession = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\r\n  }\r\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\r\n\r\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n  wasm._OrtReleaseSession(sessionHandle);\r\n  activeSessions.delete(sessionId);\r\n};\r\n\r\n/**\r\n * perform inference run\r\n */\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\r\n  }\r\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\r\n\r\n  const inputCount = inputIndices.length;\r\n  const outputCount = outputIndices.length;\r\n\r\n  let runOptionsHandle = 0;\r\n  let runOptionsAllocs: number[] = [];\r\n\r\n  const inputValues: number[] = [];\r\n  const inputAllocs: number[] = [];\r\n\r\n  try {\r\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\r\n\r\n    // create input tensors\r\n    for (let i = 0; i < inputCount; i++) {\r\n      const dataType = inputs[i][0];\r\n      const dims = inputs[i][1];\r\n      const data = inputs[i][2];\r\n\r\n      let dataOffset: number;\r\n      let dataByteLength: number;\r\n\r\n      if (Array.isArray(data)) {\r\n        // string tensor\r\n        dataByteLength = 4 * data.length;\r\n        dataOffset = wasm._malloc(dataByteLength);\r\n        inputAllocs.push(dataOffset);\r\n        let dataIndex = dataOffset / 4;\r\n        for (let i = 0; i < data.length; i++) {\r\n          if (typeof data[i] !== 'string') {\r\n            throw new TypeError(`tensor data at index ${i} is not a string`);\r\n          }\r\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\r\n        }\r\n      } else {\r\n        dataByteLength = data.byteLength;\r\n        dataOffset = wasm._malloc(dataByteLength);\r\n        inputAllocs.push(dataOffset);\r\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\r\n      }\r\n\r\n      const stack = wasm.stackSave();\r\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n      try {\r\n        let dimIndex = dimsOffset / 4;\r\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\r\n        const tensor = wasm._OrtCreateTensor(\r\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\r\n        if (tensor === 0) {\r\n          checkLastError(`Can't create tensor for input[${i}].`);\r\n        }\r\n        inputValues.push(tensor);\r\n      } finally {\r\n        wasm.stackRestore(stack);\r\n      }\r\n    }\r\n\r\n    const beforeRunStack = wasm.stackSave();\r\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n\r\n    try {\r\n      let inputValuesIndex = inputValuesOffset / 4;\r\n      let inputNamesIndex = inputNamesOffset / 4;\r\n      let outputValuesIndex = outputValuesOffset / 4;\r\n      let outputNamesIndex = outputNamesOffset / 4;\r\n      for (let i = 0; i < inputCount; i++) {\r\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\r\n      }\r\n      for (let i = 0; i < outputCount; i++) {\r\n        wasm.HEAPU32[outputValuesIndex++] = 0;\r\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\r\n      }\r\n\r\n      // support RunOptions\r\n      let errorCode = wasm._OrtRun(\r\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\r\n          outputValuesOffset, runOptionsHandle);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const runPromise = wasm.jsepRunPromise;\r\n      if (runPromise && typeof runPromise.then !== 'undefined') {\r\n        errorCode = await runPromise;\r\n      }\r\n\r\n      const output: SerializableTensor[] = [];\r\n\r\n      if (errorCode !== 0) {\r\n        checkLastError('failed to call OrtRun().');\r\n      }\r\n\r\n      for (let i = 0; i < outputCount; i++) {\r\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n\r\n        const beforeGetTensorDataStack = wasm.stackSave();\r\n        // stack allocate 4 pointer value\r\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n\r\n        let type: Tensor.Type|undefined, dataOffset = 0;\r\n        try {\r\n          errorCode = wasm._OrtGetTensorData(\r\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n          if (errorCode !== 0) {\r\n            checkLastError(`Can't access output tensor data on index ${i}.`);\r\n          }\r\n          let tensorDataIndex = tensorDataOffset / 4;\r\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\r\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\r\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n          const dims = [];\r\n          for (let i = 0; i < dimsLength; i++) {\r\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\r\n          }\r\n          wasm._OrtFree(dimsOffset);\r\n\r\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\r\n          type = tensorDataTypeEnumToString(dataType);\r\n          if (type === 'string') {\r\n            const stringData: string[] = [];\r\n            let dataIndex = dataOffset / 4;\r\n            for (let i = 0; i < size; i++) {\r\n              const offset = wasm.HEAPU32[dataIndex++];\r\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\r\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\r\n            }\r\n            output.push([type, dims, stringData]);\r\n          } else {\r\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\r\n            const data = new typedArrayConstructor(size);\r\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\r\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\r\n            output.push([type, dims, data]);\r\n          }\r\n        } finally {\r\n          wasm.stackRestore(beforeGetTensorDataStack);\r\n          if (type === 'string' && dataOffset) {\r\n            wasm._free(dataOffset);\r\n          }\r\n          wasm._OrtReleaseTensor(tensor);\r\n        }\r\n      }\r\n\r\n      return output;\r\n    } finally {\r\n      wasm.stackRestore(beforeRunStack);\r\n    }\r\n  } finally {\r\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\r\n    inputAllocs.forEach(p => wasm._free(p));\r\n\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    runOptionsAllocs.forEach(p => wasm._free(p));\r\n  }\r\n};\r\n\r\n/**\r\n * end profiling\r\n */\r\nexport const endProfiling = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error('invalid session id');\r\n  }\r\n  const sessionHandle = session[0];\r\n\r\n  // profile file name is not used yet, but it must be freed.\r\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\r\n  if (profileFileName === 0) {\r\n    checkLastError('Can\\'t get an profile file name.');\r\n  }\r\n  wasm._OrtFree(profileFileName);\r\n};\r\n\r\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\r\n  const buffers: ArrayBufferLike[] = [];\r\n  for (const tensor of tensors) {\r\n    const data = tensor[2];\r\n    if (!Array.isArray(data) && data.buffer) {\r\n      buffers.push(data.buffer);\r\n    }\r\n  }\r\n  return buffers;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\nimport * as path from 'path';\r\n\r\nimport {OrtWasmModule} from './binding/ort-wasm';\r\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\r\n\r\n/* eslint-disable @typescript-eslint/no-require-imports */\r\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\r\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\r\n\r\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\r\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\r\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\r\n    ortWasmFactory;\r\n/* eslint-enable @typescript-eslint/no-require-imports */\r\n\r\nlet wasm: OrtWasmModule|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\nlet aborted = false;\r\n\r\nconst isMultiThreadSupported = (): boolean => {\r\n  try {\r\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\r\n    if (typeof SharedArrayBuffer === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    // Test for transferability of SABs (for browsers. needed for Firefox)\r\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n    if (typeof MessageChannel !== 'undefined') {\r\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n    }\r\n\r\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing threaded instructions.\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\r\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isSimdSupported = (): boolean => {\r\n  try {\r\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing SIMD instructions.\r\n\r\n    // The binary data is generated from the following code by wat2wasm:\r\n    //\r\n    // (module\r\n    //   (type $t0 (func))\r\n    //   (func $f0 (type $t0)\r\n    //     (drop\r\n    //       (i32x4.dot_i16x8_s\r\n    //         (i8x16.splat\r\n    //           (i32.const 0))\r\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\r\n\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\r\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\r\n  if (useThreads) {\r\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\r\n  } else {\r\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\r\n  }\r\n};\r\n\r\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n  }\r\n  if (aborted) {\r\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  // wasm flags are already initialized\r\n  const timeout = flags.initTimeout!;\r\n  const numThreads = flags.numThreads!;\r\n  const simd = flags.simd!;\r\n\r\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\r\n  const useSimd = simd && isSimdSupported();\r\n\r\n  const wasmPaths = flags.wasmPaths;\r\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\r\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\r\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\r\n\r\n  let isTimeout = false;\r\n\r\n  const tasks: Array<Promise<void>> = [];\r\n\r\n  // promise for timeout\r\n  if (timeout > 0) {\r\n    tasks.push(new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        isTimeout = true;\r\n        resolve();\r\n      }, timeout);\r\n    }));\r\n  }\r\n\r\n  // promise for module initialization\r\n  tasks.push(new Promise((resolve, reject) => {\r\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\r\n    const config: Partial<OrtWasmModule> = {\r\n      locateFile: (fileName: string, scriptDirectory: string) => {\r\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\r\n            typeof Blob !== 'undefined') {\r\n          return URL.createObjectURL(new Blob(\r\n              [\r\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                require('./binding/ort-wasm-threaded.worker.js')\r\n              ],\r\n              {type: 'text/javascript'}));\r\n        }\r\n\r\n        if (fileName.endsWith('.wasm')) {\r\n          if (wasmPathOverride) {\r\n            return wasmPathOverride;\r\n          }\r\n\r\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\r\n\r\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\r\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\r\n              return prefix + 'ort-wasm-simd.jsep.wasm';\r\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\r\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\r\n            }\r\n          }\r\n\r\n          return prefix + wasmFileName;\r\n        }\r\n\r\n        return scriptDirectory + fileName;\r\n      }\r\n    };\r\n\r\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\r\n      if (typeof Blob === 'undefined') {\r\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n      } else {\r\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\r\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\r\n      }\r\n    }\r\n\r\n    factory(config).then(\r\n        // wasm module initialized successfully\r\n        module => {\r\n          initializing = false;\r\n          initialized = true;\r\n          wasm = module;\r\n          resolve();\r\n        },\r\n        // wasm module failed to initialize\r\n        (what) => {\r\n          initializing = false;\r\n          aborted = true;\r\n          reject(what);\r\n        });\r\n  }));\r\n\r\n  await Promise.race(tasks);\r\n\r\n  if (isTimeout) {\r\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\r\n  }\r\n};\r\n\r\nexport const getInstance = (): OrtWasmModule => {\r\n  if (initialized && wasm) {\r\n    return wasm;\r\n  }\r\n\r\n  throw new Error('WebAssembly is not initialized yet.');\r\n};\r\n\r\nexport const dispose = (): void => {\r\n  if (initialized && !initializing && !aborted) {\r\n    initializing = true;\r\n\r\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\r\n    wasm = undefined;\r\n\r\n    initializing = false;\r\n    initialized = false;\r\n    aborted = true;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const allocWasmString = (data: string, allocs: number[]): number => {\r\n  const wasm = getInstance();\r\n\r\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n  const dataOffset = wasm._malloc(dataLength);\r\n  wasm.stringToUTF8(data, dataOffset, dataLength);\r\n  allocs.push(dataOffset);\r\n\r\n  return dataOffset;\r\n};\r\n\r\ninterface ExtraOptionsHandler {\r\n  (name: string, value: string): void;\r\n}\r\n\r\nexport const iterateExtraOptions =\r\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\r\n     handler: ExtraOptionsHandler): void => {\r\n      if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n          throw new Error('Circular reference in options');\r\n        } else {\r\n          seen.add(options);\r\n        }\r\n      }\r\n\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        const name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\r\n        } else if (typeof value === 'string' || typeof value === 'number') {\r\n          handler(name, value.toString());\r\n        } else if (typeof value === 'boolean') {\r\n          handler(name, (value) ? '1' : '0');\r\n        } else {\r\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\r\n        }\r\n      });\r\n    };\r\n\r\n/**\r\n * check web assembly API's last error and throw error if any error occurred.\r\n * @param message a message used when an error occurred.\r\n */\r\nexport const checkLastError = (message: string): void => {\r\n  const wasm = getInstance();\r\n\r\n  const stack = wasm.stackSave();\r\n  try {\r\n    const paramsOffset = wasm.stackAlloc(8);\r\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\r\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\r\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\r\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\r\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\r\n  } finally {\r\n    wasm.stackRestore(stack);\r\n  }\r\n};\r\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={3838:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WebGpuBackend=void 0;const i=n(4955),r=n(7771),a=n(8510),o=n(8305);t.WebGpuBackend=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.supportTimestampQuery=!1}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error(\\\"currentKernelCustomData(): currentKernelId is null. (should not happen)\\\");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e){if(!navigator.gpu)throw new Error(\\\"WebGpuBackend: WebGPU is not available.\\\");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error(\\\"WebGpuBackend: Failed to get GPU adapter.\\\");this.env=e;const n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ}};t.features.has(\\\"timestamp-query-inside-passes\\\")&&(this.supportTimestampQuery=!0,n.requiredFeatures=[\\\"timestamp-query-inside-passes\\\"]),this.device=await t.requestDevice(n),this.gpuDataManager=(0,r.createGpuDataManager)(this),this.programManager=new o.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,i.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},this.supportTimestampQuery&&(this.profilingQuerySet=this.device.createQuerySet({type:\\\"timestamp\\\",count:2}))}dispose(){}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0}run(e,t,n,r,a){if(t.length!==e.inputTypes.length)throw new Error(`Input size must be equal to ${e.inputTypes.length}.`);const o=[];for(let e=0;e<t.length;++e){const n=this.gpuDataManager.get(t[e].data);if(!n)throw new Error(`no GPU data for input: ${t[e].data}`);o[e]=n}const s=((e,t)=>{const n=t.map((e=>`${e.dataType};${e.dims.join(\\\",\\\")}`)).join(\\\"|\\\");let i=e.name;return e.cacheHint&&(i+=\\\"[\\\"+e.cacheHint+\\\"]\\\"),i+=\\\":\\\"+n,i})(e,t);let u=this.programManager.getArtifact(s);const l=u?u.programInfo:\\\"function\\\"==typeof e.get?e.get():e,c=0===n.length?l.outputs.map(((e,t)=>t)):n;if(c.length!==l.outputs.length)throw new Error(`Output size ${c.length} must be equal to ${l.outputs.length}.`);const d=[],p=[];for(let e=0;e<l.outputs.length;++e){if(!Number.isInteger(c[e])||c[e]<-3||c[e]>=l.outputs.length)throw new Error(`Invalid output index: ${c[e]}`);if(-3===c[e])continue;const t=-1===c[e],n=-2===c[e],i=t||n?a(l.outputs[e].dataType,l.outputs[e].dims):r(c[e],l.outputs[e].dataType,l.outputs[e].dims),o=this.gpuDataManager.get(i.data);if(!o)throw new Error(`no GPU data for output: ${i.data}`);if(t&&this.temporaryData.push(o),n){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(o)}d.push(i),p.push(o)}const f=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return u||(u=this.programManager.build(l,f),this.programManager.setArtifact(s,u)),(0,i.LOG_DEBUG)(\\\"info\\\",(()=>`[ProgramManager] run \\\"${l.name}\\\" (key=${s}) with ${f[0]}x${f[1]}x${f[2]}`)),this.programManager.run(u,o,p,f),d}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){const n=await this.gpuDataManager.download(e),i=t();i.set(new Uint8Array(n,0,i.byteLength))}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,n){const i=a.WEBGPU_OP_RESOLVE_RULES.get(e);if(!i)throw new Error(`kernel not implemented: ${e}`);this.kernels.set(t,[e,i[0],[i[1],n]])}releaseKernel(e){const t=this.kernelPersistentData.get(e);if(t){for(const e of t)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t){const n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);const[r,a,o]=n;if(null!==this.currentKernelId)throw new Error(`kernel \\\"${r}\\\" is not allowed to be called recursively`);this.currentKernelId=e,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),(0,i.LOG_DEBUG)(\\\"info\\\",(()=>`[WebGPU] Start to run kernel \\\"${r}\\\"...`)),this.temporaryData=[];try{return a(t,o[1]),0}catch(e){return(0,i.LOG_DEBUG)(\\\"warning\\\",`[WebGPU] Kernel \\\"${r}\\\" failed. Error: ${e}`),1}finally{for(const e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}}},7675:(e,t,n)=>{\\\"use strict\\\";t.S=void 0;const i=n(7917),r=n(3838),a=n(4955),o=n(6952);class s{constructor(e,t,n,i){this.module=e,this.dataType=t,this.data=n,this.dims=i}getFloat32Array(){if(1!==this.dataType)throw new Error(\\\"Invalid data type\\\");const e=o.ShapeUtil.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(7!==this.dataType)throw new Error(\\\"Invalid data type\\\");const e=o.ShapeUtil.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(6!==this.dataType)throw new Error(\\\"Invalid data type\\\");const e=o.ShapeUtil.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}reshape(e){if(o.ShapeUtil.size(e)!==o.ShapeUtil.size(this.dims))throw new Error(\\\"Invalid new shape\\\");return new s(this.module,this.dataType,this.data,e)}}class u{get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}constructor(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0;const i=e.HEAPU32;let r=n>>2;this.opKernelContext=i[r++];const a=i[r++];this.outputCount=i[r++],this.customDataOffset=i[r++],this.customDataSize=i[r++];const o=[];for(let t=0;t<a;t++){const t=i[r++],n=i[r++],a=i[r++],u=[];for(let e=0;e<a;e++)u.push(i[r++]);o.push(new s(e,t,n,u))}this.inputs=o}compute(e,t){var n,r,a;const u=null!==(r=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map((e=>\\\"number\\\"==typeof e?this.inputs[e]:e)))&&void 0!==r?r:this.inputs,l=null!==(a=null==t?void 0:t.outputs)&&void 0!==a?a:[];return this.backend.run(e,u,l,((e,t,n)=>new s(this.module,t,this.output(e,n),n)),((e,t)=>{const n=(0,i.getTensorElementSize)(e);if(!n)throw new Error(`Unsupported data type: ${e}`);const r=n*o.ShapeUtil.size(t);return new s(this.module,e,this.backend.gpuDataManager.create(r).id,t)}))}output(e,t){const n=this.module.stackSave();try{const n=this.module.stackAlloc(4*(1+t.length));let i=n>>2;this.module.HEAPU32[i++]=t.length;for(let e=0;e<t.length;e++)this.module.HEAPU32[i++]=t[e];return this.module._JsepOutput(this.opKernelContext,e,n)}finally{this.module.stackRestore(n)}}}t.S=async(e,t)=>{const n=e.jsepInit;if(n&&navigator.gpu){if(!t.wasm.simd)throw new Error(\\\"Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP\\\");const i=new r.WebGpuBackend;await i.initialize(t),n({backend:i},(e=>i.alloc(e)),(e=>i.free(e)),((t,n,r,o=!1)=>{if(o)(0,a.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${t}, dst=${n}, size=${r}`)),i.memcpy(t,n);else{(0,a.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${t}, gpuDataId=${n}, size=${r}`));const o=e.HEAPU8.subarray(t,t+r);i.upload(n,o)}}),(async(t,n,r)=>{(0,a.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${t}, dataOffset=${n}, size=${r}`)),await i.download(t,(()=>e.HEAPU8.subarray(n,n+r)))}),((e,t,n)=>i.createKernel(e,t,n)),(e=>i.releaseKernel(e)),((t,n)=>{(0,a.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepRun: kernel=${t}, contextDataOffset=${n}`));const r=new u(e,i,n);return i.computeKernel(t,r)}))}}},4955:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.LOG_DEBUG=t.LOG=t.configureLogger=void 0;const i=n(7917),r=[\\\"V\\\",\\\"I\\\",\\\"W\\\",\\\"E\\\",\\\"F\\\"];let a,o;t.configureLogger=(e,t)=>{a=e,o=t},t.LOG=(e,t)=>{const n=(0,i.logLevelStringToEnum)(e);var o,s;n>=(0,i.logLevelStringToEnum)(a)&&(o=n,s=\\\"function\\\"==typeof t?t():t,console.log(`[${r[o]},${(new Date).toISOString()}]${s}`))},t.LOG_DEBUG=(...e)=>{o&&(0,t.LOG)(...e)}},6952:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;class n{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}}t.MatMulUtil=n;class i{static calcShape(e,t,i=!1){const r=e.length,a=t.length;if(0===r)return t;if(0===a)return e;const o=Math.max(e.length,t.length),s=new Array(o);if(i){if(r<2||a<2)return;const i=n.calcMatMulShape([e[r-2],e[r-1]],[t[a-2],t[a-1]]);if(void 0===i)return;[s[o-2],s[o-1]]=i}for(let n=i?3:1;n<=o;n++){const i=r-n<0?1:e[r-n],u=a-n<0?1:t[a-n];if(i!==u&&i>1&&u>1)return;s[o-n]=Math.max(i,u)}return s}static isValidBroadcast(e,t){const n=e.length,i=t.length;if(n>i)return!1;for(let r=1;r<=n;r++)if(1!==e[n-r]&&e[n-r]!==t[i-r])return!1;return!0}}t.BroadcastUtil=i;class r{static size(e){return r.getSizeFromDimensionRange(e,0,e.length)}static sizeFromDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${e.length} dimensions.`);return r.getSizeFromDimensionRange(e,t,e.length)}static sizeToDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${e.length} dimensions.`);return r.getSizeFromDimensionRange(e,0,t)}static getSizeFromDimensionRange(e,t,n){let i=1;for(let r=t;r<n;r++){if(e[r]<0)throw new Error(\\\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\\\");i*=e[r]}return i}static computeStrides(e){const t=e.length;if(0===t)return[];if(1===t)return[1];const n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(let i=t-3;i>=0;--i)n[i]=n[i+1]*e[i+1];return n}static normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error(\\\"unsupported axis for this operation.\\\");return e<0?e+t:e}static normalizeAxes(e,t){return e.map((n=>this.normalizeAxis(n,null!=t?t:e.length)))}static sortBasedOnPerm(e,t){return t?t.map((t=>e[t])):e.slice().reverse()}static padShape(e,t){const n=e.length;return e.map(((e,i)=>e+t[i]+t[i+n]))}static areEqual(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}}t.ShapeUtil=r;class a{static adjustPoolAttributes(e,t,n,i,r,a){if(!e&&n.length!==t.length-2)throw new Error(\\\"length of specified kernel shapes should be 2 less than length of input dimensions\\\");if(e)for(let e=0;e<t.length-2;e++)e>=n.length?n.push(t[e+2]):n[e]=t[e+2];for(let e=0;e<n.length;e++)if(e<i.length){if(i[e]<0)throw new Error(\\\"strides should be greater than or equal to 1\\\")}else i.push(1);for(let e=0;e<n.length;e++)if(e<r.length){if(r[e]<0)throw new Error(\\\"dilations should be greater than or equal to 1\\\")}else r.push(1);for(let e=0;e<2*n.length;e++)if(e<a.length){if(a[e]<0)throw new Error(\\\"pad should be greater than or equal to 1\\\")}else a.push(0);for(let e=0;e<n.length;e++){if(n[e]<=0)throw new Error(\\\"kernel shapes need to be greater than 0\\\");if(a[e]>=n[e]||a[e+n.length]>=n[e])throw new Error(\\\"pads should be smaller than kernel\\\")}}static adjustPadsBasedOnAutoPad(e,t,n,i,r,o,s){if(s){if(r.length!==2*(e.length-2))throw new Error(\\\"length of pads should be twice the length of data dimensions\\\");if(t.length!==e.length-2)throw new Error(\\\"length of strides should be the length of data dimensions\\\");if(i.length!==e.length-2)throw new Error(\\\"length of kernel shapes should be the length of data dimensions\\\");for(let u=0;u<e.length-2;u++)a.adjustPadAndReturnShape(e[u+(o?1:2)],t[u],n[u],i[u],r,u,u+e.length-2,s)}}static computePoolOutputShape(e,t,n,i,r,o,s){if(t.length<=0)throw new Error(\\\"input shape must be of size greater than 0\\\");const u=[t[0],t[1]];return a.computeShapeHelper(e,t,u,n,i,r,o,s),u}static computeConvOutputShape(e,t,n,i,r,o,s){if(e.length<=0||t.length<=0)throw new Error(\\\"invalid input tensor dims or invalid filter tensor dims\\\");const u=[e[0],t[0]];return a.computeShapeHelper(!1,e,u,n,i,r,o,s),u}static computeShapeHelper(e,t,n,i,r,o,s,u){if(e)for(let e=0;e<t.length-2;e++)n.push(1);else for(let e=0;e<t.length-2;e++)n.push(a.adjustPadAndReturnShape(t[e+2],i[e],r[e],o[e],s,e,e+t.length-2,u))}static adjustPadAndReturnShape(e,t,n,i,r,a,o,s){const u=n*(i-1)+1;if(!s||\\\"NOTSET\\\"===s)return Math.floor((e+r[a]+r[o]-u)/t+1);switch(s){case\\\"VALID\\\":return r[a]=0,r[o]=0,Math.floor((e-u)/t+1);case\\\"SAME_LOWER\\\":case\\\"SAME_UPPER\\\":if(1!==n)throw new Error(\\\"Dilation not supported for SAME_UPPER or SAME_LOWER\\\");{const n=((e+t-1)/t-1)*t+i-e;return r[a]=\\\"SAME_LOWER\\\"===s?Math.floor((n+1)/2):Math.floor(n/2),r[o]=n-r[a],Math.floor((e+n-i)/t+1)}default:throw new Error(\\\"Unsupported AutoPad type\\\")}}}t.PoolConvUtil=a,t.GemmUtil=class{static getShapeOfGemmResult(e,t,n,r,a){if(2!==e.length||2!==n.length)throw new Error(\\\"shape need to be of size 2\\\");let o,s,u;t?(o=e[1],s=e[0]):(o=e[0],s=e[1]);let l=-1;if(r?(u=n[0],l=1):(u=n[1],l=0),n[l]!==s)throw new Error(\\\"dimension mismatch\\\");if(o<=0||u<=0||s<=0)throw new Error(\\\"invalid shape specified\\\");if(a&&!i.isValidBroadcast(a,[o,u]))throw new Error(\\\"gemm: invalid bias shape for broadcast\\\");return[o,u,s]}},t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22},387:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createAttributeWithCacheKey=void 0;class n{constructor(e){Object.assign(this,e)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(\\\";\\\")),this._cacheKey}}t.createAttributeWithCacheKey=e=>new n(e)},7771:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGpuDataManager=void 0;const i=n(4955),r=n(1163),a=e=>16*Math.ceil(e/16);let o=0;class s{constructor(e){this.backend=e,this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}upload(e,t){const n=t.buffer,r=t.byteOffset,o=t.byteLength,s=a(o),u=this.storageCache.get(e);if(!u)throw new Error(\\\"gpu data for uploading does not exist\\\");if(u.originalSize!==o)throw new Error(`inconsistent data size. gpu data size=${u.originalSize}, data size=${o}`);const l=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=l.getMappedRange();new Uint8Array(c).set(new Uint8Array(n,r,o)),l.unmap();const d=this.backend.getCommandEncoder();this.backend.endComputePass(),d.copyBufferToBuffer(l,0,u.gpuData.buffer,0,s),(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`)),this.buffersForUploadingPending.push(l)}memcpy(e,t){const n=this.storageCache.get(e);if(!n)throw new Error(\\\"source gpu data for memcpy does not exist\\\");const i=this.storageCache.get(t);if(!i)throw new Error(\\\"destination gpu data for memcpy does not exist\\\");if(n.originalSize!==i.originalSize)throw new Error(\\\"inconsistent source and destination gpu data size\\\");const r=a(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,i.gpuData.buffer,0,r)}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){const n=a(e);let s;if((t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let e=this.freeBuffers.get(n);e||(e=[],this.freeBuffers.set(n,e)),s=e.length>0?e.pop():this.backend.device.createBuffer({size:n,usage:t})}else s=this.backend.device.createBuffer({size:n,usage:t});const u={id:o++,type:r.GpuDataType.default,buffer:s};return this.storageCache.set(u.id,{gpuData:u,originalSize:e}),(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${u.id}`)),u}get(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData}release(e){const t=this.storageCache.get(e);if(!t)throw new Error(\\\"releasing data does not exist\\\");return(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),this.downloadCache.get(e)&&this.downloadCache.delete(e),t.originalSize}async download(e){const t=this.downloadCache.get(e);if(t)return t.data;const n=this.storageCache.get(e);if(!n)throw new Error(\\\"data does not exist\\\");const i=this.backend.getCommandEncoder();this.backend.endComputePass();const r=a(n.originalSize),o=this.backend.device.createBuffer({size:r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});i.copyBufferToBuffer(n.gpuData.buffer,0,o,0,r),this.backend.flush();const s=new Promise((e=>{o.mapAsync(GPUMapMode.READ).then((()=>{const t=o.getMappedRange().slice(0);o.destroy(),e(t)}))}));return this.downloadCache.set(e,{data:s}),s}refreshPendingBuffers(){for(const e of this.buffersForUploadingPending)e.destroy();this.buffersForUploadingPending=[];for(const e of this.buffersPending)(e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(e.size).push(e):e.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map}}t.createGpuDataManager=(...e)=>new s(...e)},8510:function(e,t,n){\\\"use strict\\\";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!(\\\"get\\\"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;const o=n(1868),s=a(n(504)),u=n(513),l=n(9770),c=n(7640),d=n(8856),p=n(8405),f=n(4271),h=n(1798),g=n(6145),m=n(1522),y=a(n(5262)),v=n(6031),b=n(4566),w=n(8906),_=n(5101),$=n(6198),C=n(2067),x=n(8699),S=n(2625),j=a(n(9302));t.WEBGPU_OP_RESOLVE_RULES=new Map([[\\\"Abs\\\",[j.abs]],[\\\"Acos\\\",[j.acos]],[\\\"Acosh\\\",[j.acosh]],[\\\"Add\\\",[s.add]],[\\\"ArgMax\\\",[o.argMax,o.parseArgMinMaxAttributes]],[\\\"ArgMin\\\",[o.argMin,o.parseArgMinMaxAttributes]],[\\\"Asin\\\",[j.asin]],[\\\"Asinh\\\",[j.asinh]],[\\\"Atan\\\",[j.atan]],[\\\"Atanh\\\",[j.atanh]],[\\\"AveragePool\\\",[y.averagePool,y.parseAveragePoolAttributes]],[\\\"Cast\\\",[j.cast,j.parseCastAttributes]],[\\\"Ceil\\\",[j.ceil]],[\\\"ClipV10\\\",[j.clipV10]],[\\\"Clip\\\",[j.clip]],[\\\"Concat\\\",[u.concat,u.parseConcatAttributes]],[\\\"Conv\\\",[l.conv,l.parseConvAttributes]],[\\\"ConvTranspose\\\",[c.convTranspose,c.parseConvTransposeAttributes]],[\\\"Cos\\\",[j.cos]],[\\\"Cosh\\\",[j.cosh]],[\\\"Div\\\",[s.div]],[\\\"Elu\\\",[j.elu,j.parseAlphaAttributes]],[\\\"Erf\\\",[j.erf]],[\\\"Exp\\\",[j.exp]],[\\\"Expand\\\",[d.expand]],[\\\"Floor\\\",[j.floor]],[\\\"Gather\\\",[p.gather,p.parseGatherAttributes]],[\\\"Gelu\\\",[j.gelu]],[\\\"Gemm\\\",[f.gemm,f.parseGemmAttributes]],[\\\"GlobalAveragePool\\\",[y.globalAveragePool,y.parseGlobalAveragePoolAttributes]],[\\\"GlobalMaxPool\\\",[y.globalMaxPool,y.parseGlobalMaxPoolAttributes]],[\\\"InstanceNormalization\\\",[h.instanceNorm,h.parseInstanceNormAttributes]],[\\\"LayerNormalization\\\",[g.layerNorm,g.parseLayerNormAttributes]],[\\\"LeakyRelu\\\",[j.leakyRelu,j.parseAlphaAttributes]],[\\\"Log\\\",[j.log]],[\\\"MatMul\\\",[m.matMul]],[\\\"MaxPool\\\",[y.maxPool,y.parseMaxPoolAttributes]],[\\\"Mul\\\",[s.mul]],[\\\"Neg\\\",[j.neg]],[\\\"Pow\\\",[s.pow]],[\\\"Reciprocal\\\",[j.reciprocal]],[\\\"ReduceMin\\\",[v.reduceMin,v.parseReduceAttributes]],[\\\"ReduceMean\\\",[v.reduceMean,v.parseReduceAttributes]],[\\\"ReduceMax\\\",[v.reduceMax,v.parseReduceAttributes]],[\\\"ReduceSum\\\",[v.reduceSum,v.parseReduceAttributes]],[\\\"ReduceProd\\\",[v.reduceProd,v.parseReduceAttributes]],[\\\"ReduceL1\\\",[v.reduceL1,v.parseReduceAttributes]],[\\\"ReduceL2\\\",[v.reduceL2,v.parseReduceAttributes]],[\\\"ReduceLogSum\\\",[v.reduceLogSum,v.parseReduceAttributes]],[\\\"ReduceLogSumExp\\\",[v.reduceLogSumExp,v.parseReduceAttributes]],[\\\"ReduceSumSquare\\\",[v.reduceSumSquare,v.parseReduceAttributes]],[\\\"Relu\\\",[j.relu]],[\\\"Resize\\\",[b.resize,b.parseResizeAttributes]],[\\\"Sigmoid\\\",[j.sigmoid]],[\\\"Sin\\\",[j.sin]],[\\\"Sinh\\\",[j.sinh]],[\\\"Slice\\\",[_.slice,_.parseSliceAttributes]],[\\\"SkipLayerNormalization\\\",[w.skipLayerNorm,w.parseSkipLayerNormAttributes]],[\\\"Split\\\",[C.split,C.parseSplitAttributes]],[\\\"Sqrt\\\",[j.sqrt]],[\\\"Softmax\\\",[$.softmax,$.parseSoftmaxAttributes]],[\\\"Sub\\\",[s.sub]],[\\\"Tan\\\",[j.tan]],[\\\"Tanh\\\",[j.tanh]],[\\\"ThresholdedRelu\\\",[j.thresholdedRelu,j.parseAlphaAttributes]],[\\\"Tile\\\",[x.tile]],[\\\"Transpose\\\",[S.transpose,S.parseTransposeAttributes]]])},1427:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=e=>{switch(e){case 1:return\\\"f32\\\";case 2:return\\\"vec2<f32>\\\";case 3:return\\\"vec3<f32>\\\";case 4:return\\\"vec4<f32>\\\";default:throw new Error(`${e}-component is not supported.`)}},t.activationFnSnippet=(e,t=!1,n=!1,i=3)=>\\\"\\\",t.biasActivationSnippet=(e,t)=>`\\\\n      ${e?\\\"value = value + getBiasByOutputCoords(coords);\\\":\\\"\\\"}\\\\n      ${t?\\\"value = activation(value, coords);\\\":\\\"\\\"}\\\\n      `},9456:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;const i=n(4955),r=n(6952),a=n(1163),o=n(1427),s=n(4085),u=n(158);t.createConv2DMatMulProgramInfo=(e,t,n,l,c,d,p,f,h)=>{const g=\\\"NHWC\\\"===n.format,m=g?e[0].dims[3]:e[0].dims[1],y=l[0],v=g?l[2]:l[3],b=g?l[1]:l[2],w=g?l[3]:l[1],_=((m%4==0||m%3==0)&&g||v%4==0&&!g)&&w%4==0,$=g?w:v*b,C=g?v*b:w,x=_?[8,8,1]:[$<=4?4:16,$>4&&C<=4?4:16,1],S=_?[4,4,1]:[$<=4?1:2,$>4&&C<=4?1:2,1],j=[Math.ceil($/x[0]/S[0]),Math.ceil(C/x[1]/S[1]),Math.ceil(y/x[2]/S[1])];(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[conv2d_mm_webgpu] dispatch = ${j}`));const A=_?g&&m%4!=0?3:4:S[0],O=x[1]*S[1],T=x[0]*S[0],I=Math.max(x[0]*A,x[1]),E=c%O==0,P=d%T==0,M=p%I==0,R=_?[A,4,4]:[1,1,1],k=[`@group(0) @binding(0) var<storage, read> x: array<${_&&4===A?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`,`@group(0) @binding(1) var<storage, read> w: array<${_?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`];let D=`\\\\n      fn setOutputAtIndex(flatIndex : i32, value : ${_?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n        result[flatIndex] = ${_?\\\"vec4<f32>\\\":\\\"f32\\\"}(value);\\\\n      }\\\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${_?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\\\n        setOutputAtIndex(flatIndex ${_?\\\"/ 4\\\":\\\"\\\"}, value);\\\\n      }`;return f&&(k.push(`@group(0) @binding(2) var<storage, read> bias: array<${_?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`),D+=`\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${_?\\\"vec4<f32>\\\":\\\"f32\\\"} {\\\\n          return bias[coords.${g?\\\"w\\\":\\\"y\\\"}${_?\\\"/ 4\\\":\\\"\\\"}];\\\\n        }`),Object.assign(Object.assign({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:j[0],y:j[1],z:j[2]}),getShaderSource:()=>`\\\\n        ${s.utilFunctions}\\\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\\\n        ${k.join(\\\"\\\")}\\\\n        @group(0) @binding(${k.length}) var<storage, read_write> result: array<${_?\\\"vec4<f32>\\\":\\\"f32\\\"}>;\\\\n        //@group(0) @binding(${k.length+1}) var<uniform> uniforms: Uniforms;\\\\n\\\\n        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(\\\",\\\")});\\\\n        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(\\\",\\\")});\\\\n        const outShape : vec4<i32> = vec4<i32>(${l.join(\\\",\\\")});\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(${r.ShapeUtil.computeStrides(l).slice(0,3).join(\\\",\\\")});\\\\n        const filterDims : vec2<i32> = vec2<i32>(${n.kernelShape[0]}, ${n.kernelShape[1]});\\\\n        const pad : vec2<i32> = vec2<i32>(${n.pads[0]}, ${n.pads[1]});\\\\n        const stride : vec2<i32> = vec2<i32>(${n.strides[0]}, ${n.strides[1]});\\\\n        const dilation : vec2<i32> = vec2<i32>(${n.dilations[0]}, ${n.dilations[1]});\\\\n        const dimAOuter : i32 = ${c};\\\\n        const dimBOuter : i32 = ${d};\\\\n        const dimInner : i32 = ${p};\\\\n        ${D}\\\\n        ${((e,t,n,i,r=!1,a,s=!1,u=4,l=4,c=4)=>{const d=e?\\\"\\\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\\\n    \\\":\\\"\\\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\\\n    \\\",p=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",f=e?\\\"xShape[1]\\\":\\\"xShape[2]\\\",h=e?\\\"xShape[2]\\\":\\\"xShape[3]\\\",g=e?\\\"row\\\":\\\"col\\\",m=e?\\\"col\\\":\\\"row\\\",y=`\\\\n    let inChannels = wShape[2];\\\\n    let outWidth = ${e?\\\"outShape[2]\\\":\\\"outShape[3]\\\"};\\\\n    let outRow = ${g} / outWidth;\\\\n    let outCol = ${g} % outWidth;\\\\n\\\\n    let WRow = ${m} / (filterDims[1] * inChannels);\\\\n    let WCol = ${m} / inChannels % filterDims[1];\\\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\\\n    let xCh = ${m} % inChannels;\\\\n    var resData = ${(0,o.typeSnippet)(u)}(0.0);\\\\n    // The bounds checking is always needed since we use it to pad zero for\\\\n    // the 'same' padding type.\\\\n    if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {\\\\n      ${d}\\\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\\\n      ${(e=>{switch(e){case 1:return\\\"resData = x[xIndex];\\\";case 3:return\\\"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\\\";case 4:return\\\"resData = x[xIndex / 4];\\\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u)}\\\\n    }\\\\n    return resData;`,v=e?t&&i?`\\\\n    let col = colIn * ${u};\\\\n    ${y}`:`\\\\n    let col = colIn * ${u};\\\\n    if (row < dimAOuter && col < dimInner) {\\\\n      ${y}\\\\n    }\\\\n    return ${(0,o.typeSnippet)(u)}(0.0);`:i&&n?`\\\\n    let col = colIn * ${u};\\\\n    ${y}`:`\\\\n    let col = colIn * ${u};\\\\n    if (row < dimInner && col < dimBOuter) {\\\\n      ${y}\\\\n    }\\\\n    return ${(0,o.typeSnippet)(u)}(0.0);`,b=`${(e=>{switch(e){case 1:return\\\"return w[row * wShape[3] + colIn];\\\";case 4:return\\\"return w[row * wShape[3] / 4 + colIn];\\\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(l)}`,w=(0,o.typeSnippet)(c),_=e?(0,o.typeSnippet)(u):(0,o.typeSnippet)(l),$=e?(0,o.typeSnippet)(l):(0,o.typeSnippet)(u);return`\\\\n    ${(0,o.activationFnSnippet)(a,s,4===c,4)}\\\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${_} {\\\\n      ${e?v:b}\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${$} {\\\\n      ${e?b:v}\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${w}) {\\\\n      let col = colIn * ${c};\\\\n      if (row < dimAOuter && col < dimBOuter)\\\\n      {\\\\n      var value = valueIn;\\\\n      let outWidth = ${e?\\\"outShape[2]\\\":\\\"outShape[3]\\\"};\\\\n      ${p}\\\\n      ${(0,o.biasActivationSnippet)(r,a)}\\\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\\\n      }\\\\n    }`})(g,E,P,M,f,void 0,!1,R[0],R[1],R[2])}\\\\n            ${_?(0,u.makeMatMulPackedVec4Source)(S,x,!g,I):(0,u.makeMatMulPackedSource)(S,x,!g,I,!1,void 0,h)}`})}},6514:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConvTranspose2DProgramInfo=void 0;const i=n(4955),r=n(6952),a=n(1163),o=n(2075);t.createConvTranspose2DProgramInfo=(e,t,n,s)=>{const u=e.length>2,l=\\\"NHWC\\\"===n.format,c=n.outputShape,d=c[0],p=c[l?1:2],f=c[l?2:3],h=c[l?3:1],g=e[0].dims[l?3:1]%4==0&&h%4==0,m=l?h:p*f,y=l?p*f:h,v=g?[8,8,1]:[m<=4?4:16,m>4&&y<=4?4:16,1],b=g?[4,4,1]:[m<=4?1:2,m>4&&y<=4?1:2,1],w=[Math.ceil(m/v[0]/b[0]),Math.ceil(y/v[1]/b[1]),Math.ceil(d/v[2]/b[1])];return(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[conv2d_backprop_webgpu] dispatch = ${w}`)),Object.assign(Object.assign({},t),{outputs:[{dims:s?s(c):c,dataType:e[0].dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:w[0],y:w[1],z:w[2]}),getShaderSource:t=>((e,t,n,i,a,s)=>{const u=\\\"NHWC\\\"===n.format,l=u?1:2,c=u?2:3,d=u?3:1,p=r.ShapeUtil.size(i),f=i[u?3:1],h=t[0].dims[u?3:1],g=h%4==0&&f%4==0,m=g?2:1,y=[`@group(0) @binding(0) var<storage, read> Dy: array<${g&&4===(g?u&&h%4!=0?3:4:s[0])?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`,`@group(0) @binding(1) var<storage, read> W: array<${g?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`];let v=`\\\\n  fn setOutputAtIndex(flatIndex : u32, value : ${g?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n    result[flatIndex] = ${g?\\\"vec4<f32>\\\":\\\"f32\\\"}(value);\\\\n  }`;a&&(y.push(`@group(0) @binding(2) var<storage, read> bias: array<${g?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`),v+=`\\\\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${g?\\\"vec4<f32>\\\":\\\"f32\\\"} {\\\\n      return bias[coords.${u?\\\"w\\\":\\\"y\\\"}${g?\\\"/ 4\\\":\\\"\\\"}];\\\\n    }`);const b=(0,o.inputVariable)(\\\"W\\\",t[1].dataType,t[1].dims),w=(0,o.inputVariable)(\\\"Dy\\\",t[0].dataType,t[0].dims),_=(0,o.outputVariable)(\\\"result\\\",t[0].dataType,i),$=`{\\\\n        let batch: u32 = global_id.z / outShape[1];\\\\n        let r = global_id.z % outShape[1];\\\\n        let c = global_id.y * ${m};\\\\n        let d1: u32 = global_id.x * 4;\\\\n\\\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\\\\n\\\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n        // ? = to be determined. : = across all values in that axis.\\\\n        var dotProd: array<vec4<f32>, ${m}>;\\\\n        for (var i = 0; i < ${m}; i++) {\\\\n          dotProd[i] = vec4<f32>(0.0);\\\\n        }\\\\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\\\\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\\\\n          let wRPerm: u32= filterDims[0] - 1 - wR;\\\\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\\\\n              fract(dyR) > 0.0) {\\\\n            continue;\\\\n          }\\\\n          let idyR: u32 = u32(dyR);\\\\n\\\\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\\\\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\\\\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\\\\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\\\\n            var bDyCVal = true;\\\\n            var bDyCVal2 = true;\\\\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                fract(dyC) > 0.0) {\\\\n              bDyCVal = false;\\\\n            }\\\\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\\\\n                fract(dyC2) > 0.0) {\\\\n              bDyCVal2 = false;\\\\n            }\\\\n\\\\n            let idyC: u32 = u32(dyC);\\\\n            let idyC2: u32 = u32(dyC2);\\\\n            if (bDyCVal && bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = ${b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue1 = ${b.get(\\\"d2\\\",\\\"d1 + 1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue2 = ${b.get(\\\"d2\\\",\\\"d1 + 2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue3 = ${b.get(\\\"d2\\\",\\\"d1 + 3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n\\\\n                var xValue = ${u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\")};\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n\\\\n                xValue =  ${u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC2\\\")};\\\\n\\\\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\\\\n                                                    xValue * wValue1,\\\\n                                                    xValue * wValue2,\\\\n                                                    xValue * wValue3);\\\\n              }\\\\n            } else if (bDyCVal) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = ${b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue1 = ${b.get(\\\"d2\\\",\\\"d1 + 1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue2 = ${b.get(\\\"d2\\\",\\\"d1 + 2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue3 = ${b.get(\\\"d2\\\",\\\"d1 + 3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n\\\\n                var xValue = ${u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\")};\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n              }\\\\n            } else if (bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = ${b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue1 = ${b.get(\\\"d2\\\",\\\"d1 + 1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue2 = ${b.get(\\\"d2\\\",\\\"d1 + 2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                let wValue3 = ${b.get(\\\"d2\\\",\\\"d1 + 3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n\\\\n                var xValue = ${u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\")};\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[1] = dotProd[1] + tmpval;\\\\n              }\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        for (var i: u32 = 0; i < ${m}; i = i + 1) {\\\\n          ${_.set(\\\"batch\\\",\\\"r\\\",\\\"c+i\\\",\\\"d1\\\",\\\"dotProd[i]\\\")};\\\\n        }\\\\n      }`,C=`\\\\n          let outputIndices = ${_.offsetToIndices(\\\"global_idx\\\")};\\\\n          let batch = outputIndices[0];\\\\n          let d1 = outputIndices[${d}];\\\\n          let dyCorner = vec2<i32>(i32(outputIndices[${l}]), i32(outputIndices[${c}])) - pads;\\\\n          let dyRCorner = dyCorner.x;\\\\n          let dyCCorner = dyCorner.y;\\\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n          // ? = to be determined. : = across all values in that axis.\\\\n          var dotProd = 0.0;\\\\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\\\\n            if (wR % dilations.x != 0) {\\\\n              continue;\\\\n            }\\\\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\\\\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\\\\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\\\\n                wRPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            let idyR: u32 = u32(dyR);\\\\n\\\\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\\\\n              if (wC % dilations.y != 0) {\\\\n                continue;\\\\n              }\\\\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\\\\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\\\\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\\\n                continue;\\\\n              }\\\\n              let idyC: u32 = u32(dyC);\\\\n\\\\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\\\\n                let xValue = ${u?w.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"):w.get(\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\")};\\\\n                let wValue = ${b.get(\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\")};\\\\n                dotProd = dotProd + xValue * wValue;\\\\n              }\\\\n            }\\\\n          }\\\\n          ${_.setByOffset(\\\"global_idx\\\",\\\"dotProd\\\")};\\\\n        `,x=`\\\\n  ${v}\\\\n  ${y.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${y.length}) var<storage, read_write> result: array<${g?\\\"vec4<f32>\\\":\\\"f32\\\"}>;\\\\n  const outShape : vec4<u32> = vec4<u32>(${i.join(\\\",\\\")});\\\\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(\\\",\\\")});\\\\n  const strides : vec2<u32> = vec2<u32>(${n.strides[0]}, ${n.strides[1]});\\\\n  const filterDims : vec2<u32> = vec2<u32>(${n.kernelShape[u?1:2]}, ${n.kernelShape[u?2:3]});\\\\n  const dilations : vec2<u32> = vec2<u32>(${n.dilations[0]}, ${n.dilations[1]});\\\\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\\\\n          ${n.dilations[0]<=1?0:(n.kernelShape[u?1:2]-1)*(n.dilations[0]-1)},\\\\n          ${n.dilations[1]<=1?0:(n.kernelShape[u?2:3]-1)*(n.dilations[1]-1)});\\\\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${n.pads[0]+n.pads[2]})/2,\\\\n                                     i32(effectiveFilterDims[1]) - 1 - (${n.pads[1]+n.pads[3]})/2);\\\\n    ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(p)};\\\\n  ${g?$:C}}`;return`  ${b.impl()}\\\\n  ${w.impl()}\\\\n  ${_.impl()}\\\\n  ${x}`})(t,e,n,c,u,b)})}},4085:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.utilFunctions=void 0,t.utilFunctions=\\\"\\\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\\\n}\\\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\\\n}\\\\n\\\"},158:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0,t.makeMatMulPackedVec4Source=(e,t,n=!1,i=32,r=!1,a=32,o=!1)=>{const s=t[1]*e[1],u=t[0]*e[0],l=n?s:i,c=n?i:s,d=l/t[0],p=i/t[1];if((!n||4!==d||4!==e[1])&&(n||3!==d&&4!==d)||l%t[0]!=0||i%t[1]!=0||4!==e[0])throw new Error(`If transposeA ${n} is true, innerElementSize ${d} and workPerThread[1] ${e[1]} must be 4.\\\\n      Otherwise, innerElementSize ${d} must be 3 or 4.\\\\n  tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\\\\nvar<workgroup> mm_Asub : array<array<vec${d}<f32>, ${l/d}>, ${c}>;\\\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${u/e[0]}>, ${i}>;\\\\n\\\\nconst rowPerThread = ${e[1]};\\\\nconst colPerThread = ${e[0]};\\\\nconst innerElementSize = ${d};\\\\nconst tileInner = ${i};\\\\n\\\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n  let localRow = i32(localId.y);\\\\n  let tileRow = ${o?\\\"0\\\":\\\"localRow * rowPerThread\\\"};\\\\n  let tileCol = i32(localId.x);\\\\n\\\\n  let globalRow = ${o?\\\"0\\\":\\\"i32(globalId.y) * rowPerThread\\\"};\\\\n  let globalCol = i32(globalId.x);\\\\n  let batch = ${r?\\\"0\\\":\\\"i32(globalId.z)\\\"};\\\\n  let globalRowStart = i32(workgroupId.y) * ${s};\\\\n\\\\n  let numTiles = ${r?`${Math.ceil(a/i)}`:\\\"(dimInner - 1) / tileInner + 1\\\"};\\\\n  var kStart = ${r?`i32(globalId.z) * ${a}`:\\\"0\\\"};\\\\n\\\\n  var acc: array<vec4<f32>, rowPerThread>;\\\\n\\\\n  // Loop over shared dimension.\\\\n  let tileRowB = localRow * ${p};\\\\n  for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRow + innerRow;\\\\n          let inputCol = tileCol;\\\\n          ${f=n,f?\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          kStart + inputRow,\\\\n          globalRowStart / innerElementSize + inputCol);\\\\n        \\\":\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          globalRow + innerRow,\\\\n          kStart / innerElementSize + inputCol);\\\\n        \\\"}\\\\n      }\\\\n\\\\n      // Load one tile of B into local memory.\\\\n      for (var innerRow = 0; innerRow < ${p}; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRowB + innerRow;\\\\n          let inputCol = tileCol;\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\\\n          ${3===d?\\\"\\\":\\\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\\\"}\\\\n\\\\n          ${((e,t)=>e?`\\\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\\\n        ${3===t?\\\"\\\":\\\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\\\"}\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\\\n          ${3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached3[i] + acc[i];\\\"}\\\\n        }`:`\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          let ACached = mm_Asub[tileRow + i][k];\\\\n          acc[i] = BCached0 * ACached.x + acc[i];\\\\n          acc[i] = BCached1 * ACached.y + acc[i];\\\\n          acc[i] = BCached2 * ACached.z + acc[i];\\\\n          ${3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached.w + acc[i];\\\"}\\\\n        }`)(n,d)}\\\\n      }\\\\n\\\\n      workgroupBarrier();\\\\n  }\\\\n\\\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\\\n  }\\\\n}`;var f};const n=e=>e?\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              kStart + inputRow,\\\\n              globalRowStart + inputCol);\\\\n            \\\":\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              globalRowStart + inputRow,\\\\n              kStart + inputCol);\\\\n            \\\";t.makeMatMulPackedSource=(e,t,i=!1,r=32,a=!1,o=32,s=!1)=>{const u=e[1]*t[1],l=e[0]*t[0],c=i?u:r,d=i?r:u;if(d%t[1]!=0||c%t[0]!=0||r%t[1]!=0)throw new Error(`tileAHight ${d} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${r} must be divisible by workgroupSize[1]${t[1]}`);const p=d/t[1],f=c/t[0],h=r/t[1],g=s?`\\\\n    let localRow = i32(localId.y);\\\\n    let localCol = i32(localId.x);\\\\n    let globalRowStart = i32(workgroupId.y) * ${u};\\\\n    let globalColStart = i32(workgroupId.x) * ${l};\\\\n\\\\n    // Loop over shared dimension.\\\\n    for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${t[1]}) {\\\\n        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\\\\n          ${n(i)}\\\\n        }\\\\n      }\\\\n      // Load one tile of B into local memory.\\\\n      for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${t[1]}) {\\\\n            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n            kStart + inputRow,\\\\n            globalColStart + inputCol);\\\\n        }\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      var BCached : array<f32, colPerThread>;\\\\n      for (var k = 0; k < tileInner; k = k + 1) {\\\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\\\\n        }\\\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\\\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\\\n                ACached * BCached[innerCol];\\\\n          }\\\\n        }\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\\\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\\\n      }\\\\n    }\\\\n    `:`\\\\nlet tileRow = i32(localId.y) * rowPerThread;\\\\nlet tileCol = i32(localId.x) * colPerThread;\\\\n\\\\nlet globalRow = i32(globalId.y) * rowPerThread;\\\\nlet globalCol = i32(globalId.x) * colPerThread;\\\\nlet globalRowStart = i32(workgroupId.y) * ${u};\\\\n\\\\nlet tileRowA = i32(localId.y) * ${p};\\\\nlet tileColA = i32(localId.x) * ${f};\\\\nlet tileRowB = i32(localId.y) * ${h};\\\\n// Loop over shared dimension.\\\\nfor (var t = 0; t < numTiles; t = t + 1) {\\\\n  // Load one tile of A into local memory.\\\\n  for (var innerRow = 0; innerRow < ${p}; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowA + innerRow;\\\\n      let inputCol = tileColA + innerCol;\\\\n      ${n(i)}\\\\n    }\\\\n  }\\\\n\\\\n  // Load one tile of B into local memory.\\\\n  for (var innerRow = 0; innerRow < ${h}; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowB + innerRow;\\\\n      let inputCol = tileCol + innerCol;\\\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n        kStart + inputRow,\\\\n        globalCol + innerCol);\\\\n    }\\\\n  }\\\\n  kStart = kStart + tileInner;\\\\n  workgroupBarrier();\\\\n\\\\n  // Compute acc values for a single thread.\\\\n  var BCached : array<f32, colPerThread>;\\\\n  for (var k = 0; k < tileInner; k = k + 1) {\\\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\\\n    }\\\\n\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      ${(e=>e?\\\"let ACached = mm_Asub[k][tileRow + innerRow];\\\":\\\"let ACached = mm_Asub[tileRow + innerRow][k];\\\")(i)}\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  workgroupBarrier();\\\\n}\\\\n\\\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\\\n        acc[innerRow][innerCol]);\\\\n  }\\\\n}\\\\n`;return`\\\\n  var<workgroup> mm_Asub : array<array<f32, ${c}>, ${d}>;\\\\n  var<workgroup> mm_Bsub : array<array<f32, ${l}>, ${r}>;\\\\n  const rowPerThread = ${e[1]};\\\\n  const colPerThread = ${e[0]};\\\\n  const tileInner = ${r};\\\\n\\\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n    let batch = ${a?\\\"0\\\":\\\"i32(globalId.z)\\\"};\\\\n    let numTiles = ${a?`${Math.ceil(o/r)}`:\\\"(dimInner - 1) / tileInner + 1\\\"};\\\\n    var kStart = ${a?`i32(globalId.z) * ${o}`:\\\"0\\\"};\\\\n\\\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\\\n\\\\n    // Without this initialization strange values show up in acc.\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = 0.0;\\\\n      }\\\\n    }\\\\n    ${g}\\\\n  }\\\\n`}},1868:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseArgMinMaxAttributes=t.argMax=t.argMin=void 0;const i=n(387),r=n(1163),a=n(6031),o=e=>{if(!e||0===e.length||e.length>2)throw new Error(\\\"ArgMinMaxOp op requires 1 or 2 inputs.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},s=(e,t,n,o)=>{const s=1===e.length?n:((e,t)=>(0,i.createAttributeWithCacheKey)({axis:t.axis,keepDims:t.keepDims,selectLastIndex:t.selectLastIndex}))(0,n),u=s.cacheKey+e.map((e=>e.dims.toString())).join(\\\"_\\\"),l={name:t,inputTypes:[r.GpuDataType.default],cacheHint:u};return Object.assign(Object.assign({},l),{get:()=>(0,a.createReduceProgramInfo)(l,[e[0]],o,[s.axis],7,s.keepDims)})};t.argMin=(e,t)=>{o(e.inputs),e.compute(s(e.inputs,\\\"ArgMin\\\",t,((e,n,i)=>{const r=[];for(let t=0;t<e.shape.length;t++)(i.indexOf(t)>=0||0===i.length)&&r.push(`inputIndices[${t}] = 0;`);return[`${r.join(\\\"\\\\n\\\")}`,`var value = ${e.getByOffset(\\\"inputOffset\\\")};\\\\nvar bestIndex : i32 = 0;`,`if (${e.getByOffset(\\\"inputOffset\\\")} ${t.selectLastIndex>0?\\\"<=\\\":\\\"<\\\"} value) {\\\\n         value = ${e.getByOffset(\\\"inputOffset\\\")};\\\\n         bestIndex = i32(lastIndex);\\\\n       }`,\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.argMax=(e,t)=>{o(e.inputs),e.compute(s(e.inputs,\\\"argMax\\\",t,((e,n,i)=>{const r=[];for(let t=0;t<e.shape.length;t++)(i.indexOf(t)>=0||0===i.length)&&r.push(`inputIndices[${t}] = 0;`);return[`${r.join(\\\"\\\\n\\\")}`,`var value = ${e.getByOffset(\\\"inputOffset\\\")};\\\\nvar bestIndex : i32 = 0;`,`if (${e.getByOffset(\\\"inputOffset\\\")} ${t.selectLastIndex>0?\\\">=\\\":\\\">\\\"} value) {\\\\n         value = ${e.getByOffset(\\\"inputOffset\\\")};\\\\n         bestIndex = i32(lastIndex);\\\\n       }`,\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.parseArgMinMaxAttributes=e=>(0,i.createAttributeWithCacheKey)(e)},504:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.sub=t.pow=t.mul=t.div=t.add=void 0;const i=n(6952),r=n(1163),a=n(2075),o=(e,t,n,o,s)=>{const u={name:t,inputTypes:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:s};return Object.assign(Object.assign({},u),{get:()=>((e,t,n,o,s,u=t.dataType)=>{var l,c;const d=!i.ShapeUtil.areEqual(t.dims,n.dims);let p=t.dims,f=i.ShapeUtil.size(t.dims),h=!1;if(d){const e=i.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!e)throw new Error(\\\"Can't perform binary op on the given tensors\\\");p=e,f=i.ShapeUtil.size(p);let r=1;for(let e=0;e<p.length;e++){const i=null!==(l=t.dims[t.dims.length-e])&&void 0!==l?l:1;if(i!==(null!==(c=n.dims[n.dims.length-e])&&void 0!==c?c:1))break;r*=i}r%4==0&&(h=!0)}else h=!0;return Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,r,o,s,u,l,c,d,p)=>{const f=i.ShapeUtil.size(r),h=Math.ceil(f/4);let g,m;\\\"string\\\"==typeof u?g=m=(e,t)=>`${u}((${e}),(${t}))`:\\\"function\\\"==typeof u?g=m=u:(g=u.scalar,m=u.vector);let y=\\\"\\\";const v=(0,a.outputVariable)(\\\"outputData\\\",d,r,4),b=(0,a.inputVariable)(\\\"aData\\\",l,t,4),w=(0,a.inputVariable)(\\\"bData\\\",c,n,4);if(s){const e=e=>{const t=i.ShapeUtil.computeStrides(e),n=[];for(let i=e.length-1;i>=0;i--){const a=0===r.length?\\\"0u\\\":1===r.length?\\\"outputIndices\\\":`outputIndices[${i+r.length-e.length}]`;n.push(`${t[i]}u * (${a} % ${e[i]}u)`)}return n.length>0?n.join(\\\"+\\\"):\\\"0u\\\"};y=`\\\\n  fn calcOffsetA(outputIndices: ${v.type.indices}) -> u32 {\\\\n    return ${e(t)};\\\\n  }\\\\n\\\\n  fn calcOffsetB(outputIndices: ${v.type.indices}) -> u32 {\\\\n    return ${e(n)};\\\\n  }\\\\n  `}let _;if(o)_=s?`\\\\n      let outputIndices = ${v.offsetToIndices(\\\"global_idx * 4u\\\")};\\\\n      let offsetA = calcOffsetA(outputIndices);\\\\n      let offsetB = calcOffsetB(outputIndices);\\\\n      ${v.setByOffset(\\\"global_idx\\\",m(b.getByOffset(\\\"offsetA / 4u\\\"),w.getByOffset(\\\"offsetB / 4u\\\")))}`:v.setByOffset(\\\"global_idx\\\",m(b.getByOffset(\\\"global_idx\\\"),w.getByOffset(\\\"global_idx\\\")));else{if(!s)throw new Error(\\\"no necessary to use scalar implementation for element-wise binary op implementation.\\\");const e=e=>{const t=`aData[indexA${e}][componentA${e}]`,n=`bData[indexB${e}][componentB${e}]`;return`\\\\n      let outputIndices${e} = ${v.offsetToIndices(`global_idx * 4u + ${e}u`)};\\\\n      let offsetA${e} = calcOffsetA(outputIndices${e});\\\\n      let offsetB${e} = calcOffsetB(outputIndices${e});\\\\n      let indexA${e} = offsetA${e} / 4u;\\\\n      let indexB${e} = offsetB${e} / 4u;\\\\n      let componentA${e} = offsetA${e} % 4u;\\\\n      let componentB${e} = offsetB${e} % 4u;\\\\n      outputData[global_idx][${e}] = ${g(t,n)};`};_=`\\\\n      ${e(0)}\\\\n      ${e(1)}\\\\n      ${e(2)}\\\\n      ${e(3)}`}return`\\\\n  ${e.declareVariables(b,w,v)}\\\\n\\\\n  ${null!=p?p:\\\"\\\"}\\\\n  ${y}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)}\\\\n    ${_}\\\\n  }`})(e,t.dims,n.dims,p,h,d,o,t.dataType,n.dataType,u,s),outputs:[{dims:p,dataType:u,gpuDataType:r.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(f/64/(h?4:1))})})})(u,e[0],e[1],n,o)})};t.add=e=>{e.compute(o(e.inputs,\\\"Add\\\",((e,t)=>`${e}+${t}`)))},t.div=e=>{e.compute(o(e.inputs,\\\"Div\\\",((e,t)=>`${e}/${t}`)))},t.mul=e=>{e.compute(o(e.inputs,\\\"Mul\\\",((e,t)=>`${e}*${t}`)))},t.pow=e=>{const t=(0,a.inputVariable)(\\\"input\\\",e.inputs[0].dataType,e.inputs[0].dims).type.value,n=\\\"i32\\\"===t?\\\"round\\\":\\\"\\\";e.compute(o(e.inputs,\\\"Pow\\\",{scalar:(e,t)=>`pow_custom(${e},${t})`,vector:(e,t)=>`pow_vector_custom(${e},${t})`},`\\\\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\\\\n      if (b == ${t}(0.0)) {\\\\n        return ${t}(1.0);\\\\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\\\\n        return ${t}(pow(f32(a), f32(b))); // NaN\\\\n      }\\\\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${n}(pow(f32(abs(a)), f32(b))));\\\\n    }\\\\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\\\\n      // TODO: implement vectorized pow\\\\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\\\\n    }\\\\n      `))},t.sub=e=>{e.compute(o(e.inputs,\\\"Sub\\\",((e,t)=>`${e}-${t}`)))}},2075:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createShaderHelper=t.outputVariable=t.inputVariable=t.tensorTypeToWsglStorageType=t.WORKGROUP_SIZE=void 0;const i=n(6952);t.WORKGROUP_SIZE=64;const r=(e,t)=>{switch(e){case 1:return t>1?`vec${t}<f32>`:\\\"f32\\\";case 6:return t>1?`vec${t}<i32>`:\\\"i32\\\";case 12:return t>1?`vec${t}<u32>`:\\\"u32\\\";case 7:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"i32\\\"];case 13:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"u32\\\"];case 9:if(4!==t)throw new Error(\\\"bool must be vec4\\\");return[\\\"u32\\\",\\\"vec4<bool>\\\"];default:throw new Error(`Unknown data type: ${e}`)}};t.tensorTypeToWsglStorageType=(e,t=1)=>{const n=r(e,t);return\\\"string\\\"==typeof n?n:n[0]};const a=(e,t,n,a,o)=>{const s=n.length,u=s<2?\\\"u32\\\":s<=4?`vec${s}<u32>`:`array<u32, ${s}>`,l=r(t,o),c=\\\"string\\\"==typeof l?l:l[1],d=\\\"string\\\"==typeof l?l:l[0],p={indices:u,value:c,storage:d,tensor:t},f=e=>\\\"string\\\"==typeof e?e:`${e}u`,h={offsetToIndices:!1,indicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},g=i.ShapeUtil.computeStrides(n);let m=\\\"\\\";for(let e=0;e<s-1;e++)m+=`\\\\n    let dim${e} = current / ${g[e]}u;\\\\n    let rest${e} = current % ${g[e]}u;\\\\n    indices[${e}] = dim${e};\\\\n    current = rest${e};\\\\n    `;m+=`indices[${s-1}] = current;`;const y=s<2?\\\"\\\":`\\\\n  fn o2i_${e}(offset: u32) -> ${p.indices} {\\\\n    var indices: ${p.indices};\\\\n    var current = offset;\\\\n    ${m}\\\\n    return indices;\\\\n  }`,v=[];if(s>=2)for(let e=s-1;e>=0;e--)v.push(`${g[e]}u * (indices[${e}])`);const b=s<2?\\\"\\\":`\\\\n  fn i2o_${e}(indices: ${p.indices}) -> u32 {\\\\n    return ${v.join(\\\"+\\\")};\\\\n  }`,w=(...e)=>0===s?\\\"0u\\\":`${p.indices}(${e.map(f).join(\\\",\\\")})`,_=(t,n)=>(()=>{if(p.storage===p.value)return`${e}[${t}]=${n};`;if(\\\"vec2<u32>\\\"===p.storage&&\\\"i32\\\"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), select(0u, 0xFFFFFFFFu, ${n} < 0));`;if(\\\"vec2<u32>\\\"===p.storage&&\\\"u32\\\"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), 0u);`;if(\\\"u32\\\"===p.storage&&\\\"vec4<bool>\\\"===p.value)return`${e}[${t}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${n}));`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),$=t=>(()=>{if(p.storage===p.value)return`${e}[${t}]`;if(\\\"vec2<u32>\\\"===p.storage&&\\\"i32\\\"===p.value)return`i32(${e}[${t}].x)`;if(\\\"vec2<u32>\\\"===p.storage&&\\\"u32\\\"===p.value)return`u32(${e}[${t}].x)`;if(\\\"u32\\\"===p.storage&&\\\"vec4<bool>\\\"===p.value)return`vec4<bool>(bool(${e}[${t}] & 0xFFu), bool(${e}[${t}] & 0xFF00u), bool(${e}[${t}] & 0xFF0000u), bool(${e}[${t}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),C=s<2?\\\"\\\":`\\\\n  fn get_${e}ByIndices(indices: ${p.indices}) -> ${c} {\\\\n    return ${e}[i2o_${e}(indices)];\\\\n  }`,x=s<2?\\\"\\\":(()=>{const t=n.map(((e,t)=>`d${t}: u32`)).join(\\\", \\\"),i=n.map(((e,t)=>`d${t}`)).join(\\\", \\\");return`\\\\n  fn get_${e}(${t}) -> ${c} {\\\\n    return get_${e}ByIndices(${w(i)});\\\\n  }`})(),S=s<2?\\\"\\\":`\\\\n  fn set_${e}ByIndices(indices: ${p.indices}, value: ${c}) {\\\\n    ${_(`i2o_${e}(indices)`,\\\"value\\\")}\\\\n  }`,j=s<2?\\\"\\\":(()=>{const t=n.map(((e,t)=>`d${t}: u32`)).join(\\\", \\\"),i=n.map(((e,t)=>`d${t}`)).join(\\\", \\\");return`\\\\n  fn set_${e}(${t}, value: ${c}) {\\\\n    set_${e}ByIndices(${w(i)}, value);\\\\n  }`})();return{impl:()=>{const e=[];return h.offsetToIndices&&e.push(y),h.indicesToOffset&&e.push(b),h.set&&e.push(j),h.setByIndices&&e.push(S),h.get&&e.push(x),h.getByIndices&&e.push(C),e.join(\\\"\\\\n\\\")},type:p,offsetToIndices:t=>(h.offsetToIndices=!0,s<2?t:`o2i_${e}(${t})`),indicesToOffset:t=>(h.indicesToOffset=!0,s<2?t:`i2o_${e}(${t})`),indices:w,indicesGet:(e,t)=>s<2?`${e}`:`${e}[${t}]`,indicesSet:(e,t,n)=>s<2?`${e}=${n};`:`${e}[${t}]=${n};`,set:(...t)=>{if(t.length!==s+1)throw new Error(`indices length must be ${s}`);const n=t[s];if(\\\"string\\\"!=typeof n)throw new Error(\\\"value must be string\\\");const i=t.slice(0,s).map(f).join(\\\",\\\");return 0===s?_(\\\"0u\\\",n):1===s?_(i[0],n):(h.set=!0,h.setByIndices=!0,h.indicesToOffset=!0,`set_${e}(${i}, ${n})`)},setByOffset:_,setByIndices:(t,n)=>s<2?_(t,n):(h.setByIndices=!0,h.indicesToOffset=!0,`set_${e}ByIndices(${t}, ${n});`),get:(...t)=>{if(t.length!==s)throw new Error(`indices length must be ${s}`);const n=t.map(f).join(\\\",\\\");return 0===s?$(\\\"0u\\\"):1===s?$(n[0]):(h.get=!0,h.getByIndices=!0,h.indicesToOffset=!0,`get_${e}(${n})`)},getByOffset:$,getByIndices:t=>s<2?$(t):(h.getByIndices=!0,h.indicesToOffset=!0,`get_${e}ByIndices(${t})`),usage:a?\\\"input\\\":\\\"output\\\",name:e,shape:n}};t.inputVariable=(e,t,n,i=1)=>a(e,t,n,!0,i),t.outputVariable=(e,t,n,i=1)=>a(e,t,n,!1,i);class o{constructor(e){this.normalizedDispatchGroup=e,this.indicesHelpers=[]}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${\\\"number\\\"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=t.WORKGROUP_SIZE){const n=\\\"number\\\"==typeof e?e:e[0],i=\\\"number\\\"==typeof e?1:e[1],r=\\\"number\\\"==typeof e?1:e[2],a=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${n}, ${i}, ${r})\\\\n  fn main(${a?\\\"@builtin(global_invocation_id) global_id : vec3<u32>\\\":\\\"@builtin(local_invocation_index) local_index : u32,\\\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\\\"}) {\\\\n    ${a?\\\"let global_idx = global_id.x;\\\":`let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1]}u +\\\\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${n*i*r}u + local_index;`}\\\\n  `}declareVariable(e,t){this.indicesHelpers.push(e);const n=\\\"input\\\"===e.usage?\\\"read\\\":\\\"read_write\\\",i=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${n}> ${e.name}: array<${i}>;`}declareVariables(...e){let t=0;return e.filter((e=>i.ShapeUtil.size(e.shape)>0)).map((e=>this.declareVariable(e,t++))).join(\\\"\\\\n\\\")}get additionalImplementations(){return this.indicesHelpers.map((e=>e.impl())).join(\\\"\\\\n\\\")}}t.createShaderHelper=e=>new o(e)},513:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseConcatAttributes=t.concat=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075);t.concat=(e,t)=>{(e=>{if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");const t=e[0].dataType,n=e[0].dims.length;for(const i of e){if(i.dataType!==t)throw new Error(\\\"input tensors should be one type\\\");if(i.dims.length!==n)throw new Error(\\\"input tensors should have the same shape\\\")}})(e.inputs),e.compute(((e,t)=>{const n=(r=e.length,s=t.cacheKey,{name:\\\"Concat\\\",inputTypes:Array(r).fill(a.GpuDataType.default),cacheHint:s});var r,s;return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const r=t[0].dims.slice();if(n>=r.length||n<-1*r.length)throw new Error(\\\"axis specified for concat doesn't match input dimensionality\\\");const s=n<0?r.length+n:n,u=r.slice(0);for(let e=1;e<t.length;e++){const n=t[e].dims.slice();for(let e=0;e<r.length;e++)if(e===s)u[s]+=n[e];else if(r[e]!==n[e])throw new Error(\\\"non concat dimensions must match\\\")}const l=i.ShapeUtil.size(u),c=new Array(t.length),d=new Array(t.length),p=t[0].dataType;let f=0;for(let e=0;e<t.length;++e)f+=t[e].dims[s],c[e]=f,d[e]=(0,o.inputVariable)(`input${e}`,p,t[e].dims);const h=(0,o.outputVariable)(\\\"output\\\",p,u),g=h.indicesGet(\\\"indices\\\",s);return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>{return`\\\\n  ${e.declareVariables(...d,h)}\\\\n\\\\n  const sizeInConcatAxis = array<u32, ${c.length}>(${c.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n  ${t=c.length,`\\\\n  fn calculateInputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < ${t}u; i += 1u ) {\\\\n      if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n      }\\\\n    }\\\\n    return ${t}u;\\\\n  }`}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\\\n\\\\n    var indices = ${h.offsetToIndices(\\\"global_idx\\\")};\\\\n\\\\n    let inputIndex = calculateInputIndex(${g});\\\\n    if (inputIndex != 0u) {\\\\n      ${g} -= sizeInConcatAxis[inputIndex - 1u];\\\\n    }\\\\n\\\\n    ${((e,t)=>{const n=e.length,i=[];for(let r=0;r<n;++r){const a=t.setByOffset(\\\"global_idx\\\",e[r].getByIndices(\\\"indices\\\"));1===n?i.push(a):0===r?i.push(`if (inputIndex == ${r}u) { ${a} }`):r===n-1?i.push(`else { ${a} }`):i.push(`else if (inputIndex == ${r}) { ${a} }`)}return i.join(\\\"\\\\n\\\")})(d,h)}\\\\n  }`;var t},dispatchGroup:()=>({x:Math.ceil(l/64)})})})(n,e,t.axis)})})(e.inputs,t))},t.parseConcatAttributes=e=>(0,r.createAttributeWithCacheKey)({axis:e.axis})},9192:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;const i=n(6952),r=n(1163),a=n(2075),o=n(9770),s=n(3997);t.createGroupedConvProgramInfoLoader=(e,t,n)=>{const u=(l=e.length>2,c=t.cacheKey,{name:\\\"GroupedConv\\\",inputTypes:l?[r.GpuDataType.default,r.GpuDataType.default,r.GpuDataType.default]:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:c});var l,c;return Object.assign(Object.assign({},u),{get:()=>((e,t,n,u)=>{const l=e.length>2,c=l?\\\"value += b[output_channel];\\\":\\\"\\\",d=e[0].dims,p=e[1].dims,f=p[0]/n.group,{activationFunction:h,applyActivation:g}=(0,s.getActicationSnippet)(n),m=\\\"NHWC\\\"===n.format,y=(0,o.calculateOutputShape)(d,p,n.dilations,n.pads,n.strides,m),v=i.ShapeUtil.size(y),b=(0,a.outputVariable)(\\\"output\\\",e[0].dataType,y),w=(0,a.inputVariable)(\\\"x\\\",e[0].dataType,d),_=(0,a.inputVariable)(\\\"w\\\",e[1].dataType,p),$=[w,_];return l&&$.push((0,a.inputVariable)(\\\"b\\\",e[2].dataType,e[2].dims)),Object.assign(Object.assign({},t),{outputs:[{dims:u?u(y):y,dataType:e[0].dataType,gpuDataType:r.GpuDataType.default}],getShaderSource:e=>`\\\\n  const strides: vec2<u32> = vec2(${n.strides[0]}u, ${n.strides[1]}u);\\\\n  const pads: vec2<u32> = vec2(${n.pads[0]}u, ${n.pads[1]}u);\\\\n\\\\n  ${e.declareVariables(...$,b)}\\\\n\\\\n  ${h}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(v)}\\\\n\\\\n    let outputIndices = ${b.offsetToIndices(\\\"global_idx\\\")};\\\\n    let batch: u32 = outputIndices[0];\\\\n    let output_channel: u32 = outputIndices[${m?3:1}];\\\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${m?1:2}], outputIndices[${m?2:3}]) * strides - pads;\\\\n    let group_id: u32 = output_channel / ${f}u;\\\\n\\\\n    var value: ${b.type.value} = ${b.type.value}(0);\\\\n    for (var wInChannel: u32 = 0u; wInChannel < ${p[1]}u; wInChannel++) {\\\\n      let input_channel = group_id * ${p[1]}u + wInChannel;\\\\n      for (var wHeight: u32 = 0u; wHeight < ${p[2]}u; wHeight++) {\\\\n        let xHeight = xRCCorner.x + wHeight * ${n.dilations[0]}u;\\\\n\\\\n        if (xHeight < 0u || xHeight >= ${d[m?1:2]}u) {\\\\n          continue;\\\\n        }\\\\n\\\\n        for (var wWidth: u32 = 0u; wWidth < ${p[3]}u; wWidth++) {\\\\n          let xWidth = xRCCorner.y + wWidth * ${n.dilations[1]}u;\\\\n          if (xWidth < 0u || xWidth >= ${d[m?2:3]}u) {\\\\n            continue;\\\\n          }\\\\n\\\\n          let xVal = ${m?w.get(\\\"batch\\\",\\\"xHeight\\\",\\\"xWidth\\\",\\\"input_channel\\\"):w.get(\\\"batch\\\",\\\"input_channel\\\",\\\"xHeight\\\",\\\"xWidth\\\")};\\\\n          let wVal = ${_.get(\\\"output_channel\\\",\\\"wInChannel\\\",\\\"wHeight\\\",\\\"wWidth\\\")};\\\\n          value += xVal*wVal;\\\\n        }\\\\n      }\\\\n    }\\\\n    ${c}\\\\n    ${g}\\\\n    ${b.setByOffset(\\\"global_idx\\\",\\\"value\\\")}\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(v/64)})})})(e,u,t,n)})}},7640:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.convTranspose=t.parseConvTransposeAttributes=void 0;const i=n(387),r=n(1163),a=n(6514),o=n(3997),s=(e,t,n,i,r,a)=>(e-1)*t+n+(i-1)*r+1-a,u=(e,t,n,i,r)=>{const a=Math.floor(e/2);\\\"SAME_UPPER\\\"===t?(n[i]=a,n[r]=e-a):\\\"SAME_LOWER\\\"===t&&(n[i]=e-a,n[r]=a)},l=(e,t)=>{const n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce(((e,t)=>e*t),0)){n.length=0;for(let e=2;e<t[1].dims.length;++e)n.push(t[1].dims[e])}const i=\\\"NHWC\\\"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(i?3:1,0,t[1].dims[1]);const r=e.pads.slice(),a=e.outputShape.slice(),o=e.outputPadding.slice(),l=t[0].dims;let c=e.dilations.slice();if(0===c.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;c=new Array(e).fill(1)}let d=e.strides.slice();if(0===d.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;d=new Array(e).fill(1)}((e,t,n,i,r,a,o,l,c,d)=>{const p=e.length-2,f=0===d.length;if(0===c.length)for(let e=0;e<p;++e)c.push(0);const h=e[0],g=t[l?3:1]*r;for(let r=0,h=e.length-p-(l?1:0);r<p;++r,++h){const l=e[h],g=f?l*o[r]:d[r],m=s(l,o[r],a[r],t[h],n[r],g);u(m,i,a,r,r+p),f&&d.push(o[r]*(l-1)+c[r]+(t[h]-1)*n[r]+1-a[r]-a[r+p])}d.splice(0,0,h),d.splice(l?3:1,0,g)})(l,n,c,e.autoPad,e.group,r,d,i,o,a);const p=Object.assign({},e);return Object.assign(p,{kernelShape:n,pads:r,outputPadding:o,outputShape:a,dilations:c,strides:d,cacheKey:e.cacheKey}),p};t.parseConvTransposeAttributes=e=>{const t=(0,o.parseInternalActivationAttributes)(e),n=e.format,r=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][void 0===e.autoPad?0:e.autoPad],a=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,c=e.strides,d=e.wIsConst(),p=e.outputPadding,f=e.outputShape;return(0,i.createAttributeWithCacheKey)(Object.assign({autoPad:r,format:n,dilations:a,group:s,kernelShape:u,outputPadding:p,outputShape:f,pads:l,strides:c,wIsConst:d},t))};const c=(e,t,n)=>{const i=(o=3===e.length,s=t.cacheKey,{name:\\\"ConvTranspose2D\\\",inputTypes:o?[r.GpuDataType.default,r.GpuDataType.default,r.GpuDataType.default]:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:s});var o,s;return Object.assign(Object.assign({},i),{get:()=>(0,a.createConvTranspose2DProgramInfo)(e,i,t,n)})};t.convTranspose=(e,t)=>{((e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support 2-dimensional conv\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");const n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error(\\\"invalid bias\\\");const i=e[0].dims.length-2;if(t.dilations.reduce(((e,t)=>e+t),0)>0&&t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.reduce(((e,t)=>e+t),0)>0&&t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.reduce(((e,t)=>e+t),0)>0&&t.pads.length!==2*i)throw new Error(`pads should be ${2*i}D`);if(t.outputPadding.length!==i&&0!==t.outputPadding.length)throw new Error(`output_padding should be ${i}D`);if(t.kernelShape.reduce(((e,t)=>e+t),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error(\\\"invalid output shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"ConvTranspose input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"ConvTranspose input(bias) should be float tensor\\\")})(e.inputs,t),3===e.inputs[0].dims.length?((e,t)=>{const n=\\\"NHWC\\\"===t.format,i=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===i.length&&i.push(e.inputs[2]);let r=t.kernelShape;0!==r.length&&0!==r[0]||(r=[e.inputs[1].dims[2]]);let a=t.dilations;0!==a.length&&0!==a[0]||(a=[1]);let o=t.strides;0!==o.length&&0!==o[0]||(o=[1]);let s=t.pads;0===s.length&&(s=[0,0]),s=[0,s[0],0,s[1]],o=[1].concat(o),a=[1].concat(a),r=[1].concat(r);const u=l(Object.assign(Object.assign({},t),{pads:s,strides:o,dilations:a,kernelShape:r}),i);e.compute(c(i,u,(e=>n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]])))})(e,t):((e,t,n)=>{const i=l(n,t);e.compute(c(t,i))})(e,e.inputs,t)}},9770:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;const i=n(6952),r=n(387),a=n(9192),o=n(3822),s=n(3997),u=n(2625);t.calculateOutputShape=(e,t,n,i,r,a)=>{const o=e[0],s=e.slice(a?1:2,a?3:4),u=s.length,l=t[0],c=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),d=s.map(((e,t)=>e+i[t]+i[t+u])).map(((e,t)=>Math.floor((e-c[t]+r[t])/r[t])));return d.splice(0,0,o),d.splice(a?3:1,0,l),d};const l=(0,r.createAttributeWithCacheKey)({perm:[2,3,1,0]}),c=(e,t)=>{const n=e.kernelShape.slice();for(let e=2;e<t[1].dims.length;++e)0===n[e-2]&&(n[e-2]=t[1].dims[e]);const r=e.pads.slice();i.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,r,\\\"NHWC\\\"===e.format,e.autoPad);const a=Object.assign({},e);return Object.assign(a,{kernelShape:n,pads:r,cacheKey:e.cacheKey}),a};t.parseConvAttributes=e=>{const t=(0,s.parseInternalActivationAttributes)(e),n=e.format,i=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],a=e.dilations,o=e.group,u=e.kernel_shape,l=e.pads,c=e.strides,d=e.w_is_const();return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:i,format:n,dilations:a,group:o,kernelShape:u,pads:l,strides:c,wIsConst:d},t))},t.conv=(e,n)=>{((e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support conv 1D and 2D\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\\\"invalid bias\\\");const n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"Conv input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"Conv input(bias) should be float tensor\\\")})(e.inputs,n),3===e.inputs[0].dims.length?((e,t)=>{const n=\\\"NHWC\\\"===t.format,i=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&i.push(e.inputs[2]);const r=[0,t.pads[0],0,t.pads[1]],o=[1].concat(t.strides),s=[1].concat(t.dilations),u=[1].concat(t.kernelShape),l=c(Object.assign(Object.assign({},t),{pads:r,strides:o,dilations:s,kernelShape:u}),i);e.compute((0,a.createGroupedConvProgramInfoLoader)(i,l,(e=>n?[e[0],e[2],e[3]]:[])))})(e,n):((e,n,i)=>{var r;const s=c(i,n),d=3===n.length,p=\\\"NHWC\\\"===i.format,f=n[0].dims[p?1:2],h=n[0].dims[p?2:3],g=n[0].dims[p?3:1],m=n[1].dims[2],y=n[1].dims[3],v=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,i.dilations,s.pads,i.strides,p),b=v[p?1:2],w=v[p?2:3],_=v[p?3:1];if(p&&m===f&&y===h&&\\\"VALID\\\"===i.autoPad||1===m&&1===y&&1===i.dilations[0]&&1===i.dilations[1]&&1===i.strides[0]&&1===i.strides[1]&&(\\\"SAME_UPPER\\\"===i.autoPad||\\\"SAME_LOWER\\\"===i.autoPad||\\\"VALID\\\"===i.autoPad))return void e.compute((0,a.createGroupedConvProgramInfoLoader)(n,s));if(!p||1!==i.group)return void e.compute((0,a.createGroupedConvProgramInfoLoader)(n,s));const $=p?b*w:_,C=p?_:b*w,x=m*y*g,S=null!==(r=e.kernelCustomData.wT)&&void 0!==r?r:e.compute(Object.assign(Object.assign({},u.transposeProgramMetadata),{cacheHint:l.cacheKey,get:()=>(0,u.createTransposeProgramInfo)(n[1],l.perm)}),{inputs:[1],outputs:[i.wIsConst?-2:-1]})[0];i.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=S);const j=[n[0],S];d&&(p||1!==n[2].dims.length?j.push(n[2]):j.push(n[2].reshape([n[2].dims[0],1,1]))),e.compute((0,o.createConv2DMatMulProgramInfoLoader)(j,s,v,$,C,x,d,!0),{inputs:j})})(e,e.inputs,n)}},3822:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;const i=n(1163),r=n(9456);t.createConv2DMatMulProgramInfoLoader=(e,t,n,a,o,s,u,l)=>{const c=((e,t)=>({name:\\\"Conv2DMatMul\\\",inputTypes:e?[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default]:[i.GpuDataType.default,i.GpuDataType.default],cacheHint:t}))(u,t.cacheKey);return Object.assign(Object.assign({},c),{get:()=>(0,r.createConv2DMatMulProgramInfo)(e,c,t,n,a,o,s,u,l)})}},8856:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.expand=t.expandProgramMetadata=void 0;const i=n(6952),r=n(1163),a=n(2075);t.expandProgramMetadata={name:\\\"Expand\\\",inputTypes:[r.GpuDataType.default]};const o=(e,t)=>{const n=e.length-t.length,i=[];for(let t=0;t<n;++t)i.push(e[t]);for(let r=0;r<t.length;++r)i.push(1===t[r]?e[r+n]:t[r]);return i};t.expand=e=>{(e=>{if(!e||2!==e.length)throw new Error(\\\"Expand requires 2 input.\\\");const t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number);let i=n.length<t.length?0:n.length-t.length,r=t.length<n.length?0:t.length-n.length;for(;i<n.length&&r<t.length;++i,++r)if(n[i]!==t[r]&&1!==n[i]&&1!==t[r])throw new Error(\\\"Expand requires shape to be broadcastable to input\\\")})(e.inputs);const n=Array.from(e.inputs[1].getBigInt64Array(),Number).toString();e.compute(Object.assign(Object.assign({},t.expandProgramMetadata),{cacheHint:n,get:()=>((e,t)=>{const n=t[0].dims,s=Array.from(t[1].getBigInt64Array(),Number),u=((e,t)=>e.length>t.length?o(e,t):o(t,e))(n,s),l=i.ShapeUtil.size(u),c=t[0].dataType,d=(0,a.inputVariable)(\\\"input\\\",c,n),p=(0,a.outputVariable)(\\\"output\\\",c,u);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\\\n  const inputShape = ${d.indices(...n)};\\\\n  ${e.declareVariables(d,p)}\\\\n  ${e.mainStart()}\\\\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\\\n    let outputIndices = ${p.offsetToIndices(\\\"global_idx\\\")};\\\\n    var inputIndices: ${d.type.indices};\\\\n    for (var i = 0; i < ${n.length}; i++) {\\\\n      if (${d.indicesGet(\\\"inputShape\\\",\\\"i\\\")} == 1) {\\\\n        ${d.indicesSet(\\\"inputIndices\\\",\\\"i\\\",0)}\\\\n      } else {\\\\n        ${d.indicesSet(\\\"inputIndices\\\",\\\"i\\\",p.indicesGet(\\\"outputIndices\\\",\\\"i + \\\"+(u.length-n.length)))}\\\\n      }\\\\n    }\\\\n    ${p.setByOffset(\\\"global_idx\\\",d.getByIndices(\\\"inputIndices\\\"))}\\\\n  }`,outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:r.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(l/64)})})})(t.expandProgramMetadata,e.inputs)}),{inputs:[0]})}},3997:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;const i=n(6952);t.getActicationSnippet=e=>{switch(e.activation){case\\\"Relu\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = max(value, 0.0);\\\"};case\\\"Sigmoid\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = (1.0 / (1.0 + exp(-value)));\\\"};case\\\"Clip\\\":return{activationFunction:`const clip_min_=f32(${e.clipMin});const clip_max_=f32(${e.clipMax});`,applyActivation:\\\"value = clamp(value, clip_min_, clip_max_);\\\"};default:return{activationFunction:\\\"\\\",applyActivation:\\\"\\\"}}},t.parseInternalActivationAttributes=e=>{const t=(null==e?void 0:e.activation)||\\\"\\\";if(\\\"Clip\\\"===t){const[n,r]=(null==e?void 0:e.activation_params)||[i.MIN_CLIP,i.MAX_CLIP];return{activation:t,clipMax:r,clipMin:n,activationCacheKey:`${t}:${n},${r}`}}return{activation:t,activationCacheKey:t}}},8405:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.gather=t.parseGatherAttributes=void 0;const i=n(6952),r=n(387),a=n(1163);t.parseGatherAttributes=e=>(0,r.createAttributeWithCacheKey)({axis:e.axis}),t.gather=(e,t)=>{(e=>{if(!e||2!==e.length)throw new Error(\\\"Gather requires 2 inputs.\\\")})(e.inputs);const n={name:\\\"Gather\\\",inputTypes:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:t.cacheKey};e.compute(((e,t,n)=>{const r=t[0].dims,o=t[1].dims,s=r.length,u=i.ShapeUtil.normalizeAxis(n.axis,s),l=r.slice(0);l.splice(u,1,...o);const c=t[0].dataType,d=i.ShapeUtil.sizeFromDimension(r,u+1),p=[7,13,11].includes(c)?2:1,f=7===t[1].dataType?2:1,h=p*d,g=i.ShapeUtil.sizeToDimension(r,u),m=i.ShapeUtil.size(o),y=i.ShapeUtil.sizeFromDimension(r,u)*p,v=m*d*p,b=r[u],w=i.ShapeUtil.size(r)*p,_=i.ShapeUtil.size(l)*p,$=g*m;return Object.assign(Object.assign({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const N: u32 = ${m};\\\\n  const elementSize: u32 = ${p};\\\\n  const indicesElementSize: u32 = ${f};\\\\n\\\\n  @group(0) @binding(0) var<storage, read> input : array<u32>;\\\\n  @group(0) @binding(1) var<storage, read> inputIndices : array<i32>;\\\\n  @group(0) @binding(2) var<storage, read_write> output: array<u32>;\\\\n\\\\n  ${e.mainStart()}\\\\n    let batch: u32 = global_idx / N;\\\\n    let i: u32 = global_idx % N;\\\\n\\\\n    let srcOffsetBatch: u32 = batch * ${y};\\\\n    let dstOffsetBatch: u32 = batch * ${v};\\\\n    var idx = inputIndices[i * indicesElementSize];\\\\n    if (idx < 0) {\\\\n        idx = idx + ${b};\\\\n    }\\\\n\\\\n    let srcOffset = srcOffsetBatch + u32(idx) * ${h};\\\\n    let dstOffset = dstOffsetBatch + i * ${h};\\\\n    if (srcOffset >= ${w}) {\\\\n        return;\\\\n    }\\\\n    if (dstOffset >= ${_}) {\\\\n        return;\\\\n    }\\\\n    for (var j: u32 = 0; j < ${h}; j++) {\\\\n        output[dstOffset + j] = input[srcOffset + j];\\\\n    }\\\\n  }`,dispatchGroup:()=>({x:Math.ceil($/64)})})})(n,e.inputs,t))}},4271:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;const i=n(6952),r=n(387),a=n(1163);t.gemm=(e,t)=>{(e=>{if(!e)throw new Error(\\\"Input is missing\\\");if(e.length<2||e.length>3)throw new Error(\\\"Invaid input number.\\\");if(3===e.length&&e[2].dims.length>2)throw new Error(\\\"Invalid input shape of C\\\");if(1!==e[0].dataType||1!==e[1].dataType||3===e.length&&1!==e[2].dataType)throw new Error(\\\"Invalid input type.\\\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\\\"Input types are mismatched\\\")})(e.inputs),e.compute(((e,t)=>{const n={name:\\\"Gemm\\\",inputTypes:3===e.length?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:t.cacheKey};return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const r=t[0].dims.slice(),o=t[1].dims.slice(),[s,u,l]=i.GemmUtil.getShapeOfGemmResult(r,n.transA,o,n.transB,3===t.length?t[2].dims:void 0),c=[s,u];if(!c)throw new Error(\\\"Can't use gemm on the given tensors\\\");const d=i.ShapeUtil.size(c);let p=\\\"\\\";n.transA&&n.transB?p=\\\"value += a[k * M + m] * b[n * K + k];\\\":n.transA&&!n.transB?p=\\\"value += a[k * M + m] * b[k * N + n];\\\":!n.transA&&n.transB?p=\\\"value += a[m * K + k] * b[n * K + k];\\\":n.transA||n.transB||(p=\\\"value += a[m * K + k] * b[k * N + n];\\\");const f=\\\"f32\\\",h=1===n.alpha?\\\"\\\":\\\"value *= alpha;\\\",g=3===t.length?`value += beta * c[${((e,t,n)=>{if(0===n.length)return\\\"0u\\\";const i=1===n.length&&1!==e||2===n.length&&n[0]!==e,r=n[n.length-1]!==t;let a=\\\"0u\\\";return i||(a+=`+ m * ${n[n.length-1]}u`),r||(a+=\\\"+n\\\"),a})(s,u,t[2].dims)}];`:\\\"\\\",m=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];return 3===t.length&&m.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`),Object.assign(Object.assign({},e),{outputs:[{dims:c,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const M: u32 = ${s}u;\\\\n  const N: u32 = ${u}u;\\\\n  const K: u32 = ${l}u;\\\\n  const alpha = ${f}(${n.alpha});\\\\n  const beta = ${f}(${n.beta});\\\\n\\\\n  ${m.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${t.length}) var<storage, read_write> output : array<${f}>;\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(d)}\\\\n\\\\n    let m = global_id.x / N;\\\\n    let n = global_id.x % N;\\\\n\\\\n    var value = ${f}(0);\\\\n    for (var k: u32 = 0u; k<${l}u; k++) {\\\\n      ${p}\\\\n    }\\\\n\\\\n    ${h}\\\\n    ${g}\\\\n    output[global_id.x] = value;\\\\n\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(d/64)})})})(n,e,t)})})(e.inputs,t))},t.parseGemmAttributes=e=>(0,r.createAttributeWithCacheKey)(e)},1798:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.instanceNorm=t.parseInstanceNormAttributes=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075);t.parseInstanceNormAttributes=e=>(0,r.createAttributeWithCacheKey)({epsilon:e.epsilon,format:e.format}),t.instanceNorm=(e,t)=>{(e=>{if(!e||3!==e.length)throw new Error(\\\"instanceNorm requires 3 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")})(e.inputs);const n={name:\\\"InstanceNormalization\\\",inputTypes:[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default],cacheHint:t.cacheKey};\\\"NHWC\\\"===t.format?e.compute(((e,t,n)=>{const r=t[0].dims,s=r,u=i.ShapeUtil.size(s),l=r[0],c=r[r.length-1],d=i.ShapeUtil.sizeFromDimension(r,1)/c,p=(0,o.tensorTypeToWsglStorageType)(t[0].dataType),f=c*l;return Object.assign(Object.assign({},e),{outputs:[{dims:s,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const N: u32 = ${l};\\\\n  const H: u32 = ${d};\\\\n  const C: u32 = ${c};\\\\n  const normSizeTyped: ${p} = ${d};\\\\n  const imageSize: u32 = ${d*c};\\\\n  const epsilon: f32 = ${n.epsilon};\\\\n\\\\n  @group(0) @binding(0) var<storage, read> x : array<${p}>;\\\\n  @group(0) @binding(1) var<storage, read> scale : array<${p}>;\\\\n  @group(0) @binding(2) var<storage, read> bias : array<${p}>;\\\\n  @group(0) @binding(3) var<storage, read_write> output : array<${p}>;\\\\n\\\\n  ${e.mainStart()}\\\\n    let currentImageNumber = global_idx / C;\\\\n    let currentChannelNumber = global_idx % C;\\\\n    \\\\n    // offset is channel num * N\\\\n    let offset = currentImageNumber * imageSize;\\\\n    if (offset >= ${u}) { return; }\\\\n    var mean: ${p} = 0;\\\\n\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        mean = mean + x[offset + i * C + currentChannelNumber];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n\\\\n    var squaredNorm: ${p} = 0;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\\\\n        squaredNorm = squaredNorm + deviation * deviation;\\\\n    }\\\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\\\n    let channelScale = invStdDev * scale[currentChannelNumber];\\\\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let currentOffset = offset + i * C + currentChannelNumber;\\\\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\\\\n    }\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(f/64)})})})(n,e.inputs,t)):e.compute(((e,t,n)=>{const r=t[0].dims,s=t[1],u=t[2],l=r,c=i.ShapeUtil.size(l),d=i.ShapeUtil.sizeToDimension(r,2),p=i.ShapeUtil.sizeFromDimension(r,2),f=r[1],h=i.ShapeUtil.size(s.dims),g=u?i.ShapeUtil.size(u.dims):0;if(h!==p||u&&g!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\\\\n             Size of scale and bias (if provided) must match this. \\\\n             Got scale size of ${h} and bias size of ${g}`);const m=(0,o.tensorTypeToWsglStorageType)(t[0].dataType);return Object.assign(Object.assign({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const C: u32 = ${f};\\\\n  const normSize: u32 = ${p};\\\\n  const normSizeTyped: ${m} = ${p};\\\\n  const epsilon: f32 = ${n.epsilon};\\\\n\\\\n  @group(0) @binding(0) var<storage, read> x : array<${m}>;\\\\n  @group(0) @binding(1) var<storage, read> scale : array<${m}>;\\\\n  @group(0) @binding(2) var<storage, read> bias : array<${m}>;\\\\n  @group(0) @binding(3) var<storage, read_write> output : array<${m}>;\\\\n\\\\n  ${e.mainStart()}\\\\n    let offset = global_idx * normSize;\\\\n    if (offset + normSize >= ${c}) { return; }\\\\n    var mean: ${m} = 0;\\\\n\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n        mean = mean + x[h + offset];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n\\\\n    var squaredNorm: ${m} = 0;\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n        let deviation: f32 = x[h + offset] - mean;\\\\n        squaredNorm = squaredNorm + deviation * deviation;\\\\n    }\\\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\\\n    let channelScale = invStdDev * scale[global_idx % C];\\\\n    let channelShift = bias[global_idx % C] - mean * channelScale;\\\\n    for (var j: u32 = 0; j < normSize; j++) {\\\\n        output[j + offset] = x[j + offset] * channelScale + channelShift;\\\\n    }\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(d/64)})})})(n,e.inputs,t))}},6145:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.layerNorm=t.parseLayerNormAttributes=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075);t.parseLayerNormAttributes=e=>(0,r.createAttributeWithCacheKey)({axis:e.axis,epsilon:e.epsilon}),t.layerNorm=(e,t)=>{(e=>{if(!e||e.length<2)throw new Error(\\\"layerNorm requires at least 2 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")})(e.inputs);const n={name:\\\"LayerNormalization\\\",inputTypes:2===e.inputs.length?[a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default],cacheHint:t.cacheKey+e.outputCount.toString(10)+e.inputs.length.toString(10)};e.compute(((e,t,n,r)=>{const s=t[0].dims,u=t[1],l=t[2],c=s,d=i.ShapeUtil.size(c),p=i.ShapeUtil.normalizeAxis(n.axis,s.length),f=i.ShapeUtil.sizeToDimension(s,p),h=i.ShapeUtil.sizeFromDimension(s,p),g=i.ShapeUtil.size(u.dims),m=l?i.ShapeUtil.size(l.dims):0;if(g!==h||l&&m!==h)throw new Error(`Size of X.shape()[axis:] == ${h}.\\\\n       Size of scale and bias (if provided) must match this.\\\\n       Got scale size of ${g} and bias size of ${m}`);const y=[];for(let e=0;e<s.length;++e)e<p?y.push(s[e]):y.push(1);const v=(0,o.tensorTypeToWsglStorageType)(t[0].dataType),b=r>1,w=r>2;let _=0;const $=[{dims:c,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}];return b&&$.push({dims:y,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}),w&&$.push({dims:y,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}),Object.assign(Object.assign({},e),{outputs:$,getShaderSource:e=>`\\\\n  const normSize: u32 = ${h};\\\\n  const normSizeTyped: ${v} = ${h};\\\\n  const epsilon: f32 = ${n.epsilon};\\\\n\\\\n  @group(0) @binding(${_++}) var<storage, read> x : array<${v}>;\\\\n  @group(0) @binding(${_++}) var<storage, read> scale : array<${v}>;\\\\n  ${l?`@group(0) @binding(${_++}) var<storage, read> bias : array<${v}>;`:\\\"\\\"}\\\\n  @group(0) @binding(${_++}) var<storage, read_write> output : array<${v}>;\\\\n  ${b?`@group(0) @binding(${_++}) var<storage, read_write> meanDataOutput : array<${v}>`:\\\"\\\"};\\\\n  ${w?`@group(0) @binding(${_++}) var<storage, read_write> invStdOutput : array<${v}>`:\\\"\\\"};\\\\n\\\\n  ${e.mainStart()}\\\\n    let offset = global_idx * normSize;\\\\n    if (offset >= ${d}) { return; }\\\\n    var mean: ${v} = 0;\\\\n    var meanSquare: ${v} = 0;\\\\n\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n      mean = mean + x[h + offset];\\\\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\\\\n\\\\n    for (var j: u32 = 0; j < normSize; j++) {\\\\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] ${l?\\\"+ bias[j]\\\":\\\"\\\"};\\\\n    }\\\\n\\\\n    ${b?\\\"meanDataOutput[global_idx] = mean\\\":\\\"\\\"};\\\\n    ${w?\\\"invStdOutput[global_idx] = 1 / meanSquare\\\":\\\"\\\"};\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(f/64)})})})(n,e.inputs,t,e.outputCount))}},1522:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;const i=n(6952),r=n(1163),a=n(3997);t.createMatmulProgramInfoLoader=(e,t)=>{const n=(o=e.length>2,s=t.activationCacheKey,{name:\\\"MatMul\\\",inputTypes:o?[r.GpuDataType.default,r.GpuDataType.default,r.GpuDataType.default]:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:s});var o,s;return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const o=t[0].dims,s=t[1].dims,u=i.BroadcastUtil.calcShape(o,s,!0);if(!u)throw new Error(\\\"Can't use matmul on the given tensors\\\");const l=i.ShapeUtil.size(u),c=\\\"f32\\\",{activationFunction:d,applyActivation:p}=(0,a.getActicationSnippet)(n),f=u[u.length-2],h=o[o.length-1],g=u[u.length-1];return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:r.GpuDataType.default}],getShaderSource:e=>`\\\\n  const M: u32 = ${f}u;\\\\n  const N: u32 = ${g}u;\\\\n  const K: u32 = ${h}u;\\\\n\\\\n  @group(0) @binding(0) var<storage, read> a : array<${c}>;\\\\n  @group(0) @binding(1) var<storage, read> b : array<${c}>;\\\\n  @group(0) @binding(2) var<storage, read_write> output : array<${c}>;\\\\n\\\\n  ${d}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\\\n\\\\n    let stack = global_idx / (M * N);\\\\n    let mn = global_idx % (M * N);\\\\n    let n = global_idx % N;\\\\n    let m = mn / N;\\\\n\\\\n    let offsetA = stack * (M * K);\\\\n    let offsetB = stack * (K * N);\\\\n\\\\n    var value = ${c}(0);\\\\n    for (var k: u32 = 0u; k<${h}u; k++) {\\\\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\\\\n    }\\\\n    ${p}\\\\n    output[global_idx] = value;\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(l/64)})})})(n,e,t)})},t.matMul=e=>{(e=>{if(!e||2!==e.length)throw new Error(\\\"MatMul requires 2 inputs.\\\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\\\"shared dimension does not match.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")})(e.inputs),e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:\\\"\\\",activationCacheKey:\\\"\\\"}))}},5262:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075),s=e=>{if(!e||1!==e.length)throw new Error(\\\"Pool ops requires 1 input.\\\");if(4!==e[0].dims.length)throw new Error(\\\"Pool ops supports 2-D inputs only for now.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=(e,t,n)=>{const r=\\\"NHWC\\\"===t.format,a=r?[e.dims[0],e.dims[3],e.dims[1],e.dims[2]]:e.dims.slice(),o=Object.hasOwnProperty.call(t,\\\"dilations\\\"),s=t.kernelShape.slice(),u=t.strides.slice(),l=o?t.dilations.slice():[],c=t.pads.slice();i.PoolConvUtil.adjustPoolAttributes(n,a,s,u,l,c);const d=i.PoolConvUtil.computePoolOutputShape(n,a,u,l,s,c,t.autoPad),p=Object.assign({},t);return o?Object.assign(p,{kernelShape:s,strides:u,pads:c,dilations:l,cacheKey:t.cacheKey}):Object.assign(p,{kernelShape:s,strides:u,pads:c,cacheKey:t.cacheKey}),[p,r?[d[0],d[2],d[3],d[1]]:d]},l=(e,t,n,r,a,s,u)=>{const l=\\\"NHWC\\\"===r.format,c=t.shape,d=t.type.value,p=c.length,f=i.ShapeUtil.size(n),h=(0,o.outputVariable)(\\\"output\\\",t.type.tensor,n);if(r.kernelShape.length<=2){const n=r.kernelShape[r.kernelShape.length-1],i=r.strides[r.strides.length-1],o=r.pads[r.pads.length/2-1],g=p-(l?2:1);let m=\\\"\\\",y=\\\"\\\",v=\\\"\\\";if(m=o+r.pads[r.pads.length-1]!==0?`\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                xIndices[${g}] = indices[${g}] * ${i} - ${o} + i;\\\\n                if (xIndices[${g}] < 0 || xIndices[${g}] >= ${c[g]}) {\\\\n                  pad++;\\\\n                  continue;\\\\n                }\\\\n                let x_val = x[${t.indicesToOffset(\\\"xIndices\\\")}];\\\\n                ${a}\\\\n              }`:`\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                xIndices[${g}] = indices[${g}] * ${i} - ${o} + i;\\\\n                let x_val = x[${t.indicesToOffset(\\\"xIndices\\\")}];\\\\n                ${a}\\\\n              }`,2===r.kernelShape.length){const e=r.kernelShape[r.kernelShape.length-2],t=r.strides[r.strides.length-2],i=r.pads[r.pads.length/2-2],a=r.pads[r.pads.length-2],o=p-(l?3:2),s=c[o];y=i+a!==0?`\\\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\\\n                  xIndices[${o}] = indices[${o}] * ${t} - ${i} + j;\\\\n                  if (xIndices[${o}] < 0 || xIndices[${o}] >= ${s}) {\\\\n                    pad+= ${n};\\\\n                    continue;\\\\n                  }\\\\n              `:`\\\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\\\n                  xIndices[${o}] = indices[${o}] * ${t} - ${i} + j;\\\\n                `,v=\\\"\\\\n              }\\\\n            \\\"}return`\\\\n            ${e.declareVariables(t,h)}\\\\n\\\\n            ${e.mainStart()}\\\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(f)}\\\\n\\\\n              let indices = ${h.offsetToIndices(\\\"global_idx\\\")};\\\\n              var xIndices = ${h.offsetToIndices(\\\"global_idx\\\")};\\\\n\\\\n              var value: ${d} = ${d}(${u});\\\\n              var pad = 0;\\\\n              ${y}\\\\n              ${m}\\\\n              ${v}\\\\n              ${s}\\\\n\\\\n              output[global_idx] = value;\\\\n            }`}{if(l)throw new Error(\\\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\\\");const n=i.ShapeUtil.size(r.kernelShape),o=i.ShapeUtil.computeStrides(r.kernelShape),d=o.length,g=r.pads.length;let m=\\\"\\\";return m=r.pads.reduce(((e,t)=>e+t))?`\\\\n                if (xIndices[j] >= inputDims[j]) {\\\\n                  pad++;\\\\n                  isPad = true;\\\\n                  break;\\\\n                }\\\\n              }\\\\n              if (!isPad) {\\\\n                let x_val = x[${t.indicesToOffset(\\\"xIndices\\\")}];\\\\n                ${a}\\\\n              }`:`\\\\n              }\\\\n              let x_val = x[${t.indicesToOffset(\\\"xIndices\\\")}];\\\\n              ${a}\\\\n            `,`\\\\n            ${e.declareVariables(t,h)}\\\\n\\\\n            const pads = array<u32, ${g}>(${r.pads.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const inputDims = array<u32, ${p}>(${c.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const kernelStrides = array<u32, ${d}>(${o.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const strides = array<u32, ${d}>(${r.strides.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n\\\\n            ${e.mainStart()}\\\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(f)}\\\\n\\\\n              let indices = ${h.offsetToIndices(\\\"global_idx\\\")};\\\\n              let xIndices = ${h.offsetToIndices(\\\"global_idx\\\")};\\\\n\\\\n              var offsets: array<u32, ${d}>;\\\\n\\\\n              var value = ${h.type.value}(${u});\\\\n              var pad = 0;\\\\n              var isPad = false;\\\\n\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                var offset = i;\\\\n                for (var j = 0u; j < ${d-1}u; j++) {\\\\n                  offsets[j] = offset / kernelStrides[j];\\\\n                  offset -= offsets[j] * kernelStrides[j];\\\\n                }\\\\n                offsets[${d-1}] = offset;\\\\n\\\\n                isPad = false;\\\\n                for (var j = ${p-d}u; j < ${p}u; j++) {\\\\n                  xIndices[j] = indices[j] * strides[j - ${p-d}u]\\\\n                    + offsets[j - ${p-d}u] - pads[j - 2u];\\\\n                  ${m}\\\\n              }\\\\n              ${s}\\\\n\\\\n              output[global_idx] = value;\\\\n            }`}},c=e=>({format:e.format,autoPad:[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),d=(e,t,n,r)=>{const[s,c]=u(e,r,n),d=i.ShapeUtil.size(s.kernelShape),p=(0,o.inputVariable)(\\\"x\\\",e.dataType,e.dims);let f=\\\"\\\";return s.countIncludePad?f+=`value /= f32(${d});`:f+=`value /= f32(${d} - pad);`,Object.assign(Object.assign({},t),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>l(e,p,c,s,\\\"value += x_val;\\\",f,\\\"0.0\\\"),dispatchGroup:()=>({x:Math.ceil(i.ShapeUtil.size(c)/64)})})};t.parseAveragePoolAttributes=e=>{const t=0!==e.count_include_pad,n=c(e);if(0!==n.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for AveragePool\\\");return(0,r.createAttributeWithCacheKey)(Object.assign({countIncludePad:t},n))},t.averagePool=(e,t)=>{s(e.inputs);const n={name:\\\"AveragePool\\\",inputTypes:[a.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>d(e.inputs[0],n,!1,t)}))};const p={autoPad:\\\"\\\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\\\"\\\"};t.parseGlobalAveragePoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},p),{cacheKey:t})},t.globalAveragePool=(e,t)=>{s(e.inputs);const n={name:\\\"GlobalAveragePool\\\",inputTypes:[a.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>d(e.inputs[0],n,!0,t)}))};const f=(e,t,n,r)=>{const[s,c]=u(e,r,n),d=(0,o.inputVariable)(\\\"x\\\",e.dataType,e.dims);return Object.assign(Object.assign({},t),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>l(e,d,c,s,\\\"\\\\n      value = max(x_val, value);\\\\n    \\\",\\\"\\\",\\\"-1e5\\\"),dispatchGroup:()=>({x:Math.ceil(i.ShapeUtil.size(c)/64)})})};t.maxPool=(e,t)=>{s(e.inputs);const n={name:\\\"MaxPool\\\",inputTypes:[a.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs[0],n,!1,t)}))},t.parseMaxPoolAttributes=e=>{const t=e.storage_order,n=e.dilations,i=c(e);if(0!==t)throw new Error(\\\"column major storage order is not yet supported for MaxPool\\\");if(0!==i.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for MaxPool\\\");return(0,r.createAttributeWithCacheKey)(Object.assign({storageOrder:t,dilations:n},i))},t.parseGlobalMaxPoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},p),{cacheKey:t})},t.globalMaxPool=(e,t)=>{s(e.inputs);const n={name:\\\"GlobalMaxPool\\\",inputTypes:[a.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs[0],n,!0,t)}))}},6031:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseReduceAttributes=t.reduceSumSquare=t.reduceSum=t.reduceProd=t.reduceMin=t.reduceMean=t.reduceMax=t.reduceLogSumExp=t.reduceL2=t.reduceL1=t.reduceLogSum=t.createReduceProgramInfo=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075),s=e=>{if(!e||0===e.length||e.length>2)throw new Error(\\\"Reduce op requires 1 or 2 inputs.\\\");if(2===e.length&&1!==e[1].dims.length)throw new Error(\\\"Invalid axes input dims.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=e=>[\\\"\\\",\\\"\\\",`var value = ${e.getByOffset(\\\"inputOffset\\\")};`,\\\"\\\"];t.createReduceProgramInfo=(e,t,n,r,s,u=!1,l=!1)=>{const c=[],d=t[0].dims,p=i.ShapeUtil.normalizeAxes(r,t[0].dims.length),f=!l&&0===p.length;d.forEach(((e,t)=>{f||p.indexOf(t)>=0?u&&c.push(1):c.push(e)}));const h=[],g=(0,o.inputVariable)(\\\"_A\\\",t[0].dataType,d),m=(0,o.outputVariable)(\\\"output\\\",s,c),y=n(g,m,p),v=`inputOffset = ${g.indicesToOffset(\\\"inputIndices\\\")};`,b=`let ${v};`,w=`var ${v};`,_=\\\"\\\"===y[1]?\\\"\\\":w;let $=(\\\"\\\"===y[1]?b:v)+\\\"\\\\n\\\"+y[2];for(let e=0,n=0;e<t[0].dims.length;e++)f||p.indexOf(e)>=0?(u&&n++,$=`for(var j${e}: u32 = 0; j${e} < ${t[0].dims[e]}; j${e}++) {\\\\n                ${y[2].includes(\\\"lastIndex\\\")?`let lastIndex = j${e};`:\\\"\\\"}\\\\n                ${g.indicesSet(\\\"inputIndices\\\",e,`j${e}`)}\\\\n                ${$}\\\\n              }`):(h.push(`${g.indicesSet(\\\"inputIndices\\\",e,m.indicesGet(\\\"outputIndices\\\",n))};`),n++);const C=i.ShapeUtil.size(c);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\\\n        ${e.declareVariables(g,m)}\\\\n\\\\n        ${e.mainStart()}\\\\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes(C)}\\\\n          var inputIndices: ${g.type.indices};\\\\n          let outputIndices = ${m.offsetToIndices(\\\"global_idx\\\")};\\\\n\\\\n          ${h.join(\\\"\\\\n\\\")}\\\\n          ${y[0]}       // init ops for reduce max/min\\\\n          ${_}\\\\n          ${y[1]}\\\\n          ${$}\\\\n          ${y[3]}\\\\n          ${4===y.length?m.setByOffset(\\\"global_idx\\\",\\\"value\\\"):y.slice(4).join(\\\"\\\\n\\\")}\\\\n        }`,outputs:[{dims:c,dataType:s,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(C/64)})})};const l=(e,n,i,o)=>{const s=1===e.length?i:((e,t)=>{const n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),(0,r.createAttributeWithCacheKey)({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})})(e,i),l={name:n,inputTypes:[a.GpuDataType.default],cacheHint:s.cacheKey+\\\"_\\\"+e[0].dims.map((e=>e.toString())).join(\\\",\\\")};return Object.assign(Object.assign({},l),{get:()=>(0,t.createReduceProgramInfo)(l,[e[0]],s.noopWithEmptyAxes&&0===s.axes.length?u:o,s.axes,e[0].dataType,s.keepDims,s.noopWithEmptyAxes)})};t.reduceLogSum=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSum\\\",t,((e,t)=>[`var value = ${t.type.storage}(0);`,\\\"\\\",`value += ${e.getByOffset(\\\"inputOffset\\\")};`,\\\"value = log(value);\\\"])),{inputs:[0]})},t.reduceL1=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceL1\\\",t,((e,t)=>[`var value = ${t.type.storage}(0);`,\\\"\\\",`value += abs(${e.getByOffset(\\\"inputOffset\\\")});`,\\\"\\\"])),{inputs:[0]})},t.reduceL2=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceL2\\\",t,((e,t)=>[`var t = f32(0); var value = ${t.type.storage}(0);`,\\\"\\\",`t = ${e.getByOffset(\\\"inputOffset\\\")}; value += (t * t);`,\\\"value = sqrt(value);\\\"])),{inputs:[0]})},t.reduceLogSumExp=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSumExp\\\",t,((e,t)=>[`var value = ${t.type.storage}(0);`,\\\"\\\",`value += exp(${e.getByOffset(\\\"inputOffset\\\")});`,\\\"value = log(value);\\\"])),{inputs:[0]})},t.reduceMax=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceMax\\\",t,((e,t,n)=>{const i=[];for(let t=0;t<e.shape.length;t++)(n.indexOf(t)>=0||0===n.length)&&i.push(e.indicesSet(\\\"inputIndices\\\",t,0));return[`${i.join(\\\"\\\\n\\\")}`,`var value = ${e.getByOffset(\\\"inputOffset\\\")};`,`value = max(value, ${e.getByOffset(\\\"inputOffset\\\")});`,\\\"\\\"]})),{inputs:[0]})},t.reduceMean=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceMean\\\",t,((e,t,n)=>{let i=1;for(let t=0;t<e.shape.length;t++)(n.indexOf(t)>=0||0===n.length)&&(i*=e.shape[t]);return[`var value = ${t.type.storage}(0);`,\\\"\\\",`value += ${e.getByOffset(\\\"inputOffset\\\")};`,`value = value / ${i}.;`]})),{inputs:[0]})},t.reduceMin=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceMin\\\",t,((e,t,n)=>{const i=[];for(let t=0;t<e.shape.length;t++)(n.indexOf(t)>=0||0===n.length)&&i.push(`inputIndices[${t}] = 0;`);return[`${i.join(\\\"\\\\n\\\")}`,`var value = ${e.getByOffset(\\\"inputOffset\\\")};`,`value = min(value, ${e.getByOffset(\\\"inputOffset\\\")});`,\\\"\\\"]})),{inputs:[0]})},t.reduceProd=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceProd\\\",t,((e,t)=>[`var value = ${t.type.storage}(1);`,\\\"\\\",`value *= ${e.getByOffset(\\\"inputOffset\\\")};`,\\\"\\\"])),{inputs:[0]})},t.reduceSum=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceSum\\\",t,((e,t)=>[`var value = ${t.type.storage}(0);`,\\\"\\\",`value += ${e.getByOffset(\\\"inputOffset\\\")};`,\\\"\\\"])),{inputs:[0]})},t.reduceSumSquare=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceSumSquare\\\",t,((e,t)=>[`var t = f32(0); var value = ${t.type.storage}(0);`,\\\"\\\",`t = ${e.getByOffset(\\\"inputOffset\\\")}; value += t * t;`,\\\"\\\"])),{inputs:[0]})},t.parseReduceAttributes=e=>(0,r.createAttributeWithCacheKey)(e)},4566:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseResizeAttributes=t.resize=t.createResizeProgramInfoLoader=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075);t.createResizeProgramInfoLoader=(e,t,n,r,s,u)=>{const l={name:\\\"Resize\\\",inputTypes:[a.GpuDataType.default],cacheHint:t.cacheKey+n.toString()+(r.length>0?\\\"_scales_\\\"+r.toString():\\\"\\\")+(s.length>0?\\\"_sizes_\\\"+s.toString():\\\"\\\")};return Object.assign(Object.assign({},l),{get:()=>((e,t,n,r,s,u,l)=>{const c=t.dims,d=((e,t,n)=>{const i=new Array(n).fill(0).concat(new Array(n).fill(1)),r=0===e.length?i:e.slice();return t.length>0?(t.forEach(((e,a)=>{i[e]=r[a],i[a+n]=r[t.length+a]})),i):r})(l,n.axes,c.length);let p=((e,t,n,i)=>{let r=[];if(n.length>0)if(i.length>0){if(e.forEach((e=>r.push(e))),Math.max(...i)>e.length)throw new Error(\\\"axes is out of bound\\\");i.forEach(((e,t)=>r[e]=n[t]))}else n.forEach((e=>r.push(e)));else{if(0===t.length)throw new Error(\\\"Resize requires either scales or sizes.\\\");r=e.map(((e,n)=>Math.round(e*t[n])))}return r})(c,s,u,n.axes),f=s.slice();0===s.length&&(f=c.map(((e,t)=>0===e?1:p[t]/e)),\\\"stretch\\\"!==n.keepAspectRatioPolicy&&(p=((e,t,n,i)=>{const r=(()=>{switch(i.keepAspectRatioPolicy){case\\\"not_larger\\\":return i.axes.length>0?Math.min(...i.axes.map((e=>n[e])),Number.MAX_VALUE):Math.min(...n,Number.MAX_VALUE);case\\\"not_smaller\\\":return i.axes.length>0?Math.max(...i.axes.map((e=>n[e])),Number.MIN_VALUE):Math.max(...n,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${i.keepAspectRatioPolicy} is not supported`)}})();n.fill(1,0,n.length);const a=e.slice();return i.axes.length>0?(i.axes.forEach((e=>n[e]=r)),i.axes.forEach((t=>a[t]=Math.round(e[t]*n[t])))):(n.fill(r,0,n.length),a.forEach(((e,t)=>a[t]=Math.round(e*n[t])))),a})(c,0,f,n)));const h=(0,o.outputVariable)(\\\"output\\\",t.dataType,p),g=(0,o.inputVariable)(\\\"input\\\",t.dataType,c),m=i.ShapeUtil.size(p),y=c.length===p.length&&c.every(((e,t)=>e===p[t])),v=\\\"tf_crop_and_resize\\\"===n.coordinateTransformMode;return Object.assign(Object.assign({},e),{getShaderSource:e=>{return`\\\\n      ${t=n.coordinateTransformMode,\\\"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { \\\"+(()=>{switch(t){case\\\"asymmetric\\\":return\\\"return xResized / xScale;\\\";case\\\"pytorch_half_pixel\\\":return\\\"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }\\\";case\\\"tf_half_pixel_for_nn\\\":return\\\"return (xResized + 0.5) / xScale;\\\";case\\\"align_corners\\\":return\\\"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }\\\";case\\\"tf_crop_and_resize\\\":return\\\"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }\\\";case\\\"half_pixel_symmetric\\\":return[\\\"const outputWidth = xScale * lengthResized;\\\",\\\"const adjustment = lengthResized / outputWidth;\\\",\\\"const center = lengthOriginal / 2;\\\",\\\"const offset = center * (1 - adjustment);\\\",\\\"return offset + ((xResized + 0.5) / xScale) - 0.5;\\\"].join(\\\"\\\\n\\\");case\\\"half_pixel\\\":return\\\"return ((xResized + 0.5) / xScale) - 0.5;\\\";default:throw new Error(`Coordinate transform mode ${t} is not supported`)}})()+\\\"}\\\"};\\\\n      ${(()=>{switch(n.mode){case\\\"nearest\\\":return`\\\\n              ${((e,t)=>`\\\\n    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {\\\\n      const inputShape = array<u32, ${t.length}>(${t.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n      for (var i:u32 = 0; i < ${t.length}; i++) {\\\\n        var inputIndex = ${1===t.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\"};\\\\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\\\\n          return false;\\\\n        }\\\\n      }\\\\n      return true;\\\\n    }`)(g,c)};\\\\n              ${((e,t)=>\\\"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {\\\"+(()=>{switch(e){case\\\"round_prefer_ceil\\\":return\\\"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }\\\";case\\\"floor\\\":return\\\"return floor(xOriginal);\\\";case\\\"ceil\\\":return\\\"return ceil(xOriginal);\\\";case\\\"round_prefer_floor\\\":return\\\"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }\\\";default:if(t<11)return\\\"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }\\\";throw new Error(`Nearest mode ${e} is not supported`)}})()+\\\"}\\\")(n.nearestMode,r)};\\\\n              ${((e,t,n,i,r,a,o)=>`\\\\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\\\\n        const inputShape = array<u32, ${n.length}>(${n.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const outputShape = array<u32, ${i.length}>(${i.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const scales = array<f32, ${r.length}>(${r.map((e=>`${e}f`)).join(\\\",\\\")});\\\\n        const roi = array<f32, ${a.length}>(${a.map((e=>`${e}f`)).join(\\\",\\\")});\\\\n        var inputIndices: ${e.type.indices};\\\\n        for (var i:u32 = 0; i < ${i.length}; i++) {\\\\n          var outputIndex = ${1===i.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\"};\\\\n          var inputIndex: u32;\\\\n          if (scales[i] == 1.0) {\\\\n            inputIndex = outputIndex;\\\\n          } else {\\\\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${n.length}]);\\\\n            if (!${o} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\\\\n              if (original_idx < 0) {\\\\n                inputIndex = 0;\\\\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\\\\n                inputIndex = inputShape[i] - 1;\\\\n              } else {\\\\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\\\\n              }\\\\n            } else {\\\\n              inputIndex = u32(original_idx);\\\\n            }\\\\n          }\\\\n          ${e.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputIndex\\\")}\\\\n        }\\\\n        return inputIndices;\\\\n    }`)(g,h,c,p,f,d,v)};\\\\n              `;case\\\"linear\\\":return`\\\\n              ${((e,t,n,i,r)=>`\\\\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<f32, ${n.length}> {\\\\n      const inputShape = array<u32, ${t.length}>(${t.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n      const outputShape = array<u32, ${n.length}>(${n.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n      const scales = array<f32, ${i.length}>(${i.map((e=>`${e}f`)).join(\\\",\\\")});\\\\n      const roi = array<f32, ${r.length}>(${r.map((e=>`${e}f`)).join(\\\",\\\")});\\\\n      var originalIndices: array<f32, ${n.length}>;\\\\n      for (var i:u32 = 0; i < ${n.length}; i++) {\\\\n        var outputIndex = ${1===n.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\"};\\\\n        if (scales[i] == 1.0) {\\\\n          originalIndices[i] = f32(outputIndex);\\\\n        } else {\\\\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${t.length}]);\\\\n        }\\\\n      }\\\\n      return originalIndices;\\\\n    }`)(h,c,p,f,d)};\\\\n              ${((e,t,n,i,r,a,o)=>{const[s,u,l,c]=2===n.length?[-1,0,1,-1]:1===r[1]?[0,2,3,1]:[0,1,2,3];return`\\\\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\\\\n      var inputIndices: ${e.type.indices};\\\\n      inputIndices[${u}] = max(0, min(row, ${n[u]} - 1));\\\\n      inputIndices[${l}] = max(0, min(col, ${n[l]} - 1));\\\\n      if (${n.length} > 2) {\\\\n        inputIndices[${c}] = channel;\\\\n        inputIndices[${s}] = batch;\\\\n      };\\\\n      return input[${e.indicesToOffset(\\\"inputIndices\\\")}];\\\\n    }\\\\n\\\\n    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> f32 {\\\\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\\\\n      var row:f32 = originalIndices[${u}];\\\\n      var col:f32 = originalIndices[${l}];\\\\n      if (${a} && (row < 0 || row > (${n[u]} - 1) || col < 0 || col > ${n[l]} - 1)) {\\\\n        return ${o};\\\\n      }\\\\n      row = max(0, min(row, ${n[u]} - 1));\\\\n      col = max(0, min(col, ${n[l]} - 1));\\\\n      var row1: u32 = u32(row);\\\\n      var col1: u32 = u32(col);\\\\n      var row2: u32 = u32(row + 1);\\\\n      var col2: u32 = u32(col + 1);\\\\n      var channel: u32 = 0;\\\\n      var batch: u32 = 0;\\\\n      if (${n.length>2}) {\\\\n        channel = u32(originalIndices[${c}]);\\\\n        batch = u32(originalIndices[${s}]);\\\\n      }\\\\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\\\\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\\\\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\\\\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\\\\n      var dx1: f32 = row - f32(row1);\\\\n      var dx2: f32 = f32(row2 ) - row;\\\\n      var dy1 = col - f32(col1);\\\\n      var dy2 = f32(col2) - col;\\\\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\\\\n    }`})(g,h,c,0,f,v,n.extrapolationValue)};\\\\n              `;case\\\"cubic\\\":return`\\\\n            ${((e,t,n,i,r,a,o,s,u,l)=>{const[c,d]=2===n.length?[0,1]:1===r[1]?[2,3]:[1,2],p=o=>{const d=o===c?\\\"row\\\":\\\"col\\\";return`\\\\n      fn ${d}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> f32 {\\\\n        var outputIndex = ${1===i.length?\\\"outputIndices\\\":`outputIndices[${o}]`};\\\\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${r[o]},\\\\n        f32(${i[o]}), f32(${n[o]}), ${a[o]}, ${a[o]} + ${n.length});\\\\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\\\\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\\\\n\\\\n        if (${s} && (originalIdx < 0 || originalIdx > (${n[o]} - 1))) {\\\\n          return ${u};\\\\n        }\\\\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n        for (var i: i32 = -1; i < 3; i++) {\\\\n          var ${d}: f32 = originalIdx + f32(i);\\\\n          if (${d} < 0 || ${d} >= ${n[o]}) {\\\\n            if (${l}) {\\\\n              coefs[i + 1] = 0.0;\\\\n              continue;\\\\n            } else if (${s}) {\\\\n              return ${u};\\\\n            } else {\\\\n              ${d} = max(0, min(${d}, ${n[o]} - 1));\\\\n            }\\\\n          }\\\\n          var inputIndicesCopy: ${e.type.indices} = inputIndices;\\\\n          inputIndicesCopy[${o}] = u32(${d});\\\\n          data[i + 1] = ${o===c?`input[${e.indicesToOffset(\\\"inputIndicesCopy\\\")}];`:\\\"\\\\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);\\\"}\\\\n        }\\\\n        return cubicInterpolation1D(data, coefs);\\\\n      }`};return`\\\\n    ${p(c)};\\\\n    ${p(d)};\\\\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\\\\n    var absS = abs(s);\\\\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n    var oneMinusAbsS: f32 = 1.0 - absS;\\\\n    var twoMinusAbsS: f32 = 2.0 - absS;\\\\n    var onePlusAbsS: f32 = 1.0 + absS;\\\\n    coeffs[0] = ((${o} * onePlusAbsS - 5 * ${o}) * onePlusAbsS + 8 * ${o}) * onePlusAbsS - 4 * ${o};\\\\n    coeffs[1] = ((${o} + 2) * absS - (${o} + 3)) * absS * absS + 1;\\\\n    coeffs[2] = ((${o} + 2) * oneMinusAbsS - (${o} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\\\\n    coeffs[3] = ((${o} * twoMinusAbsS - 5 * ${o}) * twoMinusAbsS + 8 * ${o}) * twoMinusAbsS - 4 * ${o};\\\\n    return coeffs;\\\\n  }\\\\n\\\\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\\\\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\\\\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\\\\n  }\\\\n\\\\n  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> f32 {\\\\n    var inputIndices: ${e.type.indices} = outputIndices;\\\\n    return colCubicInterpolation(inputIndices, outputIndices);\\\\n  }\\\\n    `})(g,h,c,p,f,d,n.cubicCoeffA,v,n.extrapolationValue,n.excludeOutside)};\\\\n            `;default:throw Error(\\\"Invalid resize mode\\\")}})()};\\\\n      ${e.declareVariables(g,h)}\\\\n      ${e.mainStart()}\\\\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(m)}\\\\n        if (${y}) {\\\\n          output[global_idx] = input[global_idx];\\\\n        } else {\\\\n          let outputIndices = ${h.offsetToIndices(\\\"global_idx\\\")};\\\\n          var inputIndices: ${g.type.indices};\\\\n          ${(()=>{switch(n.mode){case\\\"nearest\\\":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\\\\n                  if (checkInputIndices(inputIndices)) {\\\\n                    output[global_idx] = input[${g.indicesToOffset(\\\"inputIndices\\\")}];\\\\n                  } else {\\\\n                    output[global_idx] = ${n.extrapolationValue};\\\\n                  }`;case\\\"linear\\\":return\\\"output[global_idx] = bilinearInterpolation(outputIndices);\\\";case\\\"cubic\\\":return\\\"output[global_idx] = bicubicInterpolation(outputIndices);\\\";default:throw Error(`Unsupported resize mode: ${n.mode}`)}})()};\\\\n        }\\\\n      }`;var t},outputs:[{dims:p,dataType:t.dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(m/64)})})})(l,e,t,n,r,s,u)})},t.resize=(e,n)=>{const i=[],r=[],a=[],o=(e=>{const t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]})(e);((e,t,n,i,r,a)=>{const[o,s,u]=n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],l=e[0].dims.length;if(o>0&&e.length>o&&e[o].dims.length>0)e[o].getFloat32Array().forEach((e=>a.push(e)));else if(\\\"tf_crop_and_resize\\\"===t.coordinateTransformMode)throw new Error(\\\"Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize\\\");if(s>0&&e.length>s&&e[s].dims.length>0){if(e[s].getFloat32Array().forEach((e=>i.push(e))),0!==i.length&&i.length!==l&&n>=18&&i.length!==t.axes.length)throw new Error(\\\"Resize requires scales input size to be same as input rank or axes size for opset 18 and up\\\");((e,t)=>{if(e.every((e=>e>0||(()=>{throw new Error(\\\"Resize requires scales input values to be positive\\\")}))),e.length>0)if(\\\"linear\\\"===t.mode){if(!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for linear mode\\\")}else if(\\\"cubic\\\"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for cubic mode\\\")})(i,t),t.axes.length>0&&((e,t,n)=>{t.every((e=>e>=0&&e<n||(()=>{throw new Error(\\\"Resize requires axes input values to be positive and less than rank\\\")})));const i=new Array(n).fill(1);return t.forEach(((t,n)=>i[t]=e[n])),i})(i,t.axes,l).forEach(((e,t)=>i[t]=e))}if(u>0&&e.length>u&&(e[u].getBigInt64Array().forEach((e=>r.push(Number(e)))),r.length!==l||n>=18&&r.length===t.axes.length))throw new Error(\\\"Resize requires sizes input size to be same as input rank or axes size for opset 18 and up\\\");if(t.axes.length>0){if(i.length!==t.axes.length)throw new Error('Resize requires \\\"scales\\\" input size to be of axes rank when axes attributes is specified');if(r.length!==t.axes.length)throw new Error('Resize requires \\\"sizes\\\" input size to be of rank axes rank when axes attributes is specified')}if(void 0!==i&&void 0!==r&&i.length>0&&r.length>l)throw new Error(\\\"Resize requires only of scales or sizes to be specified\\\")})(e.inputs,n,o,i,r,a),e.compute((0,t.createResizeProgramInfoLoader)(e.inputs[0],n,o,i,r,a),{inputs:[0]})},t.parseResizeAttributes=e=>{const t=e.antialias,n=e.axes,i=e.coordinateTransformMode,a=e.cubicCoeffA,o=0!==e.excludeOutside,s=e.extrapolationValue,u=e.keepAspectRatioPolicy,l=e.mode,c=\\\"\\\"===e.nearestMode?\\\"simple\\\":e.nearestMode;return(0,r.createAttributeWithCacheKey)({antialias:t,axes:n,coordinateTransformMode:i,cubicCoeffA:a,excludeOutside:o,extrapolationValue:s,keepAspectRatioPolicy:u,mode:l,nearestMode:c})}},8906:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSkipLayerNormAttributes=t.skipLayerNorm=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075);t.skipLayerNorm=(e,t)=>{(e=>{if(!e||e.length<3)throw new Error(\\\"layerNorm requires at least 3 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\");const t=e[0],n=e[1],i=e[2];if(t.dataType!==n.dataType||t.dataType!==i.dataType)throw new Error(\\\"All inputs must have the same data type\\\");if(3!==t.dims.length&&2!==t.dims.length)throw new Error(\\\"Input must be 2D or 3D\\\");if(3!==n.dims.length&&2!==n.dims.length)throw new Error(\\\"Skip must be 2D or 3D\\\");const r=t.dims[t.dims.length-1],a=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==r)throw new Error(\\\"Skip must have the same hidden size as input\\\");if(n.dims[n.dims.length-2]!==a)throw new Error(\\\"Skip must have the same sequence length as input\\\");if(1!==i.dims.length)throw new Error(\\\"Gamma must be 1D\\\");if(i.dims[i.dims.length-1]!==r)throw new Error(\\\"Gamma must have the same hidden size as input\\\");if(e.length>3){const t=e[3];if(1!==t.dims.length)throw new Error(\\\"Beta must be 1D\\\");if(t.dims[t.dims.length-1]!==r)throw new Error(\\\"Beta must have the same hidden size as input\\\")}if(e.length>4){const t=e[4];if(1!==t.dims.length)throw new Error(\\\"Bias must be 1D\\\");if(t.dims[t.dims.length-1]!==r)throw new Error(\\\"Bias must have the same hidden size as input\\\")}})(e.inputs);const n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(((e,t,n,r)=>{const s={name:\\\"SkipLayerNormalization\\\",inputTypes:new Array(e.length).fill(a.GpuDataType.default),cacheHint:t.cacheKey};return Object.assign(Object.assign({},s),{get:()=>((e,t,n,r,s)=>{const u=t[0].dims,l=u,c=i.ShapeUtil.size(u),d=u.slice(-1)[0],p=s?u.slice(0,-1).concat(1):[],f=t.length>3,h=t.length>4,g=(0,o.tensorTypeToWsglStorageType)(t[0].dataType),m=s&&r>1,y=s&&r>2,v=r>3;let b=0;const w=[{dims:l,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}];return r>1&&w.push({dims:p,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}),r>2&&w.push({dims:p,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}),r>3&&w.push({dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}),Object.assign(Object.assign({},e),{getShaderSource:e=>`\\\\n      const hiddenSize: u32 = ${d};\\\\n      const epsilon: f32 = ${n.epsilon};\\\\n\\\\n      @group(0) @binding(${b++}) var<storage, read> x : array<${g}>;\\\\n      @group(0) @binding(${b++}) var<storage, read> skip : array<${g}>;\\\\n      @group(0) @binding(${b++}) var<storage, read> gamma : array<${g}>;\\\\n      ${f?`@group(0) @binding(${b++}) var<storage, read> beta : array<${g}>;`:\\\"\\\"}\\\\n      ${h?`@group(0) @binding(${b++}) var<storage, read> bias : array<${g}>;`:\\\"\\\"}\\\\n      @group(0) @binding(${b++}) var<storage, read_write> output : array<${g}>;\\\\n      ${m?`@group(0) @binding(${b++}) var<storage, read_write> meanOutput : array<${g}>;`:\\\"\\\"}\\\\n      ${y?`@group(0) @binding(${b++}) var<storage, read_write> invStdOutput : array<${g}>;`:\\\"\\\"}\\\\n      ${v?`@group(0) @binding(${b++}) var<storage, read_write> inputSkipBiasSum : array<${g}>;`:\\\"\\\"}\\\\n\\\\n      ${e.mainStart()}\\\\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(c/d)}\\\\n        let offset = global_idx * hiddenSize;\\\\n        var sum: f32 = 0.0;\\\\n        var squareSum: f32 = 0.0;\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          let skipValue = skip[offset + i];\\\\n          let biasValue = ${h?\\\"bias[i]\\\":\\\"0.0\\\"};\\\\n          let inputValue = x[offset + i];\\\\n          let value = inputValue + skipValue + biasValue;\\\\n          ${v?\\\"inputSkipBiasSum[offset + i] = value;\\\":\\\"\\\"}\\\\n          output[offset + i] = value;\\\\n          sum += value;\\\\n          squareSum += value * value;\\\\n        }\\\\n        let mean: f32 = sum / f32(hiddenSize);\\\\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\\\\n        ${m?\\\"meanOutput[global_idx] = mean;\\\":\\\"\\\"}\\\\n        ${y?\\\"invStdOutput[global_idx] = 1.0 / variance;\\\":\\\"\\\"}\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + ${f?\\\"beta[i]\\\":\\\"0.0\\\"};\\\\n        }\\\\n      }`,outputs:w,dispatchGroup:()=>({x:Math.ceil(c/d/64)})})})(s,e,t,n,r)})})(e.inputs,t,e.outputCount,!1),{outputs:n})},t.parseSkipLayerNormAttributes=e=>{const t=e.epsilon;return(0,r.createAttributeWithCacheKey)({epsilon:t})}},5101:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSliceAttributes=t.slice=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075),s=(e,t)=>{const n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((e=>n.push(Number(e))));else{if(6!==e[t].dataType)throw new Error(`Input ${t} must be an array of int32 or int64`);e[t].getInt32Array().forEach((e=>n.push(Number(e))))}return n},u=(e,t,n,i,r)=>{let a=e;return e<0&&(a+=n[i[t]]),r[t]<0?Math.max(0,Math.min(a,n[i[t]]-1)):Math.max(0,Math.min(a,n[i[t]]))};t.slice=(e,t)=>{((e,t)=>{if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error(\\\"axes, starts and ends must have the same length\\\")}else if(t.starts.length!==t.ends.length)throw new Error(\\\"starts and ends must have the same length\\\");e.slice(1).forEach(((t,n)=>{if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(`Input ${n} must be an array of int32 or int64`)}))})(e.inputs,t);const n=((e,t)=>{const n=((e,t)=>{if(e.length>1){const t=s(e,1),n=s(e,2);let i=s(e,3);return 0===i.length&&(i=[...Array(e[0].dims.length).keys()]),(0,r.createAttributeWithCacheKey)({starts:t,ends:n,axes:i})}return t})(e,t),l={name:\\\"Slice\\\",inputTypes:[a.GpuDataType.default],cacheHint:n.cacheKey+(e.length>4?\\\"steps_\\\"+e[4].dims.toString():\\\"\\\")};return Object.assign(Object.assign({},l),{get:()=>((e,t,n)=>{const r=t[0].dims,l=i.ShapeUtil.size(r),c=n.axes.length>0?i.ShapeUtil.normalizeAxes(n.axes,r.length):[...Array(r.length).keys()];let d=s(t,4);d.forEach((e=>0!==e||(()=>{throw new Error(\\\"step cannot be 0\\\")}))),0===d.length&&(d=Array(c.length).fill(1));const p=n.starts.map(((e,t)=>u(e,t,r,c,d))),f=n.ends.map(((e,t)=>u(e,t,r,c,d)));if(c.length!==r.length)for(let e=0;e<r.length;++e)c.includes(e)||(p.splice(e,0,0),f.splice(e,0,r[e]),d.splice(e,0,1));const h=d.map((e=>Math.sign(e)));d.forEach(((e,t,n)=>{if(e<0){const i=(f[t]-p[t])/e,r=p[t],a=r+i*d[t];p[t]=a,f[t]=r,n[t]=-e}}));const g=r.slice(0);c.forEach(((e,t)=>{g[e]=Math.ceil((f[e]-p[e])/d[e])}));const m={dims:g,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default},y=(0,o.outputVariable)(\\\"output\\\",t[0].dataType,g),v=(0,o.inputVariable)(\\\"input\\\",t[0].dataType,r),b=i.ShapeUtil.size(g);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\\\n      ${e.declareVariables(v,y)}\\\\n        const signs = array<i32, ${h.length}>(${h.map((e=>`${e}i`)).join(\\\",\\\")});\\\\n        const starts = array<u32, ${p.length}>(${p.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const ends = array<u32, ${f.length}>(${f.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const steps = array<u32, ${d.length}>(${d.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const inputShape = array<u32, ${r.length}>(${r.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n\\\\n        ${((e,t,n,i)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\\\\n          var inputIndices: ${e.type.indices};\\\\n          var carry = 0u;\\\\n          for (var i = ${n.length}; i >= 0; i--) {\\\\n            var outputIndex = ${1===i.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\"};\\\\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\\\\n            carry = inputIndex / inputShape[i];\\\\n            inputIndex = inputIndex % inputShape[i];\\\\n            if (signs[i] < 0) {\\\\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\\\\n            }\\\\n            ${1===n.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\"} = inputIndex;\\\\n          }\\\\n          return inputIndices;\\\\n      }`)(v,y,r,g)}\\\\n        ${e.mainStart()}\\\\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)}\\\\n          let outputIndices = ${y.offsetToIndices(\\\"global_idx\\\")};\\\\n          let inputIndices = calculateInputIndices(outputIndices);\\\\n          ${y.setByOffset(\\\"global_idx\\\",v.getByIndices(\\\"inputIndices\\\"))}\\\\n      }`,outputs:[m],dispatchGroup:()=>({x:Math.ceil(l/64)})})})(l,e,n)})})(e.inputs,t),l=n.get();if(!(i.ShapeUtil.size(l.outputs[0].dims)>0))throw new Error(\\\"slice: output size is 0\\\");e.compute(n,{inputs:[0]})},t.parseSliceAttributes=e=>{const t=e.starts,n=e.ends,i=e.axes;return(0,r.createAttributeWithCacheKey)({starts:t,ends:n,axes:i})}},6198:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSoftmaxAttributes=t.softmax=t.softmaxProgramMetadata=void 0;const i=n(6952),r=n(387),a=n(1163);t.softmaxProgramMetadata={name:\\\"Softmax\\\",inputTypes:[a.GpuDataType.default]},t.softmax=(e,n)=>{(e=>{if(!e||1!==e.length)throw new Error(\\\"Softmax op requires 1 input.\\\");if(1!==e[0].dataType)throw new Error(\\\"Softmax input needs to be float.\\\")})(e.inputs),e.compute(Object.assign(Object.assign({},t.softmaxProgramMetadata),{cacheHint:n.cacheKey,get:()=>((e,n)=>{const r=\\\"f32\\\",o=e.dims,s=i.ShapeUtil.size(o);let u=n.axis;if(u<0&&(u=o.length+u),u<o.length-1)throw new Error(\\\"softmax only supports last axis for now.\\\");const l=o[u],c=s/l;return Object.assign(Object.assign({},t.softmaxProgramMetadata),{outputs:[{dims:o,dataType:e.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n      var<workgroup> rowMaxShared : ${r};\\\\n      var<workgroup> rowSumShared : ${r};\\\\n      var<workgroup> threadShared : array<${r}, 64>;\\\\n\\\\n      @group(0) @binding(0) var<storage, read> x : array<${r}>;\\\\n      @group(0) @binding(1) var<storage, read_write> result : array<${r}>;\\\\n\\\\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${r} {\\\\n        let index = row * row_stride + col;\\\\n        return x[index];\\\\n      }\\\\n\\\\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${r}) {\\\\n        let index = row * row_stride + col;\\\\n        result[index] = value;\\\\n      }\\\\n\\\\n      @compute @workgroup_size(64, 1, 1)\\\\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\\\\n        let gindex = i32(global_id.x);\\\\n        let lindex = i32(local_id.x);\\\\n        const wg = 64;\\\\n        let row = gindex / wg;\\\\n        let cols = ${l};\\\\n        let row_stride : i32 = ${l};\\\\n\\\\n        // find the rows max\\\\n        var threadMax = -3.402823e+38f; // 6.2.4 in wgsl spec\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = getValue(row, col, row_stride);\\\\n          threadMax = max(threadMax, value);\\\\n        }\\\\n        if (lindex < cols) {\\\\n          threadShared[lindex] = threadMax;\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        var reduceSize = min(cols, wg);\\\\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\\\\n          reduceSize = currSize + (reduceSize & 1);\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowMaxShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // find the rows sum\\\\n        var threadSum = 0.0;\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\\\\n          threadSum += subExp;\\\\n        }\\\\n        threadShared[lindex] = threadSum;\\\\n        workgroupBarrier();\\\\n\\\\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowSumShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // calculate final value for each element in the row\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\\\\n          setValue(row, col, row_stride, value);\\\\n        }\\\\n      }`,dispatchGroup:()=>({x:c})})})(e.inputs[0],n)}))},t.parseSoftmaxAttributes=e=>(0,r.createAttributeWithCacheKey)({axis:e.axis})},2067:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSplitAttributes=t.split=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075);t.split=(e,t)=>{(e=>{if(!e||e.length<1)throw new Error(\\\"too few inputs\\\")})(e.inputs),e.compute(((e,t)=>{const n=1===e.length?t:((e,t)=>{const n=[];let i=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),i=n.length),(0,r.createAttributeWithCacheKey)({numOutputs:i,axis:t.axis,splitSizes:n})})(e,t),s={name:\\\"Split\\\",inputTypes:[a.GpuDataType.default],cacheHint:n.cacheKey};return Object.assign(Object.assign({},s),{get:()=>((e,t,n)=>{const r=t[0].dims,s=i.ShapeUtil.size(r),u=t[0].dataType,l=r.length,c=n.axis,d=c<0?r.length+c:c,p=new Array(n.numOutputs),f=(0,o.inputVariable)(\\\"input\\\",u,r),h=new Array(n.numOutputs),g=[],m=[];let y=0;for(let e=0;e<n.numOutputs;e++){y+=n.splitSizes[e],h[e]=y;const i=r.slice();i[n.axis]=n.splitSizes[e],m.push(i),p[e]=(0,o.outputVariable)(`output${e}`,u,m[e]),g.push({dims:m[e],dataType:t[0].dataType,gpuDataType:a.GpuDataType.default})}const v=l<2?\\\"indices\\\":`indices[${d}]`;return Object.assign(Object.assign({},e),{getShaderSource:e=>{return`\\\\n  ${e.declareVariables(f,...p)}\\\\n  const sizeInConcatAxis = array<u32, ${h.length}>(${h.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n  ${t=h.length,`\\\\nfn calculateOutputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < ${t}u; i += 1u ) {\\\\n    if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n    }\\\\n    }\\\\n    return ${t}u;\\\\n}`}\\\\n  ${(e=>{const t=e.length,n=[];for(let i=0;i<t;++i){const r=e[i].setByIndices(\\\"indices\\\",\\\"input[global_idx]\\\");1===t?n.push(r):0===i?n.push(`if (outputNumber == ${i}u) { ${r} }`):i===t-1?n.push(`else { ${r} }`):n.push(`else if (outputNumber == ${i}) { ${r} }`)}return`\\\\n      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {\\\\n        ${n.join(\\\"\\\\n\\\")}\\\\n      }`})(p)}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(s)}\\\\n\\\\n    var indices = ${f.offsetToIndices(\\\"global_idx\\\")};\\\\n    let outputNumber = calculateOutputIndex(${v});\\\\n    if (outputNumber != 0) {\\\\n        ${v} -= sizeInConcatAxis[outputNumber - 1u];\\\\n    }\\\\n    writeBufferData(outputNumber, indices, global_idx);\\\\n  }`;var t},outputs:g,dispatchGroup:()=>({x:Math.ceil(s/64)})})})(s,[e[0]],n)})})(e.inputs,t),{inputs:[0]})},t.parseSplitAttributes=e=>{const t=e.axis,n=e.splitSizes,i=e.numOutputs<0?n.length:e.numOutputs;if(i!==n.length)throw new Error(\\\"numOutputs and splitSizes lengh must be equal\\\");return(0,r.createAttributeWithCacheKey)({axis:t,numOutputs:i,splitSizes:n})}},8699:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.tile=t.createTileProgramInfo=t.tileProgramMetadata=void 0;const i=n(6952),r=n(1163),a=n(2075);t.tileProgramMetadata={name:\\\"Tile\\\",inputTypes:[r.GpuDataType.default]};const o=e=>Array.from(e.getBigInt64Array(),Number);t.createTileProgramInfo=(e,t)=>{const n=t[0].dims,s=o(t[1]),u=((e,t)=>{const n=[];for(let i=0;i<e.length;++i)n.push(e[i]*t[i]);return n})(n,s),l=i.ShapeUtil.size(u),c=t[0].dataType,d=(0,a.inputVariable)(\\\"input\\\",c,n),p=(0,a.outputVariable)(\\\"output\\\",c,u);return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:r.GpuDataType.default}],getShaderSource:e=>`\\\\n      const inputShape = ${d.indices(...n)};\\\\n      ${e.declareVariables(d,p)}\\\\n      ${e.mainStart()}\\\\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\\\n      let outputIndices = ${p.offsetToIndices(\\\"global_idx\\\")};\\\\n      var inputIndices: ${d.type.indices};\\\\n      for (var i = 0; i < ${n.length}; i++) {\\\\n        let inputDimValue = ${p.indicesGet(\\\"outputIndices\\\",\\\"i\\\")}  % ${d.indicesGet(\\\"inputShape\\\",\\\"i\\\")};\\\\n\\\\n        ${d.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputDimValue\\\")}\\\\n      }\\\\n      ${p.setByOffset(\\\"global_idx\\\",d.getByIndices(\\\"inputIndices\\\"))}\\\\n    }`,dispatchGroup:()=>({x:Math.ceil(l/64)})})},t.tile=e=>{(e=>{if(!e||2!==e.length)throw new Error(\\\"Tile requires 2 inputs.\\\");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error(\\\"Tile only support float, int32, and uint32 data types\\\");if(7!==e[1].dataType)throw new Error(\\\"Tile `repeats` input should be of int64 data type\\\");if(1!==e[1].dims.length)throw new Error(\\\"Tile `repeats` input should be 1-D\\\");if(o(e[1]).length!==e[0].dims.length)throw new Error(\\\"Tile `repeats` input should have same number of elements as rank of input data tensor\\\")})(e.inputs);const n=o(e.inputs[1]).toString();e.compute(Object.assign(Object.assign({},t.tileProgramMetadata),{cacheHint:n,get:()=>(0,t.createTileProgramInfo)(t.tileProgramMetadata,e.inputs)}),{inputs:[0]})}},2625:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075);t.transposeProgramMetadata={name:\\\"Transpose\\\",inputTypes:[a.GpuDataType.default]};const s=(e,t)=>t&&t.length!==e.length?[...e.keys()].reverse():t;t.createTransposeProgramInfo=(e,n)=>{const r=e.dataType,u=e.dims,l=s(u,n),c=((e,t)=>i.ShapeUtil.sortBasedOnPerm(e,s(e,t)))(u,l),d=u.length,p=i.ShapeUtil.size(c),f=(0,o.outputVariable)(\\\"output\\\",r,c),h=(0,o.inputVariable)(\\\"a\\\",r,u);return Object.assign(Object.assign({},t.transposeProgramMetadata),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  ${e.declareVariables(h,f)}\\\\n\\\\n  ${((e,t,n,i)=>{const r=[];r.push(`fn perm(i: ${i.type.indices}) -> ${n.type.indices} {\\\\n    var a: ${n.type.indices};`);for(let i=0;i<t;++i)r.push(n.indicesSet(\\\"a\\\",e[i],`i[${i}]`));return r.push(\\\"return a;}\\\"),r.join(\\\"\\\\n\\\")})(l,d,h,f)}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(p)}\\\\n\\\\n    let indices = ${f.offsetToIndices(\\\"global_idx\\\")};\\\\n    let aIndices = perm(indices);\\\\n\\\\n    ${f.setByOffset(\\\"global_idx\\\",h.getByIndices(\\\"aIndices\\\"))}\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(p/64)})})},t.transpose=(e,n)=>{(e=>{if(!e||1!==e.length)throw new Error(\\\"Transpose requires 1 input.\\\");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error(\\\"Transpose only support float, int32, and uint32 data types\\\")})(e.inputs),e.compute(Object.assign(Object.assign({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:()=>(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm)}))},t.parseTransposeAttributes=e=>(0,r.createAttributeWithCacheKey)({perm:e.perm})},9302:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.log=t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.leakyRelu=t.gelu=t.floor=t.exp=t.erf=t.erfImpl=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.cast=t.parseCastAttributes=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;const i=n(6952),r=n(387),a=n(1163),o=n(2075),s=(e,t,n,r,s,u=e.dataType)=>{const l={name:t,inputTypes:[a.GpuDataType.default],cacheHint:s};return Object.assign(Object.assign({},l),{get:()=>((e,t,n,r,s)=>Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,i,r,a)=>{const s=Math.ceil(t/4);let u=\\\"\\\";u=\\\"string\\\"==typeof r?`${r}(a)`:r(\\\"a\\\");const l=(0,o.inputVariable)(\\\"inputData\\\",n,[s],4),c=(0,o.outputVariable)(\\\"outputData\\\",i,[s],4);return`\\\\n  ${e.declareVariables(l,c)}\\\\n\\\\n  ${null!=a?a:\\\"\\\"}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(s)}\\\\n\\\\n    let a = ${l.getByOffset(\\\"global_idx\\\")};\\\\n    ${c.setByOffset(\\\"global_idx\\\",u)}\\\\n  }`})(e,i.ShapeUtil.size(t.dims),t.dataType,n,r,s),outputs:[{dims:t.dims,dataType:n,gpuDataType:a.GpuDataType.default}],dispatchGroup:e=>({x:Math.ceil(i.ShapeUtil.size(e[0].dims)/64/4)})}))(l,e,u,n,r)})};t.abs=e=>{e.compute(s(e.inputs[0],\\\"Abs\\\",\\\"abs\\\"))},t.acos=e=>{e.compute(s(e.inputs[0],\\\"Acos\\\",\\\"acos\\\"))},t.acosh=e=>{e.compute(s(e.inputs[0],\\\"Acosh\\\",\\\"acosh\\\"))},t.asin=e=>{e.compute(s(e.inputs[0],\\\"Asin\\\",\\\"asin\\\"))},t.asinh=e=>{e.compute(s(e.inputs[0],\\\"Asinh\\\",\\\"asinh\\\"))},t.atan=e=>{e.compute(s(e.inputs[0],\\\"Atan\\\",\\\"atan\\\"))},t.atanh=e=>{e.compute(s(e.inputs[0],\\\"Atanh\\\",\\\"atanh\\\"))},t.parseCastAttributes=e=>(0,r.createAttributeWithCacheKey)(e),t.cast=(e,t)=>{let n;switch(t.to){case 1:n=\\\"vec4<f32>\\\";break;case 12:n=\\\"vec4<u32>\\\";break;case 6:n=\\\"vec4<i32>\\\";break;case 9:n=\\\"vec4<bool>\\\";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(s(e.inputs[0],\\\"Cast\\\",n,void 0,t.cacheKey,t.to))},t.clipV10=(e,t)=>{e.compute(s(e.inputs[0],\\\"Clip\\\",(e=>`clamp(${e}, clip_min_, clip_max_)`),`\\\\n    const clip_min_: vec4<f32> = vec4(f32(${t.min}));\\\\n    const clip_max_: vec4<f32> = vec4(f32(${t.max}));\\\\n`,t.cacheKey),{inputs:[0]})},t.clip=e=>{const n=(e=>{const t=e.length>=2?e[1].getFloat32Array()[0]:i.MIN_CLIP,n=e.length>=3?e[2].getFloat32Array()[0]:i.MAX_CLIP;return(0,r.createAttributeWithCacheKey)({min:t,max:n})})(e.inputs);(0,t.clipV10)(e,n)},t.ceil=e=>{e.compute(s(e.inputs[0],\\\"Ceil\\\",\\\"ceil\\\"))},t.cos=e=>{e.compute(s(e.inputs[0],\\\"Cos\\\",\\\"cos\\\"))},t.cosh=e=>{e.compute(s(e.inputs[0],\\\"Cosh\\\",\\\"cosh\\\"))},t.parseAlphaAttributes=e=>(0,r.createAttributeWithCacheKey)(e),t.elu=(e,t)=>{e.compute(s(e.inputs[0],\\\"Elu\\\",(e=>`elu_vf32(${e})`),`\\\\n  const elu_alpha_: f32 = f32(${t.alpha});\\\\n\\\\n  fn elu_f32(a: f32) -> f32 {\\\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\\\n  }\\\\n\\\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\\\n  }`,t.cacheKey))},t.erfImpl=e=>`\\\\nconst r0: f32 = 0.3275911;\\\\nconst r1: f32 = 0.254829592;\\\\nconst r2: f32 = -0.284496736;\\\\nconst r3: f32 = 1.421413741;\\\\nconst r4: f32 = -1.453152027;\\\\nconst r5: f32 = 1.061405429;\\\\n\\\\nfn erf_vf32(v: ${e}) -> ${e} {\\\\n  let absv = abs(v);\\\\n  let x = 1.0 / (1.0 + r0 * absv);\\\\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\\\n}`,t.erf=e=>{e.compute(s(e.inputs[0],\\\"Erf\\\",(e=>`erf_vf32(${e})`),(0,t.erfImpl)(\\\"vec4<f32>\\\")))},t.exp=e=>{e.compute(s(e.inputs[0],\\\"Exp\\\",\\\"exp\\\"))},t.floor=e=>{e.compute(s(e.inputs[0],\\\"Floor\\\",\\\"floor\\\"))},t.gelu=e=>{e.compute(s(e.inputs[0],\\\"Gelu\\\",(e=>`0.5 * ${e} * (1.0 + erf_vf32(${e} * 0.7071067811865475))`),(0,t.erfImpl)(\\\"vec4<f32>\\\")))},t.leakyRelu=(e,t)=>{e.compute(s(e.inputs[0],\\\"LeakyRelu\\\",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<f32>(0.0))`),`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},t.neg=e=>{e.compute(s(e.inputs[0],\\\"Neg\\\",(e=>`-${e}`)))},t.reciprocal=e=>{e.compute(s(e.inputs[0],\\\"Reciprocal\\\",(e=>`1.0/${e}`)))},t.relu=e=>{e.compute(s(e.inputs[0],\\\"Relu\\\",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > vec4<f32>(0.0))`)))},t.sigmoid=e=>{e.compute(s(e.inputs[0],\\\"Sigmoid\\\",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},t.sin=e=>{e.compute(s(e.inputs[0],\\\"Sin\\\",\\\"sin\\\"))},t.sinh=e=>{e.compute(s(e.inputs[0],\\\"Sinh\\\",\\\"sinh\\\"))},t.sqrt=e=>{e.compute(s(e.inputs[0],\\\"Sqrt\\\",\\\"sqrt\\\"))},t.tan=e=>{e.compute(s(e.inputs[0],\\\"Tan\\\",\\\"tan\\\"))},t.tanh=e=>{e.compute(s(e.inputs[0],\\\"Tanh\\\",\\\"tanh\\\"))},t.thresholdedRelu=(e,t)=>(e.compute(s(e.inputs[0],\\\"ThresholdedRelu\\\",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),t.log=e=>{e.compute(s(e.inputs[0],\\\"Log\\\",\\\"log\\\"))}},8305:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.ProgramManager=void 0;const i=n(4955),r=n(2075);t.ProgramManager=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,n,i){const r=this.backend.device,a=this.backend.getComputePassEncoder(),o=this.backend.supportTimestampQuery&&\\\"default\\\"===this.backend.env.webgpu.profilingMode;o&&a.writeTimestamp(this.backend.profilingQuerySet,0),a.setPipeline(e.computePipeline);const s=[];for(const e of t)s.push({binding:s.length,resource:{buffer:e.buffer}});for(const e of n)s.push({binding:s.length,resource:{buffer:e.buffer}});const u=r.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:s});if(a.setBindGroup(0,u),a.dispatchWorkgroups(...i),this.backend.pendingDispatchNumber++,o){a.writeTimestamp(this.backend.profilingQuerySet,1),null==this.backend.profilingQueryData&&(this.backend.profilingQueryData=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));const e=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,this.backend.profilingQueryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.profilingQueryData.buffer,0,e.buffer,0,16),this.backend.flush();const t=this.backend.currentKernelId,n=this.backend.kernels.get(t)[0];e.buffer.mapAsync(GPUMapMode.READ).then((()=>{const i=new BigUint64Array(e.buffer.getMappedRange()),r=i[0],a=i[1];e.buffer.unmap(),void 0===this.backend.profilingTimeBase&&(this.backend.profilingTimeBase=r);const o=Number(r-this.backend.profilingTimeBase),s=Number(a-this.backend.profilingTimeBase);if(!Number.isSafeInteger(o)||!Number.isSafeInteger(s))throw new RangeError(\\\"incorrect timestamp range\\\");this.backend.gpuDataManager.release(e.id),console.log(`[profiling] kernel \\\"${t}|${n}\\\" execution time: ${s-o} ns`)}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(e,t){const n=this.backend.device,a=(0,r.createShaderHelper)(t),o=e.getShaderSource(a),s=`${a.additionalImplementations}\\\\n${o}`,u=n.createShaderModule({code:s});return(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] shader code: ${s}`)),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:u,entryPoint:\\\"main\\\"},layout:\\\"auto\\\"})}}normalizeDispatchGroupSize(e){const t=\\\"number\\\"==typeof e?e:e.x,n=\\\"number\\\"==typeof e?1:e.y||1,i=\\\"number\\\"==typeof e?1:e.z||1,r=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=r&&n<=r&&i<=r)return[t,n,i];const a=t*n*i;let o=Math.ceil(Math.sqrt(a));if(o>r){if(o=Math.ceil(Math.cbrt(a)),o>r)throw new Error(\\\"Total dispatch size exceeds WebGPU maximum.\\\");return[o,o,o]}return[o,o,1]}}},1163:(e,t)=>{\\\"use strict\\\";var n;Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n.default=0]=\\\"default\\\",n[n.upload=1]=\\\"upload\\\",n[n.profile=2]=\\\"profile\\\"},7918:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const i=n(263),r=n(1497);t.setRunOptions=e=>{const t=(0,i.getInstance)();let n=0;const a=[],o=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))o.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))o.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(o.terminate=!1);let i=0;return void 0!==(null==e?void 0:e.tag)&&(i=(0,r.allocWasmString)(e.tag,a)),n=t._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,i),0===n&&(0,r.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,i)=>{const o=(0,r.allocWasmString)(e,a),s=(0,r.allocWasmString)(i,a);0!==t._OrtAddRunConfigEntry(n,o,s)&&(0,r.checkLastError)(`Can't set a run config entry: ${e} - ${i}.`)})),[n,a]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),a.forEach((e=>t._free(e))),e}}},7622:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const i=n(263),r=n(1497);t.setSessionOptions=e=>{var t,n,a,o;const s=(0,i.getInstance)();let u=0;const l=[],c=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(c);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=c.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),d=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(n=c.executionMode)&&void 0!==n?n:\\\"sequential\\\"),p=\\\"string\\\"==typeof c.logId?(0,r.allocWasmString)(c.logId,l):0,f=null!==(a=c.logSeverityLevel)&&void 0!==a?a:2;if(!Number.isInteger(f)||f<0||f>4)throw new Error(`log serverity level is not valid: ${f}`);const h=null!==(o=c.logVerbosityLevel)&&void 0!==o?o:0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);const g=\\\"string\\\"==typeof c.optimizedModelFilePath?(0,r.allocWasmString)(c.optimizedModelFilePath,l):0;return u=s._OrtCreateSessionOptions(e,!!c.enableCpuMemArena,!!c.enableMemPattern,d,!!c.enableProfiling,0,p,f,h,g),0===u&&(0,r.checkLastError)(\\\"Can't create session options.\\\"),c.executionProviders&&((e,t,n)=>{for(const a of t){let t=\\\"string\\\"==typeof a?a:a.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof a){const t=a;if(null==t?void 0:t.deviceType){const a=(0,r.allocWasmString)(\\\"deviceType\\\",n),o=(0,r.allocWasmString)(t.deviceType,n);0!==(0,i.getInstance)()._OrtAddSessionConfigEntry(e,a,o)&&(0,r.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const a=(0,r.allocWasmString)(\\\"powerPreference\\\",n),o=(0,r.allocWasmString)(t.powerPreference,n);0!==(0,i.getInstance)()._OrtAddSessionConfigEntry(e,a,o)&&(0,r.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const o=(0,r.allocWasmString)(t,n);0!==(0,i.getInstance)()._OrtAppendExecutionProvider(e,o)&&(0,r.checkLastError)(`Can't append execution provider: ${t}.`)}})(u,c.executionProviders,l),void 0!==c.extra&&(0,r.iterateExtraOptions)(c.extra,\\\"\\\",new WeakSet,((e,t)=>{const n=(0,r.allocWasmString)(e,l),i=(0,r.allocWasmString)(t,l);0!==s._OrtAddSessionConfigEntry(u,n,i)&&(0,r.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[u,l]}catch(e){throw 0!==u&&s._OrtReleaseSessionOptions(u),l.forEach((e=>s._free(e))),e}}},7917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},1259:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const i=n(7918),r=n(7622),a=n(7917),o=n(263),s=n(1497);t.initRuntime=async e=>{var t,i;t=e.wasm.numThreads,i=(0,a.logLevelStringToEnum)(e.logLevel),0!==(0,o.getInstance)()._OrtInit(t,i)&&(0,s.checkLastError)(\\\"Can't initialize onnxruntime.\\\");{const t=n(7675).S;await t((0,o.getInstance)(),e)}};const u=new Map;t.createSessionAllocate=e=>{const t=(0,o.getInstance)(),n=t._malloc(e.byteLength);if(0===n)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,o.getInstance)();let i=0,a=0,l=[];const c=[],d=[];try{[a,l]=(0,r.setSessionOptions)(t),i=n._OrtCreateSession(e[0],e[1],a),0===i&&(0,s.checkLastError)(\\\"Can't create a session.\\\");const[p,f]=(e=>{const t=(0,o.getInstance)(),n=t.stackSave();try{const n=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,n,n+4)&&(0,s.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(n)}})(i),h=[],g=[];for(let e=0;e<p;e++){const t=n._OrtGetInputName(i,e);0===t&&(0,s.checkLastError)(\\\"Can't get an input name.\\\"),c.push(t),h.push(n.UTF8ToString(t))}for(let e=0;e<f;e++){const t=n._OrtGetOutputName(i,e);0===t&&(0,s.checkLastError)(\\\"Can't get an output name.\\\"),d.push(t),g.push(n.UTF8ToString(t))}return u.set(i,[i,c,d]),[i,h,g]}catch(e){throw c.forEach((e=>n._OrtFree(e))),d.forEach((e=>n._OrtFree(e))),0!==i&&n._OrtReleaseSession(i),e}finally{n._free(e[0]),0!==a&&n._OrtReleaseSessionOptions(a),l.forEach((e=>n._free(e)))}},t.createSession=(e,n)=>{const i=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(i,n)},t.releaseSession=e=>{const t=(0,o.getInstance)(),n=u.get(e);if(!n)throw new Error(`cannot release session. invalid session id: ${e}`);const[i,r,a]=n;r.forEach((e=>t._OrtFree(e))),a.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(i),u.delete(e)},t.run=async(e,t,n,r,l)=>{const c=(0,o.getInstance)(),d=u.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);const[p,f,h]=d,g=t.length,m=r.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,i.setRunOptions)(l);for(let e=0;e<g;e++){const t=n[e][0],i=n[e][1],r=n[e][2];let o,u;if(Array.isArray(r)){u=4*r.length,o=c._malloc(u),w.push(o);let e=o/4;for(let t=0;t<r.length;t++){if(\\\"string\\\"!=typeof r[t])throw new TypeError(`tensor data at index ${t} is not a string`);c.HEAPU32[e++]=(0,s.allocWasmString)(r[t],w)}}else u=r.byteLength,o=c._malloc(u),w.push(o),c.HEAPU8.set(new Uint8Array(r.buffer,r.byteOffset,u),o);const l=c.stackSave(),d=c.stackAlloc(4*i.length);try{let n=d/4;i.forEach((e=>c.HEAP32[n++]=e));const r=c._OrtCreateTensor((0,a.tensorDataTypeStringToEnum)(t),o,u,d,i.length);0===r&&(0,s.checkLastError)(`Can't create tensor for input[${e}].`),b.push(r)}finally{c.stackRestore(l)}}const e=c.stackSave(),o=c.stackAlloc(4*g),u=c.stackAlloc(4*g),d=c.stackAlloc(4*m),_=c.stackAlloc(4*m);try{let e=o/4,n=u/4,i=d/4,l=_/4;for(let i=0;i<g;i++)c.HEAPU32[e++]=b[i],c.HEAPU32[n++]=f[t[i]];for(let e=0;e<m;e++)c.HEAPU32[i++]=0,c.HEAPU32[l++]=h[r[e]];let v=c._OrtRun(p,u,o,g,_,m,d,y);const w=c.jsepRunPromise;w&&void 0!==w.then&&(v=await w);const $=[];0!==v&&(0,s.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<m;e++){const t=c.HEAPU32[d/4+e],n=c.stackSave(),i=c.stackAlloc(16);let r,o=0;try{v=c._OrtGetTensorData(t,i,i+4,i+8,i+12),0!==v&&(0,s.checkLastError)(`Can't access output tensor data on index ${e}.`);let n=i/4;const u=c.HEAPU32[n++];o=c.HEAPU32[n++];const l=c.HEAPU32[n++],d=c.HEAPU32[n++],p=[];for(let e=0;e<d;e++)p.push(c.HEAPU32[l/4+e]);c._OrtFree(l);const f=0===p.length?1:p.reduce(((e,t)=>e*t));if(r=(0,a.tensorDataTypeEnumToString)(u),\\\"string\\\"===r){const e=[];let t=o/4;for(let n=0;n<f;n++){const i=c.HEAPU32[t++],r=n===f-1?void 0:c.HEAPU32[t]-i;e.push(c.UTF8ToString(i,r))}$.push([r,p,e])}else{const e=new((0,a.tensorTypeToTypedArrayConstructor)(r))(f);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(c.HEAPU8.subarray(o,o+e.byteLength)),$.push([r,p,e])}}finally{c.stackRestore(n),\\\"string\\\"===r&&o&&c._free(o),c._OrtReleaseTensor(t)}}return $}finally{c.stackRestore(e)}}finally{b.forEach((e=>c._OrtReleaseTensor(e))),w.forEach((e=>c._free(e))),0!==y&&c._OrtReleaseRunOptions(y),v.forEach((e=>c._free(e)))}},t.endProfiling=e=>{const t=(0,o.getInstance)(),n=u.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const i=n[0],r=t._OrtEndProfiling(i);0===r&&(0,s.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(r)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,n){\\\"use strict\\\";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!(\\\"get\\\"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const o=a(n(6449)),s=n(9377),u=n(5711);let l,c=!1,d=!1,p=!1;t.initializeWebAssembly=async e=>{if(c)return Promise.resolve();if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(p)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");d=!0;const t=e.initTimeout,i=e.numThreads,r=e.simd,a=i>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),f=r&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),h=e.wasmPaths,g=\\\"string\\\"==typeof h?h:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(f,a),y=\\\"object\\\"==typeof h?h[m]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const i=a?u:s,r={locateFile:(e,t)=>{if(a&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob)return URL.createObjectURL(new Blob([n(4154)],{type:\\\"text/javascript\\\"}));if(e.endsWith(\\\".wasm\\\")){if(y)return y;const e=null!=g?g:t;return\\\"ort-wasm-simd.wasm\\\"===m?e+\\\"ort-wasm-simd.jsep.wasm\\\":\\\"ort-wasm-simd-threaded.wasm\\\"===m?e+\\\"ort-wasm-simd-threaded.jsep.wasm\\\":e+m}return t+e}};if(a)if(\\\"undefined\\\"==typeof Blob)r.mainScriptUrlOrBlob=o.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${i.toString()}})();`;r.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}i(r).then((t=>{d=!1,c=!0,l=t,e()}),(e=>{d=!1,p=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(c&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!c||d||p||(d=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,d=!1,c=!1,p=!0)}},1497:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const i=n(263);t.allocWasmString=(e,t)=>{const n=(0,i.getInstance)(),r=n.lengthBytesUTF8(e)+1,a=n._malloc(r);return n.stringToUTF8(e,a,r),t.push(a),a},t.iterateExtraOptions=(e,n,i,r)=>{if(\\\"object\\\"==typeof e&&null!==e){if(i.has(e))throw new Error(\\\"Circular reference in options\\\");i.add(e)}Object.entries(e).forEach((([e,a])=>{const o=n?n+e:e;if(\\\"object\\\"==typeof a)(0,t.iterateExtraOptions)(a,o+\\\".\\\",i,r);else if(\\\"string\\\"==typeof a||\\\"number\\\"==typeof a)r(o,a.toString());else{if(\\\"boolean\\\"!=typeof a)throw new Error(\\\"Can't handle extra config type: \\\"+typeof a);r(o,a?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,i.getInstance)(),n=t.stackSave();try{const n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);const i=t.HEAP32[n/4],r=t.HEAPU32[n/4+1],a=r?t.UTF8ToString(r):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${a}`)}finally{t.stackRestore(n)}}},5711:(e,t,n)=>{var _scriptDir,i=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return I.buffer!=R.buffer&&G(),R}function i(){return I.buffer!=R.buffer&&G(),k}function r(){return I.buffer!=R.buffer&&G(),D}function a(){return I.buffer!=R.buffer&&G(),z}function o(){return I.buffer!=R.buffer&&G(),B}var s,u,l=e;l.ready=new Promise(((e,t)=>{s=e,u=t})),l.jsepInit=function(e,t,n,i,r,a,o,s){l.Ib=e,l.ob=t,l.qb=n,l.ab=i,l.pb=r,l.xa=a,l.rb=o,l.sb=s};var c,d,p,f=Object.assign({},l),h=\\\"./this.program\\\",g=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,v=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=l.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function _(e){return l.locateFile?l.locateFile(e,w):w+e}if(v){var $=n(1384),C=n(908);let e;w=y?C.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",c=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):C.normalize(e),$.readFileSync(e,t?void 0:\\\"utf8\\\")),p=e=>((e=c(e,!0)).buffer||(e=new Uint8Array(e)),e),d=(e,t,n,i=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):C.normalize(e),$.readFile(e,i?void 0:\\\"utf8\\\",((e,r)=>{e?n(e):t(i?r.buffer:r)}))},!l.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),g=(e,t)=>{throw process.exitCode=e,t},l.inspect=()=>\\\"[Emscripten Module object]\\\";try{e=n(9925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(m||y)&&(y?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",v||(c=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},y&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),d=(e,t,n)=>{var i=new XMLHttpRequest;i.open(\\\"GET\\\",e,!0),i.responseType=\\\"arraybuffer\\\",i.onload=()=>{200==i.status||0==i.status&&i.response?t(i.response):n()},i.onerror=n,i.send(null)}));v&&\\\"undefined\\\"==typeof performance&&(global.performance=n(6953).performance);var x=console.log.bind(console),S=console.error.bind(console);v&&(x=(...e)=>$.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),S=(...e)=>$.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var j,A=l.print||x,O=l.printErr||S;Object.assign(l,f),f=null,l.thisProgram&&(h=l.thisProgram),l.quit&&(g=l.quit),l.wasmBinary&&(j=l.wasmBinary);var T=l.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&Z(\\\"no native wasm support detected\\\");var I,E,P,M,R,k,D,z,B,W=!1;function G(){var e=I.buffer;l.HEAP8=R=new Int8Array(e),l.HEAP16=new Int16Array(e),l.HEAP32=D=new Int32Array(e),l.HEAPU8=k=new Uint8Array(e),l.HEAPU16=new Uint16Array(e),l.HEAPU32=z=new Uint32Array(e),l.HEAPF32=new Float32Array(e),l.HEAPF64=B=new Float64Array(e)}var U=l.INITIAL_MEMORY||16777216;if(5242880<=U||Z(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+U+\\\"! (STACK_SIZE=5242880)\\\"),b)I=l.wasmMemory;else if(l.wasmMemory)I=l.wasmMemory;else if(!((I=new WebAssembly.Memory({initial:U/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw O(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),v&&O(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");G(),U=I.buffer.byteLength;var N=[],L=[],H=[],F=0;function V(){return T||0<F}var K,q=0,Y=null,J=null;function X(){q++,l.monitorRunDependencies&&l.monitorRunDependencies(q)}function Q(){if(q--,l.monitorRunDependencies&&l.monitorRunDependencies(q),0==q&&(null!==Y&&(clearInterval(Y),Y=null),J)){var e=J;J=null,e()}}function Z(e){throw l.onAbort&&l.onAbort(e),O(e=\\\"Aborted(\\\"+e+\\\")\\\"),W=!0,M=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),u(e),e}function ee(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function te(e){if(e==K&&j)return new Uint8Array(j);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function ne(e,t,n){return function(e){if(!j&&(m||y)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>te(e)));if(d)return new Promise(((t,n)=>{d(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>te(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{O(\\\"failed to asynchronously prepare wasm: \\\"+e),Z(e)}))}ee(K=\\\"ort-wasm-simd-threaded.wasm\\\")||(K=_(K));var ie,re={893084:()=>{l.jsepRunPromise=new Promise((function(e){l.tb=e}))},893179:e=>{l.tb(e)},893217:e=>l.ob(e),893250:e=>l.qb(e),893282:(e,t,n)=>{l.ab(e,t,n,!0)},893321:(e,t,n)=>{l.ab(e,t,n)},893354:e=>{l.xa(\\\"Abs\\\",e,void 0)},893405:e=>{l.xa(\\\"Neg\\\",e,void 0)},893456:e=>{l.xa(\\\"Floor\\\",e,void 0)},893509:e=>{l.xa(\\\"Ceil\\\",e,void 0)},893561:e=>{l.xa(\\\"Reciprocal\\\",e,void 0)},893619:e=>{l.xa(\\\"Sqrt\\\",e,void 0)},893671:e=>{l.xa(\\\"Exp\\\",e,void 0)},893722:e=>{l.xa(\\\"Erf\\\",e,void 0)},893773:e=>{l.xa(\\\"Sigmoid\\\",e,void 0)},893828:e=>{l.xa(\\\"Log\\\",e,void 0)},893879:e=>{l.xa(\\\"Sin\\\",e,void 0)},893930:e=>{l.xa(\\\"Cos\\\",e,void 0)},893981:e=>{l.xa(\\\"Tan\\\",e,void 0)},894032:e=>{l.xa(\\\"Asin\\\",e,void 0)},894084:e=>{l.xa(\\\"Acos\\\",e,void 0)},894136:e=>{l.xa(\\\"Atan\\\",e,void 0)},894188:e=>{l.xa(\\\"Sinh\\\",e,void 0)},894240:e=>{l.xa(\\\"Cosh\\\",e,void 0)},894292:e=>{l.xa(\\\"Asinh\\\",e,void 0)},894345:e=>{l.xa(\\\"Acosh\\\",e,void 0)},894398:e=>{l.xa(\\\"Atanh\\\",e,void 0)},894451:e=>{l.xa(\\\"Tanh\\\",e,void 0)},894503:(e,t,n)=>{l.xa(\\\"ClipV10\\\",e,{min:t,max:n})},894575:e=>{l.xa(\\\"Clip\\\",e,void 0)},894627:(e,t)=>{l.xa(\\\"Elu\\\",e,{alpha:t})},894685:e=>{l.xa(\\\"Relu\\\",e,void 0)},894737:(e,t)=>{l.xa(\\\"LeakyRelu\\\",e,{alpha:t})},894801:(e,t)=>{l.xa(\\\"ThresholdedRelu\\\",e,{alpha:t})},894871:(e,t)=>{l.xa(\\\"Cast\\\",e,{to:t})},894929:e=>{l.xa(\\\"Add\\\",e,void 0)},894980:e=>{l.xa(\\\"Sub\\\",e,void 0)},895031:e=>{l.xa(\\\"Mul\\\",e,void 0)},895082:e=>{l.xa(\\\"Div\\\",e,void 0)},895133:e=>{l.xa(\\\"Pow\\\",e,void 0)},895184:(e,t,n,i,a)=>{l.xa(\\\"ReduceMean\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},895348:(e,t,n,i,a)=>{l.xa(\\\"ReduceMax\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},895511:(e,t,n,i,a)=>{l.xa(\\\"ReduceMin\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},895674:(e,t,n,i,a)=>{l.xa(\\\"ReduceProd\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},895838:(e,t,n,i,a)=>{l.xa(\\\"ReduceSum\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},896001:(e,t,n,i,a)=>{l.xa(\\\"ReduceL1\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},896163:(e,t,n,i,a)=>{l.xa(\\\"ReduceL2\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},896325:(e,t,n,i,a)=>{l.xa(\\\"ReduceLogSum\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},896491:(e,t,n,i,a)=>{l.xa(\\\"ReduceSumSquare\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},896660:(e,t,n,i,a)=>{l.xa(\\\"ReduceLogSumExp\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},896829:(e,t,n)=>{l.xa(\\\"Transpose\\\",e,{perm:t?Array.from(r().subarray(n>>>0,n+t>>>0)):[]})},896942:(e,n,i,r,a,o,s,u,c,d)=>{l.xa(\\\"Conv\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[i],group:r,kernel_shape:[a],pads:[o,s],strides:[u],w_is_const:()=>!!t()[d>>>0]})},897170:(e,n,i,r,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"Conv\\\",e,{format:g?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[i,r],group:a,kernel_shape:[o,s],pads:[u,c,d,p],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},897429:(e,n,i,r,a,o,s,u,c,d)=>{l.xa(\\\"Conv\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[i],group:r,kernel_shape:[a],pads:[o,s],strides:[u],w_is_const:()=>!!t()[d>>>0]})},897657:(e,n,i,r,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"Conv\\\",e,{format:g?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[i,r],group:a,kernel_shape:[o,s],pads:[u,c,d,p],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},897916:(e,n,i,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"ConvTranspose\\\",e,{format:d?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:[i],group:a,kernel_shape:[o],pads:[s,u],strides:[c],wIsConst:()=>!!t()[p>>>0],outputPadding:f?Array.from(r().subarray(h>>>0,h+f>>>0)):[],outputShape:g?Array.from(r().subarray(m>>>0,m+g>>>0)):[]})},898296:(e,n,i,a,o,s,u,c,d,p,f,h,g)=>{l.xa(\\\"ConvTranspose\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:Array.from(r().subarray(i>>>0,i+2>>>0)),group:a,kernelShape:Array.from(r().subarray(o>>>0,o+2>>>0)),pads:Array.from(r().subarray(s>>>0,s+4>>>0)),strides:Array.from(r().subarray(u>>>0,u+2>>>0)),wIsConst:()=>!!t()[d>>>0],outputPadding:0<p?Array.from(r().subarray(f>>>0,f+p>>>0)):[],outputShape:0<h?Array.from(r().subarray(g>>>0,g+h>>>0)):[]})},898819:(e,n,i,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"ConvTranspose\\\",e,{format:d?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:[i],group:a,kernel_shape:[o],pads:[s,u],strides:[c],wIsConst:()=>!!t()[p>>>0],outputPadding:f?Array.from(r().subarray(h>>>0,h+f>>>0)):[],outputShape:g?Array.from(r().subarray(m>>>0,m+g>>>0)):[]})},899199:(e,n,i,a,o,s,u,c,d,p,f,h,g)=>{l.xa(\\\"ConvTranspose\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:Array.from(r().subarray(i>>>0,i+2>>>0)),group:a,kernelShape:Array.from(r().subarray(o>>>0,o+2>>>0)),pads:Array.from(r().subarray(s>>>0,s+4>>>0)),strides:Array.from(r().subarray(u>>>0,u+2>>>0)),wIsConst:()=>!!t()[d>>>0],outputPadding:0<p?Array.from(r().subarray(f>>>0,f+p>>>0)):[],outputShape:0<h?Array.from(r().subarray(g>>>0,g+h>>>0)):[]})},899722:(e,t)=>{l.xa(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},899813:(e,t,n,i,r,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:r,dilations:[a,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},900097:(e,t)=>{l.xa(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},900188:(e,t,n,i,r,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:r,dilations:[a,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},900472:(e,t)=>{l.xa(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},900559:(e,t,n,i,r,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:r,dilations:[a,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},900839:(e,t)=>{l.xa(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},900926:(e,t,n,i,r,a,o,s,u,c,d,p,f,h,g,m)=>{l.xa(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:r,dilations:[a,o],kernel_shape:[s,u],pads:[c,d,p,f],strides:[h,g]})},901206:(e,t,n,i,r)=>{l.xa(\\\"Gemm\\\",e,{alpha:t,beta:n,transA:i,transB:r})},901310:e=>{l.xa(\\\"MatMul\\\",e,void 0)},901364:(e,t,n,i)=>{l.xa(\\\"ArgMax\\\",e,{keepDims:!!t,selectLastIndex:!!n,axis:i})},901472:(e,t,n,i)=>{l.xa(\\\"ArgMin\\\",e,{keepDims:!!t,selectLastIndex:!!n,axis:i})},901580:(e,t)=>{l.xa(\\\"Softmax\\\",e,{axis:t})},901643:(e,t)=>{l.xa(\\\"Concat\\\",e,{axis:t})},901703:(e,t,n,i,a)=>{l.xa(\\\"Split\\\",e,{axis:t,numOutputs:n,splitSizes:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[]})},901848:e=>{l.xa(\\\"Expand\\\",e,void 0)},901902:(e,t)=>{l.xa(\\\"Gather\\\",e,{axis:Number(t)})},901973:(e,t,n,i,a,o,s,u,c,d,p)=>{l.xa(\\\"Resize\\\",e,{antialias:t,axes:n?Array.from(r().subarray(i>>>0,i+n>>>0)):[],coordinateTransformMode:de(a),cubicCoeffA:o,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:de(c),mode:de(d),nearestMode:de(p)})},902324:(e,t,n,i,a,o,s)=>{l.xa(\\\"Slice\\\",e,{starts:t?Array.from(r().subarray(n>>>0,n+t>>>0)):[],ends:i?Array.from(r().subarray(a>>>0,a+i>>>0)):[],axes:o?Array.from(r().subarray(s>>>0,s+o>>>0)):[]})},902555:e=>{l.xa(\\\"Tile\\\",e,void 0)},902607:(e,t,n)=>{l.xa(\\\"LayerNormalization\\\",e,{axis:Number(t),epsilon:Number(n)})},902714:(e,t,n)=>{l.xa(\\\"InstanceNormalization\\\",e,{epsilon:t,format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},902828:(e,t,n)=>{l.xa(\\\"InstanceNormalization\\\",e,{epsilon:t,format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},902942:e=>{l.xa(\\\"Gelu\\\",e,void 0)},902994:(e,t)=>{l.xa(\\\"SkipLayerNormalization\\\",e,{epsilon:t})},903075:e=>{l.rb(e)},903109:(e,t)=>l.sb(e,t)};function ae(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}function oe(e){e.terminate(),e.onmessage=()=>{}}function se(e){(e=he.Ja[e])||Z(),he.xb(e)}function ue(e){var t=he.lb();if(!t)return 6;he.Ra.push(t),he.Ja[e.Qa]=t,t.Qa=e.Qa;var n={cmd:\\\"run\\\",start_routine:e.yb,arg:e.jb,pthread_ptr:e.Qa};return v&&t.unref(),t.postMessage(n,e.Eb),0}var le=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,ce=(e,t,n)=>{var i=(t>>>=0)+n;for(n=t;e[n]&&!(n>=i);)++n;if(16<n-t&&e.buffer&&le)return le.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(i=\\\"\\\";t<n;){var r=e[t++];if(128&r){var a=63&e[t++];if(192==(224&r))i+=String.fromCharCode((31&r)<<6|a);else{var o=63&e[t++];65536>(r=224==(240&r)?(15&r)<<12|a<<6|o:(7&r)<<18|a<<12|o<<6|63&e[t++])?i+=String.fromCharCode(r):(r-=65536,i+=String.fromCharCode(55296|r>>10,56320|1023&r))}}else i+=String.fromCharCode(r)}return i},de=(e,t)=>(e>>>=0)?ce(i(),e,t):\\\"\\\";function pe(e){if(b)return qe(1,1,e);M=e,V()||(he.zb(),l.onExit&&l.onExit(e),W=!0),g(e,new ae(e))}var fe=e=>{if(M=e,b)throw me(e),\\\"unwind\\\";pe(e)},he={Ua:[],Ra:[],eb:[],Ja:{},Xa:function(){b?he.nb():he.mb()},mb:function(){N.unshift((()=>{X(),he.ub((()=>Q()))}))},nb:function(){he.receiveObjectTransfer=he.wb,he.threadInitTLS=he.cb,he.setExitStatus=he.bb,T=!1},bb:function(e){M=e},Kb:[\\\"$terminateWorker\\\"],zb:function(){for(var e of he.Ra)oe(e);for(e of he.Ua)oe(e);he.Ua=[],he.Ra=[],he.Ja=[]},xb:function(e){var t=e.Qa;delete he.Ja[t],he.Ua.push(e),he.Ra.splice(he.Ra.indexOf(e),1),e.Qa=0,Tt(t)},wb:function(){},cb:function(){he.eb.forEach((e=>e()))},vb:e=>new Promise((t=>{e.onmessage=n=>{var i=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=Ct()){var r=he.Ja[n.Jb];r?r.postMessage(n,n.transferList):O('Internal error! Worker sent a message \\\"'+i+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===i?Be():\\\"spawnThread\\\"===i?ue(n):\\\"cleanupThread\\\"===i?se(n.thread):\\\"killThread\\\"===i?(n=n.thread,i=he.Ja[n],delete he.Ja[n],oe(i),Tt(n),he.Ra.splice(he.Ra.indexOf(i),1),i.Qa=0):\\\"cancelThread\\\"===i?he.Ja[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===i?(e.loaded=!0,t(e)):\\\"alert\\\"===i?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"callHandler\\\"===i?l[n.handler](...n.args):i&&O(\\\"worker sent an unknown command \\\"+i)},e.onerror=e=>{throw O(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},v&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var n,i=[];for(n of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])l.hasOwnProperty(n)&&i.push(n);e.postMessage({cmd:\\\"load\\\",handlers:i,urlOrBlob:l.mainScriptUrlOrBlob||_scriptDir,wasmMemory:I,wasmModule:P})})),ub:function(e){e()},ib:function(){var e=_(\\\"ort-wasm-simd-threaded.worker.js\\\");e=new Worker(e),he.Ua.push(e)},lb:function(){return 0==he.Ua.length&&(he.ib(),he.vb(he.Ua[0])),he.Ua.pop()}};l.PThread=he;var ge=e=>{for(;0<e.length;)e.shift()(l)};function me(e){if(b)return qe(2,0,e);fe(e)}function ye(e){this.$a=e-24,this.hb=function(e){a()[this.$a+4>>2>>>0]=e},this.gb=function(e){a()[this.$a+8>>2>>>0]=e},this.Xa=function(e,t){this.fb(),this.hb(e),this.gb(t)},this.fb=function(){a()[this.$a+16>>2>>>0]=0}}function ve(e,t,n,i){return b?qe(3,1,e,t,n,i):be(e,t,n,i)}function be(e,t,n,i){if(e>>>=0,t>>>=0,n>>>=0,i>>>=0,\\\"undefined\\\"==typeof SharedArrayBuffer)return O(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var r=[];return b&&0===r.length?ve(e,t,n,i):(e={yb:n,Qa:e,jb:i,Eb:r},b?(e.Gb=\\\"spawnThread\\\",postMessage(e,r),0):ue(e))}function we(e,t,n){return b?qe(4,1,e,t,n):0}function _e(e,t){if(b)return qe(5,1,e,t)}l.establishStackSpace=function(){var e=Ct(),t=r()[e+52>>2>>>0];e=r()[e+56>>2>>>0],Mt(t,t-e),kt(t)},l.invokeEntryPoint=function(e,t){e=zt.apply(null,[e,t]),V()?he.bb(e):It(e)};var $e=e=>{for(var t=0,n=0;n<e.length;++n){var i=e.charCodeAt(n);127>=i?t++:2047>=i?t+=2:55296<=i&&57343>=i?(t+=4,++n):t+=3}return t},Ce=(e,t,n,i)=>{if(!(0<i))return 0;var r=n>>>=0;i=n+i-1;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),127>=o){if(n>=i)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=i)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=i)break;t[n++>>>0]=224|o>>12}else{if(n+3>=i)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-r},xe=(e,t,n)=>Ce(e,i(),t,n);function Se(e,t){if(b)return qe(6,1,e,t)}function je(e,t,n){if(b)return qe(7,1,e,t,n)}function Ae(e,t,n){return b?qe(8,1,e,t,n):0}function Oe(e,t){if(b)return qe(9,1,e,t)}function Te(e,t,n){if(b)return qe(10,1,e,t,n)}function Ie(e,t,n,i){if(b)return qe(11,1,e,t,n,i)}function Ee(e,t,n,i){if(b)return qe(12,1,e,t,n,i)}function Pe(e,t,n,i){if(b)return qe(13,1,e,t,n,i)}function Me(e){if(b)return qe(14,1,e)}function Re(e,t){if(b)return qe(15,1,e,t)}function ke(e,t,n){if(b)return qe(16,1,e,t,n)}var De=e=>{if(!W)try{if(e(),!V())try{b?It(M):fe(M)}catch(e){e instanceof ae||\\\"unwind\\\"==e||g(1,e)}}catch(e){e instanceof ae||\\\"unwind\\\"==e||g(1,e)}};function ze(e){e>>>=0,\\\"function\\\"==typeof Atomics.Fb&&(Atomics.Fb(r(),e>>2,e).value.then(Be),e+=128,Atomics.store(r(),e>>2,1))}function Be(){var e=Ct();e&&(ze(e),De((()=>Et())))}l.__emscripten_thread_mailbox_await=ze,l.checkMailbox=Be;var We=e=>0==e%4&&(0!=e%100||0==e%400),Ge=[0,31,60,91,121,152,182,213,244,274,305,335],Ue=[0,31,59,90,120,151,181,212,243,273,304,334];function Ne(e,t,n,i,r,a,o,s){return b?qe(17,1,e,t,n,i,r,a,o,s):-52}function Le(e,t,n,i,r,a,o){if(b)return qe(18,1,e,t,n,i,r,a,o)}var He=e=>{var t=$e(e)+1,n=xt(t);return n&&xe(e,n,t),n},Fe=[],Ve=(e,t)=>{var n;for(Fe.length=0,t>>=2;n=i()[e++>>>0];)t+=105!=n&t,Fe.push(105==n?r()[t>>>0]:o()[t++>>>1]),++t;return Fe},Ke=e=>{var t=Rt();return e=e(),kt(t),e};function qe(e,t){var n=arguments.length-2,i=arguments;return Ke((()=>{for(var r=Dt(8*n),a=r>>3,s=0;s<n;s++){var u=i[2+s];o()[a+s>>>0]=u}return Ot(e,n,r,t)}))}var Ye,Je=[],Xe={},Qe=()=>{if(!Ye){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:h||\\\"./this.program\\\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Ye=n}return Ye};function Ze(e,n){if(b)return qe(19,1,e,n);e>>>=0,n>>>=0;var i=0;return Qe().forEach((function(r,o){var s=n+i;for(o=a()[e+4*o>>2>>>0]=s,s=0;s<r.length;++s)t()[o++>>0>>>0]=r.charCodeAt(s);t()[o>>0>>>0]=0,i+=r.length+1})),0}function et(e,t){if(b)return qe(20,1,e,t);e>>>=0,t>>>=0;var n=Qe();a()[e>>2>>>0]=n.length;var i=0;return n.forEach((function(e){i+=e.length+1})),a()[t>>2>>>0]=i,0}function tt(e){return b?qe(21,1,e):52}function nt(e,t,n,i){return b?qe(22,1,e,t,n,i):52}function it(e,t,n,i,r){return b?qe(23,1,e,t,n,i,r):70}var rt=[null,[],[]];function at(e,t,n,r){if(b)return qe(24,1,e,t,n,r);t>>>=0,n>>>=0,r>>>=0;for(var o=0,s=0;s<n;s++){var u=a()[t>>2>>>0],l=a()[t+4>>2>>>0];t+=8;for(var c=0;c<l;c++){var d=i()[u+c>>>0],p=rt[e];0===d||10===d?((1===e?A:O)(ce(p,0)),p.length=0):p.push(d)}o+=l}return a()[r>>2>>>0]=o,0}var ot=e=>(ot=(()=>{if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(v)try{var e=n(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}Z(\\\"initRandomDevice\\\")})())(e),st=[31,29,31,30,31,30,31,31,30,31,30,31],ut=[31,28,31,30,31,30,31,31,30,31,30,31],lt=(e,n)=>{t().set(e,n>>>0)};function ct(e,t,n,i){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var i;return 0===(i=n(e.getFullYear()-t.getFullYear()))&&0===(i=n(e.getMonth()-t.getMonth()))&&(i=n(e.getDate()-t.getDate())),i}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Sa;for(e=new Date(new Date(e.Ta+1900,0,1).getTime());0<t;){var n=e.getMonth(),i=(We(e.getFullYear())?st:ut)[n];if(!(t>i-e.getDate())){e.setDate(e.getDate()+t);break}t-=i-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=s(t,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0,i>>>=0;var c=r()[i+40>>2>>>0];for(var d in i={Cb:r()[i>>2>>>0],Bb:r()[i+4>>2>>>0],Va:r()[i+8>>2>>>0],Za:r()[i+12>>2>>>0],Wa:r()[i+16>>2>>>0],Ta:r()[i+20>>2>>>0],Pa:r()[i+24>>2>>>0],Sa:r()[i+28>>2>>>0],Lb:r()[i+32>>2>>>0],Ab:r()[i+36>>2>>>0],Db:c?de(c):\\\"\\\"},n=de(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(d,\\\"g\\\"),c[d]);var p=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),f=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(d in c={\\\"%a\\\":e=>p[e.Pa].substring(0,3),\\\"%A\\\":e=>p[e.Pa],\\\"%b\\\":e=>f[e.Wa].substring(0,3),\\\"%B\\\":e=>f[e.Wa],\\\"%C\\\":e=>o((e.Ta+1900)/100|0,2),\\\"%d\\\":e=>o(e.Za,2),\\\"%e\\\":e=>a(e.Za,2,\\\" \\\"),\\\"%g\\\":e=>l(e).toString().substring(2),\\\"%G\\\":e=>l(e),\\\"%H\\\":e=>o(e.Va,2),\\\"%I\\\":e=>(0==(e=e.Va)?e=12:12<e&&(e-=12),o(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.Wa-1;t+=(We(e.Ta+1900)?st:ut)[n++]);return o(e.Za+t,3)},\\\"%m\\\":e=>o(e.Wa+1,2),\\\"%M\\\":e=>o(e.Bb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Va&&12>e.Va?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>o(e.Cb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Pa||7,\\\"%U\\\":e=>o(Math.floor((e.Sa+7-e.Pa)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Sa+7-(e.Pa+6)%7)/7);if(2>=(e.Pa+371-e.Sa-2)%7&&t++,t)53==t&&(4==(n=(e.Pa+371-e.Sa)%7)||3==n&&We(e.Ta)||(t=1));else{t=52;var n=(e.Pa+7-e.Sa-1)%7;(4==n||5==n&&We(e.Ta%400-1))&&t++}return o(t,2)},\\\"%w\\\":e=>e.Pa,\\\"%W\\\":e=>o(Math.floor((e.Sa+7-(e.Pa+6)%7)/7),2),\\\"%y\\\":e=>(e.Ta+1900).toString().substring(2),\\\"%Y\\\":e=>e.Ta+1900,\\\"%z\\\":e=>{var t=0<=(e=e.Ab);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.Db,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(d)&&(n=n.replace(new RegExp(d,\\\"g\\\"),c[d](i)));return d=function(e){var t=Array($e(e)+1);return Ce(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),d.length>t?0:(lt(d,e),d.length-1)}function dt(e){try{e()}catch(e){Z(e)}}var pt=0,ft=null,ht=0,gt=[],mt={},yt={},vt=0,bt=null,wt=[];he.Xa();var _t=[null,pe,me,ve,we,_e,Se,je,Ae,Oe,Te,Ie,Ee,Pe,Me,Re,ke,Ne,Le,Ze,et,tt,nt,it,at],$t={r:function(e,t,n){return function(e){return function(e){if(!W){if(0===pt){var t=!1,n=!1;e(((e=0)=>{if(!W&&(ht=e,t=!0,n)){pt=2,dt((()=>Gt(ft))),\\\"undefined\\\"!=typeof Browser&&Browser.Ya.kb&&Browser.Ya.resume(),e=!1;try{var i=function(){var e=r()[ft+8>>2>>>0];return e=E[yt[e]],--F,e()}()}catch(t){i=t,e=!0}var a=!1;if(!ft){var o=bt;o&&(bt=null,(e?o.reject:o.resolve)(i),a=!0)}if(e&&!a)throw i}})),n=!0,t||(pt=1,ft=function(){var e=xt(65548),t=e+12;a()[e>>2>>>0]=t,a()[e+4>>2>>>0]=t+65536,t=gt[0];var n=mt[t];return void 0===n&&(n=vt++,mt[t]=n,yt[n]=t),t=n,r()[e+8>>2>>>0]=t,e}(),\\\"undefined\\\"!=typeof Browser&&Browser.Ya.kb&&Browser.Ya.pause(),dt((()=>Bt(ft))))}else 2===pt?(pt=0,dt(Ut),St(ft),ft=null,wt.forEach((e=>De(e)))):Z(`invalid state: ${pt}`);return ht}}((t=>{e().then(t)}))}((async()=>{await l.pb(e,t,n)}))},b:function(e,t,n){throw new ye(e>>>=0).Xa(t>>>0,n>>>0),e},O:function(e){jt(e>>>0,!y,1,!m,131072,!1),he.cb()},m:function(e){e>>>=0,b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):se(e)},J:be,i:we,U:_e,G:Se,I:je,V:Ae,S:Oe,K:Te,R:Ie,q:Ee,H:Pe,E:Me,T:Re,F:ke,Y:()=>!0,C:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Be())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=he.Ja[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},M:function(){return-1},N:ze,X:function(e){v&&he.Ja[e>>>0].ref()},u:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},v:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Ge:Ue)[e.getMonth()]+e.getDate()-1|0,r()[n+28>>2>>>0]=t,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var i=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=i&&e.getTimezoneOffset()==Math.min(i,t)),r()[n+32>>2>>>0]=e},w:function(e){e>>>=0;var t=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),n=r()[e+32>>2>>>0],i=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(o,a);return 0>n?r()[e+32>>2>>>0]=Number(a!=o&&s==i):0<n!=(s==i)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<n?s:a)-i))),r()[e+24>>2>>>0]=t.getDay(),n=(We(t.getFullYear())?Ge:Ue)[t.getMonth()]+t.getDate()-1|0,r()[e+28>>2>>>0]=n,r()[e>>2>>>0]=t.getSeconds(),r()[e+4>>2>>>0]=t.getMinutes(),r()[e+8>>2>>>0]=t.getHours(),r()[e+12>>2>>>0]=t.getDate(),r()[e+16>>2>>>0]=t.getMonth(),r()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,Pt((ie=e,1<=+Math.abs(ie)?0<ie?+Math.floor(ie/4294967296)>>>0:~~+Math.ceil((ie-+(~~ie>>>0))/4294967296)>>>0:0)),e>>>0},s:Ne,t:Le,A:function(e,t,n){function i(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}e>>>=0,t>>>=0,n>>>=0;var o=(new Date).getFullYear(),s=new Date(o,0,1),u=new Date(o,6,1);o=s.getTimezoneOffset();var l=u.getTimezoneOffset(),c=Math.max(o,l);a()[e>>2>>>0]=60*c,r()[t>>2>>>0]=Number(o!=l),e=i(s),t=i(u),e=He(e),t=He(t),l<o?(a()[n>>2>>>0]=e,a()[n+4>>2>>>0]=t):(a()[n>>2>>>0]=t,a()[n+4>>2>>>0]=e)},d:()=>{Z(\\\"\\\")},c:function(e,t,n){return e>>>=0,t=Ve(t>>>0,n>>>0),re[e].apply(null,t)},l:function(e,t,n){return e>>>=0,t=Ve(t>>>0,n>>>0),re[e].apply(null,t)},n:function(){},j:function(){return Date.now()},W:()=>{throw F+=1,\\\"unwind\\\"},D:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return v?n(3993).cpus().length:navigator.hardwareConcurrency},L:function(e,t,n,i){for(he.Hb=t>>>0,Je.length=n,t=i>>>0>>3,i=0;i<n;i++)Je[i]=o()[t+i>>>0];return(0>e?re[-e-1]:_t[e]).apply(null,Je)},z:function(e){e>>>=0;var t=i().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r);e:{a=a.min.call(a,4294901760,r+(65536-r%65536)%65536)-I.buffer.byteLength+65535>>>16;try{I.grow(a),G();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},P:Ze,Q:et,k:fe,h:tt,p:nt,x:it,o:at,y:function(e,t){return e>>>=0,t>>>=0,ot(i().subarray(e>>>0,e+t>>>0)),0},a:I||l.wasmMemory,B:ct,e:function(e,t,n,i){return ct(e>>>0,t>>>0,n>>>0,i>>>0)}};!function(){function e(e,t){return e=function(e){var t,n={};for(t in e)!function(t){var i=e[t];n[t]=\\\"function\\\"==typeof i?function(){gt.push(t);try{return i.apply(null,arguments)}finally{W||(gt.pop()===t||Z(),ft&&1===pt&&0===gt.length&&(pt=0,F+=1,dt(Wt),\\\"undefined\\\"!=typeof Fibers&&Fibers.Mb()))}}:i}(t);return n}(e=e.exports),E=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),he.eb.push(E.wa),L.unshift(E.Z),P=t,Q(),e}var t={a:$t};if(X(),l.instantiateWasm)try{return l.instantiateWasm(t,e)}catch(e){O(\\\"Module.instantiateWasm callback failed with error: \\\"+e),u(e)}(function(e,t){var n=K;return j||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ee(n)||n.startsWith(\\\"file://\\\")||v||\\\"function\\\"!=typeof fetch?ne(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((i=>WebAssembly.instantiateStreaming(i,e).then(t,(function(i){return O(\\\"wasm streaming compile failed: \\\"+i),O(\\\"falling back to ArrayBuffer instantiation\\\"),ne(n,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),l._OrtInit=(e,t)=>(l._OrtInit=E._)(e,t),l._OrtGetLastError=(e,t)=>(l._OrtGetLastError=E.$)(e,t),l._OrtCreateSessionOptions=(e,t,n,i,r,a,o,s,u,c)=>(l._OrtCreateSessionOptions=E.aa)(e,t,n,i,r,a,o,s,u,c),l._OrtAppendExecutionProvider=(e,t)=>(l._OrtAppendExecutionProvider=E.ba)(e,t),l._OrtAddSessionConfigEntry=(e,t,n)=>(l._OrtAddSessionConfigEntry=E.ca)(e,t,n),l._OrtReleaseSessionOptions=e=>(l._OrtReleaseSessionOptions=E.da)(e),l._OrtCreateSession=(e,t,n)=>(l._OrtCreateSession=E.ea)(e,t,n),l._OrtReleaseSession=e=>(l._OrtReleaseSession=E.fa)(e),l._OrtGetInputOutputCount=(e,t,n)=>(l._OrtGetInputOutputCount=E.ga)(e,t,n),l._OrtGetInputName=(e,t)=>(l._OrtGetInputName=E.ha)(e,t),l._OrtGetOutputName=(e,t)=>(l._OrtGetOutputName=E.ia)(e,t),l._OrtFree=e=>(l._OrtFree=E.ja)(e),l._OrtCreateTensor=(e,t,n,i,r)=>(l._OrtCreateTensor=E.ka)(e,t,n,i,r),l._OrtGetTensorData=(e,t,n,i,r)=>(l._OrtGetTensorData=E.la)(e,t,n,i,r),l._OrtReleaseTensor=e=>(l._OrtReleaseTensor=E.ma)(e),l._OrtCreateRunOptions=(e,t,n,i)=>(l._OrtCreateRunOptions=E.na)(e,t,n,i),l._OrtAddRunConfigEntry=(e,t,n)=>(l._OrtAddRunConfigEntry=E.oa)(e,t,n),l._OrtReleaseRunOptions=e=>(l._OrtReleaseRunOptions=E.pa)(e),l._OrtRun=(e,t,n,i,r,a,o,s)=>(l._OrtRun=E.qa)(e,t,n,i,r,a,o,s),l._OrtEndProfiling=e=>(l._OrtEndProfiling=E.ra)(e),l._JsepOutput=(e,t,n)=>(l._JsepOutput=E.sa)(e,t,n);var Ct=l._pthread_self=()=>(Ct=l._pthread_self=E.ta)(),xt=l._malloc=e=>(xt=l._malloc=E.ua)(e),St=l._free=e=>(St=l._free=E.va)(e);l.__emscripten_tls_init=()=>(l.__emscripten_tls_init=E.wa)();var jt=l.__emscripten_thread_init=(e,t,n,i,r,a)=>(jt=l.__emscripten_thread_init=E.ya)(e,t,n,i,r,a);l.__emscripten_thread_crashed=()=>(l.__emscripten_thread_crashed=E.za)();var At,Ot=(e,t,n,i)=>(Ot=E.Aa)(e,t,n,i),Tt=e=>(Tt=E.Ba)(e),It=l.__emscripten_thread_exit=e=>(It=l.__emscripten_thread_exit=E.Ca)(e),Et=l.__emscripten_check_mailbox=()=>(Et=l.__emscripten_check_mailbox=E.Da)(),Pt=e=>(Pt=E.Ea)(e),Mt=(e,t)=>(Mt=E.Fa)(e,t),Rt=()=>(Rt=E.Ga)(),kt=e=>(kt=E.Ha)(e),Dt=e=>(Dt=E.Ia)(e),zt=l.dynCall_ii=(e,t)=>(zt=l.dynCall_ii=E.Ka)(e,t),Bt=e=>(Bt=E.La)(e),Wt=()=>(Wt=E.Ma)(),Gt=e=>(Gt=E.Na)(e),Ut=()=>(Ut=E.Oa)();function Nt(){function e(){if(!At&&(At=!0,l.calledRun=!0,!W)&&(b||ge(L),s(l),l.onRuntimeInitialized&&l.onRuntimeInitialized(),!b)){if(l.postRun)for(\\\"function\\\"==typeof l.postRun&&(l.postRun=[l.postRun]);l.postRun.length;){var e=l.postRun.shift();H.unshift(e)}ge(H)}}if(!(0<q))if(b)s(l),b||ge(L),startWorker(l);else{if(l.preRun)for(\\\"function\\\"==typeof l.preRun&&(l.preRun=[l.preRun]);l.preRun.length;)N.unshift(l.preRun.shift());ge(N),0<q||(l.setStatus?(l.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){l.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(l.___start_em_js=903144,l.___stop_em_js=903305,l.keepRuntimeAlive=V,l.wasmMemory=I,l.stackAlloc=Dt,l.stackSave=Rt,l.stackRestore=kt,l.UTF8ToString=de,l.stringToUTF8=xe,l.lengthBytesUTF8=$e,l.ExitStatus=ae,l.PThread=he,J=function e(){At||Nt(),At||(J=e)},l.preInit)for(\\\"function\\\"==typeof l.preInit&&(l.preInit=[l.preInit]);0<l.preInit.length;)l.preInit.pop()();return Nt(),e.ready});e.exports=i},9377:(e,t,n)=>{var _scriptDir,i=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,i,r=e;r.ready=new Promise(((e,n)=>{t=e,i=n})),r.jsepInit=function(e,t,n,i,a,o,s,u){r.oh=e,r.eh=t,r.gh=n,r.Tg=i,r.fh=a,r.td=o,r.hh=s,r.ih=u};var a,o,s,u=Object.assign({},r),l=\\\"./this.program\\\",c=(e,t)=>{throw t},d=\\\"object\\\"==typeof window,p=\\\"function\\\"==typeof importScripts,f=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";if(f){var g=n(1384),m=n(908);h=p?m.dirname(h)+\\\"/\\\":__dirname+\\\"/\\\",a=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),s=e=>((e=a(e,!0)).buffer||(e=new Uint8Array(e)),e),o=(e,t,n,i=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFile(e,i?void 0:\\\"utf8\\\",((e,r)=>{e?n(e):t(i?r.buffer:r)}))},!r.thisProgram&&1<process.argv.length&&(l=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),c=(e,t)=>{throw process.exitCode=e,t},r.inspect=()=>\\\"[Emscripten Module object]\\\"}else(d||p)&&(p?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",a=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},p&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),o=(e,t,n)=>{var i=new XMLHttpRequest;i.open(\\\"GET\\\",e,!0),i.responseType=\\\"arraybuffer\\\",i.onload=()=>{200==i.status||0==i.status&&i.response?t(i.response):n()},i.onerror=n,i.send(null)});var y,v=r.print||console.log.bind(console),b=r.printErr||console.error.bind(console);Object.assign(r,u),u=null,r.thisProgram&&(l=r.thisProgram),r.quit&&(c=r.quit),r.wasmBinary&&(y=r.wasmBinary);var w=r.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&W(\\\"no native wasm support detected\\\");var _,$,C,x,S,j,A,O,T=!1;function I(){var e=_.buffer;r.HEAP8=x=new Int8Array(e),r.HEAP16=new Int16Array(e),r.HEAP32=j=new Int32Array(e),r.HEAPU8=S=new Uint8Array(e),r.HEAPU16=new Uint16Array(e),r.HEAPU32=A=new Uint32Array(e),r.HEAPF32=new Float32Array(e),r.HEAPF64=O=new Float64Array(e)}var E=[],P=[],M=[];function R(){var e=r.preRun.shift();E.unshift(e)}var k,D=0,z=null,B=null;function W(e){throw r.onAbort&&r.onAbort(e),b(e=\\\"Aborted(\\\"+e+\\\")\\\"),T=!0,C=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),i(e),e}function G(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!G(k=\\\"ort-wasm-simd.wasm\\\")){var U=k;k=r.locateFile?r.locateFile(U,h):h+U}function N(e){if(e==k&&y)return new Uint8Array(y);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function L(e,t,n){return function(e){if(!y&&(d||p)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>N(e)));if(o)return new Promise(((t,n)=>{o(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>N(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{b(\\\"failed to asynchronously prepare wasm: \\\"+e),W(e)}))}var H,F={1275120:()=>{r.jsepRunPromise=new Promise((function(e){r.jh=e}))},1275215:e=>{r.jh(e)},1275253:e=>r.eh(e),1275286:e=>r.gh(e),1275318:(e,t,n)=>{r.Tg(e,t,n,!0)},1275357:(e,t,n)=>{r.Tg(e,t,n)},1275390:e=>{r.td(\\\"Abs\\\",e,void 0)},1275441:e=>{r.td(\\\"Neg\\\",e,void 0)},1275492:e=>{r.td(\\\"Floor\\\",e,void 0)},1275545:e=>{r.td(\\\"Ceil\\\",e,void 0)},1275597:e=>{r.td(\\\"Reciprocal\\\",e,void 0)},1275655:e=>{r.td(\\\"Sqrt\\\",e,void 0)},1275707:e=>{r.td(\\\"Exp\\\",e,void 0)},1275758:e=>{r.td(\\\"Erf\\\",e,void 0)},1275809:e=>{r.td(\\\"Sigmoid\\\",e,void 0)},1275864:e=>{r.td(\\\"Log\\\",e,void 0)},1275915:e=>{r.td(\\\"Sin\\\",e,void 0)},1275966:e=>{r.td(\\\"Cos\\\",e,void 0)},1276017:e=>{r.td(\\\"Tan\\\",e,void 0)},1276068:e=>{r.td(\\\"Asin\\\",e,void 0)},1276120:e=>{r.td(\\\"Acos\\\",e,void 0)},1276172:e=>{r.td(\\\"Atan\\\",e,void 0)},1276224:e=>{r.td(\\\"Sinh\\\",e,void 0)},1276276:e=>{r.td(\\\"Cosh\\\",e,void 0)},1276328:e=>{r.td(\\\"Asinh\\\",e,void 0)},1276381:e=>{r.td(\\\"Acosh\\\",e,void 0)},1276434:e=>{r.td(\\\"Atanh\\\",e,void 0)},1276487:e=>{r.td(\\\"Tanh\\\",e,void 0)},1276539:(e,t,n)=>{r.td(\\\"ClipV10\\\",e,{min:t,max:n})},1276611:e=>{r.td(\\\"Clip\\\",e,void 0)},1276663:(e,t)=>{r.td(\\\"Elu\\\",e,{alpha:t})},1276721:e=>{r.td(\\\"Relu\\\",e,void 0)},1276773:(e,t)=>{r.td(\\\"LeakyRelu\\\",e,{alpha:t})},1276837:(e,t)=>{r.td(\\\"ThresholdedRelu\\\",e,{alpha:t})},1276907:(e,t)=>{r.td(\\\"Cast\\\",e,{to:t})},1276965:e=>{r.td(\\\"Add\\\",e,void 0)},1277016:e=>{r.td(\\\"Sub\\\",e,void 0)},1277067:e=>{r.td(\\\"Mul\\\",e,void 0)},1277118:e=>{r.td(\\\"Div\\\",e,void 0)},1277169:e=>{r.td(\\\"Pow\\\",e,void 0)},1277220:(e,t,n,i,a)=>{r.td(\\\"ReduceMean\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1277384:(e,t,n,i,a)=>{r.td(\\\"ReduceMax\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1277547:(e,t,n,i,a)=>{r.td(\\\"ReduceMin\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1277710:(e,t,n,i,a)=>{r.td(\\\"ReduceProd\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1277874:(e,t,n,i,a)=>{r.td(\\\"ReduceSum\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1278037:(e,t,n,i,a)=>{r.td(\\\"ReduceL1\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1278199:(e,t,n,i,a)=>{r.td(\\\"ReduceL2\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1278361:(e,t,n,i,a)=>{r.td(\\\"ReduceLogSum\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1278527:(e,t,n,i,a)=>{r.td(\\\"ReduceSumSquare\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1278696:(e,t,n,i,a)=>{r.td(\\\"ReduceLogSumExp\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1278865:(e,t,n)=>{r.td(\\\"Transpose\\\",e,{perm:t?Array.from(j.subarray(n>>>0,n+t>>>0)):[]})},1278978:(e,t,n,i,a,o,s,u,l,c)=>{r.td(\\\"Conv\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,dilations:[n],group:i,kernel_shape:[a],pads:[o,s],strides:[u],w_is_const:()=>!!x[c>>>0]})},1279206:(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>{r.td(\\\"Conv\\\",e,{format:h?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,dilations:[n,i],group:a,kernel_shape:[o,s],pads:[u,l,c,d],strides:[p,f],w_is_const:()=>!!x[g>>>0]})},1279465:(e,t,n,i,a,o,s,u,l,c)=>{r.td(\\\"Conv\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,dilations:[n],group:i,kernel_shape:[a],pads:[o,s],strides:[u],w_is_const:()=>!!x[c>>>0]})},1279693:(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>{r.td(\\\"Conv\\\",e,{format:h?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,dilations:[n,i],group:a,kernel_shape:[o,s],pads:[u,l,c,d],strides:[p,f],w_is_const:()=>!!x[g>>>0]})},1279952:(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>{r.td(\\\"ConvTranspose\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:t,dilations:[n],group:i,kernel_shape:[a],pads:[o,s],strides:[u],wIsConst:()=>!!x[c>>>0],outputPadding:d?Array.from(j.subarray(p>>>0,p+d>>>0)):[],outputShape:f?Array.from(j.subarray(h>>>0,h+f>>>0)):[]})},1280332:(e,t,n,i,a,o,s,u,l,c,d,p,f)=>{r.td(\\\"ConvTranspose\\\",e,{format:u?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:t,dilations:Array.from(j.subarray(n>>>0,n+2>>>0)),group:i,kernelShape:Array.from(j.subarray(a>>>0,a+2>>>0)),pads:Array.from(j.subarray(o>>>0,o+4>>>0)),strides:Array.from(j.subarray(s>>>0,s+2>>>0)),wIsConst:()=>!!x[l>>>0],outputPadding:0<c?Array.from(j.subarray(d>>>0,d+c>>>0)):[],outputShape:0<p?Array.from(j.subarray(f>>>0,f+p>>>0)):[]})},1280855:(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>{r.td(\\\"ConvTranspose\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:t,dilations:[n],group:i,kernel_shape:[a],pads:[o,s],strides:[u],wIsConst:()=>!!x[c>>>0],outputPadding:d?Array.from(j.subarray(p>>>0,p+d>>>0)):[],outputShape:f?Array.from(j.subarray(h>>>0,h+f>>>0)):[]})},1281235:(e,t,n,i,a,o,s,u,l,c,d,p,f)=>{r.td(\\\"ConvTranspose\\\",e,{format:u?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:t,dilations:Array.from(j.subarray(n>>>0,n+2>>>0)),group:i,kernelShape:Array.from(j.subarray(a>>>0,a+2>>>0)),pads:Array.from(j.subarray(o>>>0,o+4>>>0)),strides:Array.from(j.subarray(s>>>0,s+2>>>0)),wIsConst:()=>!!x[l>>>0],outputPadding:0<c?Array.from(j.subarray(d>>>0,d+c>>>0)):[],outputShape:0<p?Array.from(j.subarray(f>>>0,f+p>>>0)):[]})},1281758:(e,t)=>{r.td(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1281849:(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>{r.td(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:a,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},1282133:(e,t)=>{r.td(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1282224:(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>{r.td(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:a,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},1282508:(e,t)=>{r.td(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1282595:(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>{r.td(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:a,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},1282875:(e,t)=>{r.td(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1282962:(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>{r.td(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:i,storage_order:a,dilations:[o,s],kernel_shape:[u,l],pads:[c,d,p,f],strides:[h,g]})},1283242:(e,t,n,i,a)=>{r.td(\\\"Gemm\\\",e,{alpha:t,beta:n,transA:i,transB:a})},1283346:e=>{r.td(\\\"MatMul\\\",e,void 0)},1283400:(e,t,n,i)=>{r.td(\\\"ArgMax\\\",e,{keepDims:!!t,selectLastIndex:!!n,axis:i})},1283508:(e,t,n,i)=>{r.td(\\\"ArgMin\\\",e,{keepDims:!!t,selectLastIndex:!!n,axis:i})},1283616:(e,t)=>{r.td(\\\"Softmax\\\",e,{axis:t})},1283679:(e,t)=>{r.td(\\\"Concat\\\",e,{axis:t})},1283739:(e,t,n,i,a)=>{r.td(\\\"Split\\\",e,{axis:t,numOutputs:n,splitSizes:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[]})},1283884:e=>{r.td(\\\"Expand\\\",e,void 0)},1283938:(e,t)=>{r.td(\\\"Gather\\\",e,{axis:Number(t)})},1284009:(e,t,n,i,a,o,s,u,l,c,d)=>{r.td(\\\"Resize\\\",e,{antialias:t,axes:n?Array.from(j.subarray(i>>>0,i+n>>>0)):[],coordinateTransformMode:ne(a),cubicCoeffA:o,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:ne(l),mode:ne(c),nearestMode:ne(d)})},1284360:(e,t,n,i,a,o,s)=>{r.td(\\\"Slice\\\",e,{starts:t?Array.from(j.subarray(n>>>0,n+t>>>0)):[],ends:i?Array.from(j.subarray(a>>>0,a+i>>>0)):[],axes:o?Array.from(j.subarray(s>>>0,s+o>>>0)):[]})},1284591:e=>{r.td(\\\"Tile\\\",e,void 0)},1284643:(e,t,n)=>{r.td(\\\"LayerNormalization\\\",e,{axis:Number(t),epsilon:Number(n)})},1284750:(e,t,n)=>{r.td(\\\"InstanceNormalization\\\",e,{epsilon:t,format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},1284864:(e,t,n)=>{r.td(\\\"InstanceNormalization\\\",e,{epsilon:t,format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},1284978:e=>{r.td(\\\"Gelu\\\",e,void 0)},1285030:(e,t)=>{r.td(\\\"SkipLayerNormalization\\\",e,{epsilon:t})},1285111:e=>{r.hh(e)},1285145:(e,t)=>r.ih(e,t)};function V(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}var K=e=>{for(;0<e.length;)e.shift()(r)},q=[],Y=0,J=0;function X(e){this.Mg=e,this.Ig=e-24,this.ah=function(e){A[this.Ig+4>>2>>>0]=e},this.Rg=function(){return A[this.Ig+4>>2>>>0]},this.$g=function(e){A[this.Ig+8>>2>>>0]=e},this.Ug=function(e){x[this.Ig+12>>0>>>0]=e?1:0},this.Xg=function(){return 0!=x[this.Ig+12>>0>>>0]},this.Vg=function(e){x[this.Ig+13>>0>>>0]=e?1:0},this.dh=function(){return 0!=x[this.Ig+13>>0>>>0]},this.Zg=function(e,t){this.Sg(0),this.ah(e),this.$g(t)},this.Sg=function(e){A[this.Ig+16>>2>>>0]=e},this.Wg=function(){return A[this.Ig+16>>2>>>0]},this.Yg=function(){if(We(this.Rg()))return A[this.Mg>>2>>>0];var e=this.Wg();return 0!==e?e:this.Mg}}var Q,Z=e=>{var t=J;if(!t)return Pe(0),0;var n=new X(t);n.Sg(t);var i=n.Rg();if(!i)return Pe(0),t;for(var r in e){var a=e[r];if(0===a||a===i)break;if(Be(a,i,n.Ig+16))return Pe(a),t}return Pe(i),t},ee=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,te=(e,t,n)=>{var i=(t>>>=0)+n;for(n=t;e[n]&&!(n>=i);)++n;if(16<n-t&&e.buffer&&ee)return ee.decode(e.subarray(t,n));for(i=\\\"\\\";t<n;){var r=e[t++];if(128&r){var a=63&e[t++];if(192==(224&r))i+=String.fromCharCode((31&r)<<6|a);else{var o=63&e[t++];65536>(r=224==(240&r)?(15&r)<<12|a<<6|o:(7&r)<<18|a<<12|o<<6|63&e[t++])?i+=String.fromCharCode(r):(r-=65536,i+=String.fromCharCode(55296|r>>10,56320|1023&r))}}else i+=String.fromCharCode(r)}return i},ne=(e,t)=>(e>>>=0)?te(S,e,t):\\\"\\\",ie=e=>{for(var t=0,n=0;n<e.length;++n){var i=e.charCodeAt(n);127>=i?t++:2047>=i?t+=2:55296<=i&&57343>=i?(t+=4,++n):t+=3}return t},re=(e,t,n,i)=>{if(!(0<i))return 0;var r=n>>>=0;i=n+i-1;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),127>=o){if(n>=i)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=i)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=i)break;t[n++>>>0]=224|o>>12}else{if(n+3>=i)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-r},ae=e=>0==e%4&&(0!=e%100||0==e%400),oe=[0,31,60,91,121,152,182,213,244,274,305,335],se=[0,31,59,90,120,151,181,212,243,273,304,334],ue=e=>{var t=ie(e)+1,n=Te(t);return n&&re(e,S,n,t),n},le=[],ce=(e,t)=>{var n;for(le.length=0,t>>=2;n=S[e++>>>0];)t+=105!=n&t,le.push(105==n?j[t>>>0]:O[t++>>>1]),++t;return le},de={},pe=()=>{if(!Q){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:l||\\\"./this.program\\\"};for(e in de)void 0===de[e]?delete t[e]:t[e]=de[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Q=n}return Q},fe=[null,[],[]],he=[31,29,31,30,31,30,31,31,30,31,30,31],ge=[31,28,31,30,31,30,31,31,30,31,30,31];function me(e,t,n,i){function r(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function a(e,t){return r(e,t,\\\"0\\\")}function o(e,t){function n(e){return 0>e?-1:0<e?1:0}var i;return 0===(i=n(e.getFullYear()-t.getFullYear()))&&0===(i=n(e.getMonth()-t.getMonth()))&&(i=n(e.getDate()-t.getDate())),i}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.Kg;for(e=new Date(new Date(e.Lg+1900,0,1).getTime());0<t;){var n=e.getMonth(),i=(ae(e.getFullYear())?he:ge)[n];if(!(t>i-e.getDate())){e.setDate(e.getDate()+t);break}t-=i-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=o(t,e)?0>=o(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0;var l=j[40+(i>>>=0)>>2>>>0];for(var c in i={mh:j[i>>2>>>0],lh:j[i+4>>2>>>0],Ng:j[i+8>>2>>>0],Qg:j[i+12>>2>>>0],Og:j[i+16>>2>>>0],Lg:j[i+20>>2>>>0],Jg:j[i+24>>2>>>0],Kg:j[i+28>>2>>>0],ph:j[i+32>>2>>>0],kh:j[i+36>>2>>>0],nh:l?ne(l):\\\"\\\"},n=ne(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(c,\\\"g\\\"),l[c]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(c in l={\\\"%a\\\":e=>d[e.Jg].substring(0,3),\\\"%A\\\":e=>d[e.Jg],\\\"%b\\\":e=>p[e.Og].substring(0,3),\\\"%B\\\":e=>p[e.Og],\\\"%C\\\":e=>a((e.Lg+1900)/100|0,2),\\\"%d\\\":e=>a(e.Qg,2),\\\"%e\\\":e=>r(e.Qg,2,\\\" \\\"),\\\"%g\\\":e=>u(e).toString().substring(2),\\\"%G\\\":e=>u(e),\\\"%H\\\":e=>a(e.Ng,2),\\\"%I\\\":e=>(0==(e=e.Ng)?e=12:12<e&&(e-=12),a(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.Og-1;t+=(ae(e.Lg+1900)?he:ge)[n++]);return a(e.Qg+t,3)},\\\"%m\\\":e=>a(e.Og+1,2),\\\"%M\\\":e=>a(e.lh,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ng&&12>e.Ng?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>a(e.mh,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Jg||7,\\\"%U\\\":e=>a(Math.floor((e.Kg+7-e.Jg)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Kg+7-(e.Jg+6)%7)/7);if(2>=(e.Jg+371-e.Kg-2)%7&&t++,t)53==t&&(4==(n=(e.Jg+371-e.Kg)%7)||3==n&&ae(e.Lg)||(t=1));else{t=52;var n=(e.Jg+7-e.Kg-1)%7;(4==n||5==n&&ae(e.Lg%400-1))&&t++}return a(t,2)},\\\"%w\\\":e=>e.Jg,\\\"%W\\\":e=>a(Math.floor((e.Kg+7-(e.Jg+6)%7)/7),2),\\\"%y\\\":e=>(e.Lg+1900).toString().substring(2),\\\"%Y\\\":e=>e.Lg+1900,\\\"%z\\\":e=>{var t=0<=(e=e.kh);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.nh,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(c)&&(n=n.replace(new RegExp(c,\\\"g\\\"),l[c](i)));return c=function(e){var t=Array(ie(e)+1);return re(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),c.length>t?0:(x.set(c,e>>>0),c.length-1)}function ye(e){try{e()}catch(e){W(e)}}var ve=0,be=null,we=0,_e=[],$e={},Ce={},xe=0,Se=null,je=[];var Ae={Ga:function(e,t,n){return function(e){return function(e){if(!T){if(0===ve){var t=!1,n=!1;e(((e=0)=>{if(!T&&(we=e,t=!0,n)){ve=2,ye((()=>Li(be))),\\\"undefined\\\"!=typeof Browser&&Browser.Pg.bh&&Browser.Pg.resume(),e=!1;try{var i=(0,$[Ce[j[be+8>>2>>>0]]])()}catch(t){i=t,e=!0}var r=!1;if(!be){var a=Se;a&&(Se=null,(e?a.reject:a.resolve)(i),r=!0)}if(e&&!r)throw i}})),n=!0,t||(ve=1,be=function(){var e=Te(65548),t=e+12;A[e>>2>>>0]=t,A[e+4>>2>>>0]=t+65536,t=_e[0];var n=$e[t];return void 0===n&&(n=xe++,$e[t]=n,Ce[n]=t),j[e+8>>2>>>0]=n,e}(),\\\"undefined\\\"!=typeof Browser&&Browser.Pg.bh&&Browser.Pg.pause(),ye((()=>Ui(be))))}else 2===ve?(ve=0,ye(Hi),Ie(be),be=null,je.forEach((e=>{if(!T)try{if(e(),!w)try{C=C=e=C,w||(r.onExit&&r.onExit(e),T=!0),c(e,new V(e))}catch(e){e instanceof V||\\\"unwind\\\"==e||c(1,e)}}catch(e){e instanceof V||\\\"unwind\\\"==e||c(1,e)}}))):W(`invalid state: ${ve}`);return we}}((t=>{e().then(t)}))}((async()=>{await r.fh(e,t,n)}))},u:function(e){return(e=new X(e>>>0)).Xg()||(e.Ug(!0),Y--),e.Vg(!1),q.push(e),ze(e.Mg),e.Yg()},B:function(){Ee(0,0);var e=q.pop();De(e.Mg),J=0},a:function(){return Z([])},k:function(e){return Z([e>>>0])},w:function(e,t){return Z([e>>>0,t>>>0])},q:function(e,t,n){return Z([e>>>0,t>>>0,n>>>0])},pa:function(){var e=q.pop();e||W(\\\"no exception to throw\\\");var t=e.Mg;throw e.dh()||(q.push(e),e.Vg(!0),e.Ug(!1),Y++),J=t},s:function(e,t,n){throw new X(e>>>=0).Zg(t>>>0,n>>>0),Y++,J=e},Ja:function(){return Y},g:function(e){throw J||(J=e>>>0),J},qa:function(){return 0},nc:function(){},Pa:function(){},Ra:function(){},Ia:function(){return 0},Tb:function(){},Sa:function(){},Ib:function(){},Ca:function(){},Qa:function(){},Na:function(){},cc:function(){},Oa:function(){},Sc:()=>!0,Nc:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),j[n>>2>>>0]=e.getUTCSeconds(),j[n+4>>2>>>0]=e.getUTCMinutes(),j[n+8>>2>>>0]=e.getUTCHours(),j[n+12>>2>>>0]=e.getUTCDate(),j[n+16>>2>>>0]=e.getUTCMonth(),j[n+20>>2>>>0]=e.getUTCFullYear()-1900,j[n+24>>2>>>0]=e.getUTCDay(),j[n+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Oc:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),j[n>>2>>>0]=e.getSeconds(),j[n+4>>2>>>0]=e.getMinutes(),j[n+8>>2>>>0]=e.getHours(),j[n+12>>2>>>0]=e.getDate(),j[n+16>>2>>>0]=e.getMonth(),j[n+20>>2>>>0]=e.getFullYear()-1900,j[n+24>>2>>>0]=e.getDay(),j[n+28>>2>>>0]=(ae(e.getFullYear())?oe:se)[e.getMonth()]+e.getDate()-1|0,j[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var i=new Date(e.getFullYear(),0,1).getTimezoneOffset();j[n+32>>2>>>0]=0|(t!=i&&e.getTimezoneOffset()==Math.min(i,t))},Pc:function(e){e>>>=0;var t=new Date(j[e+20>>2>>>0]+1900,j[e+16>>2>>>0],j[e+12>>2>>>0],j[e+8>>2>>>0],j[e+4>>2>>>0],j[e>>2>>>0],0),n=j[e+32>>2>>>0],i=t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),a=new Date(t.getFullYear(),0,1).getTimezoneOffset(),o=Math.min(a,r);return 0>n?j[e+32>>2>>>0]=Number(r!=a&&o==i):0<n!=(o==i)&&(r=Math.max(a,r),t.setTime(t.getTime()+6e4*((0<n?o:r)-i))),j[e+24>>2>>>0]=t.getDay(),j[e+28>>2>>>0]=(ae(t.getFullYear())?oe:se)[t.getMonth()]+t.getDate()-1|0,j[e>>2>>>0]=t.getSeconds(),j[e+4>>2>>>0]=t.getMinutes(),j[e+8>>2>>>0]=t.getHours(),j[e+12>>2>>>0]=t.getDate(),j[e+16>>2>>>0]=t.getMonth(),j[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,Pe((H=e,1<=+Math.abs(H)?0<H?+Math.floor(H/4294967296)>>>0:~~+Math.ceil((H-+(~~H>>>0))/4294967296)>>>0:0)),e>>>0},Lc:function(){return-52},Mc:function(){},La:function(e,t,n){function i(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}n>>>=0;var r=(new Date).getFullYear(),a=new Date(r,0,1),o=new Date(r,6,1);r=a.getTimezoneOffset();var s=o.getTimezoneOffset();A[e>>>0>>2>>>0]=60*Math.max(r,s),j[t>>>0>>2>>>0]=Number(r!=s),e=i(a),t=i(o),e=ue(e),t=ue(t),s<r?(A[n>>2>>>0]=e,A[n+4>>2>>>0]=t):(A[n>>2>>>0]=t,A[n+4>>2>>>0]=e)},ja:()=>{W(\\\"\\\")},y:function(e,t,n){return e>>>=0,t=ce(t>>>0,n>>>0),F[e].apply(null,t)},wa:function(e,t,n){return e>>>=0,t=ce(t>>>0,n>>>0),F[e].apply(null,t)},Ea:function(){return Date.now()},Ma:function(){return 4294901760},J:()=>performance.now(),xb:function(e,t,n){return t>>>=0,S.copyWithin(e>>>0>>>0,t>>>0,t+(n>>>0)>>>0)},Ka:function(e){e>>>=0;var t=S.length;if(4294901760<e)return!1;for(var n=1;4>=n;n*=2){var i=t*(1+.2/n);i=Math.min(i,e+100663296);var r=Math;i=Math.max(e,i);e:{r=r.min.call(r,4294901760,i+(65536-i%65536)%65536)-_.buffer.byteLength+65535>>>16;try{_.grow(r),I();var a=1;break e}catch(e){}a=void 0}if(a)return!0}return!1},bb:function(e,t){e>>>=0,t>>>=0;var n=0;return pe().forEach((function(i,r){var a=t+n;for(r=A[e+4*r>>2>>>0]=a,a=0;a<i.length;++a)x[r++>>0>>>0]=i.charCodeAt(a);x[r>>0>>>0]=0,n+=i.length+1})),0},mb:function(e,t){e>>>=0,t>>>=0;var n=pe();A[e>>2>>>0]=n.length;var i=0;return n.forEach((function(e){i+=e.length+1})),A[t>>2>>>0]=i,0},ma:()=>52,Ba:function(){return 52},Qc:function(){return 70},Aa:function(e,t,n,i){t>>>=0,n>>>=0,i>>>=0;for(var r=0,a=0;a<n;a++){var o=A[t>>2>>>0],s=A[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var l=S[o+u>>>0],c=fe[e];0===l||10===l?((1===e?v:b)(te(c,0)),c.length=0):c.push(l)}r+=s}return A[i>>2>>>0]=r,0},ia:function(e,t){var n=Me();try{return st(e,t)}catch(e){if(Re(n),e!==e+0)throw e;Ee(1,0)}},Rc:function(e,t,n){var i=Me();try{return ct(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},L:function(e,t,n,i,r,a,o){var s=Me();try{return sn(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},M:function(e,t){var n=Me();try{return at(e,t)}catch(e){if(Re(n),e!==e+0)throw e;Ee(1,0)}},Tc:function(e,t,n){var i=Me();try{return ut(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},Vc:function(e,t,n,i){var r=Me();try{return Gi(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},A:function(e,t,n,i,r){var a=Me();try{return Di(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},z:function(e){var t=Me();try{return Qe(e)}catch(e){if(Re(t),e!==e+0)throw e;Ee(1,0)}},b:function(e,t){var n=Me();try{return Ne(e,t)}catch(e){if(Re(n),e!==e+0)throw e;Ee(1,0)}},Da:function(e,t,n){var i=Me();try{return Oi(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},ca:function(e,t,n){var i=Me();try{return Jn(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},f:function(e,t,n){var i=Me();try{return Fe(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},ra:function(e,t,n,i){var r=Me();try{return Ti(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},h:function(e,t,n,i){var r=Me();try{return Ye(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},F:function(e,t,n,i,r,a){var o=Me();try{return yi(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},i:function(e,t,n,i,r){var a=Me();try{return Ke(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},Uc:function(e,t,n,i,r,a){var o=Me();try{return Zn(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},j:function(e,t,n,i,r,a){var o=Me();try{return Ve(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},t:function(e,t,n,i,r,a,o){var s=Me();try{return Je(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},r:function(e,t,n,i,r,a,o,s){var u=Me();try{return rt(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},n:function(e,t,n,i,r,a,o,s,u){var l=Me();try{return dt(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},V:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{return mt(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},X:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{return oi(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},K:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{return jt(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},oa:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m){var y=Me();try{return Zt(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m)}catch(e){if(Re(y),e!==e+0)throw e;Ee(1,0)}},$:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b){var w=Me();try{return nn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b)}catch(e){if(Re(w),e!==e+0)throw e;Ee(1,0)}},la:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b){var w=Me();try{return si(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b)}catch(e){if(Re(w),e!==e+0)throw e;Ee(1,0)}},eb:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{return bi(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},wc:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{return St(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},$a:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g){var m=Me();try{return Ci(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g)}catch(e){if(Re(m),e!==e+0)throw e;Ee(1,0)}},cb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f){var h=Me();try{return _i(e,t,n,i,r,a,o,s,u,l,c,d,p,f)}catch(e){if(Re(h),e!==e+0)throw e;Ee(1,0)}},Bc:function(e,t,n,i,r,a,o){var s=Me();try{return et(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},Qb:function(e,t,n,i,r,a,o,s){var u=Me();try{return Cn(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},Cc:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{return vt(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},hb:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{return gi(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},jb:function(e,t,n,i,r,a){var o=Me();try{return fi(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},Mb:function(e,t,n,i,r,a,o){var s=Me();try{return An(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},db:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{return wi(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},dc:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{return an(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},Kc:function(e,t,n,i,r){var a=Me();try{return Le(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},lc:function(e,t,n,i,r,a){var o=Me();try{return Nt(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},fb:function(e,t,n,i,r,a,o){var s=Me();try{return vi(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},ab:function(e,t,n,i,r,a,o,s){var u=Me();try{return $i(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},zb:function(e,t,n,i,r,a,o,s,u){var l=Me();try{return Gn(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},hc:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{return Vt(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},kc:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h){var g=Me();try{return Lt(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h)}catch(e){if(Re(g),e!==e+0)throw e;Ee(1,0)}},bc:function(e,t,n,i,r,a,o,s,u){var l=Me();try{return on(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},Jc:function(e,t,n,i){var r=Me();try{return Ze(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},Ya:function(e,t,n,i,r){var a=Me();try{return ji(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},_a:function(e,t,n,i,r,a,o,s){var u=Me();try{return xi(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},pb:function(e,t,n,i,r,a,o,s){var u=Me();try{return li(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},lb:function(e,t,n,i,r,a,o,s,u){var l=Me();try{return di(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},Za:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{return Si(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},fc:function(e,t,n){var i=Me();try{return tn(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},Hb:function(e,t,n,i,r){var a=Me();try{return En(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},kb:function(e,t,n,i,r,a,o,s,u){var l=Me();try{return pi(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},Ta:function(e){var t=Me();try{return Xe(e)}catch(e){if(Re(t),e!==e+0)throw e;Ee(1,0)}},Rb:function(e,t,n){var i=Me();try{return zi(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},Hc:function(e,t){var n=Me();try{return ot(e,t)}catch(e){if(Re(n),e!==e+0)throw e;Ee(1,0)}},xc:function(e,t,n){var i=Me();try{return lt(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},qc:function(e,t,n,i){var r=Me();try{return Dt(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},ob:function(e,t,n,i,r){var a=Me();try{return Wi(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},ic:function(e,t,n,i,r){var a=Me();try{return Ft(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},Gb:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{return Mn(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},Fb:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{return Pn(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},c:function(e){var t=Me();try{He(e)}catch(e){if(Re(t),e!==e+0)throw e;Ee(1,0)}},Z:function(e,t,n,i,r){var a=Me();try{Yt(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},p:function(e,t){var n=Me();try{Ge(e,t)}catch(e){if(Re(n),e!==e+0)throw e;Ee(1,0)}},O:function(e,t,n,i){var r=Me();try{Ii(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},Y:function(e,t,n){var i=Me();try{Ln(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},ha:function(e,t,n,i,r,a,o){var s=Me();try{It(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},e:function(e,t,n){var i=Me();try{Ue(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},za:function(e,t,n,i){var r=Me();try{xt(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},H:function(e,t,n,i){var r=Me();try{Hn(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},da:function(e,t,n,i,r){var a=Me();try{Kt(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},N:function(e,t,n,i,r){var a=Me();try{$n(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},tb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g){var m=Me();try{qn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g)}catch(e){if(Re(m),e!==e+0)throw e;Ee(1,0)}},fa:function(e,t,n,i,r,a,o){var s=Me();try{Pt(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},d:function(e,t,n,i){var r=Me();try{qe(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},xa:function(e,t,n,i,r){var a=Me();try{zt(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},ba:function(e,t,n,i,r){var a=Me();try{ui(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},l:function(e,t,n,i,r){var a=Me();try{it(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},va:function(e,t,n,i,r,a,o){var s=Me();try{Jt(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},m:function(e,t,n,i,r,a){var o=Me();try{nt(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},ya:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{Mt(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},ua:function(e,t,n,i,r,a,o,s){var u=Me();try{qt(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},Fa:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{Xn(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},o:function(e,t,n,i,r,a,o){var s=Me();try{ft(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},U:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g){var m=Me();try{dn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g)}catch(e){if(Re(m),e!==e+0)throw e;Ee(1,0)}},ga:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m){var y=Me();try{cn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m)}catch(e){if(Re(y),e!==e+0)throw e;Ee(1,0)}},T:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h){var g=Me();try{pn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h)}catch(e){if(Re(g),e!==e+0)throw e;Ee(1,0)}},na:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{Fn(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},x:function(e,t,n,i,r,a,o,s){var u=Me();try{gt(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},C:function(e,t,n,i,r,a,o,s,u){var l=Me();try{yt(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},D:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{Ct(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},W:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{Rt(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},ta:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{Bn(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},ea:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f){var h=Me();try{Xt(e,t,n,i,r,a,o,s,u,l,c,d,p,f)}catch(e){if(Re(h),e!==e+0)throw e;Ee(1,0)}},P:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{ti(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},G:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{Bt(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},E:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{en(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},aa:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f){var h=Me();try{At(e,t,n,i,r,a,o,s,u,l,c,d,p,f)}catch(e){if(Re(h),e!==e+0)throw e;Ee(1,0)}},S:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h){var g=Me();try{Bi(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h)}catch(e){if(Re(g),e!==e+0)throw e;Ee(1,0)}},ka:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g){var m=Me();try{Pi(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g)}catch(e){if(Re(m),e!==e+0)throw e;Ee(1,0)}},_:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m){var y=Me();try{ii(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m)}catch(e){if(Re(y),e!==e+0)throw e;Ee(1,0)}},sa:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v){var b=Me();try{ni(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v)}catch(e){if(Re(b),e!==e+0)throw e;Ee(1,0)}},Q:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b){var w=Me();try{ri(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b)}catch(e){if(Re(w),e!==e+0)throw e;Ee(1,0)}},R:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w){var _=Me();try{Yn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w)}catch(e){if(Re(_),e!==e+0)throw e;Ee(1,0)}},gc:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{Qt(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},wb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g){var m=Me();try{Nn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g)}catch(e){if(Re(m),e!==e+0)throw e;Ee(1,0)}},qb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f){var h=Me();try{ai(e,t,n,i,r,a,o,s,u,l,c,d,p,f)}catch(e){if(Re(h),e!==e+0)throw e;Ee(1,0)}},Cb:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{Dn(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},yb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g){var m=Me();try{Un(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g)}catch(e){if(Re(m),e!==e+0)throw e;Ee(1,0)}},yc:function(e,t,n,i,r,a,o,s){var u=Me();try{$t(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},Lb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f){var h=Me();try{On(e,t,n,i,r,a,o,s,u,l,c,d,p,f)}catch(e){if(Re(h),e!==e+0)throw e;Ee(1,0)}},vb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j){var A=Me();try{Vn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j)}catch(e){if(Re(A),e!==e+0)throw e;Ee(1,0)}},Db:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{kn(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},Nb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h){var g=Me();try{jn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h)}catch(e){if(Re(g),e!==e+0)throw e;Ee(1,0)}},zc:function(e,t,n,i,r,a,o){var s=Me();try{_t(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},nb:function(e,t,n,i,r,a,o,s){var u=Me();try{ci(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},Kb:function(e,t,n,i,r,a,o,s,u){var l=Me();try{Tn(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},rb:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{ei(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},Wa:function(e,t,n,i,r,a){var o=Me();try{ki(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},oc:function(e,t,n,i,r,a,o){var s=Me();try{Gt(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},Ec:function(e,t,n,i,r,a,o,s){var u=Me();try{Mi(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},Xa:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{Ai(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},Ob:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{Sn(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},uc:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{Tt(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},Ab:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h){var g=Me();try{Wn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h)}catch(e){if(Re(g),e!==e+0)throw e;Ee(1,0)}},ib:function(e,t,n,i,r,a,o,s,u,l,c){var d=Me();try{hi(e,t,n,i,r,a,o,s,u,l,c)}catch(e){if(Re(d),e!==e+0)throw e;Ee(1,0)}},sc:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{Et(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},Gc:function(e,t,n,i,r){var a=Me();try{pt(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},tc:function(e,t,n,i,r,a){var o=Me();try{bt(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},Ac:function(e,t,n,i,r,a,o,s){var u=Me();try{wt(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},Va:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f){var h=Me();try{Ri(e,t,n,i,r,a,o,s,u,l,c,d,p,f)}catch(e){if(Re(h),e!==e+0)throw e;Ee(1,0)}},Dc:function(e,t,n,i,r,a,o){var s=Me();try{un(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},ub:function(e,t,n,i,r,a,o,s){var u=Me();try{Kn(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},Jb:function(e,t,n,i,r,a,o,s,u,l){var c=Me();try{In(e,t,n,i,r,a,o,s,u,l)}catch(e){if(Re(c),e!==e+0)throw e;Ee(1,0)}},vc:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h){var g=Me();try{Ot(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h)}catch(e){if(Re(g),e!==e+0)throw e;Ee(1,0)}},Ic:function(e,t,n,i){var r=Me();try{tt(e,t,n,i)}catch(e){if(Re(r),e!==e+0)throw e;Ee(1,0)}},gb:function(e,t,n,i,r){var a=Me();try{mi(e,t,n,i,r)}catch(e){if(Re(a),e!==e+0)throw e;Ee(1,0)}},Bb:function(e,t,n,i,r,a,o){var s=Me();try{zn(e,t,n,i,r,a,o)}catch(e){if(Re(s),e!==e+0)throw e;Ee(1,0)}},Wb:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{vn(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},sb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m){var y=Me();try{Qn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m)}catch(e){if(Re(y),e!==e+0)throw e;Ee(1,0)}},Fc:function(e,t,n,i,r,a){var o=Me();try{ht(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},Xb:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{yn(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},Pb:function(e,t,n,i,r,a,o,s){var u=Me();try{xn(e,t,n,i,r,a,o,s)}catch(e){if(Re(u),e!==e+0)throw e;Ee(1,0)}},ec:function(e,t,n,i,r,a,o,s,u,l,c,d){var p=Me();try{rn(e,t,n,i,r,a,o,s,u,l,c,d)}catch(e){if(Re(p),e!==e+0)throw e;Ee(1,0)}},mc:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{Ut(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},Eb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f){var h=Me();try{Rn(e,t,n,i,r,a,o,s,u,l,c,d,p,f)}catch(e){if(Re(h),e!==e+0)throw e;Ee(1,0)}},Vb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w){var _=Me();try{bn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w)}catch(e){if(Re(_),e!==e+0)throw e;Ee(1,0)}},pc:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j,A,O){var T=Me();try{Wt(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j,A,O)}catch(e){if(Re(T),e!==e+0)throw e;Ee(1,0)}},jc:function(e,t,n){var i=Me();try{Ht(e,t,n)}catch(e){if(Re(i),e!==e+0)throw e;Ee(1,0)}},Ua:function(e,t,n,i,r,a){var o=Me();try{Ei(e,t,n,i,r,a)}catch(e){if(Re(o),e!==e+0)throw e;Ee(1,0)}},rc:function(e,t,n,i,r,a,o,s,u){var l=Me();try{kt(e,t,n,i,r,a,o,s,u)}catch(e){if(Re(l),e!==e+0)throw e;Ee(1,0)}},Sb:function(e,t,n,i,r,a,o,s,u,l,c,d,p){var f=Me();try{_n(e,t,n,i,r,a,o,s,u,l,c,d,p)}catch(e){if(Re(f),e!==e+0)throw e;Ee(1,0)}},Ub:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h){var g=Me();try{wn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h)}catch(e){if(Re(g),e!==e+0)throw e;Ee(1,0)}},Zb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$){var C=Me();try{gn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$)}catch(e){if(Re(C),e!==e+0)throw e;Ee(1,0)}},_b:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x){var S=Me();try{hn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x)}catch(e){if(Re(S),e!==e+0)throw e;Ee(1,0)}},ac:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C){var x=Me();try{ln(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C)}catch(e){if(Re(x),e!==e+0)throw e;Ee(1,0)}},Yb:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j,A){var O=Me();try{mn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j,A)}catch(e){if(Re(O),e!==e+0)throw e;Ee(1,0)}},$b:function(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j,A,O){var T=Me();try{fn(e,t,n,i,r,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,$,C,x,S,j,A,O)}catch(e){if(Re(T),e!==e+0)throw e;Ee(1,0)}},v:function(e){return e>>>0},Ha:me,I:function(e,t,n,i){return me(e>>>0,t>>>0,n>>>0,i>>>0)}};!function(){function e(e){if(e=function(e){var t,n={};for(t in e)!function(t){var i=e[t];n[t]=\\\"function\\\"==typeof i?function(){_e.push(t);try{return i.apply(null,arguments)}finally{T||(_e.pop()===t||W(),be&&1===ve&&0===_e.length&&(ve=0,ye(Ni),\\\"undefined\\\"!=typeof Fibers&&Fibers.qh()))}}:i}(t);return n}(e=e.exports),$=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),_=$.Wc,I(),P.unshift($.Xc),D--,r.monitorRunDependencies&&r.monitorRunDependencies(D),0==D&&(null!==z&&(clearInterval(z),z=null),B)){var t=B;B=null,t()}return e}var t={a:Ae};if(D++,r.monitorRunDependencies&&r.monitorRunDependencies(D),r.instantiateWasm)try{return r.instantiateWasm(t,e)}catch(e){b(\\\"Module.instantiateWasm callback failed with error: \\\"+e),i(e)}(function(e,t){var n=k;return y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||G(n)||n.startsWith(\\\"file://\\\")||f||\\\"function\\\"!=typeof fetch?L(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((i=>WebAssembly.instantiateStreaming(i,e).then(t,(function(i){return b(\\\"wasm streaming compile failed: \\\"+i),b(\\\"falling back to ArrayBuffer instantiation\\\"),L(n,e,t)}))))})(t,(function(t){e(t.instance)})).catch(i)}(),r._OrtInit=(e,t)=>(r._OrtInit=$.Yc)(e,t),r._OrtGetLastError=(e,t)=>(r._OrtGetLastError=$.Zc)(e,t),r._OrtCreateSessionOptions=(e,t,n,i,a,o,s,u,l,c)=>(r._OrtCreateSessionOptions=$._c)(e,t,n,i,a,o,s,u,l,c),r._OrtAppendExecutionProvider=(e,t)=>(r._OrtAppendExecutionProvider=$.$c)(e,t),r._OrtAddSessionConfigEntry=(e,t,n)=>(r._OrtAddSessionConfigEntry=$.ad)(e,t,n),r._OrtReleaseSessionOptions=e=>(r._OrtReleaseSessionOptions=$.bd)(e),r._OrtCreateSession=(e,t,n)=>(r._OrtCreateSession=$.cd)(e,t,n),r._OrtReleaseSession=e=>(r._OrtReleaseSession=$.dd)(e),r._OrtGetInputOutputCount=(e,t,n)=>(r._OrtGetInputOutputCount=$.ed)(e,t,n),r._OrtGetInputName=(e,t)=>(r._OrtGetInputName=$.fd)(e,t),r._OrtGetOutputName=(e,t)=>(r._OrtGetOutputName=$.gd)(e,t),r._OrtFree=e=>(r._OrtFree=$.hd)(e),r._OrtCreateTensor=(e,t,n,i,a)=>(r._OrtCreateTensor=$.id)(e,t,n,i,a),r._OrtGetTensorData=(e,t,n,i,a)=>(r._OrtGetTensorData=$.jd)(e,t,n,i,a),r._OrtReleaseTensor=e=>(r._OrtReleaseTensor=$.kd)(e),r._OrtCreateRunOptions=(e,t,n,i)=>(r._OrtCreateRunOptions=$.ld)(e,t,n,i),r._OrtAddRunConfigEntry=(e,t,n)=>(r._OrtAddRunConfigEntry=$.md)(e,t,n),r._OrtReleaseRunOptions=e=>(r._OrtReleaseRunOptions=$.nd)(e),r._OrtRun=(e,t,n,i,a,o,s,u)=>(r._OrtRun=$.od)(e,t,n,i,a,o,s,u),r._OrtEndProfiling=e=>(r._OrtEndProfiling=$.pd)(e),r._JsepOutput=(e,t,n)=>(r._JsepOutput=$.qd)(e,t,n);var Oe,Te=r._malloc=e=>(Te=r._malloc=$.rd)(e),Ie=r._free=e=>(Ie=r._free=$.sd)(e),Ee=(e,t)=>(Ee=$.ud)(e,t),Pe=e=>(Pe=$.vd)(e),Me=()=>(Me=$.wd)(),Re=e=>(Re=$.xd)(e),ke=e=>(ke=$.yd)(e),De=e=>(De=$.zd)(e),ze=e=>(ze=$.Ad)(e),Be=(e,t,n)=>(Be=$.Bd)(e,t,n),We=e=>(We=$.Cd)(e),Ge=r.dynCall_vi=(e,t)=>(Ge=r.dynCall_vi=$.Dd)(e,t),Ue=r.dynCall_vii=(e,t,n)=>(Ue=r.dynCall_vii=$.Ed)(e,t,n),Ne=r.dynCall_ii=(e,t)=>(Ne=r.dynCall_ii=$.Fd)(e,t),Le=r.dynCall_iiij=(e,t,n,i,a)=>(Le=r.dynCall_iiij=$.Gd)(e,t,n,i,a),He=r.dynCall_v=e=>(He=r.dynCall_v=$.Hd)(e),Fe=r.dynCall_iii=(e,t,n)=>(Fe=r.dynCall_iii=$.Id)(e,t,n),Ve=r.dynCall_iiiiii=(e,t,n,i,a,o)=>(Ve=r.dynCall_iiiiii=$.Jd)(e,t,n,i,a,o),Ke=r.dynCall_iiiii=(e,t,n,i,a)=>(Ke=r.dynCall_iiiii=$.Kd)(e,t,n,i,a),qe=r.dynCall_viii=(e,t,n,i)=>(qe=r.dynCall_viii=$.Ld)(e,t,n,i),Ye=r.dynCall_iiii=(e,t,n,i)=>(Ye=r.dynCall_iiii=$.Md)(e,t,n,i),Je=r.dynCall_iiiiiii=(e,t,n,i,a,o,s)=>(Je=r.dynCall_iiiiiii=$.Nd)(e,t,n,i,a,o,s),Xe=r.dynCall_j=e=>(Xe=r.dynCall_j=$.Od)(e),Qe=r.dynCall_i=e=>(Qe=r.dynCall_i=$.Pd)(e),Ze=r.dynCall_iij=(e,t,n,i)=>(Ze=r.dynCall_iij=$.Qd)(e,t,n,i),et=r.dynCall_iiiiij=(e,t,n,i,a,o,s)=>(et=r.dynCall_iiiiij=$.Rd)(e,t,n,i,a,o,s),tt=r.dynCall_vij=(e,t,n,i)=>(tt=r.dynCall_vij=$.Sd)(e,t,n,i),nt=r.dynCall_viiiii=(e,t,n,i,a,o)=>(nt=r.dynCall_viiiii=$.Td)(e,t,n,i,a,o),it=r.dynCall_viiii=(e,t,n,i,a)=>(it=r.dynCall_viiii=$.Ud)(e,t,n,i,a),rt=r.dynCall_iiiiiiii=(e,t,n,i,a,o,s,u)=>(rt=r.dynCall_iiiiiiii=$.Vd)(e,t,n,i,a,o,s,u),at=r.dynCall_fi=(e,t)=>(at=r.dynCall_fi=$.Wd)(e,t),ot=r.dynCall_ji=(e,t)=>(ot=r.dynCall_ji=$.Xd)(e,t),st=r.dynCall_di=(e,t)=>(st=r.dynCall_di=$.Yd)(e,t),ut=r.dynCall_fii=(e,t,n)=>(ut=r.dynCall_fii=$.Zd)(e,t,n),lt=r.dynCall_jii=(e,t,n)=>(lt=r.dynCall_jii=$._d)(e,t,n),ct=r.dynCall_dii=(e,t,n)=>(ct=r.dynCall_dii=$.$d)(e,t,n),dt=r.dynCall_iiiiiiiii=(e,t,n,i,a,o,s,u,l)=>(dt=r.dynCall_iiiiiiiii=$.ae)(e,t,n,i,a,o,s,u,l),pt=r.dynCall_viij=(e,t,n,i,a)=>(pt=r.dynCall_viij=$.be)(e,t,n,i,a),ft=r.dynCall_viiiiii=(e,t,n,i,a,o,s)=>(ft=r.dynCall_viiiiii=$.ce)(e,t,n,i,a,o,s),ht=r.dynCall_vijj=(e,t,n,i,a,o)=>(ht=r.dynCall_vijj=$.de)(e,t,n,i,a,o),gt=r.dynCall_viiiiiii=(e,t,n,i,a,o,s,u)=>(gt=r.dynCall_viiiiiii=$.ee)(e,t,n,i,a,o,s,u),mt=r.dynCall_iiiiiiiiii=(e,t,n,i,a,o,s,u,l,c)=>(mt=r.dynCall_iiiiiiiiii=$.fe)(e,t,n,i,a,o,s,u,l,c),yt=r.dynCall_viiiiiiii=(e,t,n,i,a,o,s,u,l)=>(yt=r.dynCall_viiiiiiii=$.ge)(e,t,n,i,a,o,s,u,l),vt=r.dynCall_iiiiijiiiii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(vt=r.dynCall_iiiiijiiiii=$.he)(e,t,n,i,a,o,s,u,l,c,d,p),bt=r.dynCall_viiji=(e,t,n,i,a,o)=>(bt=r.dynCall_viiji=$.ie)(e,t,n,i,a,o),wt=r.dynCall_viijiii=(e,t,n,i,a,o,s,u)=>(wt=r.dynCall_viijiii=$.je)(e,t,n,i,a,o,s,u),_t=r.dynCall_viiiij=(e,t,n,i,a,o,s)=>(_t=r.dynCall_viiiij=$.ke)(e,t,n,i,a,o,s),$t=r.dynCall_viiiiij=(e,t,n,i,a,o,s,u)=>($t=r.dynCall_viiiiij=$.le)(e,t,n,i,a,o,s,u),Ct=r.dynCall_viiiiiiiii=(e,t,n,i,a,o,s,u,l,c)=>(Ct=r.dynCall_viiiiiiiii=$.me)(e,t,n,i,a,o,s,u,l,c),xt=r.dynCall_viid=(e,t,n,i)=>(xt=r.dynCall_viid=$.ne)(e,t,n,i),St=r.dynCall_iiiiiiiij=(e,t,n,i,a,o,s,u,l,c)=>(St=r.dynCall_iiiiiiiij=$.oe)(e,t,n,i,a,o,s,u,l,c),jt=r.dynCall_iiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(jt=r.dynCall_iiiiiiiiiiii=$.pe)(e,t,n,i,a,o,s,u,l,c,d,p),At=r.dynCall_viiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>(At=r.dynCall_viiiiiiiiiiiii=$.qe)(e,t,n,i,a,o,s,u,l,c,d,p,f,h),Ot=r.dynCall_viijjjiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>(Ot=r.dynCall_viijjjiiiiii=$.re)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g),Tt=r.dynCall_viiijiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(Tt=r.dynCall_viiijiiiiiii=$.se)(e,t,n,i,a,o,s,u,l,c,d,p,f),It=r.dynCall_viffiii=(e,t,n,i,a,o,s)=>(It=r.dynCall_viffiii=$.te)(e,t,n,i,a,o,s),Et=r.dynCall_viiijjjii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(Et=r.dynCall_viiijjjii=$.ue)(e,t,n,i,a,o,s,u,l,c,d,p),Pt=r.dynCall_viifiii=(e,t,n,i,a,o,s)=>(Pt=r.dynCall_viifiii=$.ve)(e,t,n,i,a,o,s),Mt=r.dynCall_viiiiidiidi=(e,t,n,i,a,o,s,u,l,c,d)=>(Mt=r.dynCall_viiiiidiidi=$.we)(e,t,n,i,a,o,s,u,l,c,d),Rt=r.dynCall_viiiiiiiiidi=(e,t,n,i,a,o,s,u,l,c,d,p)=>(Rt=r.dynCall_viiiiiiiiidi=$.xe)(e,t,n,i,a,o,s,u,l,c,d,p),kt=r.dynCall_vjiiiiii=(e,t,n,i,a,o,s,u,l)=>(kt=r.dynCall_vjiiiiii=$.ye)(e,t,n,i,a,o,s,u,l),Dt=r.dynCall_jiii=(e,t,n,i)=>(Dt=r.dynCall_jiii=$.ze)(e,t,n,i),zt=r.dynCall_viiid=(e,t,n,i,a)=>(zt=r.dynCall_viiid=$.Ae)(e,t,n,i,a),Bt=r.dynCall_viiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(Bt=r.dynCall_viiiiiiiiiii=$.Be)(e,t,n,i,a,o,s,u,l,c,d,p),Wt=r.dynCall_vijjjjjjjjjjjjji=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O,T,I)=>(Wt=r.dynCall_vijjjjjjjjjjjjji=$.Ce)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O,T,I),Gt=r.dynCall_viiiji=(e,t,n,i,a,o,s)=>(Gt=r.dynCall_viiiji=$.De)(e,t,n,i,a,o,s),Ut=r.dynCall_vijjjiiji=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(Ut=r.dynCall_vijjjiiji=$.Ee)(e,t,n,i,a,o,s,u,l,c,d,p,f),Nt=r.dynCall_iiiji=(e,t,n,i,a,o)=>(Nt=r.dynCall_iiiji=$.Fe)(e,t,n,i,a,o),Lt=r.dynCall_iiijiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>(Lt=r.dynCall_iiijiiiiiiiiii=$.Ge)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g),Ht=r.dynCall_vj=(e,t,n)=>(Ht=r.dynCall_vj=$.He)(e,t,n),Ft=r.dynCall_jjj=(e,t,n,i,a)=>(Ft=r.dynCall_jjj=$.Ie)(e,t,n,i,a),Vt=r.dynCall_iiijiiiiii=(e,t,n,i,a,o,s,u,l,c,d)=>(Vt=r.dynCall_iiijiiiiii=$.Je)(e,t,n,i,a,o,s,u,l,c,d),Kt=r.dynCall_viiff=(e,t,n,i,a)=>(Kt=r.dynCall_viiff=$.Ke)(e,t,n,i,a),qt=r.dynCall_viiiiiff=(e,t,n,i,a,o,s,u)=>(qt=r.dynCall_viiiiiff=$.Le)(e,t,n,i,a,o,s,u),Yt=r.dynCall_vfiii=(e,t,n,i,a)=>(Yt=r.dynCall_vfiii=$.Me)(e,t,n,i,a),Jt=r.dynCall_viiiiff=(e,t,n,i,a,o,s)=>(Jt=r.dynCall_viiiiff=$.Ne)(e,t,n,i,a,o,s),Xt=r.dynCall_viiiiiiiiifiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>(Xt=r.dynCall_viiiiiiiiifiii=$.Oe)(e,t,n,i,a,o,s,u,l,c,d,p,f,h),Qt=r.dynCall_viiiiiiiijj=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(Qt=r.dynCall_viiiiiiiijj=$.Pe)(e,t,n,i,a,o,s,u,l,c,d,p,f),Zt=r.dynCall_iiiiiiiiiiiiiifii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y)=>(Zt=r.dynCall_iiiiiiiiiiiiiifii=$.Qe)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y),en=r.dynCall_viiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(en=r.dynCall_viiiiiiiiiiii=$.Re)(e,t,n,i,a,o,s,u,l,c,d,p,f),tn=r.dynCall_ij=(e,t,n)=>(tn=r.dynCall_ij=$.Se)(e,t,n),nn=r.dynCall_iiiiiiiiiiiiiiiiifii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w)=>(nn=r.dynCall_iiiiiiiiiiiiiiiiifii=$.Te)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w),rn=r.dynCall_vijjiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(rn=r.dynCall_vijjiiiiii=$.Ue)(e,t,n,i,a,o,s,u,l,c,d,p),an=r.dynCall_iiiijjj=(e,t,n,i,a,o,s,u,l,c)=>(an=r.dynCall_iiiijjj=$.Ve)(e,t,n,i,a,o,s,u,l,c),on=r.dynCall_iiijjj=(e,t,n,i,a,o,s,u,l)=>(on=r.dynCall_iiijjj=$.We)(e,t,n,i,a,o,s,u,l),sn=r.dynCall_fffffff=(e,t,n,i,a,o,s)=>(sn=r.dynCall_fffffff=$.Xe)(e,t,n,i,a,o,s),un=r.dynCall_viijj=(e,t,n,i,a,o,s)=>(un=r.dynCall_viijj=$.Ye)(e,t,n,i,a,o,s),ln=r.dynCall_vjjjjjjffiifiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S)=>(ln=r.dynCall_vjjjjjjffiifiiiiii=$.Ze)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S),cn=r.dynCall_viiiiiiffiifiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y)=>(cn=r.dynCall_viiiiiiffiifiiiii=$._e)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y),dn=r.dynCall_viiiiiiffifiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>(dn=r.dynCall_viiiiiiffifiiiii=$.$e)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m),pn=r.dynCall_viiiiiiffiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>(pn=r.dynCall_viiiiiiffiiiiii=$.af)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g),fn=r.dynCall_vjjjjjjjjfffiifiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O,T,I)=>(fn=r.dynCall_vjjjjjjjjfffiifiiiiii=$.bf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O,T,I),hn=r.dynCall_vjjjjjjfffifiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j)=>(hn=r.dynCall_vjjjjjjfffifiiiiiii=$.cf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j),gn=r.dynCall_vjjjjjjfffifiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x)=>(gn=r.dynCall_vjjjjjjfffifiiiii=$.df)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x),mn=r.dynCall_vjjjjjjjjfffiifiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O,T)=>(mn=r.dynCall_vjjjjjjjjfffiifiiiii=$.ef)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O,T),yn=r.dynCall_vijjfffiii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(yn=r.dynCall_vijjfffiii=$.ff)(e,t,n,i,a,o,s,u,l,c,d,p),vn=r.dynCall_vijiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(vn=r.dynCall_vijiiiiiiii=$.gf)(e,t,n,i,a,o,s,u,l,c,d,p),bn=r.dynCall_vijjjjjjifiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_)=>(bn=r.dynCall_vijjjjjjifiiiii=$.hf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_),wn=r.dynCall_vjjjjjiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>(wn=r.dynCall_vjjjjjiiii=$.jf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g),_n=r.dynCall_vjjjjfiii=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(_n=r.dynCall_vjjjjfiii=$.kf)(e,t,n,i,a,o,s,u,l,c,d,p,f),$n=r.dynCall_viifi=(e,t,n,i,a)=>($n=r.dynCall_viifi=$.lf)(e,t,n,i,a),Cn=r.dynCall_iiiiiji=(e,t,n,i,a,o,s,u)=>(Cn=r.dynCall_iiiiiji=$.mf)(e,t,n,i,a,o,s,u),xn=r.dynCall_vijjii=(e,t,n,i,a,o,s,u)=>(xn=r.dynCall_vijjii=$.nf)(e,t,n,i,a,o,s,u),Sn=r.dynCall_viiijiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p)=>(Sn=r.dynCall_viiijiiiiii=$.of)(e,t,n,i,a,o,s,u,l,c,d,p),jn=r.dynCall_viiiiijjiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>(jn=r.dynCall_viiiiijjiiiii=$.pf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g),An=r.dynCall_iiiiji=(e,t,n,i,a,o,s)=>(An=r.dynCall_iiiiji=$.qf)(e,t,n,i,a,o,s),On=r.dynCall_viiiiijiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>(On=r.dynCall_viiiiijiiiiii=$.rf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h),Tn=r.dynCall_viiiijii=(e,t,n,i,a,o,s,u,l)=>(Tn=r.dynCall_viiiijii=$.sf)(e,t,n,i,a,o,s,u,l),In=r.dynCall_viijjiii=(e,t,n,i,a,o,s,u,l,c)=>(In=r.dynCall_viijjiii=$.tf)(e,t,n,i,a,o,s,u,l,c),En=r.dynCall_ijii=(e,t,n,i,a)=>(En=r.dynCall_ijii=$.uf)(e,t,n,i,a),Pn=r.dynCall_jjjjjjj=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(Pn=r.dynCall_jjjjjjj=$.vf)(e,t,n,i,a,o,s,u,l,c,d,p,f),Mn=r.dynCall_jjjjjj=(e,t,n,i,a,o,s,u,l,c,d)=>(Mn=r.dynCall_jjjjjj=$.wf)(e,t,n,i,a,o,s,u,l,c,d),Rn=r.dynCall_vijjjjiij=(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>(Rn=r.dynCall_vijjjjiij=$.xf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h),kn=r.dynCall_viiiiijij=(e,t,n,i,a,o,s,u,l,c,d)=>(kn=r.dynCall_viiiiijij=$.yf)(e,t,n,i,a,o,s,u,l,c,d),Dn=r.dynCall_viiiiiijij=(e,t,n,i,a,o,s,u,l,c,d,p)=>(Dn=r.dynCall_viiiiiijij=$.zf)(e,t,n,i,a,o,s,u,l,c,d,p),zn=r.dynCall_vijiii=(e,t,n,i,a,o,s)=>(zn=r.dynCall_vijiii=$.Af)(e,t,n,i,a,o,s),Bn=r.dynCall_viiiiiiiiifi=(e,t,n,i,a,o,s,u,l,c,d,p)=>(Bn=r.dynCall_viiiiiiiiifi=$.Bf)(e,t,n,i,a,o,s,u,l,c,d,p),Wn=r.dynCall_viiijiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>(Wn=r.dynCall_viiijiiiiiiiii=$.Cf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g),Gn=r.dynCall_iiijiiii=(e,t,n,i,a,o,s,u,l)=>(Gn=r.dynCall_iiijiiii=$.Df)(e,t,n,i,a,o,s,u,l),Un=r.dynCall_viiiiiijjiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>(Un=r.dynCall_viiiiiijjiiiii=$.Ef)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m),Nn=r.dynCall_viiiiiiijiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>(Nn=r.dynCall_viiiiiiijiiiiii=$.Ff)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m),Ln=r.dynCall_vif=(e,t,n)=>(Ln=r.dynCall_vif=$.Gf)(e,t,n),Hn=r.dynCall_viif=(e,t,n,i)=>(Hn=r.dynCall_viif=$.Hf)(e,t,n,i),Fn=r.dynCall_viiiiiifii=(e,t,n,i,a,o,s,u,l,c)=>(Fn=r.dynCall_viiiiiifii=$.If)(e,t,n,i,a,o,s,u,l,c),Vn=r.dynCall_viiiiijiiiiiiiiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O)=>(Vn=r.dynCall_viiiiijiiiiiiiiiiiiiiiiiii=$.Jf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_,C,x,S,j,A,O),Kn=r.dynCall_viijji=(e,t,n,i,a,o,s,u)=>(Kn=r.dynCall_viijji=$.Kf)(e,t,n,i,a,o,s,u),qn=r.dynCall_viifiifijjjii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>(qn=r.dynCall_viifiifijjjii=$.Lf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m),Yn=r.dynCall_viiiiiiiiiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_)=>(Yn=r.dynCall_viiiiiiiiiiiiiiiiiiii=$.Mf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w,_),Jn=r.dynCall_iif=(e,t,n)=>(Jn=r.dynCall_iif=$.Nf)(e,t,n),Xn=r.dynCall_viiiiifiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(Xn=r.dynCall_viiiiifiiiiii=$.Of)(e,t,n,i,a,o,s,u,l,c,d,p,f),Qn=r.dynCall_vijiiiiiiijjii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y)=>(Qn=r.dynCall_vijiiiiiiijjii=$.Pf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y),Zn=r.dynCall_iiiiid=(e,t,n,i,a,o)=>(Zn=r.dynCall_iiiiid=$.Qf)(e,t,n,i,a,o),ei=r.dynCall_viiiijjj=(e,t,n,i,a,o,s,u,l,c,d)=>(ei=r.dynCall_viiiijjj=$.Rf)(e,t,n,i,a,o,s,u,l,c,d),ti=r.dynCall_viiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d)=>(ti=r.dynCall_viiiiiiiiii=$.Sf)(e,t,n,i,a,o,s,u,l,c,d),ni=r.dynCall_viiiiiiiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b)=>(ni=r.dynCall_viiiiiiiiiiiiiiiiii=$.Tf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b),ii=r.dynCall_viiiiiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y)=>(ii=r.dynCall_viiiiiiiiiiiiiiii=$.Uf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y),ri=r.dynCall_viiiiiiiiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w)=>(ri=r.dynCall_viiiiiiiiiiiiiiiiiii=$.Vf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w),ai=r.dynCall_viiiiiiijjj=(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>(ai=r.dynCall_viiiiiiijjj=$.Wf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h),oi=r.dynCall_iiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d)=>(oi=r.dynCall_iiiiiiiiiii=$.Xf)(e,t,n,i,a,o,s,u,l,c,d),si=r.dynCall_iiiiiiiiiiiiiiiiiifi=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w)=>(si=r.dynCall_iiiiiiiiiiiiiiiiiifi=$.Yf)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m,y,v,b,w),ui=r.dynCall_viiif=(e,t,n,i,a)=>(ui=r.dynCall_viiif=$.Zf)(e,t,n,i,a),li=r.dynCall_iijjj=(e,t,n,i,a,o,s,u)=>(li=r.dynCall_iijjj=$._f)(e,t,n,i,a,o,s,u),ci=r.dynCall_viiiiji=(e,t,n,i,a,o,s,u)=>(ci=r.dynCall_viiiiji=$.$f)(e,t,n,i,a,o,s,u),di=r.dynCall_iijjji=(e,t,n,i,a,o,s,u,l)=>(di=r.dynCall_iijjji=$.ag)(e,t,n,i,a,o,s,u,l),pi=r.dynCall_ijijji=(e,t,n,i,a,o,s,u,l)=>(pi=r.dynCall_ijijji=$.bg)(e,t,n,i,a,o,s,u,l),fi=r.dynCall_iiiij=(e,t,n,i,a,o)=>(fi=r.dynCall_iiiij=$.cg)(e,t,n,i,a,o),hi=r.dynCall_viiijjiii=(e,t,n,i,a,o,s,u,l,c,d)=>(hi=r.dynCall_viiijjiii=$.dg)(e,t,n,i,a,o,s,u,l,c,d),gi=r.dynCall_iiiiijji=(e,t,n,i,a,o,s,u,l,c)=>(gi=r.dynCall_iiiiijji=$.eg)(e,t,n,i,a,o,s,u,l,c),mi=r.dynCall_viji=(e,t,n,i,a)=>(mi=r.dynCall_viji=$.fg)(e,t,n,i,a),yi=r.dynCall_iiiifi=(e,t,n,i,a,o)=>(yi=r.dynCall_iiiifi=$.gg)(e,t,n,i,a,o),vi=r.dynCall_iiijii=(e,t,n,i,a,o,s)=>(vi=r.dynCall_iiijii=$.hg)(e,t,n,i,a,o,s),bi=r.dynCall_iiiiiiiiijii=(e,t,n,i,a,o,s,u,l,c,d,p,f)=>(bi=r.dynCall_iiiiiiiiijii=$.ig)(e,t,n,i,a,o,s,u,l,c,d,p,f),wi=r.dynCall_iiiijjii=(e,t,n,i,a,o,s,u,l,c)=>(wi=r.dynCall_iiiijjii=$.jg)(e,t,n,i,a,o,s,u,l,c),_i=r.dynCall_iiiiiijjjii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>(_i=r.dynCall_iiiiiijjjii=$.kg)(e,t,n,i,a,o,s,u,l,c,d,p,f,h),$i=r.dynCall_iiijiii=(e,t,n,i,a,o,s,u)=>($i=r.dynCall_iiijiii=$.lg)(e,t,n,i,a,o,s,u),Ci=r.dynCall_iiiiiiiijjjfi=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>(Ci=r.dynCall_iiiiiiiijjjfi=$.mg)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m),xi=r.dynCall_iijiiii=(e,t,n,i,a,o,s,u)=>(xi=r.dynCall_iijiiii=$.ng)(e,t,n,i,a,o,s,u),Si=r.dynCall_iijjjii=(e,t,n,i,a,o,s,u,l,c)=>(Si=r.dynCall_iijjjii=$.og)(e,t,n,i,a,o,s,u,l,c),ji=r.dynCall_iiji=(e,t,n,i,a)=>(ji=r.dynCall_iiji=$.pg)(e,t,n,i,a),Ai=r.dynCall_viiijiiiii=(e,t,n,i,a,o,s,u,l,c,d)=>(Ai=r.dynCall_viiijiiiii=$.qg)(e,t,n,i,a,o,s,u,l,c,d),Oi=r.dynCall_iid=(e,t,n)=>(Oi=r.dynCall_iid=$.rg)(e,t,n),Ti=r.dynCall_iiif=(e,t,n,i)=>(Ti=r.dynCall_iiif=$.sg)(e,t,n,i),Ii=r.dynCall_vidi=(e,t,n,i)=>(Ii=r.dynCall_vidi=$.tg)(e,t,n,i),Ei=r.dynCall_vjiii=(e,t,n,i,a,o)=>(Ei=r.dynCall_vjiii=$.ug)(e,t,n,i,a,o),Pi=r.dynCall_viiiiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m)=>(Pi=r.dynCall_viiiiiiiiiiiiiii=$.vg)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g,m),Mi=r.dynCall_viiijii=(e,t,n,i,a,o,s,u)=>(Mi=r.dynCall_viiijii=$.wg)(e,t,n,i,a,o,s,u),Ri=r.dynCall_viijiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h)=>(Ri=r.dynCall_viijiiiiiiiii=$.xg)(e,t,n,i,a,o,s,u,l,c,d,p,f,h),ki=r.dynCall_viiij=(e,t,n,i,a,o)=>(ki=r.dynCall_viiij=$.yg)(e,t,n,i,a,o),Di=r.dynCall_fiiii=(e,t,n,i,a)=>(Di=r.dynCall_fiiii=$.zg)(e,t,n,i,a),zi=r.dynCall_jfi=(e,t,n)=>(zi=r.dynCall_jfi=$.Ag)(e,t,n),Bi=r.dynCall_viiiiiiiiiiiiii=(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g)=>(Bi=r.dynCall_viiiiiiiiiiiiii=$.Bg)(e,t,n,i,a,o,s,u,l,c,d,p,f,h,g),Wi=r.dynCall_jiij=(e,t,n,i,a)=>(Wi=r.dynCall_jiij=$.Cg)(e,t,n,i,a),Gi=r.dynCall_fiii=(e,t,n,i)=>(Gi=r.dynCall_fiii=$.Dg)(e,t,n,i),Ui=e=>(Ui=$.Eg)(e),Ni=()=>(Ni=$.Fg)(),Li=e=>(Li=$.Gg)(e),Hi=()=>(Hi=$.Hg)();function Fi(){function e(){if(!Oe&&(Oe=!0,r.calledRun=!0,!T)){if(K(P),t(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(\\\"function\\\"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;){var e=r.postRun.shift();M.unshift(e)}K(M)}}if(!(0<D)){if(r.preRun)for(\\\"function\\\"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)R();K(E),0<D||(r.setStatus?(r.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){r.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(r.___start_em_js=1285180,r.___stop_em_js=1285341,r.stackAlloc=ke,r.stackSave=Me,r.stackRestore=Re,r.UTF8ToString=ne,r.stringToUTF8=(e,t,n)=>re(e,S,t,n),r.lengthBytesUTF8=ie,B=function e(){Oe||Fi(),Oe||(B=e)},r.preInit)for(\\\"function\\\"==typeof r.preInit&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return Fi(),e.ready});e.exports=i},4154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\\\"callHandler\\\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},760:()=>{},1384:()=>{},3993:()=>{},908:()=>{},6953:()=>{},9925:()=>{},6449:()=>{}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var a=t[i]={exports:{}};return e[i].call(a.exports,a,a.exports,n),a.exports}(()=>{\\\"use strict\\\";const e=n(1259),t=n(263);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(n.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=n.data.in,i=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:i})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:i}=n.data.in,r=(0,e.createSessionFinalize)(t,i);postMessage({type:\\\"create_finalize\\\",out:r})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:i}=n.data.in,r=(0,e.createSession)(t,i);postMessage({type:\\\"create\\\",out:r})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:i,inputs:r,outputIndices:a,options:o}=n.data.in;(0,e.run)(t,i,r,a,o).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\r\n\"use strict\";\r\n\r\nvar $protobuf = require(\"protobufjs/minimal\");\r\n\r\n// Common aliases\r\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\r\n\r\n// Exported root namespace\r\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\r\n\r\n$root.onnx = (function() {\r\n\r\n    /**\r\n     * Namespace onnx.\r\n     * @exports onnx\r\n     * @namespace\r\n     */\r\n    var onnx = {};\r\n\r\n    /**\r\n     * Version enum.\r\n     * @name onnx.Version\r\n     * @enum {number}\r\n     * @property {number} _START_VERSION=0 _START_VERSION value\r\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\r\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\r\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\r\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\r\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\r\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\r\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\r\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\r\n     * @property {number} IR_VERSION=9 IR_VERSION value\r\n     */\r\n    onnx.Version = (function() {\r\n        var valuesById = {}, values = Object.create(valuesById);\r\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\r\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\r\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\r\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\r\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\r\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\r\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\r\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\r\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\r\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\r\n        return values;\r\n    })();\r\n\r\n    onnx.AttributeProto = (function() {\r\n\r\n        /**\r\n         * Properties of an AttributeProto.\r\n         * @memberof onnx\r\n         * @interface IAttributeProto\r\n         * @property {string|null} [name] AttributeProto name\r\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\r\n         * @property {string|null} [docString] AttributeProto docString\r\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\r\n         * @property {number|null} [f] AttributeProto f\r\n         * @property {number|Long|null} [i] AttributeProto i\r\n         * @property {Uint8Array|null} [s] AttributeProto s\r\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\r\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\r\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\r\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\r\n         * @property {Array.<number>|null} [floats] AttributeProto floats\r\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\r\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\r\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\r\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\r\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\r\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\r\n         */\r\n\r\n        /**\r\n         * Constructs a new AttributeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents an AttributeProto.\r\n         * @implements IAttributeProto\r\n         * @constructor\r\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\r\n         */\r\n        function AttributeProto(properties) {\r\n            this.floats = [];\r\n            this.ints = [];\r\n            this.strings = [];\r\n            this.tensors = [];\r\n            this.graphs = [];\r\n            this.sparseTensors = [];\r\n            this.typeProtos = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * AttributeProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * AttributeProto refAttrName.\r\n         * @member {string} refAttrName\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.refAttrName = \"\";\r\n\r\n        /**\r\n         * AttributeProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * AttributeProto type.\r\n         * @member {onnx.AttributeProto.AttributeType} type\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.type = 0;\r\n\r\n        /**\r\n         * AttributeProto f.\r\n         * @member {number} f\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.f = 0;\r\n\r\n        /**\r\n         * AttributeProto i.\r\n         * @member {number|Long} i\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * AttributeProto s.\r\n         * @member {Uint8Array} s\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.s = $util.newBuffer([]);\r\n\r\n        /**\r\n         * AttributeProto t.\r\n         * @member {onnx.ITensorProto|null|undefined} t\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.t = null;\r\n\r\n        /**\r\n         * AttributeProto g.\r\n         * @member {onnx.IGraphProto|null|undefined} g\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.g = null;\r\n\r\n        /**\r\n         * AttributeProto sparseTensor.\r\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.sparseTensor = null;\r\n\r\n        /**\r\n         * AttributeProto tp.\r\n         * @member {onnx.ITypeProto|null|undefined} tp\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.tp = null;\r\n\r\n        /**\r\n         * AttributeProto floats.\r\n         * @member {Array.<number>} floats\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.floats = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto ints.\r\n         * @member {Array.<number|Long>} ints\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.ints = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto strings.\r\n         * @member {Array.<Uint8Array>} strings\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.strings = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto tensors.\r\n         * @member {Array.<onnx.ITensorProto>} tensors\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.tensors = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto graphs.\r\n         * @member {Array.<onnx.IGraphProto>} graphs\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.graphs = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto sparseTensors.\r\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto typeProtos.\r\n         * @member {Array.<onnx.ITypeProto>} typeProtos\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new AttributeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\r\n         * @returns {onnx.AttributeProto} AttributeProto instance\r\n         */\r\n        AttributeProto.create = function create(properties) {\r\n            return new AttributeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        AttributeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\r\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\r\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\r\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\r\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\r\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\r\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\r\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\r\n            if (message.floats != null && message.floats.length) {\r\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\r\n                for (var i = 0; i < message.floats.length; ++i)\r\n                    writer.float(message.floats[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.ints != null && message.ints.length) {\r\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\r\n                for (var i = 0; i < message.ints.length; ++i)\r\n                    writer.int64(message.ints[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.strings != null && message.strings.length)\r\n                for (var i = 0; i < message.strings.length; ++i)\r\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\r\n            if (message.tensors != null && message.tensors.length)\r\n                for (var i = 0; i < message.tensors.length; ++i)\r\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\r\n            if (message.graphs != null && message.graphs.length)\r\n                for (var i = 0; i < message.graphs.length; ++i)\r\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\r\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\r\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.typeProtos != null && message.typeProtos.length)\r\n                for (var i = 0; i < message.typeProtos.length; ++i)\r\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\r\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\r\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\r\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\r\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\r\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\r\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\r\n            if (message.sparseTensors != null && message.sparseTensors.length)\r\n                for (var i = 0; i < message.sparseTensors.length; ++i)\r\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes an AttributeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        AttributeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 21: {\r\n                        message.refAttrName = reader.string();\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 20: {\r\n                        message.type = reader.int32();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.f = reader.float();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.i = reader.int64();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.s = reader.bytes();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 22: {\r\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.floats && message.floats.length))\r\n                            message.floats = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.floats.push(reader.float());\r\n                        } else\r\n                            message.floats.push(reader.float());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        if (!(message.ints && message.ints.length))\r\n                            message.ints = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.ints.push(reader.int64());\r\n                        } else\r\n                            message.ints.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        if (!(message.strings && message.strings.length))\r\n                            message.strings = [];\r\n                        message.strings.push(reader.bytes());\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        if (!(message.tensors && message.tensors.length))\r\n                            message.tensors = [];\r\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.graphs && message.graphs.length))\r\n                            message.graphs = [];\r\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 23: {\r\n                        if (!(message.sparseTensors && message.sparseTensors.length))\r\n                            message.sparseTensors = [];\r\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 15: {\r\n                        if (!(message.typeProtos && message.typeProtos.length))\r\n                            message.typeProtos = [];\r\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies an AttributeProto message.\r\n         * @function verify\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        AttributeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\r\n                if (!$util.isString(message.refAttrName))\r\n                    return \"refAttrName: string expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                switch (message.type) {\r\n                default:\r\n                    return \"type: enum value expected\";\r\n                case 0:\r\n                case 1:\r\n                case 2:\r\n                case 3:\r\n                case 4:\r\n                case 5:\r\n                case 11:\r\n                case 13:\r\n                case 6:\r\n                case 7:\r\n                case 8:\r\n                case 9:\r\n                case 10:\r\n                case 12:\r\n                case 14:\r\n                    break;\r\n                }\r\n            if (message.f != null && message.hasOwnProperty(\"f\"))\r\n                if (typeof message.f !== \"number\")\r\n                    return \"f: number expected\";\r\n            if (message.i != null && message.hasOwnProperty(\"i\"))\r\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\r\n                    return \"i: integer|Long expected\";\r\n            if (message.s != null && message.hasOwnProperty(\"s\"))\r\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\r\n                    return \"s: buffer expected\";\r\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.t);\r\n                if (error)\r\n                    return \"t.\" + error;\r\n            }\r\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.g);\r\n                if (error)\r\n                    return \"g.\" + error;\r\n            }\r\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\r\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\r\n                if (error)\r\n                    return \"sparseTensor.\" + error;\r\n            }\r\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\r\n                var error = $root.onnx.TypeProto.verify(message.tp);\r\n                if (error)\r\n                    return \"tp.\" + error;\r\n            }\r\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\r\n                if (!Array.isArray(message.floats))\r\n                    return \"floats: array expected\";\r\n                for (var i = 0; i < message.floats.length; ++i)\r\n                    if (typeof message.floats[i] !== \"number\")\r\n                        return \"floats: number[] expected\";\r\n            }\r\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\r\n                if (!Array.isArray(message.ints))\r\n                    return \"ints: array expected\";\r\n                for (var i = 0; i < message.ints.length; ++i)\r\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\r\n                        return \"ints: integer|Long[] expected\";\r\n            }\r\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\r\n                if (!Array.isArray(message.strings))\r\n                    return \"strings: array expected\";\r\n                for (var i = 0; i < message.strings.length; ++i)\r\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\r\n                        return \"strings: buffer[] expected\";\r\n            }\r\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\r\n                if (!Array.isArray(message.tensors))\r\n                    return \"tensors: array expected\";\r\n                for (var i = 0; i < message.tensors.length; ++i) {\r\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\r\n                    if (error)\r\n                        return \"tensors.\" + error;\r\n                }\r\n            }\r\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\r\n                if (!Array.isArray(message.graphs))\r\n                    return \"graphs: array expected\";\r\n                for (var i = 0; i < message.graphs.length; ++i) {\r\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\r\n                    if (error)\r\n                        return \"graphs.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\r\n                if (!Array.isArray(message.sparseTensors))\r\n                    return \"sparseTensors: array expected\";\r\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\r\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\r\n                    if (error)\r\n                        return \"sparseTensors.\" + error;\r\n                }\r\n            }\r\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\r\n                if (!Array.isArray(message.typeProtos))\r\n                    return \"typeProtos: array expected\";\r\n                for (var i = 0; i < message.typeProtos.length; ++i) {\r\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\r\n                    if (error)\r\n                        return \"typeProtos.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         */\r\n        AttributeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.AttributeProto)\r\n                return object;\r\n            var message = new $root.onnx.AttributeProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.refAttrName != null)\r\n                message.refAttrName = String(object.refAttrName);\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            switch (object.type) {\r\n            default:\r\n                if (typeof object.type === \"number\") {\r\n                    message.type = object.type;\r\n                    break;\r\n                }\r\n                break;\r\n            case \"UNDEFINED\":\r\n            case 0:\r\n                message.type = 0;\r\n                break;\r\n            case \"FLOAT\":\r\n            case 1:\r\n                message.type = 1;\r\n                break;\r\n            case \"INT\":\r\n            case 2:\r\n                message.type = 2;\r\n                break;\r\n            case \"STRING\":\r\n            case 3:\r\n                message.type = 3;\r\n                break;\r\n            case \"TENSOR\":\r\n            case 4:\r\n                message.type = 4;\r\n                break;\r\n            case \"GRAPH\":\r\n            case 5:\r\n                message.type = 5;\r\n                break;\r\n            case \"SPARSE_TENSOR\":\r\n            case 11:\r\n                message.type = 11;\r\n                break;\r\n            case \"TYPE_PROTO\":\r\n            case 13:\r\n                message.type = 13;\r\n                break;\r\n            case \"FLOATS\":\r\n            case 6:\r\n                message.type = 6;\r\n                break;\r\n            case \"INTS\":\r\n            case 7:\r\n                message.type = 7;\r\n                break;\r\n            case \"STRINGS\":\r\n            case 8:\r\n                message.type = 8;\r\n                break;\r\n            case \"TENSORS\":\r\n            case 9:\r\n                message.type = 9;\r\n                break;\r\n            case \"GRAPHS\":\r\n            case 10:\r\n                message.type = 10;\r\n                break;\r\n            case \"SPARSE_TENSORS\":\r\n            case 12:\r\n                message.type = 12;\r\n                break;\r\n            case \"TYPE_PROTOS\":\r\n            case 14:\r\n                message.type = 14;\r\n                break;\r\n            }\r\n            if (object.f != null)\r\n                message.f = Number(object.f);\r\n            if (object.i != null)\r\n                if ($util.Long)\r\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\r\n                else if (typeof object.i === \"string\")\r\n                    message.i = parseInt(object.i, 10);\r\n                else if (typeof object.i === \"number\")\r\n                    message.i = object.i;\r\n                else if (typeof object.i === \"object\")\r\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\r\n            if (object.s != null)\r\n                if (typeof object.s === \"string\")\r\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\r\n                else if (object.s.length >= 0)\r\n                    message.s = object.s;\r\n            if (object.t != null) {\r\n                if (typeof object.t !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\r\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\r\n            }\r\n            if (object.g != null) {\r\n                if (typeof object.g !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\r\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\r\n            }\r\n            if (object.sparseTensor != null) {\r\n                if (typeof object.sparseTensor !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\r\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\r\n            }\r\n            if (object.tp != null) {\r\n                if (typeof object.tp !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\r\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\r\n            }\r\n            if (object.floats) {\r\n                if (!Array.isArray(object.floats))\r\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\r\n                message.floats = [];\r\n                for (var i = 0; i < object.floats.length; ++i)\r\n                    message.floats[i] = Number(object.floats[i]);\r\n            }\r\n            if (object.ints) {\r\n                if (!Array.isArray(object.ints))\r\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\r\n                message.ints = [];\r\n                for (var i = 0; i < object.ints.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\r\n                    else if (typeof object.ints[i] === \"string\")\r\n                        message.ints[i] = parseInt(object.ints[i], 10);\r\n                    else if (typeof object.ints[i] === \"number\")\r\n                        message.ints[i] = object.ints[i];\r\n                    else if (typeof object.ints[i] === \"object\")\r\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.strings) {\r\n                if (!Array.isArray(object.strings))\r\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\r\n                message.strings = [];\r\n                for (var i = 0; i < object.strings.length; ++i)\r\n                    if (typeof object.strings[i] === \"string\")\r\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\r\n                    else if (object.strings[i].length >= 0)\r\n                        message.strings[i] = object.strings[i];\r\n            }\r\n            if (object.tensors) {\r\n                if (!Array.isArray(object.tensors))\r\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\r\n                message.tensors = [];\r\n                for (var i = 0; i < object.tensors.length; ++i) {\r\n                    if (typeof object.tensors[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\r\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\r\n                }\r\n            }\r\n            if (object.graphs) {\r\n                if (!Array.isArray(object.graphs))\r\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\r\n                message.graphs = [];\r\n                for (var i = 0; i < object.graphs.length; ++i) {\r\n                    if (typeof object.graphs[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\r\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\r\n                }\r\n            }\r\n            if (object.sparseTensors) {\r\n                if (!Array.isArray(object.sparseTensors))\r\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\r\n                message.sparseTensors = [];\r\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\r\n                    if (typeof object.sparseTensors[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\r\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\r\n                }\r\n            }\r\n            if (object.typeProtos) {\r\n                if (!Array.isArray(object.typeProtos))\r\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\r\n                message.typeProtos = [];\r\n                for (var i = 0; i < object.typeProtos.length; ++i) {\r\n                    if (typeof object.typeProtos[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\r\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.AttributeProto} message AttributeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        AttributeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.floats = [];\r\n                object.ints = [];\r\n                object.strings = [];\r\n                object.tensors = [];\r\n                object.graphs = [];\r\n                object.typeProtos = [];\r\n                object.sparseTensors = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.f = 0;\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.i = options.longs === String ? \"0\" : 0;\r\n                if (options.bytes === String)\r\n                    object.s = \"\";\r\n                else {\r\n                    object.s = [];\r\n                    if (options.bytes !== Array)\r\n                        object.s = $util.newBuffer(object.s);\r\n                }\r\n                object.t = null;\r\n                object.g = null;\r\n                object.docString = \"\";\r\n                object.tp = null;\r\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\r\n                object.refAttrName = \"\";\r\n                object.sparseTensor = null;\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.f != null && message.hasOwnProperty(\"f\"))\r\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\r\n            if (message.i != null && message.hasOwnProperty(\"i\"))\r\n                if (typeof message.i === \"number\")\r\n                    object.i = options.longs === String ? String(message.i) : message.i;\r\n                else\r\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\r\n            if (message.s != null && message.hasOwnProperty(\"s\"))\r\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\r\n            if (message.t != null && message.hasOwnProperty(\"t\"))\r\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\r\n            if (message.g != null && message.hasOwnProperty(\"g\"))\r\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\r\n            if (message.floats && message.floats.length) {\r\n                object.floats = [];\r\n                for (var j = 0; j < message.floats.length; ++j)\r\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\r\n            }\r\n            if (message.ints && message.ints.length) {\r\n                object.ints = [];\r\n                for (var j = 0; j < message.ints.length; ++j)\r\n                    if (typeof message.ints[j] === \"number\")\r\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\r\n                    else\r\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\r\n            }\r\n            if (message.strings && message.strings.length) {\r\n                object.strings = [];\r\n                for (var j = 0; j < message.strings.length; ++j)\r\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\r\n            }\r\n            if (message.tensors && message.tensors.length) {\r\n                object.tensors = [];\r\n                for (var j = 0; j < message.tensors.length; ++j)\r\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\r\n            }\r\n            if (message.graphs && message.graphs.length) {\r\n                object.graphs = [];\r\n                for (var j = 0; j < message.graphs.length; ++j)\r\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\r\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\r\n            if (message.typeProtos && message.typeProtos.length) {\r\n                object.typeProtos = [];\r\n                for (var j = 0; j < message.typeProtos.length; ++j)\r\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\r\n            }\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\r\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\r\n                object.refAttrName = message.refAttrName;\r\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\r\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\r\n            if (message.sparseTensors && message.sparseTensors.length) {\r\n                object.sparseTensors = [];\r\n                for (var j = 0; j < message.sparseTensors.length; ++j)\r\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this AttributeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        AttributeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for AttributeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\r\n        };\r\n\r\n        /**\r\n         * AttributeType enum.\r\n         * @name onnx.AttributeProto.AttributeType\r\n         * @enum {number}\r\n         * @property {number} UNDEFINED=0 UNDEFINED value\r\n         * @property {number} FLOAT=1 FLOAT value\r\n         * @property {number} INT=2 INT value\r\n         * @property {number} STRING=3 STRING value\r\n         * @property {number} TENSOR=4 TENSOR value\r\n         * @property {number} GRAPH=5 GRAPH value\r\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\r\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\r\n         * @property {number} FLOATS=6 FLOATS value\r\n         * @property {number} INTS=7 INTS value\r\n         * @property {number} STRINGS=8 STRINGS value\r\n         * @property {number} TENSORS=9 TENSORS value\r\n         * @property {number} GRAPHS=10 GRAPHS value\r\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\r\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\r\n         */\r\n        AttributeProto.AttributeType = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\r\n            values[valuesById[1] = \"FLOAT\"] = 1;\r\n            values[valuesById[2] = \"INT\"] = 2;\r\n            values[valuesById[3] = \"STRING\"] = 3;\r\n            values[valuesById[4] = \"TENSOR\"] = 4;\r\n            values[valuesById[5] = \"GRAPH\"] = 5;\r\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\r\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\r\n            values[valuesById[6] = \"FLOATS\"] = 6;\r\n            values[valuesById[7] = \"INTS\"] = 7;\r\n            values[valuesById[8] = \"STRINGS\"] = 8;\r\n            values[valuesById[9] = \"TENSORS\"] = 9;\r\n            values[valuesById[10] = \"GRAPHS\"] = 10;\r\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\r\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\r\n            return values;\r\n        })();\r\n\r\n        return AttributeProto;\r\n    })();\r\n\r\n    onnx.ValueInfoProto = (function() {\r\n\r\n        /**\r\n         * Properties of a ValueInfoProto.\r\n         * @memberof onnx\r\n         * @interface IValueInfoProto\r\n         * @property {string|null} [name] ValueInfoProto name\r\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\r\n         * @property {string|null} [docString] ValueInfoProto docString\r\n         */\r\n\r\n        /**\r\n         * Constructs a new ValueInfoProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a ValueInfoProto.\r\n         * @implements IValueInfoProto\r\n         * @constructor\r\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\r\n         */\r\n        function ValueInfoProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * ValueInfoProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * ValueInfoProto type.\r\n         * @member {onnx.ITypeProto|null|undefined} type\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.type = null;\r\n\r\n        /**\r\n         * ValueInfoProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * Creates a new ValueInfoProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\r\n         */\r\n        ValueInfoProto.create = function create(properties) {\r\n            return new ValueInfoProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ValueInfoProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\r\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ValueInfoProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a ValueInfoProto message.\r\n         * @function verify\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ValueInfoProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\r\n                var error = $root.onnx.TypeProto.verify(message.type);\r\n                if (error)\r\n                    return \"type.\" + error;\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         */\r\n        ValueInfoProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.ValueInfoProto)\r\n                return object;\r\n            var message = new $root.onnx.ValueInfoProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.type != null) {\r\n                if (typeof object.type !== \"object\")\r\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\r\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ValueInfoProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.type = null;\r\n                object.docString = \"\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this ValueInfoProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ValueInfoProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for ValueInfoProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\r\n        };\r\n\r\n        return ValueInfoProto;\r\n    })();\r\n\r\n    onnx.NodeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a NodeProto.\r\n         * @memberof onnx\r\n         * @interface INodeProto\r\n         * @property {Array.<string>|null} [input] NodeProto input\r\n         * @property {Array.<string>|null} [output] NodeProto output\r\n         * @property {string|null} [name] NodeProto name\r\n         * @property {string|null} [opType] NodeProto opType\r\n         * @property {string|null} [domain] NodeProto domain\r\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\r\n         * @property {string|null} [docString] NodeProto docString\r\n         */\r\n\r\n        /**\r\n         * Constructs a new NodeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a NodeProto.\r\n         * @implements INodeProto\r\n         * @constructor\r\n         * @param {onnx.INodeProto=} [properties] Properties to set\r\n         */\r\n        function NodeProto(properties) {\r\n            this.input = [];\r\n            this.output = [];\r\n            this.attribute = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * NodeProto input.\r\n         * @member {Array.<string>} input\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto output.\r\n         * @member {Array.<string>} output\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * NodeProto opType.\r\n         * @member {string} opType\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.opType = \"\";\r\n\r\n        /**\r\n         * NodeProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * NodeProto attribute.\r\n         * @member {Array.<onnx.IAttributeProto>} attribute\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.attribute = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * Creates a new NodeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto=} [properties] Properties to set\r\n         * @returns {onnx.NodeProto} NodeProto instance\r\n         */\r\n        NodeProto.create = function create(properties) {\r\n            return new NodeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        NodeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\r\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\r\n            if (message.attribute != null && message.attribute.length)\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a NodeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        NodeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.opType = reader.string();\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.attribute && message.attribute.length))\r\n                            message.attribute = [];\r\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a NodeProto message.\r\n         * @function verify\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        NodeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    if (!$util.isString(message.input[i]))\r\n                        return \"input: string[] expected\";\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    if (!$util.isString(message.output[i]))\r\n                        return \"output: string[] expected\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\r\n                if (!$util.isString(message.opType))\r\n                    return \"opType: string expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\r\n                if (!Array.isArray(message.attribute))\r\n                    return \"attribute: array expected\";\r\n                for (var i = 0; i < message.attribute.length; ++i) {\r\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\r\n                    if (error)\r\n                        return \"attribute.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         */\r\n        NodeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.NodeProto)\r\n                return object;\r\n            var message = new $root.onnx.NodeProto();\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i)\r\n                    message.input[i] = String(object.input[i]);\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i)\r\n                    message.output[i] = String(object.output[i]);\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.opType != null)\r\n                message.opType = String(object.opType);\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.attribute) {\r\n                if (!Array.isArray(object.attribute))\r\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\r\n                message.attribute = [];\r\n                for (var i = 0; i < object.attribute.length; ++i) {\r\n                    if (typeof object.attribute[i] !== \"object\")\r\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\r\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.NodeProto} message NodeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        NodeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.input = [];\r\n                object.output = [];\r\n                object.attribute = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.opType = \"\";\r\n                object.docString = \"\";\r\n                object.domain = \"\";\r\n            }\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = message.input[j];\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = message.output[j];\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\r\n                object.opType = message.opType;\r\n            if (message.attribute && message.attribute.length) {\r\n                object.attribute = [];\r\n                for (var j = 0; j < message.attribute.length; ++j)\r\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this NodeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        NodeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for NodeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.NodeProto\";\r\n        };\r\n\r\n        return NodeProto;\r\n    })();\r\n\r\n    onnx.TrainingInfoProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TrainingInfoProto.\r\n         * @memberof onnx\r\n         * @interface ITrainingInfoProto\r\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\r\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TrainingInfoProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TrainingInfoProto.\r\n         * @implements ITrainingInfoProto\r\n         * @constructor\r\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\r\n         */\r\n        function TrainingInfoProto(properties) {\r\n            this.initializationBinding = [];\r\n            this.updateBinding = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TrainingInfoProto initialization.\r\n         * @member {onnx.IGraphProto|null|undefined} initialization\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.initialization = null;\r\n\r\n        /**\r\n         * TrainingInfoProto algorithm.\r\n         * @member {onnx.IGraphProto|null|undefined} algorithm\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.algorithm = null;\r\n\r\n        /**\r\n         * TrainingInfoProto initializationBinding.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\r\n\r\n        /**\r\n         * TrainingInfoProto updateBinding.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TrainingInfoProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\r\n         */\r\n        TrainingInfoProto.create = function create(properties) {\r\n            return new TrainingInfoProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TrainingInfoProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\r\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\r\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.initializationBinding != null && message.initializationBinding.length)\r\n                for (var i = 0; i < message.initializationBinding.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\r\n            if (message.updateBinding != null && message.updateBinding.length)\r\n                for (var i = 0; i < message.updateBinding.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TrainingInfoProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        if (!(message.initializationBinding && message.initializationBinding.length))\r\n                            message.initializationBinding = [];\r\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.updateBinding && message.updateBinding.length))\r\n                            message.updateBinding = [];\r\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TrainingInfoProto message.\r\n         * @function verify\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TrainingInfoProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.initialization);\r\n                if (error)\r\n                    return \"initialization.\" + error;\r\n            }\r\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\r\n                if (error)\r\n                    return \"algorithm.\" + error;\r\n            }\r\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\r\n                if (!Array.isArray(message.initializationBinding))\r\n                    return \"initializationBinding: array expected\";\r\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\r\n                    if (error)\r\n                        return \"initializationBinding.\" + error;\r\n                }\r\n            }\r\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\r\n                if (!Array.isArray(message.updateBinding))\r\n                    return \"updateBinding: array expected\";\r\n                for (var i = 0; i < message.updateBinding.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\r\n                    if (error)\r\n                        return \"updateBinding.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         */\r\n        TrainingInfoProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TrainingInfoProto)\r\n                return object;\r\n            var message = new $root.onnx.TrainingInfoProto();\r\n            if (object.initialization != null) {\r\n                if (typeof object.initialization !== \"object\")\r\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\r\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\r\n            }\r\n            if (object.algorithm != null) {\r\n                if (typeof object.algorithm !== \"object\")\r\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\r\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\r\n            }\r\n            if (object.initializationBinding) {\r\n                if (!Array.isArray(object.initializationBinding))\r\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\r\n                message.initializationBinding = [];\r\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\r\n                    if (typeof object.initializationBinding[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\r\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\r\n                }\r\n            }\r\n            if (object.updateBinding) {\r\n                if (!Array.isArray(object.updateBinding))\r\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\r\n                message.updateBinding = [];\r\n                for (var i = 0; i < object.updateBinding.length; ++i) {\r\n                    if (typeof object.updateBinding[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\r\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TrainingInfoProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.initializationBinding = [];\r\n                object.updateBinding = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.initialization = null;\r\n                object.algorithm = null;\r\n            }\r\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\r\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\r\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\r\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\r\n            if (message.initializationBinding && message.initializationBinding.length) {\r\n                object.initializationBinding = [];\r\n                for (var j = 0; j < message.initializationBinding.length; ++j)\r\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\r\n            }\r\n            if (message.updateBinding && message.updateBinding.length) {\r\n                object.updateBinding = [];\r\n                for (var j = 0; j < message.updateBinding.length; ++j)\r\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TrainingInfoProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TrainingInfoProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\r\n        };\r\n\r\n        return TrainingInfoProto;\r\n    })();\r\n\r\n    onnx.ModelProto = (function() {\r\n\r\n        /**\r\n         * Properties of a ModelProto.\r\n         * @memberof onnx\r\n         * @interface IModelProto\r\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\r\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\r\n         * @property {string|null} [producerName] ModelProto producerName\r\n         * @property {string|null} [producerVersion] ModelProto producerVersion\r\n         * @property {string|null} [domain] ModelProto domain\r\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\r\n         * @property {string|null} [docString] ModelProto docString\r\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\r\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\r\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\r\n         */\r\n\r\n        /**\r\n         * Constructs a new ModelProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a ModelProto.\r\n         * @implements IModelProto\r\n         * @constructor\r\n         * @param {onnx.IModelProto=} [properties] Properties to set\r\n         */\r\n        function ModelProto(properties) {\r\n            this.opsetImport = [];\r\n            this.metadataProps = [];\r\n            this.trainingInfo = [];\r\n            this.functions = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * ModelProto irVersion.\r\n         * @member {number|Long} irVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * ModelProto opsetImport.\r\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.opsetImport = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto producerName.\r\n         * @member {string} producerName\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.producerName = \"\";\r\n\r\n        /**\r\n         * ModelProto producerVersion.\r\n         * @member {string} producerVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.producerVersion = \"\";\r\n\r\n        /**\r\n         * ModelProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * ModelProto modelVersion.\r\n         * @member {number|Long} modelVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * ModelProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * ModelProto graph.\r\n         * @member {onnx.IGraphProto|null|undefined} graph\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.graph = null;\r\n\r\n        /**\r\n         * ModelProto metadataProps.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.metadataProps = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto trainingInfo.\r\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto functions.\r\n         * @member {Array.<onnx.IFunctionProto>} functions\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.functions = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new ModelProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto=} [properties] Properties to set\r\n         * @returns {onnx.ModelProto} ModelProto instance\r\n         */\r\n        ModelProto.create = function create(properties) {\r\n            return new ModelProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ModelProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\r\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\r\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\r\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\r\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\r\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\r\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\r\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\r\n            if (message.opsetImport != null && message.opsetImport.length)\r\n                for (var i = 0; i < message.opsetImport.length; ++i)\r\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\r\n            if (message.metadataProps != null && message.metadataProps.length)\r\n                for (var i = 0; i < message.metadataProps.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.trainingInfo != null && message.trainingInfo.length)\r\n                for (var i = 0; i < message.trainingInfo.length; ++i)\r\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\r\n            if (message.functions != null && message.functions.length)\r\n                for (var i = 0; i < message.functions.length; ++i)\r\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a ModelProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ModelProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.irVersion = reader.int64();\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        if (!(message.opsetImport && message.opsetImport.length))\r\n                            message.opsetImport = [];\r\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.producerName = reader.string();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.producerVersion = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.modelVersion = reader.int64();\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        if (!(message.metadataProps && message.metadataProps.length))\r\n                            message.metadataProps = [];\r\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 20: {\r\n                        if (!(message.trainingInfo && message.trainingInfo.length))\r\n                            message.trainingInfo = [];\r\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 25: {\r\n                        if (!(message.functions && message.functions.length))\r\n                            message.functions = [];\r\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a ModelProto message.\r\n         * @function verify\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ModelProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\r\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\r\n                    return \"irVersion: integer|Long expected\";\r\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\r\n                if (!Array.isArray(message.opsetImport))\r\n                    return \"opsetImport: array expected\";\r\n                for (var i = 0; i < message.opsetImport.length; ++i) {\r\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\r\n                    if (error)\r\n                        return \"opsetImport.\" + error;\r\n                }\r\n            }\r\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\r\n                if (!$util.isString(message.producerName))\r\n                    return \"producerName: string expected\";\r\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\r\n                if (!$util.isString(message.producerVersion))\r\n                    return \"producerVersion: string expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\r\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\r\n                    return \"modelVersion: integer|Long expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.graph);\r\n                if (error)\r\n                    return \"graph.\" + error;\r\n            }\r\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\r\n                if (!Array.isArray(message.metadataProps))\r\n                    return \"metadataProps: array expected\";\r\n                for (var i = 0; i < message.metadataProps.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\r\n                    if (error)\r\n                        return \"metadataProps.\" + error;\r\n                }\r\n            }\r\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\r\n                if (!Array.isArray(message.trainingInfo))\r\n                    return \"trainingInfo: array expected\";\r\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\r\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\r\n                    if (error)\r\n                        return \"trainingInfo.\" + error;\r\n                }\r\n            }\r\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\r\n                if (!Array.isArray(message.functions))\r\n                    return \"functions: array expected\";\r\n                for (var i = 0; i < message.functions.length; ++i) {\r\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\r\n                    if (error)\r\n                        return \"functions.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         */\r\n        ModelProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.ModelProto)\r\n                return object;\r\n            var message = new $root.onnx.ModelProto();\r\n            if (object.irVersion != null)\r\n                if ($util.Long)\r\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\r\n                else if (typeof object.irVersion === \"string\")\r\n                    message.irVersion = parseInt(object.irVersion, 10);\r\n                else if (typeof object.irVersion === \"number\")\r\n                    message.irVersion = object.irVersion;\r\n                else if (typeof object.irVersion === \"object\")\r\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\r\n            if (object.opsetImport) {\r\n                if (!Array.isArray(object.opsetImport))\r\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\r\n                message.opsetImport = [];\r\n                for (var i = 0; i < object.opsetImport.length; ++i) {\r\n                    if (typeof object.opsetImport[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\r\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\r\n                }\r\n            }\r\n            if (object.producerName != null)\r\n                message.producerName = String(object.producerName);\r\n            if (object.producerVersion != null)\r\n                message.producerVersion = String(object.producerVersion);\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.modelVersion != null)\r\n                if ($util.Long)\r\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\r\n                else if (typeof object.modelVersion === \"string\")\r\n                    message.modelVersion = parseInt(object.modelVersion, 10);\r\n                else if (typeof object.modelVersion === \"number\")\r\n                    message.modelVersion = object.modelVersion;\r\n                else if (typeof object.modelVersion === \"object\")\r\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.graph != null) {\r\n                if (typeof object.graph !== \"object\")\r\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\r\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\r\n            }\r\n            if (object.metadataProps) {\r\n                if (!Array.isArray(object.metadataProps))\r\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\r\n                message.metadataProps = [];\r\n                for (var i = 0; i < object.metadataProps.length; ++i) {\r\n                    if (typeof object.metadataProps[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\r\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\r\n                }\r\n            }\r\n            if (object.trainingInfo) {\r\n                if (!Array.isArray(object.trainingInfo))\r\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\r\n                message.trainingInfo = [];\r\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\r\n                    if (typeof object.trainingInfo[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\r\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\r\n                }\r\n            }\r\n            if (object.functions) {\r\n                if (!Array.isArray(object.functions))\r\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\r\n                message.functions = [];\r\n                for (var i = 0; i < object.functions.length; ++i) {\r\n                    if (typeof object.functions[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\r\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.ModelProto} message ModelProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ModelProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.opsetImport = [];\r\n                object.metadataProps = [];\r\n                object.trainingInfo = [];\r\n                object.functions = [];\r\n            }\r\n            if (options.defaults) {\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.irVersion = options.longs === String ? \"0\" : 0;\r\n                object.producerName = \"\";\r\n                object.producerVersion = \"\";\r\n                object.domain = \"\";\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\r\n                object.docString = \"\";\r\n                object.graph = null;\r\n            }\r\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\r\n                if (typeof message.irVersion === \"number\")\r\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\r\n                else\r\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\r\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\r\n                object.producerName = message.producerName;\r\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\r\n                object.producerVersion = message.producerVersion;\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\r\n                if (typeof message.modelVersion === \"number\")\r\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\r\n                else\r\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\r\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\r\n            if (message.opsetImport && message.opsetImport.length) {\r\n                object.opsetImport = [];\r\n                for (var j = 0; j < message.opsetImport.length; ++j)\r\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\r\n            }\r\n            if (message.metadataProps && message.metadataProps.length) {\r\n                object.metadataProps = [];\r\n                for (var j = 0; j < message.metadataProps.length; ++j)\r\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\r\n            }\r\n            if (message.trainingInfo && message.trainingInfo.length) {\r\n                object.trainingInfo = [];\r\n                for (var j = 0; j < message.trainingInfo.length; ++j)\r\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\r\n            }\r\n            if (message.functions && message.functions.length) {\r\n                object.functions = [];\r\n                for (var j = 0; j < message.functions.length; ++j)\r\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this ModelProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ModelProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for ModelProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.ModelProto\";\r\n        };\r\n\r\n        return ModelProto;\r\n    })();\r\n\r\n    onnx.StringStringEntryProto = (function() {\r\n\r\n        /**\r\n         * Properties of a StringStringEntryProto.\r\n         * @memberof onnx\r\n         * @interface IStringStringEntryProto\r\n         * @property {string|null} [key] StringStringEntryProto key\r\n         * @property {string|null} [value] StringStringEntryProto value\r\n         */\r\n\r\n        /**\r\n         * Constructs a new StringStringEntryProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a StringStringEntryProto.\r\n         * @implements IStringStringEntryProto\r\n         * @constructor\r\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\r\n         */\r\n        function StringStringEntryProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * StringStringEntryProto key.\r\n         * @member {string} key\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         */\r\n        StringStringEntryProto.prototype.key = \"\";\r\n\r\n        /**\r\n         * StringStringEntryProto value.\r\n         * @member {string} value\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         */\r\n        StringStringEntryProto.prototype.value = \"\";\r\n\r\n        /**\r\n         * Creates a new StringStringEntryProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\r\n         */\r\n        StringStringEntryProto.create = function create(properties) {\r\n            return new StringStringEntryProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        StringStringEntryProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\r\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        StringStringEntryProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.key = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.value = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a StringStringEntryProto message.\r\n         * @function verify\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        StringStringEntryProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.key != null && message.hasOwnProperty(\"key\"))\r\n                if (!$util.isString(message.key))\r\n                    return \"key: string expected\";\r\n            if (message.value != null && message.hasOwnProperty(\"value\"))\r\n                if (!$util.isString(message.value))\r\n                    return \"value: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         */\r\n        StringStringEntryProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.StringStringEntryProto)\r\n                return object;\r\n            var message = new $root.onnx.StringStringEntryProto();\r\n            if (object.key != null)\r\n                message.key = String(object.key);\r\n            if (object.value != null)\r\n                message.value = String(object.value);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        StringStringEntryProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.key = \"\";\r\n                object.value = \"\";\r\n            }\r\n            if (message.key != null && message.hasOwnProperty(\"key\"))\r\n                object.key = message.key;\r\n            if (message.value != null && message.hasOwnProperty(\"value\"))\r\n                object.value = message.value;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this StringStringEntryProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for StringStringEntryProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\r\n        };\r\n\r\n        return StringStringEntryProto;\r\n    })();\r\n\r\n    onnx.TensorAnnotation = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorAnnotation.\r\n         * @memberof onnx\r\n         * @interface ITensorAnnotation\r\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorAnnotation.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorAnnotation.\r\n         * @implements ITensorAnnotation\r\n         * @constructor\r\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\r\n         */\r\n        function TensorAnnotation(properties) {\r\n            this.quantParameterTensorNames = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorAnnotation tensorName.\r\n         * @member {string} tensorName\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         */\r\n        TensorAnnotation.prototype.tensorName = \"\";\r\n\r\n        /**\r\n         * TensorAnnotation quantParameterTensorNames.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         */\r\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorAnnotation instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\r\n         */\r\n        TensorAnnotation.create = function create(properties) {\r\n            return new TensorAnnotation(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorAnnotation.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\r\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\r\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorAnnotation.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.tensorName = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\r\n                            message.quantParameterTensorNames = [];\r\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorAnnotation message.\r\n         * @function verify\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorAnnotation.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\r\n                if (!$util.isString(message.tensorName))\r\n                    return \"tensorName: string expected\";\r\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\r\n                if (!Array.isArray(message.quantParameterTensorNames))\r\n                    return \"quantParameterTensorNames: array expected\";\r\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\r\n                    if (error)\r\n                        return \"quantParameterTensorNames.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         */\r\n        TensorAnnotation.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorAnnotation)\r\n                return object;\r\n            var message = new $root.onnx.TensorAnnotation();\r\n            if (object.tensorName != null)\r\n                message.tensorName = String(object.tensorName);\r\n            if (object.quantParameterTensorNames) {\r\n                if (!Array.isArray(object.quantParameterTensorNames))\r\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\r\n                message.quantParameterTensorNames = [];\r\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\r\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\r\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorAnnotation.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.quantParameterTensorNames = [];\r\n            if (options.defaults)\r\n                object.tensorName = \"\";\r\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\r\n                object.tensorName = message.tensorName;\r\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\r\n                object.quantParameterTensorNames = [];\r\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\r\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorAnnotation to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorAnnotation.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorAnnotation\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\r\n        };\r\n\r\n        return TensorAnnotation;\r\n    })();\r\n\r\n    onnx.GraphProto = (function() {\r\n\r\n        /**\r\n         * Properties of a GraphProto.\r\n         * @memberof onnx\r\n         * @interface IGraphProto\r\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\r\n         * @property {string|null} [name] GraphProto name\r\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\r\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\r\n         * @property {string|null} [docString] GraphProto docString\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\r\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\r\n         */\r\n\r\n        /**\r\n         * Constructs a new GraphProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a GraphProto.\r\n         * @implements IGraphProto\r\n         * @constructor\r\n         * @param {onnx.IGraphProto=} [properties] Properties to set\r\n         */\r\n        function GraphProto(properties) {\r\n            this.node = [];\r\n            this.initializer = [];\r\n            this.sparseInitializer = [];\r\n            this.input = [];\r\n            this.output = [];\r\n            this.valueInfo = [];\r\n            this.quantizationAnnotation = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * GraphProto node.\r\n         * @member {Array.<onnx.INodeProto>} node\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.node = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * GraphProto initializer.\r\n         * @member {Array.<onnx.ITensorProto>} initializer\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.initializer = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto sparseInitializer.\r\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * GraphProto input.\r\n         * @member {Array.<onnx.IValueInfoProto>} input\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto output.\r\n         * @member {Array.<onnx.IValueInfoProto>} output\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto valueInfo.\r\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.valueInfo = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto quantizationAnnotation.\r\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new GraphProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto=} [properties] Properties to set\r\n         * @returns {onnx.GraphProto} GraphProto instance\r\n         */\r\n        GraphProto.create = function create(properties) {\r\n            return new GraphProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        GraphProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.node != null && message.node.length)\r\n                for (var i = 0; i < message.node.length; ++i)\r\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\r\n            if (message.initializer != null && message.initializer.length)\r\n                for (var i = 0; i < message.initializer.length; ++i)\r\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\r\n            if (message.valueInfo != null && message.valueInfo.length)\r\n                for (var i = 0; i < message.valueInfo.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\r\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\r\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\r\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\r\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\r\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a GraphProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        GraphProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.node && message.node.length))\r\n                            message.node = [];\r\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.initializer && message.initializer.length))\r\n                            message.initializer = [];\r\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 15: {\r\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\r\n                            message.sparseInitializer = [];\r\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 12: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        if (!(message.valueInfo && message.valueInfo.length))\r\n                            message.valueInfo = [];\r\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\r\n                            message.quantizationAnnotation = [];\r\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a GraphProto message.\r\n         * @function verify\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        GraphProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\r\n                if (!Array.isArray(message.node))\r\n                    return \"node: array expected\";\r\n                for (var i = 0; i < message.node.length; ++i) {\r\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\r\n                    if (error)\r\n                        return \"node.\" + error;\r\n                }\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\r\n                if (!Array.isArray(message.initializer))\r\n                    return \"initializer: array expected\";\r\n                for (var i = 0; i < message.initializer.length; ++i) {\r\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\r\n                    if (error)\r\n                        return \"initializer.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\r\n                if (!Array.isArray(message.sparseInitializer))\r\n                    return \"sparseInitializer: array expected\";\r\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\r\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\r\n                    if (error)\r\n                        return \"sparseInitializer.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\r\n                    if (error)\r\n                        return \"input.\" + error;\r\n                }\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\r\n                    if (error)\r\n                        return \"output.\" + error;\r\n                }\r\n            }\r\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\r\n                if (!Array.isArray(message.valueInfo))\r\n                    return \"valueInfo: array expected\";\r\n                for (var i = 0; i < message.valueInfo.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\r\n                    if (error)\r\n                        return \"valueInfo.\" + error;\r\n                }\r\n            }\r\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\r\n                if (!Array.isArray(message.quantizationAnnotation))\r\n                    return \"quantizationAnnotation: array expected\";\r\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\r\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\r\n                    if (error)\r\n                        return \"quantizationAnnotation.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         */\r\n        GraphProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.GraphProto)\r\n                return object;\r\n            var message = new $root.onnx.GraphProto();\r\n            if (object.node) {\r\n                if (!Array.isArray(object.node))\r\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\r\n                message.node = [];\r\n                for (var i = 0; i < object.node.length; ++i) {\r\n                    if (typeof object.node[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\r\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\r\n                }\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.initializer) {\r\n                if (!Array.isArray(object.initializer))\r\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\r\n                message.initializer = [];\r\n                for (var i = 0; i < object.initializer.length; ++i) {\r\n                    if (typeof object.initializer[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\r\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\r\n                }\r\n            }\r\n            if (object.sparseInitializer) {\r\n                if (!Array.isArray(object.sparseInitializer))\r\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\r\n                message.sparseInitializer = [];\r\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\r\n                    if (typeof object.sparseInitializer[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\r\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i) {\r\n                    if (typeof object.input[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\r\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\r\n                }\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i) {\r\n                    if (typeof object.output[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\r\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\r\n                }\r\n            }\r\n            if (object.valueInfo) {\r\n                if (!Array.isArray(object.valueInfo))\r\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\r\n                message.valueInfo = [];\r\n                for (var i = 0; i < object.valueInfo.length; ++i) {\r\n                    if (typeof object.valueInfo[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\r\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\r\n                }\r\n            }\r\n            if (object.quantizationAnnotation) {\r\n                if (!Array.isArray(object.quantizationAnnotation))\r\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\r\n                message.quantizationAnnotation = [];\r\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\r\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\r\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.GraphProto} message GraphProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        GraphProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.node = [];\r\n                object.initializer = [];\r\n                object.input = [];\r\n                object.output = [];\r\n                object.valueInfo = [];\r\n                object.quantizationAnnotation = [];\r\n                object.sparseInitializer = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.docString = \"\";\r\n            }\r\n            if (message.node && message.node.length) {\r\n                object.node = [];\r\n                for (var j = 0; j < message.node.length; ++j)\r\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.initializer && message.initializer.length) {\r\n                object.initializer = [];\r\n                for (var j = 0; j < message.initializer.length; ++j)\r\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\r\n            }\r\n            if (message.valueInfo && message.valueInfo.length) {\r\n                object.valueInfo = [];\r\n                for (var j = 0; j < message.valueInfo.length; ++j)\r\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\r\n            }\r\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\r\n                object.quantizationAnnotation = [];\r\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\r\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\r\n            }\r\n            if (message.sparseInitializer && message.sparseInitializer.length) {\r\n                object.sparseInitializer = [];\r\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\r\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this GraphProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        GraphProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for GraphProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.GraphProto\";\r\n        };\r\n\r\n        return GraphProto;\r\n    })();\r\n\r\n    onnx.TensorProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorProto.\r\n         * @memberof onnx\r\n         * @interface ITensorProto\r\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\r\n         * @property {number|null} [dataType] TensorProto dataType\r\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\r\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\r\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\r\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\r\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\r\n         * @property {string|null} [name] TensorProto name\r\n         * @property {string|null} [docString] TensorProto docString\r\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\r\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\r\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\r\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorProto.\r\n         * @implements ITensorProto\r\n         * @constructor\r\n         * @param {onnx.ITensorProto=} [properties] Properties to set\r\n         */\r\n        function TensorProto(properties) {\r\n            this.dims = [];\r\n            this.floatData = [];\r\n            this.int32Data = [];\r\n            this.stringData = [];\r\n            this.int64Data = [];\r\n            this.externalData = [];\r\n            this.doubleData = [];\r\n            this.uint64Data = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorProto dims.\r\n         * @member {Array.<number|Long>} dims\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dims = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto dataType.\r\n         * @member {number} dataType\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dataType = 0;\r\n\r\n        /**\r\n         * TensorProto segment.\r\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.segment = null;\r\n\r\n        /**\r\n         * TensorProto floatData.\r\n         * @member {Array.<number>} floatData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.floatData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto int32Data.\r\n         * @member {Array.<number>} int32Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.int32Data = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto stringData.\r\n         * @member {Array.<Uint8Array>} stringData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.stringData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto int64Data.\r\n         * @member {Array.<number|Long>} int64Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.int64Data = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * TensorProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * TensorProto rawData.\r\n         * @member {Uint8Array} rawData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.rawData = $util.newBuffer([]);\r\n\r\n        /**\r\n         * TensorProto externalData.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.externalData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto dataLocation.\r\n         * @member {onnx.TensorProto.DataLocation} dataLocation\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dataLocation = 0;\r\n\r\n        /**\r\n         * TensorProto doubleData.\r\n         * @member {Array.<number>} doubleData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.doubleData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto uint64Data.\r\n         * @member {Array.<number|Long>} uint64Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.uint64Data = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto=} [properties] Properties to set\r\n         * @returns {onnx.TensorProto} TensorProto instance\r\n         */\r\n        TensorProto.create = function create(properties) {\r\n            return new TensorProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.dims != null && message.dims.length) {\r\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    writer.int64(message.dims[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\r\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\r\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\r\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\r\n            if (message.floatData != null && message.floatData.length) {\r\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\r\n                for (var i = 0; i < message.floatData.length; ++i)\r\n                    writer.float(message.floatData[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.int32Data != null && message.int32Data.length) {\r\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\r\n                for (var i = 0; i < message.int32Data.length; ++i)\r\n                    writer.int32(message.int32Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.stringData != null && message.stringData.length)\r\n                for (var i = 0; i < message.stringData.length; ++i)\r\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\r\n            if (message.int64Data != null && message.int64Data.length) {\r\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\r\n                for (var i = 0; i < message.int64Data.length; ++i)\r\n                    writer.int64(message.int64Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\r\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\r\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\r\n            if (message.doubleData != null && message.doubleData.length) {\r\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\r\n                for (var i = 0; i < message.doubleData.length; ++i)\r\n                    writer.double(message.doubleData[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.uint64Data != null && message.uint64Data.length) {\r\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\r\n                for (var i = 0; i < message.uint64Data.length; ++i)\r\n                    writer.uint64(message.uint64Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\r\n            if (message.externalData != null && message.externalData.length)\r\n                for (var i = 0; i < message.externalData.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\r\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\r\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.dims && message.dims.length))\r\n                            message.dims = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.dims.push(reader.int64());\r\n                        } else\r\n                            message.dims.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.dataType = reader.int32();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.floatData && message.floatData.length))\r\n                            message.floatData = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.floatData.push(reader.float());\r\n                        } else\r\n                            message.floatData.push(reader.float());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.int32Data && message.int32Data.length))\r\n                            message.int32Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.int32Data.push(reader.int32());\r\n                        } else\r\n                            message.int32Data.push(reader.int32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        if (!(message.stringData && message.stringData.length))\r\n                            message.stringData = [];\r\n                        message.stringData.push(reader.bytes());\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.int64Data && message.int64Data.length))\r\n                            message.int64Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.int64Data.push(reader.int64());\r\n                        } else\r\n                            message.int64Data.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 12: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        message.rawData = reader.bytes();\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        if (!(message.externalData && message.externalData.length))\r\n                            message.externalData = [];\r\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        message.dataLocation = reader.int32();\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        if (!(message.doubleData && message.doubleData.length))\r\n                            message.doubleData = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.doubleData.push(reader.double());\r\n                        } else\r\n                            message.doubleData.push(reader.double());\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.uint64Data && message.uint64Data.length))\r\n                            message.uint64Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.uint64Data.push(reader.uint64());\r\n                        } else\r\n                            message.uint64Data.push(reader.uint64());\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorProto message.\r\n         * @function verify\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\r\n                if (!Array.isArray(message.dims))\r\n                    return \"dims: array expected\";\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\r\n                        return \"dims: integer|Long[] expected\";\r\n            }\r\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\r\n                if (!$util.isInteger(message.dataType))\r\n                    return \"dataType: integer expected\";\r\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\r\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\r\n                if (error)\r\n                    return \"segment.\" + error;\r\n            }\r\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\r\n                if (!Array.isArray(message.floatData))\r\n                    return \"floatData: array expected\";\r\n                for (var i = 0; i < message.floatData.length; ++i)\r\n                    if (typeof message.floatData[i] !== \"number\")\r\n                        return \"floatData: number[] expected\";\r\n            }\r\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\r\n                if (!Array.isArray(message.int32Data))\r\n                    return \"int32Data: array expected\";\r\n                for (var i = 0; i < message.int32Data.length; ++i)\r\n                    if (!$util.isInteger(message.int32Data[i]))\r\n                        return \"int32Data: integer[] expected\";\r\n            }\r\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\r\n                if (!Array.isArray(message.stringData))\r\n                    return \"stringData: array expected\";\r\n                for (var i = 0; i < message.stringData.length; ++i)\r\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\r\n                        return \"stringData: buffer[] expected\";\r\n            }\r\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\r\n                if (!Array.isArray(message.int64Data))\r\n                    return \"int64Data: array expected\";\r\n                for (var i = 0; i < message.int64Data.length; ++i)\r\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\r\n                        return \"int64Data: integer|Long[] expected\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\r\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\r\n                    return \"rawData: buffer expected\";\r\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\r\n                if (!Array.isArray(message.externalData))\r\n                    return \"externalData: array expected\";\r\n                for (var i = 0; i < message.externalData.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\r\n                    if (error)\r\n                        return \"externalData.\" + error;\r\n                }\r\n            }\r\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\r\n                switch (message.dataLocation) {\r\n                default:\r\n                    return \"dataLocation: enum value expected\";\r\n                case 0:\r\n                case 1:\r\n                    break;\r\n                }\r\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\r\n                if (!Array.isArray(message.doubleData))\r\n                    return \"doubleData: array expected\";\r\n                for (var i = 0; i < message.doubleData.length; ++i)\r\n                    if (typeof message.doubleData[i] !== \"number\")\r\n                        return \"doubleData: number[] expected\";\r\n            }\r\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\r\n                if (!Array.isArray(message.uint64Data))\r\n                    return \"uint64Data: array expected\";\r\n                for (var i = 0; i < message.uint64Data.length; ++i)\r\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\r\n                        return \"uint64Data: integer|Long[] expected\";\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         */\r\n        TensorProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorProto)\r\n                return object;\r\n            var message = new $root.onnx.TensorProto();\r\n            if (object.dims) {\r\n                if (!Array.isArray(object.dims))\r\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\r\n                message.dims = [];\r\n                for (var i = 0; i < object.dims.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\r\n                    else if (typeof object.dims[i] === \"string\")\r\n                        message.dims[i] = parseInt(object.dims[i], 10);\r\n                    else if (typeof object.dims[i] === \"number\")\r\n                        message.dims[i] = object.dims[i];\r\n                    else if (typeof object.dims[i] === \"object\")\r\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.dataType != null)\r\n                message.dataType = object.dataType | 0;\r\n            if (object.segment != null) {\r\n                if (typeof object.segment !== \"object\")\r\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\r\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\r\n            }\r\n            if (object.floatData) {\r\n                if (!Array.isArray(object.floatData))\r\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\r\n                message.floatData = [];\r\n                for (var i = 0; i < object.floatData.length; ++i)\r\n                    message.floatData[i] = Number(object.floatData[i]);\r\n            }\r\n            if (object.int32Data) {\r\n                if (!Array.isArray(object.int32Data))\r\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\r\n                message.int32Data = [];\r\n                for (var i = 0; i < object.int32Data.length; ++i)\r\n                    message.int32Data[i] = object.int32Data[i] | 0;\r\n            }\r\n            if (object.stringData) {\r\n                if (!Array.isArray(object.stringData))\r\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\r\n                message.stringData = [];\r\n                for (var i = 0; i < object.stringData.length; ++i)\r\n                    if (typeof object.stringData[i] === \"string\")\r\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\r\n                    else if (object.stringData[i].length >= 0)\r\n                        message.stringData[i] = object.stringData[i];\r\n            }\r\n            if (object.int64Data) {\r\n                if (!Array.isArray(object.int64Data))\r\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\r\n                message.int64Data = [];\r\n                for (var i = 0; i < object.int64Data.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\r\n                    else if (typeof object.int64Data[i] === \"string\")\r\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\r\n                    else if (typeof object.int64Data[i] === \"number\")\r\n                        message.int64Data[i] = object.int64Data[i];\r\n                    else if (typeof object.int64Data[i] === \"object\")\r\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.rawData != null)\r\n                if (typeof object.rawData === \"string\")\r\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\r\n                else if (object.rawData.length >= 0)\r\n                    message.rawData = object.rawData;\r\n            if (object.externalData) {\r\n                if (!Array.isArray(object.externalData))\r\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\r\n                message.externalData = [];\r\n                for (var i = 0; i < object.externalData.length; ++i) {\r\n                    if (typeof object.externalData[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\r\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\r\n                }\r\n            }\r\n            switch (object.dataLocation) {\r\n            default:\r\n                if (typeof object.dataLocation === \"number\") {\r\n                    message.dataLocation = object.dataLocation;\r\n                    break;\r\n                }\r\n                break;\r\n            case \"DEFAULT\":\r\n            case 0:\r\n                message.dataLocation = 0;\r\n                break;\r\n            case \"EXTERNAL\":\r\n            case 1:\r\n                message.dataLocation = 1;\r\n                break;\r\n            }\r\n            if (object.doubleData) {\r\n                if (!Array.isArray(object.doubleData))\r\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\r\n                message.doubleData = [];\r\n                for (var i = 0; i < object.doubleData.length; ++i)\r\n                    message.doubleData[i] = Number(object.doubleData[i]);\r\n            }\r\n            if (object.uint64Data) {\r\n                if (!Array.isArray(object.uint64Data))\r\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\r\n                message.uint64Data = [];\r\n                for (var i = 0; i < object.uint64Data.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\r\n                    else if (typeof object.uint64Data[i] === \"string\")\r\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\r\n                    else if (typeof object.uint64Data[i] === \"number\")\r\n                        message.uint64Data[i] = object.uint64Data[i];\r\n                    else if (typeof object.uint64Data[i] === \"object\")\r\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.TensorProto} message TensorProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.dims = [];\r\n                object.floatData = [];\r\n                object.int32Data = [];\r\n                object.stringData = [];\r\n                object.int64Data = [];\r\n                object.doubleData = [];\r\n                object.uint64Data = [];\r\n                object.externalData = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.dataType = 0;\r\n                object.segment = null;\r\n                object.name = \"\";\r\n                if (options.bytes === String)\r\n                    object.rawData = \"\";\r\n                else {\r\n                    object.rawData = [];\r\n                    if (options.bytes !== Array)\r\n                        object.rawData = $util.newBuffer(object.rawData);\r\n                }\r\n                object.docString = \"\";\r\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\r\n            }\r\n            if (message.dims && message.dims.length) {\r\n                object.dims = [];\r\n                for (var j = 0; j < message.dims.length; ++j)\r\n                    if (typeof message.dims[j] === \"number\")\r\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\r\n                    else\r\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\r\n            }\r\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\r\n                object.dataType = message.dataType;\r\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\r\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\r\n            if (message.floatData && message.floatData.length) {\r\n                object.floatData = [];\r\n                for (var j = 0; j < message.floatData.length; ++j)\r\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\r\n            }\r\n            if (message.int32Data && message.int32Data.length) {\r\n                object.int32Data = [];\r\n                for (var j = 0; j < message.int32Data.length; ++j)\r\n                    object.int32Data[j] = message.int32Data[j];\r\n            }\r\n            if (message.stringData && message.stringData.length) {\r\n                object.stringData = [];\r\n                for (var j = 0; j < message.stringData.length; ++j)\r\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\r\n            }\r\n            if (message.int64Data && message.int64Data.length) {\r\n                object.int64Data = [];\r\n                for (var j = 0; j < message.int64Data.length; ++j)\r\n                    if (typeof message.int64Data[j] === \"number\")\r\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\r\n                    else\r\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\r\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\r\n            if (message.doubleData && message.doubleData.length) {\r\n                object.doubleData = [];\r\n                for (var j = 0; j < message.doubleData.length; ++j)\r\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\r\n            }\r\n            if (message.uint64Data && message.uint64Data.length) {\r\n                object.uint64Data = [];\r\n                for (var j = 0; j < message.uint64Data.length; ++j)\r\n                    if (typeof message.uint64Data[j] === \"number\")\r\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\r\n                    else\r\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.externalData && message.externalData.length) {\r\n                object.externalData = [];\r\n                for (var j = 0; j < message.externalData.length; ++j)\r\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\r\n            }\r\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\r\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorProto\";\r\n        };\r\n\r\n        /**\r\n         * DataType enum.\r\n         * @name onnx.TensorProto.DataType\r\n         * @enum {number}\r\n         * @property {number} UNDEFINED=0 UNDEFINED value\r\n         * @property {number} FLOAT=1 FLOAT value\r\n         * @property {number} UINT8=2 UINT8 value\r\n         * @property {number} INT8=3 INT8 value\r\n         * @property {number} UINT16=4 UINT16 value\r\n         * @property {number} INT16=5 INT16 value\r\n         * @property {number} INT32=6 INT32 value\r\n         * @property {number} INT64=7 INT64 value\r\n         * @property {number} STRING=8 STRING value\r\n         * @property {number} BOOL=9 BOOL value\r\n         * @property {number} FLOAT16=10 FLOAT16 value\r\n         * @property {number} DOUBLE=11 DOUBLE value\r\n         * @property {number} UINT32=12 UINT32 value\r\n         * @property {number} UINT64=13 UINT64 value\r\n         * @property {number} COMPLEX64=14 COMPLEX64 value\r\n         * @property {number} COMPLEX128=15 COMPLEX128 value\r\n         * @property {number} BFLOAT16=16 BFLOAT16 value\r\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\r\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\r\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\r\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\r\n         */\r\n        TensorProto.DataType = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\r\n            values[valuesById[1] = \"FLOAT\"] = 1;\r\n            values[valuesById[2] = \"UINT8\"] = 2;\r\n            values[valuesById[3] = \"INT8\"] = 3;\r\n            values[valuesById[4] = \"UINT16\"] = 4;\r\n            values[valuesById[5] = \"INT16\"] = 5;\r\n            values[valuesById[6] = \"INT32\"] = 6;\r\n            values[valuesById[7] = \"INT64\"] = 7;\r\n            values[valuesById[8] = \"STRING\"] = 8;\r\n            values[valuesById[9] = \"BOOL\"] = 9;\r\n            values[valuesById[10] = \"FLOAT16\"] = 10;\r\n            values[valuesById[11] = \"DOUBLE\"] = 11;\r\n            values[valuesById[12] = \"UINT32\"] = 12;\r\n            values[valuesById[13] = \"UINT64\"] = 13;\r\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\r\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\r\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\r\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\r\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\r\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\r\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\r\n            return values;\r\n        })();\r\n\r\n        TensorProto.Segment = (function() {\r\n\r\n            /**\r\n             * Properties of a Segment.\r\n             * @memberof onnx.TensorProto\r\n             * @interface ISegment\r\n             * @property {number|Long|null} [begin] Segment begin\r\n             * @property {number|Long|null} [end] Segment end\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Segment.\r\n             * @memberof onnx.TensorProto\r\n             * @classdesc Represents a Segment.\r\n             * @implements ISegment\r\n             * @constructor\r\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\r\n             */\r\n            function Segment(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Segment begin.\r\n             * @member {number|Long} begin\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             */\r\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n            /**\r\n             * Segment end.\r\n             * @member {number|Long} end\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             */\r\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n            /**\r\n             * Creates a new Segment instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\r\n             * @returns {onnx.TensorProto.Segment} Segment instance\r\n             */\r\n            Segment.create = function create(properties) {\r\n                return new Segment(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Segment.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\r\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Segment message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Segment.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.begin = reader.int64();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.end = reader.int64();\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Segment.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Segment message.\r\n             * @function verify\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Segment.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\r\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\r\n                        return \"begin: integer|Long expected\";\r\n                if (message.end != null && message.hasOwnProperty(\"end\"))\r\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\r\n                        return \"end: integer|Long expected\";\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             */\r\n            Segment.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TensorProto.Segment)\r\n                    return object;\r\n                var message = new $root.onnx.TensorProto.Segment();\r\n                if (object.begin != null)\r\n                    if ($util.Long)\r\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\r\n                    else if (typeof object.begin === \"string\")\r\n                        message.begin = parseInt(object.begin, 10);\r\n                    else if (typeof object.begin === \"number\")\r\n                        message.begin = object.begin;\r\n                    else if (typeof object.begin === \"object\")\r\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\r\n                if (object.end != null)\r\n                    if ($util.Long)\r\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\r\n                    else if (typeof object.end === \"string\")\r\n                        message.end = parseInt(object.end, 10);\r\n                    else if (typeof object.end === \"number\")\r\n                        message.end = object.end;\r\n                    else if (typeof object.end === \"object\")\r\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.Segment} message Segment\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Segment.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    if ($util.Long) {\r\n                        var long = new $util.Long(0, 0, false);\r\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                    } else\r\n                        object.begin = options.longs === String ? \"0\" : 0;\r\n                    if ($util.Long) {\r\n                        var long = new $util.Long(0, 0, false);\r\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                    } else\r\n                        object.end = options.longs === String ? \"0\" : 0;\r\n                }\r\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\r\n                    if (typeof message.begin === \"number\")\r\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\r\n                    else\r\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\r\n                if (message.end != null && message.hasOwnProperty(\"end\"))\r\n                    if (typeof message.end === \"number\")\r\n                        object.end = options.longs === String ? String(message.end) : message.end;\r\n                    else\r\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Segment to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Segment.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Segment\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\r\n            };\r\n\r\n            return Segment;\r\n        })();\r\n\r\n        /**\r\n         * DataLocation enum.\r\n         * @name onnx.TensorProto.DataLocation\r\n         * @enum {number}\r\n         * @property {number} DEFAULT=0 DEFAULT value\r\n         * @property {number} EXTERNAL=1 EXTERNAL value\r\n         */\r\n        TensorProto.DataLocation = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"DEFAULT\"] = 0;\r\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\r\n            return values;\r\n        })();\r\n\r\n        return TensorProto;\r\n    })();\r\n\r\n    onnx.SparseTensorProto = (function() {\r\n\r\n        /**\r\n         * Properties of a SparseTensorProto.\r\n         * @memberof onnx\r\n         * @interface ISparseTensorProto\r\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\r\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\r\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\r\n         */\r\n\r\n        /**\r\n         * Constructs a new SparseTensorProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a SparseTensorProto.\r\n         * @implements ISparseTensorProto\r\n         * @constructor\r\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\r\n         */\r\n        function SparseTensorProto(properties) {\r\n            this.dims = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * SparseTensorProto values.\r\n         * @member {onnx.ITensorProto|null|undefined} values\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.values = null;\r\n\r\n        /**\r\n         * SparseTensorProto indices.\r\n         * @member {onnx.ITensorProto|null|undefined} indices\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.indices = null;\r\n\r\n        /**\r\n         * SparseTensorProto dims.\r\n         * @member {Array.<number|Long>} dims\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.dims = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new SparseTensorProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\r\n         */\r\n        SparseTensorProto.create = function create(properties) {\r\n            return new SparseTensorProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        SparseTensorProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\r\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\r\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.dims != null && message.dims.length) {\r\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    writer.int64(message.dims[i]);\r\n                writer.ldelim();\r\n            }\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        SparseTensorProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        if (!(message.dims && message.dims.length))\r\n                            message.dims = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.dims.push(reader.int64());\r\n                        } else\r\n                            message.dims.push(reader.int64());\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a SparseTensorProto message.\r\n         * @function verify\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        SparseTensorProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.values);\r\n                if (error)\r\n                    return \"values.\" + error;\r\n            }\r\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.indices);\r\n                if (error)\r\n                    return \"indices.\" + error;\r\n            }\r\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\r\n                if (!Array.isArray(message.dims))\r\n                    return \"dims: array expected\";\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\r\n                        return \"dims: integer|Long[] expected\";\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         */\r\n        SparseTensorProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.SparseTensorProto)\r\n                return object;\r\n            var message = new $root.onnx.SparseTensorProto();\r\n            if (object.values != null) {\r\n                if (typeof object.values !== \"object\")\r\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\r\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\r\n            }\r\n            if (object.indices != null) {\r\n                if (typeof object.indices !== \"object\")\r\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\r\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\r\n            }\r\n            if (object.dims) {\r\n                if (!Array.isArray(object.dims))\r\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\r\n                message.dims = [];\r\n                for (var i = 0; i < object.dims.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\r\n                    else if (typeof object.dims[i] === \"string\")\r\n                        message.dims[i] = parseInt(object.dims[i], 10);\r\n                    else if (typeof object.dims[i] === \"number\")\r\n                        message.dims[i] = object.dims[i];\r\n                    else if (typeof object.dims[i] === \"object\")\r\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        SparseTensorProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.dims = [];\r\n            if (options.defaults) {\r\n                object.values = null;\r\n                object.indices = null;\r\n            }\r\n            if (message.values != null && message.hasOwnProperty(\"values\"))\r\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\r\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\r\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\r\n            if (message.dims && message.dims.length) {\r\n                object.dims = [];\r\n                for (var j = 0; j < message.dims.length; ++j)\r\n                    if (typeof message.dims[j] === \"number\")\r\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\r\n                    else\r\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this SparseTensorProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        SparseTensorProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for SparseTensorProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\r\n        };\r\n\r\n        return SparseTensorProto;\r\n    })();\r\n\r\n    onnx.TensorShapeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorShapeProto.\r\n         * @memberof onnx\r\n         * @interface ITensorShapeProto\r\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorShapeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorShapeProto.\r\n         * @implements ITensorShapeProto\r\n         * @constructor\r\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\r\n         */\r\n        function TensorShapeProto(properties) {\r\n            this.dim = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorShapeProto dim.\r\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\r\n         * @memberof onnx.TensorShapeProto\r\n         * @instance\r\n         */\r\n        TensorShapeProto.prototype.dim = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorShapeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\r\n         */\r\n        TensorShapeProto.create = function create(properties) {\r\n            return new TensorShapeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorShapeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.dim != null && message.dim.length)\r\n                for (var i = 0; i < message.dim.length; ++i)\r\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorShapeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.dim && message.dim.length))\r\n                            message.dim = [];\r\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorShapeProto message.\r\n         * @function verify\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorShapeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\r\n                if (!Array.isArray(message.dim))\r\n                    return \"dim: array expected\";\r\n                for (var i = 0; i < message.dim.length; ++i) {\r\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\r\n                    if (error)\r\n                        return \"dim.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         */\r\n        TensorShapeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorShapeProto)\r\n                return object;\r\n            var message = new $root.onnx.TensorShapeProto();\r\n            if (object.dim) {\r\n                if (!Array.isArray(object.dim))\r\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\r\n                message.dim = [];\r\n                for (var i = 0; i < object.dim.length; ++i) {\r\n                    if (typeof object.dim[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\r\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorShapeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.dim = [];\r\n            if (message.dim && message.dim.length) {\r\n                object.dim = [];\r\n                for (var j = 0; j < message.dim.length; ++j)\r\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorShapeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorShapeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorShapeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorShapeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\r\n        };\r\n\r\n        TensorShapeProto.Dimension = (function() {\r\n\r\n            /**\r\n             * Properties of a Dimension.\r\n             * @memberof onnx.TensorShapeProto\r\n             * @interface IDimension\r\n             * @property {number|Long|null} [dimValue] Dimension dimValue\r\n             * @property {string|null} [dimParam] Dimension dimParam\r\n             * @property {string|null} [denotation] Dimension denotation\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Dimension.\r\n             * @memberof onnx.TensorShapeProto\r\n             * @classdesc Represents a Dimension.\r\n             * @implements IDimension\r\n             * @constructor\r\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\r\n             */\r\n            function Dimension(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Dimension dimValue.\r\n             * @member {number|Long|null|undefined} dimValue\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.dimValue = null;\r\n\r\n            /**\r\n             * Dimension dimParam.\r\n             * @member {string|null|undefined} dimParam\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.dimParam = null;\r\n\r\n            /**\r\n             * Dimension denotation.\r\n             * @member {string} denotation\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.denotation = \"\";\r\n\r\n            // OneOf field names bound to virtual getters and setters\r\n            var $oneOfFields;\r\n\r\n            /**\r\n             * Dimension value.\r\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Object.defineProperty(Dimension.prototype, \"value\", {\r\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\r\n                set: $util.oneOfSetter($oneOfFields)\r\n            });\r\n\r\n            /**\r\n             * Creates a new Dimension instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\r\n             */\r\n            Dimension.create = function create(properties) {\r\n                return new Dimension(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Dimension.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\r\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\r\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\r\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\r\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Dimension message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Dimension.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.dimValue = reader.int64();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.dimParam = reader.string();\r\n                            break;\r\n                        }\r\n                    case 3: {\r\n                            message.denotation = reader.string();\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Dimension message.\r\n             * @function verify\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Dimension.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                var properties = {};\r\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\r\n                    properties.value = 1;\r\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\r\n                        return \"dimValue: integer|Long expected\";\r\n                }\r\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\r\n                    if (properties.value === 1)\r\n                        return \"value: multiple values\";\r\n                    properties.value = 1;\r\n                    if (!$util.isString(message.dimParam))\r\n                        return \"dimParam: string expected\";\r\n                }\r\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                    if (!$util.isString(message.denotation))\r\n                        return \"denotation: string expected\";\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             */\r\n            Dimension.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\r\n                    return object;\r\n                var message = new $root.onnx.TensorShapeProto.Dimension();\r\n                if (object.dimValue != null)\r\n                    if ($util.Long)\r\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\r\n                    else if (typeof object.dimValue === \"string\")\r\n                        message.dimValue = parseInt(object.dimValue, 10);\r\n                    else if (typeof object.dimValue === \"number\")\r\n                        message.dimValue = object.dimValue;\r\n                    else if (typeof object.dimValue === \"object\")\r\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\r\n                if (object.dimParam != null)\r\n                    message.dimParam = String(object.dimParam);\r\n                if (object.denotation != null)\r\n                    message.denotation = String(object.denotation);\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Dimension.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.denotation = \"\";\r\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\r\n                    if (typeof message.dimValue === \"number\")\r\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\r\n                    else\r\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\r\n                    if (options.oneofs)\r\n                        object.value = \"dimValue\";\r\n                }\r\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\r\n                    object.dimParam = message.dimParam;\r\n                    if (options.oneofs)\r\n                        object.value = \"dimParam\";\r\n                }\r\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                    object.denotation = message.denotation;\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Dimension to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Dimension.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Dimension\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\r\n            };\r\n\r\n            return Dimension;\r\n        })();\r\n\r\n        return TensorShapeProto;\r\n    })();\r\n\r\n    onnx.TypeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TypeProto.\r\n         * @memberof onnx\r\n         * @interface ITypeProto\r\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\r\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\r\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\r\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\r\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\r\n         * @property {string|null} [denotation] TypeProto denotation\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TypeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TypeProto.\r\n         * @implements ITypeProto\r\n         * @constructor\r\n         * @param {onnx.ITypeProto=} [properties] Properties to set\r\n         */\r\n        function TypeProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TypeProto tensorType.\r\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.tensorType = null;\r\n\r\n        /**\r\n         * TypeProto sequenceType.\r\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.sequenceType = null;\r\n\r\n        /**\r\n         * TypeProto mapType.\r\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.mapType = null;\r\n\r\n        /**\r\n         * TypeProto optionalType.\r\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.optionalType = null;\r\n\r\n        /**\r\n         * TypeProto sparseTensorType.\r\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.sparseTensorType = null;\r\n\r\n        /**\r\n         * TypeProto denotation.\r\n         * @member {string} denotation\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.denotation = \"\";\r\n\r\n        // OneOf field names bound to virtual getters and setters\r\n        var $oneOfFields;\r\n\r\n        /**\r\n         * TypeProto value.\r\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        Object.defineProperty(TypeProto.prototype, \"value\", {\r\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\r\n            set: $util.oneOfSetter($oneOfFields)\r\n        });\r\n\r\n        /**\r\n         * Creates a new TypeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto=} [properties] Properties to set\r\n         * @returns {onnx.TypeProto} TypeProto instance\r\n         */\r\n        TypeProto.create = function create(properties) {\r\n            return new TypeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TypeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\r\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\r\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\r\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\r\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\r\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\r\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\r\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\r\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TypeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TypeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.denotation = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TypeProto message.\r\n         * @function verify\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TypeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            var properties = {};\r\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\r\n                    if (error)\r\n                        return \"tensorType.\" + error;\r\n                }\r\n            }\r\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\r\n                    if (error)\r\n                        return \"sequenceType.\" + error;\r\n                }\r\n            }\r\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\r\n                    if (error)\r\n                        return \"mapType.\" + error;\r\n                }\r\n            }\r\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\r\n                    if (error)\r\n                        return \"optionalType.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\r\n                    if (error)\r\n                        return \"sparseTensorType.\" + error;\r\n                }\r\n            }\r\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                if (!$util.isString(message.denotation))\r\n                    return \"denotation: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         */\r\n        TypeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TypeProto)\r\n                return object;\r\n            var message = new $root.onnx.TypeProto();\r\n            if (object.tensorType != null) {\r\n                if (typeof object.tensorType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\r\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\r\n            }\r\n            if (object.sequenceType != null) {\r\n                if (typeof object.sequenceType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\r\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\r\n            }\r\n            if (object.mapType != null) {\r\n                if (typeof object.mapType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\r\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\r\n            }\r\n            if (object.optionalType != null) {\r\n                if (typeof object.optionalType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\r\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\r\n            }\r\n            if (object.sparseTensorType != null) {\r\n                if (typeof object.sparseTensorType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\r\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\r\n            }\r\n            if (object.denotation != null)\r\n                message.denotation = String(object.denotation);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.TypeProto} message TypeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TypeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults)\r\n                object.denotation = \"\";\r\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\r\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"tensorType\";\r\n            }\r\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\r\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"sequenceType\";\r\n            }\r\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\r\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"mapType\";\r\n            }\r\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                object.denotation = message.denotation;\r\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\r\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"sparseTensorType\";\r\n            }\r\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\r\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"optionalType\";\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TypeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TypeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TypeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TypeProto\";\r\n        };\r\n\r\n        TypeProto.Tensor = (function() {\r\n\r\n            /**\r\n             * Properties of a Tensor.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ITensor\r\n             * @property {number|null} [elemType] Tensor elemType\r\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Tensor.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Tensor.\r\n             * @implements ITensor\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\r\n             */\r\n            function Tensor(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Tensor elemType.\r\n             * @member {number} elemType\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             */\r\n            Tensor.prototype.elemType = 0;\r\n\r\n            /**\r\n             * Tensor shape.\r\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             */\r\n            Tensor.prototype.shape = null;\r\n\r\n            /**\r\n             * Creates a new Tensor instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\r\n             */\r\n            Tensor.create = function create(properties) {\r\n                return new Tensor(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Tensor.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\r\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\r\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Tensor message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Tensor.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Tensor message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Tensor.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    if (!$util.isInteger(message.elemType))\r\n                        return \"elemType: integer expected\";\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\r\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\r\n                    if (error)\r\n                        return \"shape.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             */\r\n            Tensor.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Tensor)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Tensor();\r\n                if (object.elemType != null)\r\n                    message.elemType = object.elemType | 0;\r\n                if (object.shape != null) {\r\n                    if (typeof object.shape !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\r\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.Tensor} message Tensor\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Tensor.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.elemType = 0;\r\n                    object.shape = null;\r\n                }\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = message.elemType;\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\r\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Tensor to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Tensor.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Tensor\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\r\n            };\r\n\r\n            return Tensor;\r\n        })();\r\n\r\n        TypeProto.Sequence = (function() {\r\n\r\n            /**\r\n             * Properties of a Sequence.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ISequence\r\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Sequence.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Sequence.\r\n             * @implements ISequence\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\r\n             */\r\n            function Sequence(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Sequence elemType.\r\n             * @member {onnx.ITypeProto|null|undefined} elemType\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @instance\r\n             */\r\n            Sequence.prototype.elemType = null;\r\n\r\n            /**\r\n             * Creates a new Sequence instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\r\n             */\r\n            Sequence.create = function create(properties) {\r\n                return new Sequence(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Sequence.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Sequence message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Sequence.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Sequence message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Sequence.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\r\n                    if (error)\r\n                        return \"elemType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             */\r\n            Sequence.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Sequence)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Sequence();\r\n                if (object.elemType != null) {\r\n                    if (typeof object.elemType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\r\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.Sequence} message Sequence\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Sequence.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.elemType = null;\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Sequence to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Sequence.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Sequence\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\r\n            };\r\n\r\n            return Sequence;\r\n        })();\r\n\r\n        TypeProto.Map = (function() {\r\n\r\n            /**\r\n             * Properties of a Map.\r\n             * @memberof onnx.TypeProto\r\n             * @interface IMap\r\n             * @property {number|null} [keyType] Map keyType\r\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Map.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Map.\r\n             * @implements IMap\r\n             * @constructor\r\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\r\n             */\r\n            function Map(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Map keyType.\r\n             * @member {number} keyType\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             */\r\n            Map.prototype.keyType = 0;\r\n\r\n            /**\r\n             * Map valueType.\r\n             * @member {onnx.ITypeProto|null|undefined} valueType\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             */\r\n            Map.prototype.valueType = null;\r\n\r\n            /**\r\n             * Creates a new Map instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Map} Map instance\r\n             */\r\n            Map.create = function create(properties) {\r\n                return new Map(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Map.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\r\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\r\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Map message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Map.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.keyType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Map message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Map.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Map message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Map.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\r\n                    if (!$util.isInteger(message.keyType))\r\n                        return \"keyType: integer expected\";\r\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\r\n                    if (error)\r\n                        return \"valueType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             */\r\n            Map.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Map)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Map();\r\n                if (object.keyType != null)\r\n                    message.keyType = object.keyType | 0;\r\n                if (object.valueType != null) {\r\n                    if (typeof object.valueType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\r\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.Map} message Map\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Map.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.keyType = 0;\r\n                    object.valueType = null;\r\n                }\r\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\r\n                    object.keyType = message.keyType;\r\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\r\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Map to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Map.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Map\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\r\n            };\r\n\r\n            return Map;\r\n        })();\r\n\r\n        TypeProto.Optional = (function() {\r\n\r\n            /**\r\n             * Properties of an Optional.\r\n             * @memberof onnx.TypeProto\r\n             * @interface IOptional\r\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Optional.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents an Optional.\r\n             * @implements IOptional\r\n             * @constructor\r\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\r\n             */\r\n            function Optional(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Optional elemType.\r\n             * @member {onnx.ITypeProto|null|undefined} elemType\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @instance\r\n             */\r\n            Optional.prototype.elemType = null;\r\n\r\n            /**\r\n             * Creates a new Optional instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Optional} Optional instance\r\n             */\r\n            Optional.create = function create(properties) {\r\n                return new Optional(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Optional.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes an Optional message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Optional.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Optional.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies an Optional message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Optional.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\r\n                    if (error)\r\n                        return \"elemType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             */\r\n            Optional.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Optional)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Optional();\r\n                if (object.elemType != null) {\r\n                    if (typeof object.elemType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\r\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.Optional} message Optional\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Optional.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.elemType = null;\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Optional to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Optional.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Optional\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\r\n            };\r\n\r\n            return Optional;\r\n        })();\r\n\r\n        TypeProto.SparseTensor = (function() {\r\n\r\n            /**\r\n             * Properties of a SparseTensor.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ISparseTensor\r\n             * @property {number|null} [elemType] SparseTensor elemType\r\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\r\n             */\r\n\r\n            /**\r\n             * Constructs a new SparseTensor.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a SparseTensor.\r\n             * @implements ISparseTensor\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\r\n             */\r\n            function SparseTensor(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * SparseTensor elemType.\r\n             * @member {number} elemType\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             */\r\n            SparseTensor.prototype.elemType = 0;\r\n\r\n            /**\r\n             * SparseTensor shape.\r\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             */\r\n            SparseTensor.prototype.shape = null;\r\n\r\n            /**\r\n             * Creates a new SparseTensor instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\r\n             */\r\n            SparseTensor.create = function create(properties) {\r\n                return new SparseTensor(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            SparseTensor.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\r\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\r\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a SparseTensor message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            SparseTensor.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a SparseTensor message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            SparseTensor.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    if (!$util.isInteger(message.elemType))\r\n                        return \"elemType: integer expected\";\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\r\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\r\n                    if (error)\r\n                        return \"shape.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             */\r\n            SparseTensor.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.SparseTensor();\r\n                if (object.elemType != null)\r\n                    message.elemType = object.elemType | 0;\r\n                if (object.shape != null) {\r\n                    if (typeof object.shape !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\r\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            SparseTensor.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.elemType = 0;\r\n                    object.shape = null;\r\n                }\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = message.elemType;\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\r\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this SparseTensor to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            SparseTensor.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for SparseTensor\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\r\n            };\r\n\r\n            return SparseTensor;\r\n        })();\r\n\r\n        return TypeProto;\r\n    })();\r\n\r\n    onnx.OperatorSetIdProto = (function() {\r\n\r\n        /**\r\n         * Properties of an OperatorSetIdProto.\r\n         * @memberof onnx\r\n         * @interface IOperatorSetIdProto\r\n         * @property {string|null} [domain] OperatorSetIdProto domain\r\n         * @property {number|Long|null} [version] OperatorSetIdProto version\r\n         */\r\n\r\n        /**\r\n         * Constructs a new OperatorSetIdProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents an OperatorSetIdProto.\r\n         * @implements IOperatorSetIdProto\r\n         * @constructor\r\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\r\n         */\r\n        function OperatorSetIdProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * OperatorSetIdProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         */\r\n        OperatorSetIdProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * OperatorSetIdProto version.\r\n         * @member {number|Long} version\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         */\r\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * Creates a new OperatorSetIdProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\r\n         */\r\n        OperatorSetIdProto.create = function create(properties) {\r\n            return new OperatorSetIdProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        OperatorSetIdProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\r\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\r\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        OperatorSetIdProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.version = reader.int64();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies an OperatorSetIdProto message.\r\n         * @function verify\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        OperatorSetIdProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.version != null && message.hasOwnProperty(\"version\"))\r\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\r\n                    return \"version: integer|Long expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         */\r\n        OperatorSetIdProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.OperatorSetIdProto)\r\n                return object;\r\n            var message = new $root.onnx.OperatorSetIdProto();\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.version != null)\r\n                if ($util.Long)\r\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\r\n                else if (typeof object.version === \"string\")\r\n                    message.version = parseInt(object.version, 10);\r\n                else if (typeof object.version === \"number\")\r\n                    message.version = object.version;\r\n                else if (typeof object.version === \"object\")\r\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        OperatorSetIdProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.domain = \"\";\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.version = options.longs === String ? \"0\" : 0;\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.version != null && message.hasOwnProperty(\"version\"))\r\n                if (typeof message.version === \"number\")\r\n                    object.version = options.longs === String ? String(message.version) : message.version;\r\n                else\r\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this OperatorSetIdProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for OperatorSetIdProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\r\n        };\r\n\r\n        return OperatorSetIdProto;\r\n    })();\r\n\r\n    /**\r\n     * OperatorStatus enum.\r\n     * @name onnx.OperatorStatus\r\n     * @enum {number}\r\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\r\n     * @property {number} STABLE=1 STABLE value\r\n     */\r\n    onnx.OperatorStatus = (function() {\r\n        var valuesById = {}, values = Object.create(valuesById);\r\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\r\n        values[valuesById[1] = \"STABLE\"] = 1;\r\n        return values;\r\n    })();\r\n\r\n    onnx.FunctionProto = (function() {\r\n\r\n        /**\r\n         * Properties of a FunctionProto.\r\n         * @memberof onnx\r\n         * @interface IFunctionProto\r\n         * @property {string|null} [name] FunctionProto name\r\n         * @property {Array.<string>|null} [input] FunctionProto input\r\n         * @property {Array.<string>|null} [output] FunctionProto output\r\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\r\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\r\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\r\n         * @property {string|null} [docString] FunctionProto docString\r\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\r\n         * @property {string|null} [domain] FunctionProto domain\r\n         */\r\n\r\n        /**\r\n         * Constructs a new FunctionProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a FunctionProto.\r\n         * @implements IFunctionProto\r\n         * @constructor\r\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\r\n         */\r\n        function FunctionProto(properties) {\r\n            this.input = [];\r\n            this.output = [];\r\n            this.attribute = [];\r\n            this.attributeProto = [];\r\n            this.node = [];\r\n            this.opsetImport = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * FunctionProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * FunctionProto input.\r\n         * @member {Array.<string>} input\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto output.\r\n         * @member {Array.<string>} output\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto attribute.\r\n         * @member {Array.<string>} attribute\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.attribute = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto attributeProto.\r\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto node.\r\n         * @member {Array.<onnx.INodeProto>} node\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.node = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * FunctionProto opsetImport.\r\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * Creates a new FunctionProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\r\n         * @returns {onnx.FunctionProto} FunctionProto instance\r\n         */\r\n        FunctionProto.create = function create(properties) {\r\n            return new FunctionProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        FunctionProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\r\n            if (message.attribute != null && message.attribute.length)\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\r\n            if (message.node != null && message.node.length)\r\n                for (var i = 0; i < message.node.length; ++i)\r\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\r\n            if (message.opsetImport != null && message.opsetImport.length)\r\n                for (var i = 0; i < message.opsetImport.length; ++i)\r\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\r\n            if (message.attributeProto != null && message.attributeProto.length)\r\n                for (var i = 0; i < message.attributeProto.length; ++i)\r\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a FunctionProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        FunctionProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        if (!(message.attribute && message.attribute.length))\r\n                            message.attribute = [];\r\n                        message.attribute.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.attributeProto && message.attributeProto.length))\r\n                            message.attributeProto = [];\r\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.node && message.node.length))\r\n                            message.node = [];\r\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        if (!(message.opsetImport && message.opsetImport.length))\r\n                            message.opsetImport = [];\r\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a FunctionProto message.\r\n         * @function verify\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        FunctionProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    if (!$util.isString(message.input[i]))\r\n                        return \"input: string[] expected\";\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    if (!$util.isString(message.output[i]))\r\n                        return \"output: string[] expected\";\r\n            }\r\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\r\n                if (!Array.isArray(message.attribute))\r\n                    return \"attribute: array expected\";\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    if (!$util.isString(message.attribute[i]))\r\n                        return \"attribute: string[] expected\";\r\n            }\r\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\r\n                if (!Array.isArray(message.attributeProto))\r\n                    return \"attributeProto: array expected\";\r\n                for (var i = 0; i < message.attributeProto.length; ++i) {\r\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\r\n                    if (error)\r\n                        return \"attributeProto.\" + error;\r\n                }\r\n            }\r\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\r\n                if (!Array.isArray(message.node))\r\n                    return \"node: array expected\";\r\n                for (var i = 0; i < message.node.length; ++i) {\r\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\r\n                    if (error)\r\n                        return \"node.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\r\n                if (!Array.isArray(message.opsetImport))\r\n                    return \"opsetImport: array expected\";\r\n                for (var i = 0; i < message.opsetImport.length; ++i) {\r\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\r\n                    if (error)\r\n                        return \"opsetImport.\" + error;\r\n                }\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         */\r\n        FunctionProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.FunctionProto)\r\n                return object;\r\n            var message = new $root.onnx.FunctionProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i)\r\n                    message.input[i] = String(object.input[i]);\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i)\r\n                    message.output[i] = String(object.output[i]);\r\n            }\r\n            if (object.attribute) {\r\n                if (!Array.isArray(object.attribute))\r\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\r\n                message.attribute = [];\r\n                for (var i = 0; i < object.attribute.length; ++i)\r\n                    message.attribute[i] = String(object.attribute[i]);\r\n            }\r\n            if (object.attributeProto) {\r\n                if (!Array.isArray(object.attributeProto))\r\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\r\n                message.attributeProto = [];\r\n                for (var i = 0; i < object.attributeProto.length; ++i) {\r\n                    if (typeof object.attributeProto[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\r\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\r\n                }\r\n            }\r\n            if (object.node) {\r\n                if (!Array.isArray(object.node))\r\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\r\n                message.node = [];\r\n                for (var i = 0; i < object.node.length; ++i) {\r\n                    if (typeof object.node[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\r\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.opsetImport) {\r\n                if (!Array.isArray(object.opsetImport))\r\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\r\n                message.opsetImport = [];\r\n                for (var i = 0; i < object.opsetImport.length; ++i) {\r\n                    if (typeof object.opsetImport[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\r\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\r\n                }\r\n            }\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.FunctionProto} message FunctionProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        FunctionProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.input = [];\r\n                object.output = [];\r\n                object.attribute = [];\r\n                object.node = [];\r\n                object.opsetImport = [];\r\n                object.attributeProto = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.docString = \"\";\r\n                object.domain = \"\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = message.input[j];\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = message.output[j];\r\n            }\r\n            if (message.attribute && message.attribute.length) {\r\n                object.attribute = [];\r\n                for (var j = 0; j < message.attribute.length; ++j)\r\n                    object.attribute[j] = message.attribute[j];\r\n            }\r\n            if (message.node && message.node.length) {\r\n                object.node = [];\r\n                for (var j = 0; j < message.node.length; ++j)\r\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.opsetImport && message.opsetImport.length) {\r\n                object.opsetImport = [];\r\n                for (var j = 0; j < message.opsetImport.length; ++j)\r\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.attributeProto && message.attributeProto.length) {\r\n                object.attributeProto = [];\r\n                for (var j = 0; j < message.attributeProto.length; ++j)\r\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this FunctionProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        FunctionProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for FunctionProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\r\n        };\r\n\r\n        return FunctionProto;\r\n    })();\r\n\r\n    return onnx;\r\n})();\r\n\r\nmodule.exports = $root;\r\n","\nvar ortWasmThreaded = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nfunction d(){l.buffer!=p.buffer&&q();return p}function u(){l.buffer!=p.buffer&&q();return aa}function z(){l.buffer!=p.buffer&&q();return ba}function A(){l.buffer!=p.buffer&&q();return ca}function da(){l.buffer!=p.buffer&&q();return ea}var B=moduleArg,fa,C;B.ready=new Promise((a,b)=>{fa=a;C=b});\"use strict\";B.jsepInit=function(a,b,c,e,f,h,k,m){B.Ib=a;B.ob=b;B.qb=c;B.ab=e;B.pb=f;B.xa=h;B.rb=k;B.sb=m};\nvar ha=Object.assign({},B),ia=\"./this.program\",D=(a,b)=>{throw b;},ja=\"object\"==typeof window,E=\"function\"==typeof importScripts,F=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,G=B.ENVIRONMENT_IS_PTHREAD||!1,H=\"\";function ka(a){return B.locateFile?B.locateFile(a,H):H+a}var la,I,ma;\nif(F){var fs=require(\"fs\"),na=require(\"path\");H=E?na.dirname(H)+\"/\":__dirname+\"/\";la=(b,c)=>{b=b.startsWith(\"file://\")?new URL(b):na.normalize(b);return fs.readFileSync(b,c?void 0:\"utf8\")};ma=b=>{b=la(b,!0);b.buffer||(b=new Uint8Array(b));return b};I=(b,c,e,f=!0)=>{b=b.startsWith(\"file://\")?new URL(b):na.normalize(b);fs.readFile(b,f?void 0:\"utf8\",(h,k)=>{h?e(h):c(f?k.buffer:k)})};!B.thisProgram&&1<process.argv.length&&(ia=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);D=(b,c)=>{process.exitCode=\nb;throw c;};B.inspect=()=>\"[Emscripten Module object]\";let a;try{a=require(\"worker_threads\")}catch(b){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),b;}global.Worker=a.Worker}else if(ja||E)E?H=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(H=document.currentScript.src),_scriptDir&&(H=_scriptDir),0!==H.indexOf(\"blob:\")?H=H.substr(0,H.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):H=\"\",F||(la=a=>{var b=\nnew XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},E&&(ma=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),I=(a,b,c)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";e.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)});F&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);\nvar oa=console.log.bind(console),pa=console.error.bind(console);F&&(oa=(...a)=>fs.writeSync(1,a.join(\" \")+\"\\n\"),pa=(...a)=>fs.writeSync(2,a.join(\" \")+\"\\n\"));var qa=B.print||oa,J=B.printErr||pa;Object.assign(B,ha);ha=null;B.thisProgram&&(ia=B.thisProgram);B.quit&&(D=B.quit);var K;B.wasmBinary&&(K=B.wasmBinary);var noExitRuntime=B.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&L(\"no native wasm support detected\");var l,M,ra,N=!1,P,p,aa,ba,ca,ea;\nfunction q(){var a=l.buffer;B.HEAP8=p=new Int8Array(a);B.HEAP16=new Int16Array(a);B.HEAP32=ba=new Int32Array(a);B.HEAPU8=aa=new Uint8Array(a);B.HEAPU16=new Uint16Array(a);B.HEAPU32=ca=new Uint32Array(a);B.HEAPF32=new Float32Array(a);B.HEAPF64=ea=new Float64Array(a)}var sa=B.INITIAL_MEMORY||16777216;5242880<=sa||L(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+sa+\"! (STACK_SIZE=5242880)\");\nif(G)l=B.wasmMemory;else if(B.wasmMemory)l=B.wasmMemory;else if(l=new WebAssembly.Memory({initial:sa/65536,maximum:65536,shared:!0}),!(l.buffer instanceof SharedArrayBuffer))throw J(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),F&&J(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),\nError(\"bad memory\");q();sa=l.buffer.byteLength;var ta=[],ua=[],va=[],wa=0;function xa(){return noExitRuntime||0<wa}var Q=0,ya=null,R=null;function za(){Q++;B.monitorRunDependencies&&B.monitorRunDependencies(Q)}function Aa(){Q--;B.monitorRunDependencies&&B.monitorRunDependencies(Q);if(0==Q&&(null!==ya&&(clearInterval(ya),ya=null),R)){var a=R;R=null;a()}}\nfunction L(a){if(B.onAbort)B.onAbort(a);a=\"Aborted(\"+a+\")\";J(a);N=!0;P=1;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");C(a);throw a;}function Ba(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var S;S=\"ort-wasm-simd-threaded.wasm\";Ba(S)||(S=ka(S));function Ca(a){if(a==S&&K)return new Uint8Array(K);if(ma)return ma(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction Da(a){if(!K&&(ja||E)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>Ca(a));if(I)return new Promise((b,c)=>{I(a,e=>b(new Uint8Array(e)),c)})}return Promise.resolve().then(()=>Ca(a))}function Ea(a,b,c){return Da(a).then(e=>WebAssembly.instantiate(e,b)).then(e=>e).then(c,e=>{J(\"failed to asynchronously prepare wasm: \"+e);L(e)})}\nfunction Fa(a,b){var c=S;return K||\"function\"!=typeof WebAssembly.instantiateStreaming||Ba(c)||c.startsWith(\"file://\")||F||\"function\"!=typeof fetch?Ea(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(e=>WebAssembly.instantiateStreaming(e,a).then(b,function(f){J(\"wasm streaming compile failed: \"+f);J(\"falling back to ArrayBuffer instantiation\");return Ea(c,a,b)}))}\nvar T,Ga={893084:()=>{B.jsepRunPromise=new Promise(function(a){B.tb=a})},893179:a=>{B.tb(a)},893217:a=>B.ob(a),893250:a=>B.qb(a),893282:(a,b,c)=>{B.ab(a,b,c,!0)},893321:(a,b,c)=>{B.ab(a,b,c)},893354:a=>{B.xa(\"Abs\",a,void 0)},893405:a=>{B.xa(\"Neg\",a,void 0)},893456:a=>{B.xa(\"Floor\",a,void 0)},893509:a=>{B.xa(\"Ceil\",a,void 0)},893561:a=>{B.xa(\"Reciprocal\",a,void 0)},893619:a=>{B.xa(\"Sqrt\",a,void 0)},893671:a=>{B.xa(\"Exp\",a,void 0)},893722:a=>{B.xa(\"Erf\",a,void 0)},893773:a=>{B.xa(\"Sigmoid\",a,void 0)},\n893828:a=>{B.xa(\"Log\",a,void 0)},893879:a=>{B.xa(\"Sin\",a,void 0)},893930:a=>{B.xa(\"Cos\",a,void 0)},893981:a=>{B.xa(\"Tan\",a,void 0)},894032:a=>{B.xa(\"Asin\",a,void 0)},894084:a=>{B.xa(\"Acos\",a,void 0)},894136:a=>{B.xa(\"Atan\",a,void 0)},894188:a=>{B.xa(\"Sinh\",a,void 0)},894240:a=>{B.xa(\"Cosh\",a,void 0)},894292:a=>{B.xa(\"Asinh\",a,void 0)},894345:a=>{B.xa(\"Acosh\",a,void 0)},894398:a=>{B.xa(\"Atanh\",a,void 0)},894451:a=>{B.xa(\"Tanh\",a,void 0)},894503:(a,b,c)=>{B.xa(\"ClipV10\",a,{min:b,max:c})},894575:a=>\n{B.xa(\"Clip\",a,void 0)},894627:(a,b)=>{B.xa(\"Elu\",a,{alpha:b})},894685:a=>{B.xa(\"Relu\",a,void 0)},894737:(a,b)=>{B.xa(\"LeakyRelu\",a,{alpha:b})},894801:(a,b)=>{B.xa(\"ThresholdedRelu\",a,{alpha:b})},894871:(a,b)=>{B.xa(\"Cast\",a,{to:b})},894929:a=>{B.xa(\"Add\",a,void 0)},894980:a=>{B.xa(\"Sub\",a,void 0)},895031:a=>{B.xa(\"Mul\",a,void 0)},895082:a=>{B.xa(\"Div\",a,void 0)},895133:a=>{B.xa(\"Pow\",a,void 0)},895184:(a,b,c,e,f)=>{B.xa(\"ReduceMean\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>\n0,f+e>>>0)):[]})},895348:(a,b,c,e,f)=>{B.xa(\"ReduceMax\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[]})},895511:(a,b,c,e,f)=>{B.xa(\"ReduceMin\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[]})},895674:(a,b,c,e,f)=>{B.xa(\"ReduceProd\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[]})},895838:(a,b,c,e,f)=>{B.xa(\"ReduceSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>\n0,f+e>>>0)):[]})},896001:(a,b,c,e,f)=>{B.xa(\"ReduceL1\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[]})},896163:(a,b,c,e,f)=>{B.xa(\"ReduceL2\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[]})},896325:(a,b,c,e,f)=>{B.xa(\"ReduceLogSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[]})},896491:(a,b,c,e,f)=>{B.xa(\"ReduceSumSquare\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>\n0,f+e>>>0)):[]})},896660:(a,b,c,e,f)=>{B.xa(\"ReduceLogSumExp\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[]})},896829:(a,b,c)=>{B.xa(\"Transpose\",a,{perm:b?Array.from(z().subarray(c>>>0,c+b>>>0)):[]})},896942:(a,b,c,e,f,h,k,m,v,n)=>{B.xa(\"Conv\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:e,kernel_shape:[f],pads:[h,k],strides:[m],w_is_const:()=>!!d()[n>>>0]})},897170:(a,b,c,e,f,h,k,m,v,n,r,x,y,g,t)=>{B.xa(\"Conv\",a,{format:g?\"NHWC\":\"NCHW\",auto_pad:b,\ndilations:[c,e],group:f,kernel_shape:[h,k],pads:[m,v,n,r],strides:[x,y],w_is_const:()=>!!d()[t>>>0]})},897429:(a,b,c,e,f,h,k,m,v,n)=>{B.xa(\"Conv\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:e,kernel_shape:[f],pads:[h,k],strides:[m],w_is_const:()=>!!d()[n>>>0]})},897657:(a,b,c,e,f,h,k,m,v,n,r,x,y,g,t)=>{B.xa(\"Conv\",a,{format:g?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c,e],group:f,kernel_shape:[h,k],pads:[m,v,n,r],strides:[x,y],w_is_const:()=>!!d()[t>>>0]})},897916:(a,b,c,e,f,h,k,m,v,n,r,x,\ny,g)=>{B.xa(\"ConvTranspose\",a,{format:v?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],group:e,kernel_shape:[f],pads:[h,k],strides:[m],wIsConst:()=>!!d()[n>>>0],outputPadding:r?Array.from(z().subarray(x>>>0,x+r>>>0)):[],outputShape:y?Array.from(z().subarray(g>>>0,g+y>>>0)):[]})},898296:(a,b,c,e,f,h,k,m,v,n,r,x,y)=>{B.xa(\"ConvTranspose\",a,{format:m?\"NHWC\":\"NCHW\",autoPad:b,dilations:Array.from(z().subarray(c>>>0,c+2>>>0)),group:e,kernelShape:Array.from(z().subarray(f>>>0,f+2>>>0)),pads:Array.from(z().subarray(h>>>\n0,h+4>>>0)),strides:Array.from(z().subarray(k>>>0,k+2>>>0)),wIsConst:()=>!!d()[v>>>0],outputPadding:0<n?Array.from(z().subarray(r>>>0,r+n>>>0)):[],outputShape:0<x?Array.from(z().subarray(y>>>0,y+x>>>0)):[]})},898819:(a,b,c,e,f,h,k,m,v,n,r,x,y,g)=>{B.xa(\"ConvTranspose\",a,{format:v?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],group:e,kernel_shape:[f],pads:[h,k],strides:[m],wIsConst:()=>!!d()[n>>>0],outputPadding:r?Array.from(z().subarray(x>>>0,x+r>>>0)):[],outputShape:y?Array.from(z().subarray(g>>>0,g+y>>>\n0)):[]})},899199:(a,b,c,e,f,h,k,m,v,n,r,x,y)=>{B.xa(\"ConvTranspose\",a,{format:m?\"NHWC\":\"NCHW\",autoPad:b,dilations:Array.from(z().subarray(c>>>0,c+2>>>0)),group:e,kernelShape:Array.from(z().subarray(f>>>0,f+2>>>0)),pads:Array.from(z().subarray(h>>>0,h+4>>>0)),strides:Array.from(z().subarray(k>>>0,k+2>>>0)),wIsConst:()=>!!d()[v>>>0],outputPadding:0<n?Array.from(z().subarray(r>>>0,r+n>>>0)):[],outputShape:0<x?Array.from(z().subarray(y>>>0,y+x>>>0)):[]})},899722:(a,b)=>{B.xa(\"GlobalAveragePool\",a,{format:b?\n\"NHWC\":\"NCHW\"})},899813:(a,b,c,e,f,h,k,m,v,n,r,x,y,g,t,w)=>{B.xa(\"AveragePool\",a,{format:w?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:e,storage_order:f,dilations:[h,k],kernel_shape:[m,v],pads:[n,r,x,y],strides:[g,t]})},900097:(a,b)=>{B.xa(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},900188:(a,b,c,e,f,h,k,m,v,n,r,x,y,g,t,w)=>{B.xa(\"AveragePool\",a,{format:w?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:e,storage_order:f,dilations:[h,k],kernel_shape:[m,v],pads:[n,r,x,y],strides:[g,\nt]})},900472:(a,b)=>{B.xa(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},900559:(a,b,c,e,f,h,k,m,v,n,r,x,y,g,t,w)=>{B.xa(\"MaxPool\",a,{format:w?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:e,storage_order:f,dilations:[h,k],kernel_shape:[m,v],pads:[n,r,x,y],strides:[g,t]})},900839:(a,b)=>{B.xa(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},900926:(a,b,c,e,f,h,k,m,v,n,r,x,y,g,t,w)=>{B.xa(\"MaxPool\",a,{format:w?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:e,storage_order:f,dilations:[h,\nk],kernel_shape:[m,v],pads:[n,r,x,y],strides:[g,t]})},901206:(a,b,c,e,f)=>{B.xa(\"Gemm\",a,{alpha:b,beta:c,transA:e,transB:f})},901310:a=>{B.xa(\"MatMul\",a,void 0)},901364:(a,b,c,e)=>{B.xa(\"ArgMax\",a,{keepDims:!!b,selectLastIndex:!!c,axis:e})},901472:(a,b,c,e)=>{B.xa(\"ArgMin\",a,{keepDims:!!b,selectLastIndex:!!c,axis:e})},901580:(a,b)=>{B.xa(\"Softmax\",a,{axis:b})},901643:(a,b)=>{B.xa(\"Concat\",a,{axis:b})},901703:(a,b,c,e,f)=>{B.xa(\"Split\",a,{axis:b,numOutputs:c,splitSizes:e?Array.from(z().subarray(f>>>\n0,f+e>>>0)):[]})},901848:a=>{B.xa(\"Expand\",a,void 0)},901902:(a,b)=>{B.xa(\"Gather\",a,{axis:Number(b)})},901973:(a,b,c,e,f,h,k,m,v,n,r)=>{B.xa(\"Resize\",a,{antialias:b,axes:c?Array.from(z().subarray(e>>>0,e+c>>>0)):[],coordinateTransformMode:U(f),cubicCoeffA:h,excludeOutside:k,extrapolationValue:m,keepAspectRatioPolicy:U(v),mode:U(n),nearestMode:U(r)})},902324:(a,b,c,e,f,h,k)=>{B.xa(\"Slice\",a,{starts:b?Array.from(z().subarray(c>>>0,c+b>>>0)):[],ends:e?Array.from(z().subarray(f>>>0,f+e>>>0)):[],axes:h?\nArray.from(z().subarray(k>>>0,k+h>>>0)):[]})},902555:a=>{B.xa(\"Tile\",a,void 0)},902607:(a,b,c)=>{B.xa(\"LayerNormalization\",a,{axis:Number(b),epsilon:Number(c)})},902714:(a,b,c)=>{B.xa(\"InstanceNormalization\",a,{epsilon:b,format:c?\"NHWC\":\"NCHW\"})},902828:(a,b,c)=>{B.xa(\"InstanceNormalization\",a,{epsilon:b,format:c?\"NHWC\":\"NCHW\"})},902942:a=>{B.xa(\"Gelu\",a,void 0)},902994:(a,b)=>{B.xa(\"SkipLayerNormalization\",a,{epsilon:b})},903075:a=>{B.rb(a)},903109:(a,b)=>B.sb(a,b)};\nfunction Ha(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}function Ia(a){a.terminate();a.onmessage=()=>{}}function Ja(a){(a=V.Ja[a])||L();V.xb(a)}function Ka(a){var b=V.lb();if(!b)return 6;V.Ra.push(b);V.Ja[a.Qa]=b;b.Qa=a.Qa;var c={cmd:\"run\",start_routine:a.yb,arg:a.jb,pthread_ptr:a.Qa};F&&b.unref();b.postMessage(c,a.Eb);return 0}\nvar La=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Ma=(a,b,c)=>{b>>>=0;var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.buffer&&La)return La.decode(a.buffer instanceof SharedArrayBuffer?a.slice(b,c):a.subarray(b,c));for(e=\"\";b<c;){var f=a[b++];if(f&128){var h=a[b++]&63;if(192==(f&224))e+=String.fromCharCode((f&31)<<6|h);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|h<<6|k:(f&7)<<18|h<<12|k<<6|a[b++]&63;65536>f?e+=String.fromCharCode(f):(f-=65536,e+=String.fromCharCode(55296|f>>\n10,56320|f&1023))}}else e+=String.fromCharCode(f)}return e},U=(a,b)=>(a>>>=0)?Ma(u(),a,b):\"\";function Na(a){if(G)return W(1,1,a);P=a;if(!xa()){V.zb();if(B.onExit)B.onExit(a);N=!0}D(a,new Ha(a))}\nvar Pa=a=>{P=a;if(G)throw Oa(a),\"unwind\";Na(a)},V={Ua:[],Ra:[],eb:[],Ja:{},Xa:function(){G?V.nb():V.mb()},mb:function(){ta.unshift(()=>{za();V.ub(()=>Aa())})},nb:function(){V.receiveObjectTransfer=V.wb;V.threadInitTLS=V.cb;V.setExitStatus=V.bb;noExitRuntime=!1},bb:function(a){P=a},Kb:[\"$terminateWorker\"],zb:function(){for(var a of V.Ra)Ia(a);for(a of V.Ua)Ia(a);V.Ua=[];V.Ra=[];V.Ja=[]},xb:function(a){var b=a.Qa;delete V.Ja[b];V.Ua.push(a);V.Ra.splice(V.Ra.indexOf(a),1);a.Qa=0;Qa(b)},wb:function(){},\ncb:function(){V.eb.forEach(a=>a())},vb:a=>new Promise(b=>{a.onmessage=h=>{h=h.data;var k=h.cmd;if(h.targetThread&&h.targetThread!=Ra()){var m=V.Ja[h.Jb];m?m.postMessage(h,h.transferList):J('Internal error! Worker sent a message \"'+k+'\" to target pthread '+h.targetThread+\", but that thread no longer exists!\")}else if(\"checkMailbox\"===k)Sa();else if(\"spawnThread\"===k)Ka(h);else if(\"cleanupThread\"===k)Ja(h.thread);else if(\"killThread\"===k)h=h.thread,k=V.Ja[h],delete V.Ja[h],Ia(k),Qa(h),V.Ra.splice(V.Ra.indexOf(k),\n1),k.Qa=0;else if(\"cancelThread\"===k)V.Ja[h.thread].postMessage({cmd:\"cancel\"});else if(\"loaded\"===k)a.loaded=!0,b(a);else if(\"alert\"===k)alert(\"Thread \"+h.threadId+\": \"+h.text);else if(\"setimmediate\"===h.target)a.postMessage(h);else if(\"callHandler\"===k)B[h.handler](...h.args);else k&&J(\"worker sent an unknown command \"+k)};a.onerror=h=>{J(\"worker sent an error! \"+h.filename+\":\"+h.lineno+\": \"+h.message);throw h;};F&&(a.on(\"message\",function(h){a.onmessage({data:h})}),a.on(\"error\",function(h){a.onerror(h)}));\nvar c=[],e=[\"onExit\",\"onAbort\",\"print\",\"printErr\"],f;for(f of e)B.hasOwnProperty(f)&&c.push(f);a.postMessage({cmd:\"load\",handlers:c,urlOrBlob:B.mainScriptUrlOrBlob||_scriptDir,wasmMemory:l,wasmModule:ra})}),ub:function(a){a()},ib:function(){var a=ka(\"ort-wasm-simd-threaded.worker.js\");a=new Worker(a);V.Ua.push(a)},lb:function(){0==V.Ua.length&&(V.ib(),V.vb(V.Ua[0]));return V.Ua.pop()}};B.PThread=V;var Ta=a=>{for(;0<a.length;)a.shift()(B)};\nB.establishStackSpace=function(){var a=Ra(),b=z()[a+52>>2>>>0];a=z()[a+56>>2>>>0];Ua(b,b-a);Va(b)};function Oa(a){if(G)return W(2,0,a);Pa(a)}B.invokeEntryPoint=function(a,b){a=Wa.apply(null,[a,b]);xa()?V.bb(a):Xa(a)};function Ya(a){this.$a=a-24;this.hb=function(b){A()[this.$a+4>>2>>>0]=b};this.gb=function(b){A()[this.$a+8>>2>>>0]=b};this.Xa=function(b,c){this.fb();this.hb(b);this.gb(c)};this.fb=function(){A()[this.$a+16>>2>>>0]=0}}var Za=0,$a=0;\nfunction ab(a,b,c,e){return G?W(3,1,a,b,c,e):bb(a,b,c,e)}function bb(a,b,c,e){a>>>=0;b>>>=0;c>>>=0;e>>>=0;if(\"undefined\"==typeof SharedArrayBuffer)return J(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var f=[];if(G&&0===f.length)return ab(a,b,c,e);a={yb:c,Qa:a,jb:e,Eb:f};return G?(a.Gb=\"spawnThread\",postMessage(a,f),0):Ka(a)}function cb(a,b,c){return G?W(4,1,a,b,c):0}function db(a,b){if(G)return W(5,1,a,b)}\nvar eb=a=>{for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);127>=e?b++:2047>=e?b+=2:55296<=e&&57343>=e?(b+=4,++c):b+=3}return b},fb=(a,b,c,e)=>{c>>>=0;if(!(0<e))return 0;var f=c;e=c+e-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var m=a.charCodeAt(++h);k=65536+((k&1023)<<10)|m&1023}if(127>=k){if(c>=e)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=e)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=e)break;b[c++>>>0]=224|k>>12}else{if(c+3>=e)break;b[c++>>>0]=240|k>>\n18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-f},gb=(a,b,c)=>fb(a,u(),b,c);function hb(a,b){if(G)return W(6,1,a,b)}function ib(a,b,c){if(G)return W(7,1,a,b,c)}function jb(a,b,c){return G?W(8,1,a,b,c):0}function kb(a,b){if(G)return W(9,1,a,b)}function lb(a,b,c){if(G)return W(10,1,a,b,c)}function mb(a,b,c,e){if(G)return W(11,1,a,b,c,e)}function nb(a,b,c,e){if(G)return W(12,1,a,b,c,e)}function ob(a,b,c,e){if(G)return W(13,1,a,b,c,e)}\nfunction pb(a){if(G)return W(14,1,a)}function qb(a,b){if(G)return W(15,1,a,b)}function rb(a,b,c){if(G)return W(16,1,a,b,c)}var sb=a=>{if(!N)try{if(a(),!xa())try{G?Xa(P):Pa(P)}catch(b){b instanceof Ha||\"unwind\"==b||D(1,b)}}catch(b){b instanceof Ha||\"unwind\"==b||D(1,b)}};function tb(a){a>>>=0;\"function\"===typeof Atomics.Fb&&(Atomics.Fb(z(),a>>2,a).value.then(Sa),a+=128,Atomics.store(z(),a>>2,1))}B.__emscripten_thread_mailbox_await=tb;function Sa(){var a=Ra();a&&(tb(a),sb(()=>ub()))}B.checkMailbox=Sa;\nvar X=a=>0===a%4&&(0!==a%100||0===a%400),vb=[0,31,60,91,121,152,182,213,244,274,305,335],wb=[0,31,59,90,120,151,181,212,243,273,304,334];function xb(a,b,c,e,f,h,k,m){return G?W(17,1,a,b,c,e,f,h,k,m):-52}function yb(a,b,c,e,f,h,k){if(G)return W(18,1,a,b,c,e,f,h,k)}var Ab=a=>{var b=eb(a)+1,c=zb(b);c&&gb(a,c,b);return c},Bb=[],Cb=(a,b)=>{Bb.length=0;var c;for(b>>=2;c=u()[a++>>>0];)b+=105!=c&b,Bb.push(105==c?z()[b>>>0]:da()[b++>>>1]),++b;return Bb},Eb=a=>{var b=Db();a=a();Va(b);return a};\nfunction W(a,b){var c=arguments.length-2,e=arguments;return Eb(()=>{for(var f=Fb(8*c),h=f>>3,k=0;k<c;k++){var m=e[2+k];da()[h+k>>>0]=m}return Gb(a,c,f,b)})}\nvar Hb=[],Ib={},Kb=()=>{if(!Jb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ia||\"./this.program\"},b;for(b in Ib)void 0===Ib[b]?delete a[b]:a[b]=Ib[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Jb=c}return Jb},Jb;\nfunction Lb(a,b){if(G)return W(19,1,a,b);a>>>=0;b>>>=0;var c=0;Kb().forEach(function(e,f){var h=b+c;f=A()[a+4*f>>2>>>0]=h;for(h=0;h<e.length;++h)d()[f++>>0>>>0]=e.charCodeAt(h);d()[f>>0>>>0]=0;c+=e.length+1});return 0}function Mb(a,b){if(G)return W(20,1,a,b);a>>>=0;b>>>=0;var c=Kb();A()[a>>2>>>0]=c.length;var e=0;c.forEach(function(f){e+=f.length+1});A()[b>>2>>>0]=e;return 0}function Nb(a){return G?W(21,1,a):52}function Ob(a,b,c,e){return G?W(22,1,a,b,c,e):52}\nfunction Pb(a,b,c,e,f){return G?W(23,1,a,b,c,e,f):70}var Qb=[null,[],[]];function Rb(a,b,c,e){if(G)return W(24,1,a,b,c,e);b>>>=0;c>>>=0;e>>>=0;for(var f=0,h=0;h<c;h++){var k=A()[b>>2>>>0],m=A()[b+4>>2>>>0];b+=8;for(var v=0;v<m;v++){var n=u()[k+v>>>0],r=Qb[a];0===n||10===n?((1===a?qa:J)(Ma(r,0)),r.length=0):r.push(n)}f+=m}A()[e>>2>>>0]=f;return 0}\nvar Tb=()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return c=>(c.set(crypto.getRandomValues(new Uint8Array(c.byteLength))),c);if(F)try{var a=require(\"crypto\");if(a.randomFillSync)return c=>a.randomFillSync(c);var b=a.randomBytes;return c=>(c.set(b(c.byteLength)),c)}catch(c){}L(\"initRandomDevice\")},Ub=a=>(Ub=Tb())(a),Vb=[31,29,31,30,31,30,31,31,30,31,30,31],Wb=[31,28,31,30,31,30,31,31,30,31,30,31];function Xb(a){var b=Array(eb(a)+1);fb(a,b,0,b.length);return b}\nvar Yb=(a,b)=>{d().set(a,b>>>0)};\nfunction Zb(a,b,c,e){function f(g,t,w){for(g=\"number\"==typeof g?g.toString():g||\"\";g.length<t;)g=w[0]+g;return g}function h(g,t){return f(g,t,\"0\")}function k(g,t){function w(Sb){return 0>Sb?-1:0<Sb?1:0}var O;0===(O=w(g.getFullYear()-t.getFullYear()))&&0===(O=w(g.getMonth()-t.getMonth()))&&(O=w(g.getDate()-t.getDate()));return O}function m(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function v(g){var t=g.Sa;for(g=new Date((new Date(g.Ta+1900,0,1)).getTime());0<t;){var w=g.getMonth(),O=(X(g.getFullYear())?Vb:Wb)[w];if(t>O-g.getDate())t-=O-g.getDate()+1,g.setDate(1),11>w?g.setMonth(w+1):(g.setMonth(0),g.setFullYear(g.getFullYear()+1));else{g.setDate(g.getDate()+t);break}}w=new Date(g.getFullYear()+1,0,4);t=m(new Date(g.getFullYear(),\n0,4));w=m(w);return 0>=k(t,g)?0>=k(w,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;e>>>=0;var n=z()[e+40>>2>>>0];e={Cb:z()[e>>2>>>0],Bb:z()[e+4>>2>>>0],Va:z()[e+8>>2>>>0],Za:z()[e+12>>2>>>0],Wa:z()[e+16>>2>>>0],Ta:z()[e+20>>2>>>0],Pa:z()[e+24>>2>>>0],Sa:z()[e+28>>2>>>0],Lb:z()[e+32>>2>>>0],Ab:z()[e+36>>2>>>0],Db:n?U(n):\"\"};c=U(c);n={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\n\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var r in n)c=c.replace(new RegExp(r,\"g\"),n[r]);var x=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),y=\"January February March April May June July August September October November December\".split(\" \");n={\"%a\":g=>x[g.Pa].substring(0,3),\"%A\":g=>x[g.Pa],\"%b\":g=>\ny[g.Wa].substring(0,3),\"%B\":g=>y[g.Wa],\"%C\":g=>h((g.Ta+1900)/100|0,2),\"%d\":g=>h(g.Za,2),\"%e\":g=>f(g.Za,2,\" \"),\"%g\":g=>v(g).toString().substring(2),\"%G\":g=>v(g),\"%H\":g=>h(g.Va,2),\"%I\":g=>{g=g.Va;0==g?g=12:12<g&&(g-=12);return h(g,2)},\"%j\":g=>{for(var t=0,w=0;w<=g.Wa-1;t+=(X(g.Ta+1900)?Vb:Wb)[w++]);return h(g.Za+t,3)},\"%m\":g=>h(g.Wa+1,2),\"%M\":g=>h(g.Bb,2),\"%n\":()=>\"\\n\",\"%p\":g=>0<=g.Va&&12>g.Va?\"AM\":\"PM\",\"%S\":g=>h(g.Cb,2),\"%t\":()=>\"\\t\",\"%u\":g=>g.Pa||7,\"%U\":g=>h(Math.floor((g.Sa+7-g.Pa)/7),2),\"%V\":g=>\n{var t=Math.floor((g.Sa+7-(g.Pa+6)%7)/7);2>=(g.Pa+371-g.Sa-2)%7&&t++;if(t)53==t&&(w=(g.Pa+371-g.Sa)%7,4==w||3==w&&X(g.Ta)||(t=1));else{t=52;var w=(g.Pa+7-g.Sa-1)%7;(4==w||5==w&&X(g.Ta%400-1))&&t++}return h(t,2)},\"%w\":g=>g.Pa,\"%W\":g=>h(Math.floor((g.Sa+7-(g.Pa+6)%7)/7),2),\"%y\":g=>(g.Ta+1900).toString().substring(2),\"%Y\":g=>g.Ta+1900,\"%z\":g=>{g=g.Ab;var t=0<=g;g=Math.abs(g)/60;return(t?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":g=>g.Db,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(r in n)c.includes(r)&&\n(c=c.replace(new RegExp(r,\"g\"),n[r](e)));c=c.replace(/\\0\\0/g,\"%\");r=Xb(c);if(r.length>b)return 0;Yb(r,a);return r.length-1}function $b(a){try{a()}catch(b){L(b)}}function ac(a){var b={},c;for(c in a)(function(e){var f=a[e];b[e]=\"function\"==typeof f?function(){bc.push(e);try{return f.apply(null,arguments)}finally{N||(bc.pop()===e||L(),Y&&1===Z&&0===bc.length&&(Z=0,wa+=1,$b(cc),\"undefined\"!=typeof Fibers&&Fibers.Mb()))}}:f})(c);return b}var Z=0,Y=null,dc=0,bc=[],ec={},fc={},gc=0,hc=null,ic=[];\nfunction jc(){var a=zb(65548),b=a+12;A()[a>>2>>>0]=b;A()[a+4>>2>>>0]=b+65536;b=bc[0];var c=ec[b];void 0===c&&(c=gc++,ec[b]=c,fc[c]=b);b=c;z()[a+8>>2>>>0]=b;return a}function kc(){var a=z()[Y+8>>2>>>0];a=M[fc[a]];--wa;return a()}\nfunction lc(a){if(!N){if(0===Z){var b=!1,c=!1;a((e=0)=>{if(!N&&(dc=e,b=!0,c)){Z=2;$b(()=>mc(Y));\"undefined\"!=typeof Browser&&Browser.Ya.kb&&Browser.Ya.resume();e=!1;try{var f=kc()}catch(m){f=m,e=!0}var h=!1;if(!Y){var k=hc;k&&(hc=null,(e?k.reject:k.resolve)(f),h=!0)}if(e&&!h)throw f;}});c=!0;b||(Z=1,Y=jc(),\"undefined\"!=typeof Browser&&Browser.Ya.kb&&Browser.Ya.pause(),$b(()=>nc(Y)))}else 2===Z?(Z=0,$b(oc),pc(Y),Y=null,ic.forEach(e=>sb(e))):L(`invalid state: ${Z}`);return dc}}\nfunction qc(a){return lc(b=>{a().then(b)})}V.Xa();\nvar rc=[null,Na,Oa,ab,cb,db,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,xb,yb,Lb,Mb,Nb,Ob,Pb,Rb],uc={r:function(a,b,c){return qc(async()=>{await B.pb(a,b,c)})},b:function(a,b,c){a>>>=0;(new Ya(a)).Xa(b>>>0,c>>>0);Za=a;$a++;throw Za;},O:function(a){sc(a>>>0,!E,1,!ja,131072,!1);V.cb()},m:function(a){a>>>=0;G?postMessage({cmd:\"cleanupThread\",thread:a}):Ja(a)},J:bb,i:cb,U:db,G:hb,I:ib,V:jb,S:kb,K:lb,R:mb,q:nb,H:ob,E:pb,T:qb,F:rb,Y:()=>!0,C:function(a,b){a>>>=0;a==b>>>0?setTimeout(()=>Sa()):G?postMessage({targetThread:a,\ncmd:\"checkMailbox\"}):(a=V.Ja[a])&&a.postMessage({cmd:\"checkMailbox\"})},M:function(){return-1},N:tb,X:function(a){F&&V.Ja[a>>>0].ref()},u:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);z()[c>>2>>>0]=a.getUTCSeconds();z()[c+4>>2>>>0]=a.getUTCMinutes();z()[c+8>>2>>>0]=a.getUTCHours();z()[c+12>>2>>>0]=a.getUTCDate();z()[c+16>>2>>>0]=a.getUTCMonth();z()[c+20>>2>>>0]=a.getUTCFullYear()-1900;z()[c+24>>2>>>0]=a.getUTCDay();a=(a.getTime()-Date.UTC(a.getUTCFullYear(),\n0,1,0,0,0,0))/864E5|0;z()[c+28>>2>>>0]=a},v:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);z()[c>>2>>>0]=a.getSeconds();z()[c+4>>2>>>0]=a.getMinutes();z()[c+8>>2>>>0]=a.getHours();z()[c+12>>2>>>0]=a.getDate();z()[c+16>>2>>>0]=a.getMonth();z()[c+20>>2>>>0]=a.getFullYear()-1900;z()[c+24>>2>>>0]=a.getDay();b=(X(a.getFullYear())?vb:wb)[a.getMonth()]+a.getDate()-1|0;z()[c+28>>2>>>0]=b;z()[c+36>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),\n6,1)).getTimezoneOffset();var e=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();a=(b!=e&&a.getTimezoneOffset()==Math.min(e,b))|0;z()[c+32>>2>>>0]=a},w:function(a){a>>>=0;var b=new Date(z()[a+20>>2>>>0]+1900,z()[a+16>>2>>>0],z()[a+12>>2>>>0],z()[a+8>>2>>>0],z()[a+4>>2>>>0],z()[a>>2>>>0],0),c=z()[a+32>>2>>>0],e=b.getTimezoneOffset(),f=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),k=Math.min(h,f);0>c?z()[a+32>>2>>>0]=Number(f!=h&&k==e):\n0<c!=(k==e)&&(f=Math.max(h,f),b.setTime(b.getTime()+6E4*((0<c?k:f)-e)));z()[a+24>>2>>>0]=b.getDay();c=(X(b.getFullYear())?vb:wb)[b.getMonth()]+b.getDate()-1|0;z()[a+28>>2>>>0]=c;z()[a>>2>>>0]=b.getSeconds();z()[a+4>>2>>>0]=b.getMinutes();z()[a+8>>2>>>0]=b.getHours();z()[a+12>>2>>>0]=b.getDate();z()[a+16>>2>>>0]=b.getMonth();z()[a+20>>2>>>0]=b.getYear();a=b.getTime()/1E3;return tc((T=a,1<=+Math.abs(T)?0<T?+Math.floor(T/4294967296)>>>0:~~+Math.ceil((T-+(~~T>>>0))/4294967296)>>>0:0)),a>>>0},s:xb,t:yb,\nA:function(a,b,c){function e(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}a>>>=0;b>>>=0;c>>>=0;var f=(new Date).getFullYear(),h=new Date(f,0,1),k=new Date(f,6,1);f=h.getTimezoneOffset();var m=k.getTimezoneOffset(),v=Math.max(f,m);A()[a>>2>>>0]=60*v;z()[b>>2>>>0]=Number(f!=m);a=e(h);b=e(k);a=Ab(a);b=Ab(b);m<f?(A()[c>>2>>>0]=a,A()[c+4>>2>>>0]=b):(A()[c>>2>>>0]=b,A()[c+4>>2>>>0]=a)},d:()=>{L(\"\")},c:function(a,b,c){a>>>=0;b=Cb(b>>>0,c>>>0);return Ga[a].apply(null,b)},l:function(a,\nb,c){a>>>=0;b=Cb(b>>>0,c>>>0);return Ga[a].apply(null,b)},n:function(){},j:function(){return Date.now()},W:()=>{wa+=1;throw\"unwind\";},D:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return F?require(\"os\").cpus().length:navigator.hardwareConcurrency},L:function(a,b,c,e){V.Hb=b>>>0;Hb.length=c;b=e>>>0>>3;for(e=0;e<c;e++)Hb[e]=da()[b+e>>>0];return(0>a?Ga[-a-1]:rc[a]).apply(null,Hb)},z:function(a){a>>>=0;var b=u().length;if(a<=b||4294901760<a)return!1;for(var c=\n1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);var f=Math;e=Math.max(a,e);a:{f=f.min.call(f,4294901760,e+(65536-e%65536)%65536)-l.buffer.byteLength+65535>>>16;try{l.grow(f);q();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},P:Lb,Q:Mb,k:Pa,h:Nb,p:Ob,x:Pb,o:Rb,y:function(a,b){a>>>=0;b>>>=0;Ub(u().subarray(a>>>0,a+b>>>0));return 0},a:l||B.wasmMemory,B:Zb,e:function(a,b,c,e){return Zb(a>>>0,b>>>0,c>>>0,e>>>0)}};\n(function(){function a(c,e){c=c.exports;c=ac(c);M=c=vc(c);V.eb.push(M.wa);ua.unshift(M.Z);ra=e;Aa();return c}var b={a:uc};za();if(B.instantiateWasm)try{return B.instantiateWasm(b,a)}catch(c){J(\"Module.instantiateWasm callback failed with error: \"+c),C(c)}Fa(b,function(c){a(c.instance,c.module)}).catch(C);return{}})();B._OrtInit=(a,b)=>(B._OrtInit=M._)(a,b);B._OrtGetLastError=(a,b)=>(B._OrtGetLastError=M.$)(a,b);\nB._OrtCreateSessionOptions=(a,b,c,e,f,h,k,m,v,n)=>(B._OrtCreateSessionOptions=M.aa)(a,b,c,e,f,h,k,m,v,n);B._OrtAppendExecutionProvider=(a,b)=>(B._OrtAppendExecutionProvider=M.ba)(a,b);B._OrtAddSessionConfigEntry=(a,b,c)=>(B._OrtAddSessionConfigEntry=M.ca)(a,b,c);B._OrtReleaseSessionOptions=a=>(B._OrtReleaseSessionOptions=M.da)(a);B._OrtCreateSession=(a,b,c)=>(B._OrtCreateSession=M.ea)(a,b,c);B._OrtReleaseSession=a=>(B._OrtReleaseSession=M.fa)(a);\nB._OrtGetInputOutputCount=(a,b,c)=>(B._OrtGetInputOutputCount=M.ga)(a,b,c);B._OrtGetInputName=(a,b)=>(B._OrtGetInputName=M.ha)(a,b);B._OrtGetOutputName=(a,b)=>(B._OrtGetOutputName=M.ia)(a,b);B._OrtFree=a=>(B._OrtFree=M.ja)(a);B._OrtCreateTensor=(a,b,c,e,f)=>(B._OrtCreateTensor=M.ka)(a,b,c,e,f);B._OrtGetTensorData=(a,b,c,e,f)=>(B._OrtGetTensorData=M.la)(a,b,c,e,f);B._OrtReleaseTensor=a=>(B._OrtReleaseTensor=M.ma)(a);B._OrtCreateRunOptions=(a,b,c,e)=>(B._OrtCreateRunOptions=M.na)(a,b,c,e);\nB._OrtAddRunConfigEntry=(a,b,c)=>(B._OrtAddRunConfigEntry=M.oa)(a,b,c);B._OrtReleaseRunOptions=a=>(B._OrtReleaseRunOptions=M.pa)(a);B._OrtRun=(a,b,c,e,f,h,k,m)=>(B._OrtRun=M.qa)(a,b,c,e,f,h,k,m);B._OrtEndProfiling=a=>(B._OrtEndProfiling=M.ra)(a);B._JsepOutput=(a,b,c)=>(B._JsepOutput=M.sa)(a,b,c);var Ra=B._pthread_self=()=>(Ra=B._pthread_self=M.ta)(),zb=B._malloc=a=>(zb=B._malloc=M.ua)(a),pc=B._free=a=>(pc=B._free=M.va)(a);B.__emscripten_tls_init=()=>(B.__emscripten_tls_init=M.wa)();\nvar sc=B.__emscripten_thread_init=(a,b,c,e,f,h)=>(sc=B.__emscripten_thread_init=M.ya)(a,b,c,e,f,h);B.__emscripten_thread_crashed=()=>(B.__emscripten_thread_crashed=M.za)();\nvar Gb=(a,b,c,e)=>(Gb=M.Aa)(a,b,c,e),Qa=a=>(Qa=M.Ba)(a),Xa=B.__emscripten_thread_exit=a=>(Xa=B.__emscripten_thread_exit=M.Ca)(a),ub=B.__emscripten_check_mailbox=()=>(ub=B.__emscripten_check_mailbox=M.Da)(),tc=a=>(tc=M.Ea)(a),Ua=(a,b)=>(Ua=M.Fa)(a,b),Db=()=>(Db=M.Ga)(),Va=a=>(Va=M.Ha)(a),Fb=a=>(Fb=M.Ia)(a),Wa=B.dynCall_ii=(a,b)=>(Wa=B.dynCall_ii=M.Ka)(a,b),nc=a=>(nc=M.La)(a),cc=()=>(cc=M.Ma)(),mc=a=>(mc=M.Na)(a),oc=()=>(oc=M.Oa)();B.___start_em_js=903144;B.___stop_em_js=903305;\nfunction vc(a){a=Object.assign({},a);var b=e=>()=>e()>>>0,c=e=>f=>e(f)>>>0;a.__errno_location=b(a.__errno_location);a.pthread_self=b(a.pthread_self);a.malloc=c(a.malloc);a.stackSave=b(a.stackSave);a.stackAlloc=c(a.stackAlloc);return a}B.keepRuntimeAlive=xa;B.wasmMemory=l;B.stackAlloc=Fb;B.stackSave=Db;B.stackRestore=Va;B.UTF8ToString=U;B.stringToUTF8=gb;B.lengthBytesUTF8=eb;B.ExitStatus=Ha;B.PThread=V;var wc;R=function xc(){wc||yc();wc||(R=xc)};\nfunction yc(){function a(){if(!wc&&(wc=!0,B.calledRun=!0,!N)){G||Ta(ua);fa(B);if(B.onRuntimeInitialized)B.onRuntimeInitialized();if(!G){if(B.postRun)for(\"function\"==typeof B.postRun&&(B.postRun=[B.postRun]);B.postRun.length;){var b=B.postRun.shift();va.unshift(b)}Ta(va)}}}if(!(0<Q))if(G)fa(B),G||Ta(ua),startWorker(B);else{if(B.preRun)for(\"function\"==typeof B.preRun&&(B.preRun=[B.preRun]);B.preRun.length;)ta.unshift(B.preRun.shift());Ta(ta);0<Q||(B.setStatus?(B.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){B.setStatus(\"\")},\n1);a()},1)):a())}}if(B.preInit)for(\"function\"==typeof B.preInit&&(B.preInit=[B.preInit]);0<B.preInit.length;)B.preInit.pop()();yc();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasmThreaded;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasmThreaded);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(moduleArg = {}) {\r\n\r\nvar h=moduleArg,aa,ba;h.ready=new Promise((a,b)=>{aa=a;ba=b});\"use strict\";h.jsepInit=function(a,b,c,d,e,f,g,k){h.oh=a;h.eh=b;h.gh=c;h.Tg=d;h.fh=e;h.td=f;h.hh=g;h.ih=k};var ca=Object.assign({},h),da=\"./this.program\",ea=(a,b)=>{throw b;},fa=\"object\"==typeof window,ha=\"function\"==typeof importScripts,ia=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,u=\"\",ja,ka,la;\r\nif(ia){var fs=require(\"fs\"),ma=require(\"path\");u=ha?ma.dirname(u)+\"/\":__dirname+\"/\";ja=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ma.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};la=a=>{a=ja(a,!0);a.buffer||(a=new Uint8Array(a));return a};ka=(a,b,c,d=!0)=>{a=a.startsWith(\"file://\")?new URL(a):ma.normalize(a);fs.readFile(a,d?void 0:\"utf8\",(e,f)=>{e?c(e):b(d?f.buffer:f)})};!h.thisProgram&&1<process.argv.length&&(da=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);ea=(a,b)=>{process.exitCode=\r\na;throw b;};h.inspect=()=>\"[Emscripten Module object]\"}else if(fa||ha)ha?u=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(u=document.currentScript.src),_scriptDir&&(u=_scriptDir),0!==u.indexOf(\"blob:\")?u=u.substr(0,u.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):u=\"\",ja=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},ha&&(la=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\r\nka=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var na=h.print||console.log.bind(console),oa=h.printErr||console.error.bind(console);Object.assign(h,ca);ca=null;h.thisProgram&&(da=h.thisProgram);h.quit&&(ea=h.quit);var pa;h.wasmBinary&&(pa=h.wasmBinary);var noExitRuntime=h.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&w(\"no native wasm support detected\");\r\nvar qa,x,y=!1,ra,B,K,M,P,sa;function ta(){var a=qa.buffer;h.HEAP8=B=new Int8Array(a);h.HEAP16=new Int16Array(a);h.HEAP32=M=new Int32Array(a);h.HEAPU8=K=new Uint8Array(a);h.HEAPU16=new Uint16Array(a);h.HEAPU32=P=new Uint32Array(a);h.HEAPF32=new Float32Array(a);h.HEAPF64=sa=new Float64Array(a)}var ua=[],va=[],wa=[];function xa(){var a=h.preRun.shift();ua.unshift(a)}var Q=0,ya=null,za=null;\r\nfunction w(a){if(h.onAbort)h.onAbort(a);a=\"Aborted(\"+a+\")\";oa(a);y=!0;ra=1;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}function Aa(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var Ba;Ba=\"ort-wasm-simd.wasm\";if(!Aa(Ba)){var Ca=Ba;Ba=h.locateFile?h.locateFile(Ca,u):u+Ca}function Da(a){if(a==Ba&&pa)return new Uint8Array(pa);if(la)return la(a);throw\"both async and sync fetching of the wasm failed\";}\r\nfunction Ea(a){if(!pa&&(fa||ha)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>Da(a));if(ka)return new Promise((b,c)=>{ka(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>Da(a))}function Fa(a,b,c){return Ea(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{oa(\"failed to asynchronously prepare wasm: \"+d);w(d)})}\r\nfunction Ga(a,b){var c=Ba;return pa||\"function\"!=typeof WebAssembly.instantiateStreaming||Aa(c)||c.startsWith(\"file://\")||ia||\"function\"!=typeof fetch?Fa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(e){oa(\"wasm streaming compile failed: \"+e);oa(\"falling back to ArrayBuffer instantiation\");return Fa(c,a,b)}))}\r\nvar Ha,Ia={1275120:()=>{h.jsepRunPromise=new Promise(function(a){h.jh=a})},1275215:a=>{h.jh(a)},1275253:a=>h.eh(a),1275286:a=>h.gh(a),1275318:(a,b,c)=>{h.Tg(a,b,c,!0)},1275357:(a,b,c)=>{h.Tg(a,b,c)},1275390:a=>{h.td(\"Abs\",a,void 0)},1275441:a=>{h.td(\"Neg\",a,void 0)},1275492:a=>{h.td(\"Floor\",a,void 0)},1275545:a=>{h.td(\"Ceil\",a,void 0)},1275597:a=>{h.td(\"Reciprocal\",a,void 0)},1275655:a=>{h.td(\"Sqrt\",a,void 0)},1275707:a=>{h.td(\"Exp\",a,void 0)},1275758:a=>{h.td(\"Erf\",a,void 0)},1275809:a=>{h.td(\"Sigmoid\",\r\na,void 0)},1275864:a=>{h.td(\"Log\",a,void 0)},1275915:a=>{h.td(\"Sin\",a,void 0)},1275966:a=>{h.td(\"Cos\",a,void 0)},1276017:a=>{h.td(\"Tan\",a,void 0)},1276068:a=>{h.td(\"Asin\",a,void 0)},1276120:a=>{h.td(\"Acos\",a,void 0)},1276172:a=>{h.td(\"Atan\",a,void 0)},1276224:a=>{h.td(\"Sinh\",a,void 0)},1276276:a=>{h.td(\"Cosh\",a,void 0)},1276328:a=>{h.td(\"Asinh\",a,void 0)},1276381:a=>{h.td(\"Acosh\",a,void 0)},1276434:a=>{h.td(\"Atanh\",a,void 0)},1276487:a=>{h.td(\"Tanh\",a,void 0)},1276539:(a,b,c)=>{h.td(\"ClipV10\",a,{min:b,\r\nmax:c})},1276611:a=>{h.td(\"Clip\",a,void 0)},1276663:(a,b)=>{h.td(\"Elu\",a,{alpha:b})},1276721:a=>{h.td(\"Relu\",a,void 0)},1276773:(a,b)=>{h.td(\"LeakyRelu\",a,{alpha:b})},1276837:(a,b)=>{h.td(\"ThresholdedRelu\",a,{alpha:b})},1276907:(a,b)=>{h.td(\"Cast\",a,{to:b})},1276965:a=>{h.td(\"Add\",a,void 0)},1277016:a=>{h.td(\"Sub\",a,void 0)},1277067:a=>{h.td(\"Mul\",a,void 0)},1277118:a=>{h.td(\"Div\",a,void 0)},1277169:a=>{h.td(\"Pow\",a,void 0)},1277220:(a,b,c,d,e)=>{h.td(\"ReduceMean\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,\r\naxes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1277384:(a,b,c,d,e)=>{h.td(\"ReduceMax\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1277547:(a,b,c,d,e)=>{h.td(\"ReduceMin\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1277710:(a,b,c,d,e)=>{h.td(\"ReduceProd\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1277874:(a,b,c,d,e)=>{h.td(\"ReduceSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,\r\naxes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1278037:(a,b,c,d,e)=>{h.td(\"ReduceL1\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1278199:(a,b,c,d,e)=>{h.td(\"ReduceL2\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1278361:(a,b,c,d,e)=>{h.td(\"ReduceLogSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1278527:(a,b,c,d,e)=>{h.td(\"ReduceSumSquare\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,\r\naxes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1278696:(a,b,c,d,e)=>{h.td(\"ReduceLogSumExp\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[]})},1278865:(a,b,c)=>{h.td(\"Transpose\",a,{perm:b?Array.from(M.subarray(c>>>0,c+b>>>0)):[]})},1278978:(a,b,c,d,e,f,g,k,l,m)=>{h.td(\"Conv\",a,{format:l?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:d,kernel_shape:[e],pads:[f,g],strides:[k],w_is_const:()=>!!B[m>>>0]})},1279206:(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>{h.td(\"Conv\",a,\r\n{format:p?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c,d],group:e,kernel_shape:[f,g],pads:[k,l,m,n],strides:[q,r],w_is_const:()=>!!B[t>>>0]})},1279465:(a,b,c,d,e,f,g,k,l,m)=>{h.td(\"Conv\",a,{format:l?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:d,kernel_shape:[e],pads:[f,g],strides:[k],w_is_const:()=>!!B[m>>>0]})},1279693:(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>{h.td(\"Conv\",a,{format:p?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c,d],group:e,kernel_shape:[f,g],pads:[k,l,m,n],strides:[q,r],w_is_const:()=>!!B[t>>>0]})},1279952:(a,\r\nb,c,d,e,f,g,k,l,m,n,q,r,p)=>{h.td(\"ConvTranspose\",a,{format:l?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],group:d,kernel_shape:[e],pads:[f,g],strides:[k],wIsConst:()=>!!B[m>>>0],outputPadding:n?Array.from(M.subarray(q>>>0,q+n>>>0)):[],outputShape:r?Array.from(M.subarray(p>>>0,p+r>>>0)):[]})},1280332:(a,b,c,d,e,f,g,k,l,m,n,q,r)=>{h.td(\"ConvTranspose\",a,{format:k?\"NHWC\":\"NCHW\",autoPad:b,dilations:Array.from(M.subarray(c>>>0,c+2>>>0)),group:d,kernelShape:Array.from(M.subarray(e>>>0,e+2>>>0)),pads:Array.from(M.subarray(f>>>\r\n0,f+4>>>0)),strides:Array.from(M.subarray(g>>>0,g+2>>>0)),wIsConst:()=>!!B[l>>>0],outputPadding:0<m?Array.from(M.subarray(n>>>0,n+m>>>0)):[],outputShape:0<q?Array.from(M.subarray(r>>>0,r+q>>>0)):[]})},1280855:(a,b,c,d,e,f,g,k,l,m,n,q,r,p)=>{h.td(\"ConvTranspose\",a,{format:l?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],group:d,kernel_shape:[e],pads:[f,g],strides:[k],wIsConst:()=>!!B[m>>>0],outputPadding:n?Array.from(M.subarray(q>>>0,q+n>>>0)):[],outputShape:r?Array.from(M.subarray(p>>>0,p+r>>>0)):[]})},1281235:(a,\r\nb,c,d,e,f,g,k,l,m,n,q,r)=>{h.td(\"ConvTranspose\",a,{format:k?\"NHWC\":\"NCHW\",autoPad:b,dilations:Array.from(M.subarray(c>>>0,c+2>>>0)),group:d,kernelShape:Array.from(M.subarray(e>>>0,e+2>>>0)),pads:Array.from(M.subarray(f>>>0,f+4>>>0)),strides:Array.from(M.subarray(g>>>0,g+2>>>0)),wIsConst:()=>!!B[l>>>0],outputPadding:0<m?Array.from(M.subarray(n>>>0,n+m>>>0)):[],outputShape:0<q?Array.from(M.subarray(r>>>0,r+q>>>0)):[]})},1281758:(a,b)=>{h.td(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},1281849:(a,\r\nb,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>{h.td(\"AveragePool\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:e,dilations:[f,g],kernel_shape:[k,l],pads:[m,n,q,r],strides:[p,t]})},1282133:(a,b)=>{h.td(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},1282224:(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>{h.td(\"AveragePool\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:e,dilations:[f,g],kernel_shape:[k,l],pads:[m,n,q,r],strides:[p,t]})},1282508:(a,b)=>\r\n{h.td(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},1282595:(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>{h.td(\"MaxPool\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:e,dilations:[f,g],kernel_shape:[k,l],pads:[m,n,q,r],strides:[p,t]})},1282875:(a,b)=>{h.td(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},1282962:(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>{h.td(\"MaxPool\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:e,dilations:[f,g],kernel_shape:[k,\r\nl],pads:[m,n,q,r],strides:[p,t]})},1283242:(a,b,c,d,e)=>{h.td(\"Gemm\",a,{alpha:b,beta:c,transA:d,transB:e})},1283346:a=>{h.td(\"MatMul\",a,void 0)},1283400:(a,b,c,d)=>{h.td(\"ArgMax\",a,{keepDims:!!b,selectLastIndex:!!c,axis:d})},1283508:(a,b,c,d)=>{h.td(\"ArgMin\",a,{keepDims:!!b,selectLastIndex:!!c,axis:d})},1283616:(a,b)=>{h.td(\"Softmax\",a,{axis:b})},1283679:(a,b)=>{h.td(\"Concat\",a,{axis:b})},1283739:(a,b,c,d,e)=>{h.td(\"Split\",a,{axis:b,numOutputs:c,splitSizes:d?Array.from(M.subarray(e>>>0,e+d>>>0)):\r\n[]})},1283884:a=>{h.td(\"Expand\",a,void 0)},1283938:(a,b)=>{h.td(\"Gather\",a,{axis:Number(b)})},1284009:(a,b,c,d,e,f,g,k,l,m,n)=>{h.td(\"Resize\",a,{antialias:b,axes:c?Array.from(M.subarray(d>>>0,d+c>>>0)):[],coordinateTransformMode:R(e),cubicCoeffA:f,excludeOutside:g,extrapolationValue:k,keepAspectRatioPolicy:R(l),mode:R(m),nearestMode:R(n)})},1284360:(a,b,c,d,e,f,g)=>{h.td(\"Slice\",a,{starts:b?Array.from(M.subarray(c>>>0,c+b>>>0)):[],ends:d?Array.from(M.subarray(e>>>0,e+d>>>0)):[],axes:f?Array.from(M.subarray(g>>>\r\n0,g+f>>>0)):[]})},1284591:a=>{h.td(\"Tile\",a,void 0)},1284643:(a,b,c)=>{h.td(\"LayerNormalization\",a,{axis:Number(b),epsilon:Number(c)})},1284750:(a,b,c)=>{h.td(\"InstanceNormalization\",a,{epsilon:b,format:c?\"NHWC\":\"NCHW\"})},1284864:(a,b,c)=>{h.td(\"InstanceNormalization\",a,{epsilon:b,format:c?\"NHWC\":\"NCHW\"})},1284978:a=>{h.td(\"Gelu\",a,void 0)},1285030:(a,b)=>{h.td(\"SkipLayerNormalization\",a,{epsilon:b})},1285111:a=>{h.hh(a)},1285145:(a,b)=>h.ih(a,b)};\r\nfunction Ja(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}var Ka=a=>{for(;0<a.length;)a.shift()(h)},La=[],Ma=0,S=0;\r\nfunction Na(a){this.Mg=a;this.Ig=a-24;this.ah=function(b){P[this.Ig+4>>2>>>0]=b};this.Rg=function(){return P[this.Ig+4>>2>>>0]};this.$g=function(b){P[this.Ig+8>>2>>>0]=b};this.Ug=function(b){B[this.Ig+12>>0>>>0]=b?1:0};this.Xg=function(){return 0!=B[this.Ig+12>>0>>>0]};this.Vg=function(b){B[this.Ig+13>>0>>>0]=b?1:0};this.dh=function(){return 0!=B[this.Ig+13>>0>>>0]};this.Zg=function(b,c){this.Sg(0);this.ah(b);this.$g(c)};this.Sg=function(b){P[this.Ig+16>>2>>>0]=b};this.Wg=function(){return P[this.Ig+\r\n16>>2>>>0]};this.Yg=function(){if(Oa(this.Rg()))return P[this.Mg>>2>>>0];var b=this.Wg();return 0!==b?b:this.Mg}}\r\nvar Ra=a=>{var b=S;if(!b)return Pa(0),0;var c=new Na(b);c.Sg(b);var d=c.Rg();if(!d)return Pa(0),b;for(var e in a){var f=a[e];if(0===f||f===d)break;if(Qa(f,d,c.Ig+16))return Pa(f),b}Pa(d);return b},Sa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Ta=(a,b,c)=>{b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Sa)return Sa.decode(a.subarray(b,c));for(d=\"\";b<c;){var e=a[b++];if(e&128){var f=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var g=a[b++]&\r\n63;e=224==(e&240)?(e&15)<<12|f<<6|g:(e&7)<<18|f<<12|g<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d},R=(a,b)=>(a>>>=0)?Ta(K,a,b):\"\",Ua=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Va=(a,b,c,d)=>{c>>>=0;if(!(0<d))return 0;var e=c;d=c+d-1;for(var f=0;f<a.length;++f){var g=a.charCodeAt(f);if(55296<=g&&57343>=g){var k=a.charCodeAt(++f);\r\ng=65536+((g&1023)<<10)|k&1023}if(127>=g){if(c>=d)break;b[c++>>>0]=g}else{if(2047>=g){if(c+1>=d)break;b[c++>>>0]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++>>>0]=224|g>>12}else{if(c+3>=d)break;b[c++>>>0]=240|g>>18;b[c++>>>0]=128|g>>12&63}b[c++>>>0]=128|g>>6&63}b[c++>>>0]=128|g&63}}b[c>>>0]=0;return c-e},Wa=a=>0===a%4&&(0!==a%100||0===a%400),Xa=[0,31,60,91,121,152,182,213,244,274,305,335],Ya=[0,31,59,90,120,151,181,212,243,273,304,334],$a=a=>{var b=Ua(a)+1,c=Za(b);c&&Va(a,K,c,b);return c},ab=[],\r\nbb=(a,b)=>{ab.length=0;var c;for(b>>=2;c=K[a++>>>0];)b+=105!=c&b,ab.push(105==c?M[b>>>0]:sa[b++>>>1]),++b;return ab},cb={},eb=()=>{if(!db){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in cb)void 0===cb[b]?delete a[b]:a[b]=cb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);db=c}return db},db,fb=[null,[],[]],gb=[31,29,31,30,31,\r\n30,31,31,30,31,30,31],hb=[31,28,31,30,31,30,31,31,30,31,30,31];function ib(a){var b=Array(Ua(a)+1);Va(a,b,0,b.length);return b}\r\nfunction jb(a,b,c,d){function e(p,t,v){for(p=\"number\"==typeof p?p.toString():p||\"\";p.length<t;)p=v[0]+p;return p}function f(p,t){return e(p,t,\"0\")}function g(p,t){function v(A){return 0>A?-1:0<A?1:0}var z;0===(z=v(p.getFullYear()-t.getFullYear()))&&0===(z=v(p.getMonth()-t.getMonth()))&&(z=v(p.getDate()-t.getDate()));return z}function k(p){switch(p.getDay()){case 0:return new Date(p.getFullYear()-1,11,29);case 1:return p;case 2:return new Date(p.getFullYear(),0,3);case 3:return new Date(p.getFullYear(),\r\n0,2);case 4:return new Date(p.getFullYear(),0,1);case 5:return new Date(p.getFullYear()-1,11,31);case 6:return new Date(p.getFullYear()-1,11,30)}}function l(p){var t=p.Kg;for(p=new Date((new Date(p.Lg+1900,0,1)).getTime());0<t;){var v=p.getMonth(),z=(Wa(p.getFullYear())?gb:hb)[v];if(t>z-p.getDate())t-=z-p.getDate()+1,p.setDate(1),11>v?p.setMonth(v+1):(p.setMonth(0),p.setFullYear(p.getFullYear()+1));else{p.setDate(p.getDate()+t);break}}v=new Date(p.getFullYear()+1,0,4);t=k(new Date(p.getFullYear(),\r\n0,4));v=k(v);return 0>=g(t,p)?0>=g(v,p)?p.getFullYear()+1:p.getFullYear():p.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;d>>>=0;var m=M[d+40>>2>>>0];d={mh:M[d>>2>>>0],lh:M[d+4>>2>>>0],Ng:M[d+8>>2>>>0],Qg:M[d+12>>2>>>0],Og:M[d+16>>2>>>0],Lg:M[d+20>>2>>>0],Jg:M[d+24>>2>>>0],Kg:M[d+28>>2>>>0],ph:M[d+32>>2>>>0],kh:M[d+36>>2>>>0],nh:m?R(m):\"\"};c=R(c);m={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\r\n\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var n in m)c=c.replace(new RegExp(n,\"g\"),m[n]);var q=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),r=\"January February March April May June July August September October November December\".split(\" \");m={\"%a\":p=>q[p.Jg].substring(0,3),\"%A\":p=>q[p.Jg],\"%b\":p=>r[p.Og].substring(0,\r\n3),\"%B\":p=>r[p.Og],\"%C\":p=>f((p.Lg+1900)/100|0,2),\"%d\":p=>f(p.Qg,2),\"%e\":p=>e(p.Qg,2,\" \"),\"%g\":p=>l(p).toString().substring(2),\"%G\":p=>l(p),\"%H\":p=>f(p.Ng,2),\"%I\":p=>{p=p.Ng;0==p?p=12:12<p&&(p-=12);return f(p,2)},\"%j\":p=>{for(var t=0,v=0;v<=p.Og-1;t+=(Wa(p.Lg+1900)?gb:hb)[v++]);return f(p.Qg+t,3)},\"%m\":p=>f(p.Og+1,2),\"%M\":p=>f(p.lh,2),\"%n\":()=>\"\\n\",\"%p\":p=>0<=p.Ng&&12>p.Ng?\"AM\":\"PM\",\"%S\":p=>f(p.mh,2),\"%t\":()=>\"\\t\",\"%u\":p=>p.Jg||7,\"%U\":p=>f(Math.floor((p.Kg+7-p.Jg)/7),2),\"%V\":p=>{var t=Math.floor((p.Kg+\r\n7-(p.Jg+6)%7)/7);2>=(p.Jg+371-p.Kg-2)%7&&t++;if(t)53==t&&(v=(p.Jg+371-p.Kg)%7,4==v||3==v&&Wa(p.Lg)||(t=1));else{t=52;var v=(p.Jg+7-p.Kg-1)%7;(4==v||5==v&&Wa(p.Lg%400-1))&&t++}return f(t,2)},\"%w\":p=>p.Jg,\"%W\":p=>f(Math.floor((p.Kg+7-(p.Jg+6)%7)/7),2),\"%y\":p=>(p.Lg+1900).toString().substring(2),\"%Y\":p=>p.Lg+1900,\"%z\":p=>{p=p.kh;var t=0<=p;p=Math.abs(p)/60;return(t?\"+\":\"-\")+String(\"0000\"+(p/60*100+p%60)).slice(-4)},\"%Z\":p=>p.nh,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(n in m)c.includes(n)&&(c=\r\nc.replace(new RegExp(n,\"g\"),m[n](d)));c=c.replace(/\\0\\0/g,\"%\");n=ib(c);if(n.length>b)return 0;B.set(n,a>>>0);return n.length-1}function kb(a){try{a()}catch(b){w(b)}}function lb(a){var b={},c;for(c in a)(function(d){var e=a[d];b[d]=\"function\"==typeof e?function(){mb.push(d);try{return e.apply(null,arguments)}finally{y||(mb.pop()===d||w(),T&&1===U&&0===mb.length&&(U=0,kb(nb),\"undefined\"!=typeof Fibers&&Fibers.qh()))}}:e})(c);return b}var U=0,T=null,ob=0,mb=[],pb={},qb={},rb=0,sb=null,tb=[];\r\nfunction ub(){var a=Za(65548),b=a+12;P[a>>2>>>0]=b;P[a+4>>2>>>0]=b+65536;b=mb[0];var c=pb[b];void 0===c&&(c=rb++,pb[b]=c,qb[c]=b);M[a+8>>2>>>0]=c;return a}\r\nfunction vb(a){if(!y){if(0===U){var b=!1,c=!1;a((d=0)=>{if(!y&&(ob=d,b=!0,c)){U=2;kb(()=>wb(T));\"undefined\"!=typeof Browser&&Browser.Pg.bh&&Browser.Pg.resume();d=!1;try{var e=(0,x[qb[M[T+8>>2>>>0]]])()}catch(k){e=k,d=!0}var f=!1;if(!T){var g=sb;g&&(sb=null,(d?g.reject:g.resolve)(e),f=!0)}if(d&&!f)throw e;}});c=!0;b||(U=1,T=ub(),\"undefined\"!=typeof Browser&&Browser.Pg.bh&&Browser.Pg.pause(),kb(()=>xb(T)))}else 2===U?(U=0,kb(yb),zb(T),T=null,tb.forEach(d=>{if(!y)try{if(d(),!noExitRuntime)try{ra=ra=\r\nd=ra;if(!noExitRuntime){if(h.onExit)h.onExit(d);y=!0}ea(d,new Ja(d))}catch(e){e instanceof Ja||\"unwind\"==e||ea(1,e)}}catch(e){e instanceof Ja||\"unwind\"==e||ea(1,e)}})):w(`invalid state: ${U}`);return ob}}function Ab(a){return vb(b=>{a().then(b)})}\r\nvar He={Ga:function(a,b,c){return Ab(async()=>{await h.fh(a,b,c)})},u:function(a){a=new Na(a>>>0);a.Xg()||(a.Ug(!0),Ma--);a.Vg(!1);La.push(a);Bb(a.Mg);return a.Yg()},B:function(){V(0,0);var a=La.pop();Cb(a.Mg);S=0},a:function(){return Ra([])},k:function(a){return Ra([a>>>0])},w:function(a,b){return Ra([a>>>0,b>>>0])},q:function(a,b,c){return Ra([a>>>0,b>>>0,c>>>0])},pa:function(){var a=La.pop();a||w(\"no exception to throw\");var b=a.Mg;a.dh()||(La.push(a),a.Vg(!0),a.Ug(!1),Ma++);S=b;throw S;},s:function(a,\r\nb,c){a>>>=0;(new Na(a)).Zg(b>>>0,c>>>0);S=a;Ma++;throw S;},Ja:function(){return Ma},g:function(a){S||(S=a>>>0);throw S;},qa:function(){return 0},nc:function(){},Pa:function(){},Ra:function(){},Ia:function(){return 0},Tb:function(){},Sa:function(){},Ib:function(){},Ca:function(){},Qa:function(){},Na:function(){},cc:function(){},Oa:function(){},Sc:()=>!0,Nc:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);M[c>>2>>>0]=a.getUTCSeconds();M[c+4>>2>>>0]=a.getUTCMinutes();\r\nM[c+8>>2>>>0]=a.getUTCHours();M[c+12>>2>>>0]=a.getUTCDate();M[c+16>>2>>>0]=a.getUTCMonth();M[c+20>>2>>>0]=a.getUTCFullYear()-1900;M[c+24>>2>>>0]=a.getUTCDay();M[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},Oc:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);M[c>>2>>>0]=a.getSeconds();M[c+4>>2>>>0]=a.getMinutes();M[c+8>>2>>>0]=a.getHours();M[c+12>>2>>>0]=a.getDate();M[c+16>>2>>>0]=a.getMonth();M[c+20>>2>>>0]=a.getFullYear()-\r\n1900;M[c+24>>2>>>0]=a.getDay();M[c+28>>2>>>0]=(Wa(a.getFullYear())?Xa:Ya)[a.getMonth()]+a.getDate()-1|0;M[c+36>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();M[c+32>>2>>>0]=(b!=d&&a.getTimezoneOffset()==Math.min(d,b))|0},Pc:function(a){a>>>=0;var b=new Date(M[a+20>>2>>>0]+1900,M[a+16>>2>>>0],M[a+12>>2>>>0],M[a+8>>2>>>0],M[a+4>>2>>>0],M[a>>2>>>0],0),c=M[a+32>>2>>>0],d=b.getTimezoneOffset(),e=(new Date(b.getFullYear(),\r\n6,1)).getTimezoneOffset(),f=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),g=Math.min(f,e);0>c?M[a+32>>2>>>0]=Number(e!=f&&g==d):0<c!=(g==d)&&(e=Math.max(f,e),b.setTime(b.getTime()+6E4*((0<c?g:e)-d)));M[a+24>>2>>>0]=b.getDay();M[a+28>>2>>>0]=(Wa(b.getFullYear())?Xa:Ya)[b.getMonth()]+b.getDate()-1|0;M[a>>2>>>0]=b.getSeconds();M[a+4>>2>>>0]=b.getMinutes();M[a+8>>2>>>0]=b.getHours();M[a+12>>2>>>0]=b.getDate();M[a+16>>2>>>0]=b.getMonth();M[a+20>>2>>>0]=b.getYear();a=b.getTime()/1E3;return Pa((Ha=\r\na,1<=+Math.abs(Ha)?0<Ha?+Math.floor(Ha/4294967296)>>>0:~~+Math.ceil((Ha-+(~~Ha>>>0))/4294967296)>>>0:0)),a>>>0},Lc:function(){return-52},Mc:function(){},La:function(a,b,c){function d(l){return(l=l.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?l[1]:\"GMT\"}c>>>=0;var e=(new Date).getFullYear(),f=new Date(e,0,1),g=new Date(e,6,1);e=f.getTimezoneOffset();var k=g.getTimezoneOffset();P[a>>>0>>2>>>0]=60*Math.max(e,k);M[b>>>0>>2>>>0]=Number(e!=k);a=d(f);b=d(g);a=$a(a);b=$a(b);k<e?(P[c>>2>>>0]=a,P[c+4>>2>>>0]=\r\nb):(P[c>>2>>>0]=b,P[c+4>>2>>>0]=a)},ja:()=>{w(\"\")},y:function(a,b,c){a>>>=0;b=bb(b>>>0,c>>>0);return Ia[a].apply(null,b)},wa:function(a,b,c){a>>>=0;b=bb(b>>>0,c>>>0);return Ia[a].apply(null,b)},Ea:function(){return Date.now()},Ma:function(){return 4294901760},J:()=>performance.now(),xb:function(a,b,c){b>>>=0;return K.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},Ka:function(a){a>>>=0;var b=K.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=Math;\r\nd=Math.max(a,d);a:{e=e.min.call(e,4294901760,d+(65536-d%65536)%65536)-qa.buffer.byteLength+65535>>>16;try{qa.grow(e);ta();var f=1;break a}catch(g){}f=void 0}if(f)return!0}return!1},bb:function(a,b){a>>>=0;b>>>=0;var c=0;eb().forEach(function(d,e){var f=b+c;e=P[a+4*e>>2>>>0]=f;for(f=0;f<d.length;++f)B[e++>>0>>>0]=d.charCodeAt(f);B[e>>0>>>0]=0;c+=d.length+1});return 0},mb:function(a,b){a>>>=0;b>>>=0;var c=eb();P[a>>2>>>0]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});P[b>>2>>>0]=d;return 0},\r\nma:()=>52,Ba:function(){return 52},Qc:function(){return 70},Aa:function(a,b,c,d){b>>>=0;c>>>=0;d>>>=0;for(var e=0,f=0;f<c;f++){var g=P[b>>2>>>0],k=P[b+4>>2>>>0];b+=8;for(var l=0;l<k;l++){var m=K[g+l>>>0],n=fb[a];0===m||10===m?((1===a?na:oa)(Ta(n,0)),n.length=0):n.push(m)}e+=k}P[d>>2>>>0]=e;return 0},ia:Db,Rc:Eb,L:Fb,M:Gb,Tc:Hb,Vc:Ib,A:Jb,z:Kb,b:Lb,Da:Mb,ca:Nb,f:Ob,ra:Pb,h:Qb,F:Rb,i:Sb,Uc:Tb,j:Ub,t:Vb,r:Wb,n:Xb,V:Yb,X:Zb,K:$b,oa:ac,$:bc,la:cc,eb:dc,wc:ec,$a:fc,cb:gc,Bc:hc,Qb:ic,Cc:jc,hb:kc,jb:lc,Mb:mc,\r\ndb:nc,dc:oc,Kc:pc,lc:qc,fb:rc,ab:sc,zb:tc,hc:uc,kc:vc,bc:wc,Jc:xc,Ya:yc,_a:zc,pb:Ac,lb:Bc,Za:Cc,fc:Dc,Hb:Ec,kb:Fc,Ta:Gc,Rb:Hc,Hc:Ic,xc:Jc,qc:Kc,ob:Lc,ic:Mc,Gb:Nc,Fb:Oc,c:Pc,Z:Qc,p:Rc,O:Sc,Y:Tc,ha:Uc,e:Vc,za:Wc,H:Xc,da:Yc,N:Zc,tb:$c,fa:ad,d:bd,xa:cd,ba:dd,l:ed,va:fd,m:gd,ya:hd,ua:jd,Fa:kd,o:ld,U:md,ga:nd,T:od,na:pd,x:qd,C:rd,D:sd,W:td,ta:ud,ea:vd,P:wd,G:xd,E:yd,aa:zd,S:Ad,ka:Bd,_:Cd,sa:Dd,Q:Ed,R:Fd,gc:Gd,wb:Hd,qb:Id,Cb:Jd,yb:Kd,yc:Ld,Lb:Md,vb:Nd,Db:Od,Nb:Pd,zc:Qd,nb:Rd,Kb:Sd,rb:Td,Wa:Ud,oc:Vd,Ec:Wd,\r\nXa:Xd,Ob:Yd,uc:Zd,Ab:$d,ib:ae,sc:be,Gc:ce,tc:de,Ac:ee,Va:fe,Dc:ge,ub:he,Jb:ie,vc:je,Ic:ke,gb:le,Bb:me,Wb:ne,sb:oe,Fc:pe,Xb:qe,Pb:re,ec:se,mc:te,Eb:ue,Vb:ve,pc:we,jc:xe,Ua:ye,rc:ze,Sb:Ae,Ub:Be,Zb:Ce,_b:De,ac:Ee,Yb:Fe,$b:Ge,v:function(a){return a>>>0},Ha:jb,I:function(a,b,c,d){return jb(a>>>0,b>>>0,c>>>0,d>>>0)}};\r\n(function(){function a(c){c=c.exports;c=lb(c);x=c=Ie(c);qa=x.Wc;ta();va.unshift(x.Xc);Q--;h.monitorRunDependencies&&h.monitorRunDependencies(Q);if(0==Q&&(null!==ya&&(clearInterval(ya),ya=null),za)){var d=za;za=null;d()}return c}var b={a:He};Q++;h.monitorRunDependencies&&h.monitorRunDependencies(Q);if(h.instantiateWasm)try{return h.instantiateWasm(b,a)}catch(c){oa(\"Module.instantiateWasm callback failed with error: \"+c),ba(c)}Ga(b,function(c){a(c.instance)}).catch(ba);return{}})();\r\nh._OrtInit=(a,b)=>(h._OrtInit=x.Yc)(a,b);h._OrtGetLastError=(a,b)=>(h._OrtGetLastError=x.Zc)(a,b);h._OrtCreateSessionOptions=(a,b,c,d,e,f,g,k,l,m)=>(h._OrtCreateSessionOptions=x._c)(a,b,c,d,e,f,g,k,l,m);h._OrtAppendExecutionProvider=(a,b)=>(h._OrtAppendExecutionProvider=x.$c)(a,b);h._OrtAddSessionConfigEntry=(a,b,c)=>(h._OrtAddSessionConfigEntry=x.ad)(a,b,c);h._OrtReleaseSessionOptions=a=>(h._OrtReleaseSessionOptions=x.bd)(a);h._OrtCreateSession=(a,b,c)=>(h._OrtCreateSession=x.cd)(a,b,c);\r\nh._OrtReleaseSession=a=>(h._OrtReleaseSession=x.dd)(a);h._OrtGetInputOutputCount=(a,b,c)=>(h._OrtGetInputOutputCount=x.ed)(a,b,c);h._OrtGetInputName=(a,b)=>(h._OrtGetInputName=x.fd)(a,b);h._OrtGetOutputName=(a,b)=>(h._OrtGetOutputName=x.gd)(a,b);h._OrtFree=a=>(h._OrtFree=x.hd)(a);h._OrtCreateTensor=(a,b,c,d,e)=>(h._OrtCreateTensor=x.id)(a,b,c,d,e);h._OrtGetTensorData=(a,b,c,d,e)=>(h._OrtGetTensorData=x.jd)(a,b,c,d,e);h._OrtReleaseTensor=a=>(h._OrtReleaseTensor=x.kd)(a);\r\nh._OrtCreateRunOptions=(a,b,c,d)=>(h._OrtCreateRunOptions=x.ld)(a,b,c,d);h._OrtAddRunConfigEntry=(a,b,c)=>(h._OrtAddRunConfigEntry=x.md)(a,b,c);h._OrtReleaseRunOptions=a=>(h._OrtReleaseRunOptions=x.nd)(a);h._OrtRun=(a,b,c,d,e,f,g,k)=>(h._OrtRun=x.od)(a,b,c,d,e,f,g,k);h._OrtEndProfiling=a=>(h._OrtEndProfiling=x.pd)(a);h._JsepOutput=(a,b,c)=>(h._JsepOutput=x.qd)(a,b,c);\r\nvar Za=h._malloc=a=>(Za=h._malloc=x.rd)(a),zb=h._free=a=>(zb=h._free=x.sd)(a),V=(a,b)=>(V=x.ud)(a,b),Pa=a=>(Pa=x.vd)(a),W=()=>(W=x.wd)(),X=a=>(X=x.xd)(a),Je=a=>(Je=x.yd)(a),Cb=a=>(Cb=x.zd)(a),Bb=a=>(Bb=x.Ad)(a),Qa=(a,b,c)=>(Qa=x.Bd)(a,b,c),Oa=a=>(Oa=x.Cd)(a),dynCall_vi=h.dynCall_vi=(a,b)=>(dynCall_vi=h.dynCall_vi=x.Dd)(a,b),dynCall_vii=h.dynCall_vii=(a,b,c)=>(dynCall_vii=h.dynCall_vii=x.Ed)(a,b,c),Ke=h.dynCall_ii=(a,b)=>(Ke=h.dynCall_ii=x.Fd)(a,b),Le=h.dynCall_iiij=(a,b,c,d,e)=>(Le=h.dynCall_iiij=\r\nx.Gd)(a,b,c,d,e),dynCall_v=h.dynCall_v=a=>(dynCall_v=h.dynCall_v=x.Hd)(a),dynCall_iii=h.dynCall_iii=(a,b,c)=>(dynCall_iii=h.dynCall_iii=x.Id)(a,b,c),Me=h.dynCall_iiiiii=(a,b,c,d,e,f)=>(Me=h.dynCall_iiiiii=x.Jd)(a,b,c,d,e,f),Ne=h.dynCall_iiiii=(a,b,c,d,e)=>(Ne=h.dynCall_iiiii=x.Kd)(a,b,c,d,e),Oe=h.dynCall_viii=(a,b,c,d)=>(Oe=h.dynCall_viii=x.Ld)(a,b,c,d),Pe=h.dynCall_iiii=(a,b,c,d)=>(Pe=h.dynCall_iiii=x.Md)(a,b,c,d),Qe=h.dynCall_iiiiiii=(a,b,c,d,e,f,g)=>(Qe=h.dynCall_iiiiiii=x.Nd)(a,b,c,d,e,f,g),Re=\r\nh.dynCall_j=a=>(Re=h.dynCall_j=x.Od)(a),Se=h.dynCall_i=a=>(Se=h.dynCall_i=x.Pd)(a),Te=h.dynCall_iij=(a,b,c,d)=>(Te=h.dynCall_iij=x.Qd)(a,b,c,d),Ue=h.dynCall_iiiiij=(a,b,c,d,e,f,g)=>(Ue=h.dynCall_iiiiij=x.Rd)(a,b,c,d,e,f,g),Ve=h.dynCall_vij=(a,b,c,d)=>(Ve=h.dynCall_vij=x.Sd)(a,b,c,d),We=h.dynCall_viiiii=(a,b,c,d,e,f)=>(We=h.dynCall_viiiii=x.Td)(a,b,c,d,e,f),Xe=h.dynCall_viiii=(a,b,c,d,e)=>(Xe=h.dynCall_viiii=x.Ud)(a,b,c,d,e),Ye=h.dynCall_iiiiiiii=(a,b,c,d,e,f,g,k)=>(Ye=h.dynCall_iiiiiiii=x.Vd)(a,b,\r\nc,d,e,f,g,k),Ze=h.dynCall_fi=(a,b)=>(Ze=h.dynCall_fi=x.Wd)(a,b),$e=h.dynCall_ji=(a,b)=>($e=h.dynCall_ji=x.Xd)(a,b),af=h.dynCall_di=(a,b)=>(af=h.dynCall_di=x.Yd)(a,b),bf=h.dynCall_fii=(a,b,c)=>(bf=h.dynCall_fii=x.Zd)(a,b,c),cf=h.dynCall_jii=(a,b,c)=>(cf=h.dynCall_jii=x._d)(a,b,c),df=h.dynCall_dii=(a,b,c)=>(df=h.dynCall_dii=x.$d)(a,b,c),ef=h.dynCall_iiiiiiiii=(a,b,c,d,e,f,g,k,l)=>(ef=h.dynCall_iiiiiiiii=x.ae)(a,b,c,d,e,f,g,k,l),ff=h.dynCall_viij=(a,b,c,d,e)=>(ff=h.dynCall_viij=x.be)(a,b,c,d,e),gf=h.dynCall_viiiiii=\r\n(a,b,c,d,e,f,g)=>(gf=h.dynCall_viiiiii=x.ce)(a,b,c,d,e,f,g),hf=h.dynCall_vijj=(a,b,c,d,e,f)=>(hf=h.dynCall_vijj=x.de)(a,b,c,d,e,f),jf=h.dynCall_viiiiiii=(a,b,c,d,e,f,g,k)=>(jf=h.dynCall_viiiiiii=x.ee)(a,b,c,d,e,f,g,k),kf=h.dynCall_iiiiiiiiii=(a,b,c,d,e,f,g,k,l,m)=>(kf=h.dynCall_iiiiiiiiii=x.fe)(a,b,c,d,e,f,g,k,l,m),lf=h.dynCall_viiiiiiii=(a,b,c,d,e,f,g,k,l)=>(lf=h.dynCall_viiiiiiii=x.ge)(a,b,c,d,e,f,g,k,l),mf=h.dynCall_iiiiijiiiii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(mf=h.dynCall_iiiiijiiiii=x.he)(a,b,c,d,\r\ne,f,g,k,l,m,n,q),nf=h.dynCall_viiji=(a,b,c,d,e,f)=>(nf=h.dynCall_viiji=x.ie)(a,b,c,d,e,f),of=h.dynCall_viijiii=(a,b,c,d,e,f,g,k)=>(of=h.dynCall_viijiii=x.je)(a,b,c,d,e,f,g,k),pf=h.dynCall_viiiij=(a,b,c,d,e,f,g)=>(pf=h.dynCall_viiiij=x.ke)(a,b,c,d,e,f,g),qf=h.dynCall_viiiiij=(a,b,c,d,e,f,g,k)=>(qf=h.dynCall_viiiiij=x.le)(a,b,c,d,e,f,g,k),rf=h.dynCall_viiiiiiiii=(a,b,c,d,e,f,g,k,l,m)=>(rf=h.dynCall_viiiiiiiii=x.me)(a,b,c,d,e,f,g,k,l,m),sf=h.dynCall_viid=(a,b,c,d)=>(sf=h.dynCall_viid=x.ne)(a,b,c,d),\r\ntf=h.dynCall_iiiiiiiij=(a,b,c,d,e,f,g,k,l,m)=>(tf=h.dynCall_iiiiiiiij=x.oe)(a,b,c,d,e,f,g,k,l,m),uf=h.dynCall_iiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(uf=h.dynCall_iiiiiiiiiiii=x.pe)(a,b,c,d,e,f,g,k,l,m,n,q),vf=h.dynCall_viiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p)=>(vf=h.dynCall_viiiiiiiiiiiii=x.qe)(a,b,c,d,e,f,g,k,l,m,n,q,r,p),wf=h.dynCall_viijjjiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>(wf=h.dynCall_viijjjiiiiii=x.re)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t),xf=h.dynCall_viiijiiiiiii=(a,b,c,d,e,f,g,k,l,m,\r\nn,q,r)=>(xf=h.dynCall_viiijiiiiiii=x.se)(a,b,c,d,e,f,g,k,l,m,n,q,r),yf=h.dynCall_viffiii=(a,b,c,d,e,f,g)=>(yf=h.dynCall_viffiii=x.te)(a,b,c,d,e,f,g),zf=h.dynCall_viiijjjii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(zf=h.dynCall_viiijjjii=x.ue)(a,b,c,d,e,f,g,k,l,m,n,q),Af=h.dynCall_viifiii=(a,b,c,d,e,f,g)=>(Af=h.dynCall_viifiii=x.ve)(a,b,c,d,e,f,g),Bf=h.dynCall_viiiiidiidi=(a,b,c,d,e,f,g,k,l,m,n)=>(Bf=h.dynCall_viiiiidiidi=x.we)(a,b,c,d,e,f,g,k,l,m,n),Cf=h.dynCall_viiiiiiiiidi=(a,b,c,d,e,f,g,k,l,m,n,q)=>(Cf=h.dynCall_viiiiiiiiidi=\r\nx.xe)(a,b,c,d,e,f,g,k,l,m,n,q),Df=h.dynCall_vjiiiiii=(a,b,c,d,e,f,g,k,l)=>(Df=h.dynCall_vjiiiiii=x.ye)(a,b,c,d,e,f,g,k,l),Ef=h.dynCall_jiii=(a,b,c,d)=>(Ef=h.dynCall_jiii=x.ze)(a,b,c,d),Ff=h.dynCall_viiid=(a,b,c,d,e)=>(Ff=h.dynCall_viiid=x.Ae)(a,b,c,d,e),Gf=h.dynCall_viiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(Gf=h.dynCall_viiiiiiiiiii=x.Be)(a,b,c,d,e,f,g,k,l,m,n,q),Hf=h.dynCall_vijjjjjjjjjjjjji=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O)=>(Hf=h.dynCall_vijjjjjjjjjjjjji=x.Ce)(a,b,c,d,\r\ne,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O),If=h.dynCall_viiiji=(a,b,c,d,e,f,g)=>(If=h.dynCall_viiiji=x.De)(a,b,c,d,e,f,g),Jf=h.dynCall_vijjjiiji=(a,b,c,d,e,f,g,k,l,m,n,q,r)=>(Jf=h.dynCall_vijjjiiji=x.Ee)(a,b,c,d,e,f,g,k,l,m,n,q,r),Kf=h.dynCall_iiiji=(a,b,c,d,e,f)=>(Kf=h.dynCall_iiiji=x.Fe)(a,b,c,d,e,f),Lf=h.dynCall_iiijiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>(Lf=h.dynCall_iiijiiiiiiiiii=x.Ge)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t),Mf=h.dynCall_vj=(a,b,c)=>(Mf=h.dynCall_vj=x.He)(a,b,c),Nf=h.dynCall_jjj=\r\n(a,b,c,d,e)=>(Nf=h.dynCall_jjj=x.Ie)(a,b,c,d,e),Of=h.dynCall_iiijiiiiii=(a,b,c,d,e,f,g,k,l,m,n)=>(Of=h.dynCall_iiijiiiiii=x.Je)(a,b,c,d,e,f,g,k,l,m,n),Pf=h.dynCall_viiff=(a,b,c,d,e)=>(Pf=h.dynCall_viiff=x.Ke)(a,b,c,d,e),Qf=h.dynCall_viiiiiff=(a,b,c,d,e,f,g,k)=>(Qf=h.dynCall_viiiiiff=x.Le)(a,b,c,d,e,f,g,k),Rf=h.dynCall_vfiii=(a,b,c,d,e)=>(Rf=h.dynCall_vfiii=x.Me)(a,b,c,d,e),Sf=h.dynCall_viiiiff=(a,b,c,d,e,f,g)=>(Sf=h.dynCall_viiiiff=x.Ne)(a,b,c,d,e,f,g),Tf=h.dynCall_viiiiiiiiifiii=(a,b,c,d,e,f,g,k,\r\nl,m,n,q,r,p)=>(Tf=h.dynCall_viiiiiiiiifiii=x.Oe)(a,b,c,d,e,f,g,k,l,m,n,q,r,p),Uf=h.dynCall_viiiiiiiijj=(a,b,c,d,e,f,g,k,l,m,n,q,r)=>(Uf=h.dynCall_viiiiiiiijj=x.Pe)(a,b,c,d,e,f,g,k,l,m,n,q,r),Vf=h.dynCall_iiiiiiiiiiiiiifii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)=>(Vf=h.dynCall_iiiiiiiiiiiiiifii=x.Qe)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z),Wf=h.dynCall_viiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r)=>(Wf=h.dynCall_viiiiiiiiiiii=x.Re)(a,b,c,d,e,f,g,k,l,m,n,q,r),Xf=h.dynCall_ij=(a,b,c)=>(Xf=h.dynCall_ij=x.Se)(a,b,\r\nc),Yf=h.dynCall_iiiiiiiiiiiiiiiiifii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D)=>(Yf=h.dynCall_iiiiiiiiiiiiiiiiifii=x.Te)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D),Zf=h.dynCall_vijjiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(Zf=h.dynCall_vijjiiiiii=x.Ue)(a,b,c,d,e,f,g,k,l,m,n,q),$f=h.dynCall_iiiijjj=(a,b,c,d,e,f,g,k,l,m)=>($f=h.dynCall_iiiijjj=x.Ve)(a,b,c,d,e,f,g,k,l,m),ag=h.dynCall_iiijjj=(a,b,c,d,e,f,g,k,l)=>(ag=h.dynCall_iiijjj=x.We)(a,b,c,d,e,f,g,k,l),bg=h.dynCall_fffffff=(a,b,c,d,e,f,g)=>(bg=h.dynCall_fffffff=\r\nx.Xe)(a,b,c,d,e,f,g),cg=h.dynCall_viijj=(a,b,c,d,e,f,g)=>(cg=h.dynCall_viijj=x.Ye)(a,b,c,d,e,f,g),dg=h.dynCall_vjjjjjjffiifiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H)=>(dg=h.dynCall_vjjjjjjffiifiiiiii=x.Ze)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H),eg=h.dynCall_viiiiiiffiifiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)=>(eg=h.dynCall_viiiiiiffiifiiiii=x._e)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z),fg=h.dynCall_viiiiiiffifiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>(fg=h.dynCall_viiiiiiffifiiiii=\r\nx.$e)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v),gg=h.dynCall_viiiiiiffiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>(gg=h.dynCall_viiiiiiffiiiiii=x.af)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t),hg=h.dynCall_vjjjjjjjjfffiifiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O)=>(hg=h.dynCall_vjjjjjjjjfffiifiiiiii=x.bf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O),ig=h.dynCall_vjjjjjjfffifiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I)=>(ig=h.dynCall_vjjjjjjfffifiiiiiii=x.cf)(a,b,c,d,e,\r\nf,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I),jg=h.dynCall_vjjjjjjfffifiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G)=>(jg=h.dynCall_vjjjjjjfffifiiiii=x.df)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G),kg=h.dynCall_vjjjjjjjjfffiifiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N)=>(kg=h.dynCall_vjjjjjjjjfffiifiiiii=x.ef)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N),lg=h.dynCall_vijjfffiii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(lg=h.dynCall_vijjfffiii=x.ff)(a,b,c,d,e,f,g,k,l,m,n,\r\nq),mg=h.dynCall_vijiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(mg=h.dynCall_vijiiiiiiii=x.gf)(a,b,c,d,e,f,g,k,l,m,n,q),ng=h.dynCall_vijjjjjjifiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E)=>(ng=h.dynCall_vijjjjjjifiiiii=x.hf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E),og=h.dynCall_vjjjjjiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>(og=h.dynCall_vjjjjjiiii=x.jf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t),pg=h.dynCall_vjjjjfiii=(a,b,c,d,e,f,g,k,l,m,n,q,r)=>(pg=h.dynCall_vjjjjfiii=x.kf)(a,b,c,d,e,f,g,k,l,m,n,q,r),qg=h.dynCall_viifi=\r\n(a,b,c,d,e)=>(qg=h.dynCall_viifi=x.lf)(a,b,c,d,e),rg=h.dynCall_iiiiiji=(a,b,c,d,e,f,g,k)=>(rg=h.dynCall_iiiiiji=x.mf)(a,b,c,d,e,f,g,k),sg=h.dynCall_vijjii=(a,b,c,d,e,f,g,k)=>(sg=h.dynCall_vijjii=x.nf)(a,b,c,d,e,f,g,k),tg=h.dynCall_viiijiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q)=>(tg=h.dynCall_viiijiiiiii=x.of)(a,b,c,d,e,f,g,k,l,m,n,q),ug=h.dynCall_viiiiijjiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>(ug=h.dynCall_viiiiijjiiiii=x.pf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t),vg=h.dynCall_iiiiji=(a,b,c,d,e,f,g)=>(vg=h.dynCall_iiiiji=\r\nx.qf)(a,b,c,d,e,f,g),wg=h.dynCall_viiiiijiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p)=>(wg=h.dynCall_viiiiijiiiiii=x.rf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p),xg=h.dynCall_viiiijii=(a,b,c,d,e,f,g,k,l)=>(xg=h.dynCall_viiiijii=x.sf)(a,b,c,d,e,f,g,k,l),yg=h.dynCall_viijjiii=(a,b,c,d,e,f,g,k,l,m)=>(yg=h.dynCall_viijjiii=x.tf)(a,b,c,d,e,f,g,k,l,m),zg=h.dynCall_ijii=(a,b,c,d,e)=>(zg=h.dynCall_ijii=x.uf)(a,b,c,d,e),Ag=h.dynCall_jjjjjjj=(a,b,c,d,e,f,g,k,l,m,n,q,r)=>(Ag=h.dynCall_jjjjjjj=x.vf)(a,b,c,d,e,f,g,k,l,m,n,q,r),Bg=\r\nh.dynCall_jjjjjj=(a,b,c,d,e,f,g,k,l,m,n)=>(Bg=h.dynCall_jjjjjj=x.wf)(a,b,c,d,e,f,g,k,l,m,n),Cg=h.dynCall_vijjjjiij=(a,b,c,d,e,f,g,k,l,m,n,q,r,p)=>(Cg=h.dynCall_vijjjjiij=x.xf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p),Dg=h.dynCall_viiiiijij=(a,b,c,d,e,f,g,k,l,m,n)=>(Dg=h.dynCall_viiiiijij=x.yf)(a,b,c,d,e,f,g,k,l,m,n),Eg=h.dynCall_viiiiiijij=(a,b,c,d,e,f,g,k,l,m,n,q)=>(Eg=h.dynCall_viiiiiijij=x.zf)(a,b,c,d,e,f,g,k,l,m,n,q),Fg=h.dynCall_vijiii=(a,b,c,d,e,f,g)=>(Fg=h.dynCall_vijiii=x.Af)(a,b,c,d,e,f,g),Gg=h.dynCall_viiiiiiiiifi=\r\n(a,b,c,d,e,f,g,k,l,m,n,q)=>(Gg=h.dynCall_viiiiiiiiifi=x.Bf)(a,b,c,d,e,f,g,k,l,m,n,q),Hg=h.dynCall_viiijiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>(Hg=h.dynCall_viiijiiiiiiiii=x.Cf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t),Ig=h.dynCall_iiijiiii=(a,b,c,d,e,f,g,k,l)=>(Ig=h.dynCall_iiijiiii=x.Df)(a,b,c,d,e,f,g,k,l),Jg=h.dynCall_viiiiiijjiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>(Jg=h.dynCall_viiiiiijjiiiii=x.Ef)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v),Kg=h.dynCall_viiiiiiijiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>(Kg=\r\nh.dynCall_viiiiiiijiiiiii=x.Ff)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v),Lg=h.dynCall_vif=(a,b,c)=>(Lg=h.dynCall_vif=x.Gf)(a,b,c),Mg=h.dynCall_viif=(a,b,c,d)=>(Mg=h.dynCall_viif=x.Hf)(a,b,c,d),Ng=h.dynCall_viiiiiifii=(a,b,c,d,e,f,g,k,l,m)=>(Ng=h.dynCall_viiiiiifii=x.If)(a,b,c,d,e,f,g,k,l,m),Og=h.dynCall_viiiiijiiiiiiiiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L)=>(Og=h.dynCall_viiiiijiiiiiiiiiiiiiiiiiii=x.Jf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L),Pg=h.dynCall_viijji=\r\n(a,b,c,d,e,f,g,k)=>(Pg=h.dynCall_viijji=x.Kf)(a,b,c,d,e,f,g,k),Qg=h.dynCall_viifiifijjjii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>(Qg=h.dynCall_viifiifijjjii=x.Lf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v),Rg=h.dynCall_viiiiiiiiiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E)=>(Rg=h.dynCall_viiiiiiiiiiiiiiiiiiii=x.Mf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E),Sg=h.dynCall_iif=(a,b,c)=>(Sg=h.dynCall_iif=x.Nf)(a,b,c),Tg=h.dynCall_viiiiifiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r)=>(Tg=h.dynCall_viiiiifiiiiii=x.Of)(a,\r\nb,c,d,e,f,g,k,l,m,n,q,r),Ug=h.dynCall_vijiiiiiiijjii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)=>(Ug=h.dynCall_vijiiiiiiijjii=x.Pf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z),Vg=h.dynCall_iiiiid=(a,b,c,d,e,f)=>(Vg=h.dynCall_iiiiid=x.Qf)(a,b,c,d,e,f),Wg=h.dynCall_viiiijjj=(a,b,c,d,e,f,g,k,l,m,n)=>(Wg=h.dynCall_viiiijjj=x.Rf)(a,b,c,d,e,f,g,k,l,m,n),Xg=h.dynCall_viiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n)=>(Xg=h.dynCall_viiiiiiiiii=x.Sf)(a,b,c,d,e,f,g,k,l,m,n),Yg=h.dynCall_viiiiiiiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,\r\nt,v,z,A,C)=>(Yg=h.dynCall_viiiiiiiiiiiiiiiiii=x.Tf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C),Zg=h.dynCall_viiiiiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)=>(Zg=h.dynCall_viiiiiiiiiiiiiiii=x.Uf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z),$g=h.dynCall_viiiiiiiiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D)=>($g=h.dynCall_viiiiiiiiiiiiiiiiiii=x.Vf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D),ah=h.dynCall_viiiiiiijjj=(a,b,c,d,e,f,g,k,l,m,n,q,r,p)=>(ah=h.dynCall_viiiiiiijjj=x.Wf)(a,b,c,d,e,f,g,k,l,m,n,\r\nq,r,p),bh=h.dynCall_iiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n)=>(bh=h.dynCall_iiiiiiiiiii=x.Xf)(a,b,c,d,e,f,g,k,l,m,n),ch=h.dynCall_iiiiiiiiiiiiiiiiiifi=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D)=>(ch=h.dynCall_iiiiiiiiiiiiiiiiiifi=x.Yf)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D),dh=h.dynCall_viiif=(a,b,c,d,e)=>(dh=h.dynCall_viiif=x.Zf)(a,b,c,d,e),eh=h.dynCall_iijjj=(a,b,c,d,e,f,g,k)=>(eh=h.dynCall_iijjj=x._f)(a,b,c,d,e,f,g,k),fh=h.dynCall_viiiiji=(a,b,c,d,e,f,g,k)=>(fh=h.dynCall_viiiiji=x.$f)(a,b,c,d,e,f,\r\ng,k),gh=h.dynCall_iijjji=(a,b,c,d,e,f,g,k,l)=>(gh=h.dynCall_iijjji=x.ag)(a,b,c,d,e,f,g,k,l),hh=h.dynCall_ijijji=(a,b,c,d,e,f,g,k,l)=>(hh=h.dynCall_ijijji=x.bg)(a,b,c,d,e,f,g,k,l),ih=h.dynCall_iiiij=(a,b,c,d,e,f)=>(ih=h.dynCall_iiiij=x.cg)(a,b,c,d,e,f),jh=h.dynCall_viiijjiii=(a,b,c,d,e,f,g,k,l,m,n)=>(jh=h.dynCall_viiijjiii=x.dg)(a,b,c,d,e,f,g,k,l,m,n),kh=h.dynCall_iiiiijji=(a,b,c,d,e,f,g,k,l,m)=>(kh=h.dynCall_iiiiijji=x.eg)(a,b,c,d,e,f,g,k,l,m),lh=h.dynCall_viji=(a,b,c,d,e)=>(lh=h.dynCall_viji=x.fg)(a,\r\nb,c,d,e),mh=h.dynCall_iiiifi=(a,b,c,d,e,f)=>(mh=h.dynCall_iiiifi=x.gg)(a,b,c,d,e,f),nh=h.dynCall_iiijii=(a,b,c,d,e,f,g)=>(nh=h.dynCall_iiijii=x.hg)(a,b,c,d,e,f,g),oh=h.dynCall_iiiiiiiiijii=(a,b,c,d,e,f,g,k,l,m,n,q,r)=>(oh=h.dynCall_iiiiiiiiijii=x.ig)(a,b,c,d,e,f,g,k,l,m,n,q,r),ph=h.dynCall_iiiijjii=(a,b,c,d,e,f,g,k,l,m)=>(ph=h.dynCall_iiiijjii=x.jg)(a,b,c,d,e,f,g,k,l,m),qh=h.dynCall_iiiiiijjjii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p)=>(qh=h.dynCall_iiiiiijjjii=x.kg)(a,b,c,d,e,f,g,k,l,m,n,q,r,p),rh=h.dynCall_iiijiii=\r\n(a,b,c,d,e,f,g,k)=>(rh=h.dynCall_iiijiii=x.lg)(a,b,c,d,e,f,g,k),sh=h.dynCall_iiiiiiiijjjfi=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>(sh=h.dynCall_iiiiiiiijjjfi=x.mg)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v),th=h.dynCall_iijiiii=(a,b,c,d,e,f,g,k)=>(th=h.dynCall_iijiiii=x.ng)(a,b,c,d,e,f,g,k),uh=h.dynCall_iijjjii=(a,b,c,d,e,f,g,k,l,m)=>(uh=h.dynCall_iijjjii=x.og)(a,b,c,d,e,f,g,k,l,m),vh=h.dynCall_iiji=(a,b,c,d,e)=>(vh=h.dynCall_iiji=x.pg)(a,b,c,d,e),wh=h.dynCall_viiijiiiii=(a,b,c,d,e,f,g,k,l,m,n)=>(wh=h.dynCall_viiijiiiii=\r\nx.qg)(a,b,c,d,e,f,g,k,l,m,n),xh=h.dynCall_iid=(a,b,c)=>(xh=h.dynCall_iid=x.rg)(a,b,c),yh=h.dynCall_iiif=(a,b,c,d)=>(yh=h.dynCall_iiif=x.sg)(a,b,c,d),zh=h.dynCall_vidi=(a,b,c,d)=>(zh=h.dynCall_vidi=x.tg)(a,b,c,d),Ah=h.dynCall_vjiii=(a,b,c,d,e,f)=>(Ah=h.dynCall_vjiii=x.ug)(a,b,c,d,e,f),Bh=h.dynCall_viiiiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)=>(Bh=h.dynCall_viiiiiiiiiiiiiii=x.vg)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v),Ch=h.dynCall_viiijii=(a,b,c,d,e,f,g,k)=>(Ch=h.dynCall_viiijii=x.wg)(a,b,c,d,e,f,g,\r\nk),Dh=h.dynCall_viijiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p)=>(Dh=h.dynCall_viijiiiiiiiii=x.xg)(a,b,c,d,e,f,g,k,l,m,n,q,r,p),Eh=h.dynCall_viiij=(a,b,c,d,e,f)=>(Eh=h.dynCall_viiij=x.yg)(a,b,c,d,e,f),Fh=h.dynCall_fiiii=(a,b,c,d,e)=>(Fh=h.dynCall_fiiii=x.zg)(a,b,c,d,e),Gh=h.dynCall_jfi=(a,b,c)=>(Gh=h.dynCall_jfi=x.Ag)(a,b,c),Hh=h.dynCall_viiiiiiiiiiiiii=(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)=>(Hh=h.dynCall_viiiiiiiiiiiiii=x.Bg)(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t),Ih=h.dynCall_jiij=(a,b,c,d,e)=>(Ih=h.dynCall_jiij=\r\nx.Cg)(a,b,c,d,e),Jh=h.dynCall_fiii=(a,b,c,d)=>(Jh=h.dynCall_fiii=x.Dg)(a,b,c,d),xb=a=>(xb=x.Eg)(a),nb=()=>(nb=x.Fg)(),wb=a=>(wb=x.Gg)(a),yb=()=>(yb=x.Hg)();h.___start_em_js=1285180;h.___stop_em_js=1285341;function Lb(a,b){var c=W();try{return Ke(a,b)}catch(d){X(c);if(d!==d+0)throw d;V(1,0)}}function Rc(a,b){var c=W();try{dynCall_vi(a,b)}catch(d){X(c);if(d!==d+0)throw d;V(1,0)}}function Ob(a,b,c){var d=W();try{return dynCall_iii(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}\r\nfunction Vc(a,b,c){var d=W();try{dynCall_vii(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function Pc(a){var b=W();try{dynCall_v(a)}catch(c){X(b);if(c!==c+0)throw c;V(1,0)}}function Ub(a,b,c,d,e,f){var g=W();try{return Me(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}function Sb(a,b,c,d,e){var f=W();try{return Ne(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function bd(a,b,c,d){var e=W();try{Oe(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}\r\nfunction Qb(a,b,c,d){var e=W();try{return Pe(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function ed(a,b,c,d,e){var f=W();try{Xe(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function Kb(a){var b=W();try{return Se(a)}catch(c){X(b);if(c!==c+0)throw c;V(1,0)}}function Vb(a,b,c,d,e,f,g){var k=W();try{return Qe(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function gd(a,b,c,d,e,f){var g=W();try{We(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}\r\nfunction Wb(a,b,c,d,e,f,g,k){var l=W();try{return Ye(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function Gb(a,b){var c=W();try{return Ze(a,b)}catch(d){X(c);if(d!==d+0)throw d;V(1,0)}}function Db(a,b){var c=W();try{return af(a,b)}catch(d){X(c);if(d!==d+0)throw d;V(1,0)}}function Xb(a,b,c,d,e,f,g,k,l){var m=W();try{return ef(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function ld(a,b,c,d,e,f,g){var k=W();try{gf(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}\r\nfunction qd(a,b,c,d,e,f,g,k){var l=W();try{jf(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function Yb(a,b,c,d,e,f,g,k,l,m){var n=W();try{return kf(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function rd(a,b,c,d,e,f,g,k,l){var m=W();try{lf(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function sd(a,b,c,d,e,f,g,k,l,m){var n=W();try{rf(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}\r\nfunction Wc(a,b,c,d){var e=W();try{sf(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function $b(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{return uf(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}function zd(a,b,c,d,e,f,g,k,l,m,n,q,r,p){var t=W();try{vf(a,b,c,d,e,f,g,k,l,m,n,q,r,p)}catch(v){X(t);if(v!==v+0)throw v;V(1,0)}}function Uc(a,b,c,d,e,f,g){var k=W();try{yf(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}\r\nfunction ad(a,b,c,d,e,f,g){var k=W();try{Af(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function hd(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{Bf(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}function cd(a,b,c,d,e){var f=W();try{Ff(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function Jb(a,b,c,d,e){var f=W();try{return Fh(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}\r\nfunction vd(a,b,c,d,e,f,g,k,l,m,n,q,r,p){var t=W();try{Tf(a,b,c,d,e,f,g,k,l,m,n,q,r,p)}catch(v){X(t);if(v!==v+0)throw v;V(1,0)}}function Qc(a,b,c,d,e){var f=W();try{Rf(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function fd(a,b,c,d,e,f,g){var k=W();try{Sf(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function Yc(a,b,c,d,e){var f=W();try{Pf(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}\r\nfunction jd(a,b,c,d,e,f,g,k){var l=W();try{Qf(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function ac(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z){var A=W();try{return Vf(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)}catch(C){X(A);if(C!==C+0)throw C;V(1,0)}}function yd(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{Wf(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}\r\nfunction bc(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D){var E=W();try{return Yf(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D)}catch(F){X(E);if(F!==F+0)throw F;V(1,0)}}function nd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z){var A=W();try{eg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)}catch(C){X(A);if(C!==C+0)throw C;V(1,0)}}function md(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v){var z=W();try{fg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)}catch(A){X(z);if(A!==A+0)throw A;V(1,0)}}\r\nfunction od(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t){var v=W();try{gg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)}catch(z){X(v);if(z!==z+0)throw z;V(1,0)}}function Fb(a,b,c,d,e,f,g){var k=W();try{return bg(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function Zc(a,b,c,d,e){var f=W();try{qg(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function ud(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{Gg(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}\r\nfunction Ad(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t){var v=W();try{Hh(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)}catch(z){X(v);if(z!==z+0)throw z;V(1,0)}}function Tc(a,b,c){var d=W();try{Lg(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function pd(a,b,c,d,e,f,g,k,l,m){var n=W();try{Ng(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function xd(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{Gf(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}\r\nfunction Fd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E){var F=W();try{Rg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E)}catch(G){X(F);if(G!==G+0)throw G;V(1,0)}}function Nb(a,b,c){var d=W();try{return Sg(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function kd(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{Tg(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}\r\nfunction Cd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z){var A=W();try{Zg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)}catch(C){X(A);if(C!==C+0)throw C;V(1,0)}}function Ed(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D){var E=W();try{$g(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D)}catch(F){X(E);if(F!==F+0)throw F;V(1,0)}}function wd(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{Xg(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}\r\nfunction Dd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C){var D=W();try{Yg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C)}catch(E){X(D);if(E!==E+0)throw E;V(1,0)}}function Zb(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{return bh(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}function cc(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D){var E=W();try{return ch(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D)}catch(F){X(E);if(F!==F+0)throw F;V(1,0)}}\r\nfunction dd(a,b,c,d,e){var f=W();try{dh(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function td(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{Cf(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}function Xc(a,b,c,d){var e=W();try{Mg(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function Rb(a,b,c,d,e,f){var g=W();try{return mh(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}function Mb(a,b,c){var d=W();try{return xh(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}\r\nfunction Pb(a,b,c,d){var e=W();try{return yh(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function Sc(a,b,c,d){var e=W();try{zh(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function Ib(a,b,c,d){var e=W();try{return Jh(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function Tb(a,b,c,d,e,f){var g=W();try{return Vg(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}\r\nfunction Bd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v){var z=W();try{Bh(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)}catch(A){X(z);if(A!==A+0)throw A;V(1,0)}}function Hb(a,b,c){var d=W();try{return bf(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function Eb(a,b,c){var d=W();try{return df(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function pc(a,b,c,d,e){var f=W();try{return Le(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}\r\nfunction xc(a,b,c,d){var e=W();try{return Te(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function ke(a,b,c,d){var e=W();try{Ve(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}function Ic(a,b){var c=W();try{return $e(a,b)}catch(d){X(c);if(d!==d+0)throw d;V(1,0)}}function ce(a,b,c,d,e){var f=W();try{ff(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function pe(a,b,c,d,e,f){var g=W();try{hf(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}\r\nfunction Wd(a,b,c,d,e,f,g,k){var l=W();try{Ch(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function ge(a,b,c,d,e,f,g){var k=W();try{cg(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function jc(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{return mf(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}function hc(a,b,c,d,e,f,g){var k=W();try{return Ue(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}\r\nfunction ee(a,b,c,d,e,f,g,k){var l=W();try{of(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function Qd(a,b,c,d,e,f,g){var k=W();try{pf(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function Ld(a,b,c,d,e,f,g,k){var l=W();try{qf(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function Jc(a,b,c){var d=W();try{return cf(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}\r\nfunction ec(a,b,c,d,e,f,g,k,l,m){var n=W();try{return tf(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function je(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t){var v=W();try{wf(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)}catch(z){X(v);if(z!==z+0)throw z;V(1,0)}}function Zd(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{xf(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}function de(a,b,c,d,e,f){var g=W();try{nf(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}\r\nfunction be(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{zf(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}function ze(a,b,c,d,e,f,g,k,l){var m=W();try{Df(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function Kc(a,b,c,d){var e=W();try{return Ef(a,b,c,d)}catch(f){X(e);if(f!==f+0)throw f;V(1,0)}}\r\nfunction we(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O){var Y=W();try{Hf(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O)}catch(Z){X(Y);if(Z!==Z+0)throw Z;V(1,0)}}function Vd(a,b,c,d,e,f,g){var k=W();try{If(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function te(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{Jf(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}\r\nfunction qc(a,b,c,d,e,f){var g=W();try{return Kf(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}function vc(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t){var v=W();try{return Lf(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)}catch(z){X(v);if(z!==z+0)throw z;V(1,0)}}function xe(a,b,c){var d=W();try{Mf(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function Mc(a,b,c,d,e){var f=W();try{return Nf(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}\r\nfunction uc(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{return Of(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}function Gd(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{Uf(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}function Dc(a,b,c){var d=W();try{return Xf(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function se(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{Zf(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}\r\nfunction oc(a,b,c,d,e,f,g,k,l,m){var n=W();try{return $f(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function wc(a,b,c,d,e,f,g,k,l){var m=W();try{return ag(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function Ee(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H){var I=W();try{dg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H)}catch(J){X(I);if(J!==J+0)throw J;V(1,0)}}\r\nfunction Ge(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O){var Y=W();try{hg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N,O)}catch(Z){X(Y);if(Z!==Z+0)throw Z;V(1,0)}}function De(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I){var J=W();try{ig(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I)}catch(L){X(J);if(L!==L+0)throw L;V(1,0)}}\r\nfunction Ce(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G){var H=W();try{jg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G)}catch(I){X(H);if(I!==I+0)throw I;V(1,0)}}function Fe(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N){var O=W();try{kg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L,N)}catch(Y){X(O);if(Y!==Y+0)throw Y;V(1,0)}}function qe(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{lg(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}\r\nfunction ne(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{mg(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}function ve(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E){var F=W();try{ng(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E)}catch(G){X(F);if(G!==G+0)throw G;V(1,0)}}function Be(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t){var v=W();try{og(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)}catch(z){X(v);if(z!==z+0)throw z;V(1,0)}}\r\nfunction Ae(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{pg(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}function Hc(a,b,c){var d=W();try{return Gh(a,b,c)}catch(e){X(d);if(e!==e+0)throw e;V(1,0)}}function ic(a,b,c,d,e,f,g,k){var l=W();try{return rg(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function re(a,b,c,d,e,f,g,k){var l=W();try{sg(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}\r\nfunction Yd(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{tg(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}function Pd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t){var v=W();try{ug(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)}catch(z){X(v);if(z!==z+0)throw z;V(1,0)}}function mc(a,b,c,d,e,f,g){var k=W();try{return vg(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function Md(a,b,c,d,e,f,g,k,l,m,n,q,r,p){var t=W();try{wg(a,b,c,d,e,f,g,k,l,m,n,q,r,p)}catch(v){X(t);if(v!==v+0)throw v;V(1,0)}}\r\nfunction Sd(a,b,c,d,e,f,g,k,l){var m=W();try{xg(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function ie(a,b,c,d,e,f,g,k,l,m){var n=W();try{yg(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function Ec(a,b,c,d,e){var f=W();try{return zg(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function Nc(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{return Bg(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}\r\nfunction Oc(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{return Ag(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}function ue(a,b,c,d,e,f,g,k,l,m,n,q,r,p){var t=W();try{Cg(a,b,c,d,e,f,g,k,l,m,n,q,r,p)}catch(v){X(t);if(v!==v+0)throw v;V(1,0)}}function Od(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{Dg(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}function Jd(a,b,c,d,e,f,g,k,l,m,n,q){var r=W();try{Eg(a,b,c,d,e,f,g,k,l,m,n,q)}catch(p){X(r);if(p!==p+0)throw p;V(1,0)}}\r\nfunction me(a,b,c,d,e,f,g){var k=W();try{Fg(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function $d(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t){var v=W();try{Hg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t)}catch(z){X(v);if(z!==z+0)throw z;V(1,0)}}function tc(a,b,c,d,e,f,g,k,l){var m=W();try{return Ig(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function Kd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v){var z=W();try{Jg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)}catch(A){X(z);if(A!==A+0)throw A;V(1,0)}}\r\nfunction Hd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v){var z=W();try{Kg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)}catch(A){X(z);if(A!==A+0)throw A;V(1,0)}}function Nd(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L){var N=W();try{Og(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z,A,C,D,E,F,G,H,I,J,L)}catch(O){X(N);if(O!==O+0)throw O;V(1,0)}}function he(a,b,c,d,e,f,g,k){var l=W();try{Pg(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}\r\nfunction $c(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v){var z=W();try{Qg(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)}catch(A){X(z);if(A!==A+0)throw A;V(1,0)}}function oe(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z){var A=W();try{Ug(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v,z)}catch(C){X(A);if(C!==C+0)throw C;V(1,0)}}function Td(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{Wg(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}\r\nfunction Id(a,b,c,d,e,f,g,k,l,m,n,q,r,p){var t=W();try{ah(a,b,c,d,e,f,g,k,l,m,n,q,r,p)}catch(v){X(t);if(v!==v+0)throw v;V(1,0)}}function Ac(a,b,c,d,e,f,g,k){var l=W();try{return eh(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function Lc(a,b,c,d,e){var f=W();try{return Ih(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function Rd(a,b,c,d,e,f,g,k){var l=W();try{fh(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}\r\nfunction Bc(a,b,c,d,e,f,g,k,l){var m=W();try{return gh(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function Fc(a,b,c,d,e,f,g,k,l){var m=W();try{return hh(a,b,c,d,e,f,g,k,l)}catch(n){X(m);if(n!==n+0)throw n;V(1,0)}}function lc(a,b,c,d,e,f){var g=W();try{return ih(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}function ae(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{jh(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}\r\nfunction kc(a,b,c,d,e,f,g,k,l,m){var n=W();try{return kh(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function le(a,b,c,d,e){var f=W();try{lh(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}function rc(a,b,c,d,e,f,g){var k=W();try{return nh(a,b,c,d,e,f,g)}catch(l){X(k);if(l!==l+0)throw l;V(1,0)}}function dc(a,b,c,d,e,f,g,k,l,m,n,q,r){var p=W();try{return oh(a,b,c,d,e,f,g,k,l,m,n,q,r)}catch(t){X(p);if(t!==t+0)throw t;V(1,0)}}\r\nfunction nc(a,b,c,d,e,f,g,k,l,m){var n=W();try{return ph(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function gc(a,b,c,d,e,f,g,k,l,m,n,q,r,p){var t=W();try{return qh(a,b,c,d,e,f,g,k,l,m,n,q,r,p)}catch(v){X(t);if(v!==v+0)throw v;V(1,0)}}function sc(a,b,c,d,e,f,g,k){var l=W();try{return rh(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}\r\nfunction fc(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v){var z=W();try{return sh(a,b,c,d,e,f,g,k,l,m,n,q,r,p,t,v)}catch(A){X(z);if(A!==A+0)throw A;V(1,0)}}function zc(a,b,c,d,e,f,g,k){var l=W();try{return th(a,b,c,d,e,f,g,k)}catch(m){X(l);if(m!==m+0)throw m;V(1,0)}}function Cc(a,b,c,d,e,f,g,k,l,m){var n=W();try{return uh(a,b,c,d,e,f,g,k,l,m)}catch(q){X(n);if(q!==q+0)throw q;V(1,0)}}function yc(a,b,c,d,e){var f=W();try{return vh(a,b,c,d,e)}catch(g){X(f);if(g!==g+0)throw g;V(1,0)}}\r\nfunction Xd(a,b,c,d,e,f,g,k,l,m,n){var q=W();try{wh(a,b,c,d,e,f,g,k,l,m,n)}catch(r){X(q);if(r!==r+0)throw r;V(1,0)}}function Ud(a,b,c,d,e,f){var g=W();try{Eh(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}function fe(a,b,c,d,e,f,g,k,l,m,n,q,r,p){var t=W();try{Dh(a,b,c,d,e,f,g,k,l,m,n,q,r,p)}catch(v){X(t);if(v!==v+0)throw v;V(1,0)}}function ye(a,b,c,d,e,f){var g=W();try{Ah(a,b,c,d,e,f)}catch(k){X(g);if(k!==k+0)throw k;V(1,0)}}\r\nfunction Gc(a){var b=W();try{return Re(a)}catch(c){X(b);if(c!==c+0)throw c;V(1,0)}}function Ie(a){a=Object.assign({},a);var b=d=>()=>d()>>>0,c=d=>e=>d(e)>>>0;a.__errno_location=b(a.__errno_location);a.malloc=c(a.malloc);a.stackSave=b(a.stackSave);a.stackAlloc=c(a.stackAlloc);return a}h.stackAlloc=Je;h.stackSave=W;h.stackRestore=X;h.UTF8ToString=R;h.stringToUTF8=(a,b,c)=>Va(a,K,b,c);h.lengthBytesUTF8=Ua;var Kh;za=function Lh(){Kh||Mh();Kh||(za=Lh)};\r\nfunction Mh(){function a(){if(!Kh&&(Kh=!0,h.calledRun=!0,!y)){Ka(va);aa(h);if(h.onRuntimeInitialized)h.onRuntimeInitialized();if(h.postRun)for(\"function\"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;){var b=h.postRun.shift();wa.unshift(b)}Ka(wa)}}if(!(0<Q)){if(h.preRun)for(\"function\"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)xa();Ka(ua);0<Q||(h.setStatus?(h.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){h.setStatus(\"\")},1);a()},1)):a())}}\r\nif(h.preInit)for(\"function\"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();Mh();\r\n\r\n\r\n  return moduleArg.ready\r\n}\r\n\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], () => ortWasm);\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new tensor_js_1.Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ?\n        (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n        'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nclass Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    if (arg0 === 'float16') {\n                        // Throw error here because when user try to use number array as data,\n                        // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                        // Uint16Array.from(arg1) which generates wrong data.\n                        throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                    }\n                    else if (arg0 === 'uint64' || arg0 === 'int64') {\n                        // use 'as any' here because:\n                        // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                        // see https://github.com/microsoft/TypeScript/issues/17002\n                        // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()' does\n                        // not accept parameter mapFn.\n                        // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                        // type.\n                        // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1, BigInt);\n                    }\n                    else {\n                        // assume 'arg1' is of type \"readonly number[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1);\n                    }\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => new tensor_js_1.Tensor(tensor.type, tensor.data, dims);\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.16.0';\n//# sourceMappingURL=version.js.map","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","onnxjsBackend","registerBackend","wasmBackend","gpu","versions","web","version","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","supportTimestampQuery","currentKernelCustomData","kernelCustomData","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","maxBufferSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","features","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","kernelPersistentData","configureLogger","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputInfos","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","getTargetBuffer","download","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","TensorViewImpl","getFloat32Array","elementCount","HEAP8","getBigInt64Array","getInt32Array","newDims","ComputeContextImpl","customDataBuffer","HEAPU8","customDataOffset","customDataSize","contextDataOffset","heapU32","HEAPU32","opKernelContext","outputCount","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","WebGpuBackend","isSourceGpu","dataOffset","logLevelPrefix","configLogLevel","$configLogLevel","$debug","LOG","messageLevel","logLevelStringToEnum","level","args","isChannelLast","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","freeBuffers","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","buffers","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","storage","acosh","argMax","parseArgMinMaxAttributes","argMin","asinh","atanh","pool","clipV10","cosh","parseAlphaAttributes","erf","expand","gelu","parseGlobalMaxPoolAttributes","instanceNorm","parseInstanceNormAttributes","layerNorm","parseLayerNormAttributes","reciprocal","reduceL1","reduceL2","reduceLogSumExp","reduceSumSquare","parseResizeAttributes","sinh","skipLayerNorm","parseSkipLayerNormAttributes","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","createConvTranspose2DProgramInfo","squeezeOutputShapeFunction","shaderHelper","rowDim","colDim","channelDim","outputSize","workPerThread","inputVariable","dy","outputVariable","codeSnippet4","codeSnippet","setByOffset","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createConvTranspose2DOpProgramShaderSource","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createArgMinMaxProgramInfoLoader","updatedAttributes","selectLastIndex","createArgMinMaxAttributesFromInputs","getByOffset","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","vectorize","sharedDimension","dimA","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","calcOffsetImpl","assignment","singleAssignment","expressionA","expressionB","declareVariables","createBinaryOpProgramShader","createBinaryOpProgramInfo","roundStr","WORKGROUP_SIZE","getWgslMappedType","components","tensorTypeToWsglStorageType","mappedType","createIndicesHelper","isInput","indicesType","storageType","normalizeDim","implementationUsed","setByIndices","getByIndices","o2iSnippet","offsetToIndicesImplementation","indicesToOffsetImplementation","getByIndicesImplementation","getImplementation","setByIndicesImplementation","setImplementation","impls","varOffset","varIndices","indicesGet","indicesSet","indicesAndValue","normalizedIndices","ShaderHelperImpl","indicesHelpers","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","declareVariable","bindingIndex","access","additionalImplementations","createShaderHelper","adjustedAxis","inputVars","indicesAxis","returnSnippet","assignOutputData","createConcatProgramInfo","createConcatProgramInfoLoader","createGroupedConvProgramInfoLoader","getActicationSnippet","createGroupedConvProgramInfo","updateOutputShape","wIsConst","createConvTranspose2DProgramInfoLoader","convTranspose1d","weightTransposeAttribute","auto_pad","kernel_shape","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","expandProgramMetadata","getAdjustedShape","diff","shapeIndex","inputShapeIndex","createExpandProgramInfo","activation_params","indicesShape","inputDataType","includes","indicesElementSize","dataBatchElements","gatheredBatchElements","axisDimLimit","inputSize","totalGathers","calculateAlpha","calculateC","m","broadcastM","broadcastN","offsetC","inputStorageBuffersDeclarations","H","normCount","createInstanceNormNHWCProgramInfo","normSize","scaleSize","biasSize","createInstanceNormProgramInfo","meanInvStdDevDim","hasMeanDataOutput","hasInvStdOutput","createLayerNormProgramInfo","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","noOp","axesInput","noopWithEmptyAxes","reduceOnAllAxes","inputOffsetAssignment","initinputOffsetLet","initinputOffsetVar","initinputOffset","l","createReduceProgramInfoLoader","createReduceAttributesFromInputs","_output","createResizeProgramInfoLoader","opsetVersion","sizes","roi","inputTensor","scalesInput","roiInput","roiTmp","roiLocal","updateRoI","round","initOutputShape","keepAspectRatioPolicy","scaleInPolicy","MAX_VALUE","MIN_VALUE","adjustedOutputShape","adjustOutputShape","noScale","coordinateTransferMode","checkInputIndices","getNearestPixelFromOriginal","calculateInputIndicesFromOutputIndices","calculateOriginalIndicesFromOutputIndices","batchIdx","heightIdx","widthIdx","bilinearInterpolation","cubicCoeffA","createCubicInterpolationFunction","direction","bicubicInterpolation","createResizeProgramInfo","getOpsetVersionFromCustomDataBuffer","roiInputIndex","scalesInputIndex","sizesInputIndex","validateScales","newScales","updateScales","skip","gamma","hiddenSize","sequenceLength","isTraining","hasBetaInput","hasBiasInput","hasMeanOutput","hasInvStdDevOutput","hasInputSkipBiasSumOutput","bindingNumber","createSkipLayerNormProgramInfo","createSkipLayerNormProgramInfoLoader","readInput","fixStartEndValues","steps","newValue","programInfoLoader","createSliceAttributesFromInputs","signs","sign","numSteps","newEnd","newStart","outputTensorInfo","calculateInputIndicesImpl","createSliceProgramInfoLoader","_shaderHelper","createSoftmaxProgramInfo","splitSizes","createSplitAttributesFromInputs","outputsTensorInfo","outputShapes","writeBufferDataImpl","createSplitProgramInfoLoader","getRepeats","repeatsTensorView","repeats","permAttr","permFunctionBody","datasize","expression","createElementwiseProgramShader","erfImpl","profilingEnabled","webgpu","profilingMode","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","profilingQueryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","isSafeInteger","normalizedDispatchGroupSize","userCode","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","path","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","loggingLevel","_OrtInit","initJsep","activeSessions","modelDataOffset","_malloc","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","_OrtGetInputOutputCount","HEAP32","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","prefix","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","ortWasmThreaded","__filename","moduleArg","q","u","aa","ba","A","da","ea","fa","ready","h","Ib","ob","qb","ab","pb","xa","rb","sb","la","I","ma","ha","ia","ja","E","importScripts","F","G","ENVIRONMENT_IS_PTHREAD","ka","fs","na","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","oa","pa","writeSync","qa","print","J","printErr","quit","wasmBinary","noExitRuntime","L","ra","P","HEAP16","HEAPU16","HEAPF32","HEAPF64","sa","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","ta","ua","va","wa","S","Q","ya","R","za","monitorRunDependencies","Aa","clearInterval","onAbort","RuntimeError","Ba","Ca","Ea","credentials","ok","catch","Da","instantiate","T","Ga","tb","U","Ha","Ia","Ja","V","xb","Ka","lb","Ra","Qa","cmd","start_routine","yb","jb","pthread_ptr","unref","Eb","La","Ma","fromCharCode","Na","W","zb","onExit","Pa","Oa","Ua","eb","Xa","nb","mb","ub","receiveObjectTransfer","wb","threadInitTLS","cb","setExitStatus","Kb","vb","targetThread","Jb","transferList","Sa","thread","loaded","alert","threadId","text","filename","lineno","on","handlers","urlOrBlob","wasmModule","ib","Ta","Ya","$a","hb","gb","Gb","db","establishStackSpace","Va","invokeEntryPoint","Wa","apply","charCodeAt","kb","Atomics","Fb","store","__emscripten_thread_mailbox_await","checkMailbox","Ab","Bb","Cb","Db","arguments","Hb","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Lb","Mb","Nb","Ob","Pb","Qb","Rb","Ub","crypto","getRandomValues","randomFillSync","randomBytes","Tb","Vb","Wb","Yb","Zb","Sb","O","getFullYear","getMonth","getDate","getDay","getTime","setDate","setMonth","setFullYear","Za","Xb","$b","Z","Y","dc","bc","ec","fc","gc","hc","ic","rc","uc","mc","Browser","resume","kc","jc","pause","nc","oc","pc","lc","qc","sc","ref","NaN","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","tc","toTimeString","timeOrigin","grow","cc","Fibers","ac","__errno_location","pthread_self","malloc","vc","instantiateWasm","instantiateStreaming","Fa","instance","$","ga","_pthread_self","__emscripten_tls_init","__emscripten_thread_init","__emscripten_thread_crashed","wc","__emscripten_thread_exit","__emscripten_check_mailbox","dynCall_ii","yc","calledRun","onRuntimeInitialized","postRun","startWorker","preRun","setStatus","___start_em_js","___stop_em_js","keepRuntimeAlive","ExitStatus","xc","preInit","ortWasm","oh","eh","gh","Tg","fh","hh","ih","jh","Mg","Ig","ah","Rg","$g","Ug","Xg","Vg","dh","Zg","Sg","Wg","Yg","Kg","Lg","mh","lh","Ng","Qg","Og","Jg","ph","nh","He","Pg","bh","Sc","Nc","Oc","Pc","Lc","Mc","copyWithin","Qc","af","Rc","df","bg","Ze","Tc","bf","Vc","Jh","Fh","Se","Ke","xh","dynCall_iii","yh","Pe","Ne","Uc","Me","Qe","Ye","ef","kf","uf","Vf","Yf","ch","tf","qh","Bc","Ue","rg","Cc","mf","vg","$f","Kc","Le","Kf","rh","Of","Lf","ag","Jc","Te","vh","_a","th","uh","Xf","zg","Re","Gh","Hc","$e","cf","Ef","Ih","Nf","Bg","Ag","dynCall_v","Rf","dynCall_vi","zh","yf","dynCall_vii","sf","Pf","qg","Af","Oe","Ff","Xe","Sf","We","Bf","Qf","gf","fg","eg","gg","jf","lf","rf","Cf","Gg","Tf","Gf","Wf","vf","Hh","Bh","Uf","Eg","qf","wg","Dg","ug","zc","pf","xg","Eh","If","Ec","Ch","tg","xf","Hg","zf","Gc","ff","nf","Ac","of","Dh","Dc","cg","yg","wf","Ic","Ve","Fg","mg","Fc","hf","lg","sg","Zf","Jf","Cg","ng","Hf","Mf","Ah","Df","pg","og","jg","_b","ig","dg","kg","hg","Ie","Wc","Xc","Yc","Zc","_c","$c","ad","bd","cd","dd","ed","fd","gd","hd","jd","kd","ld","md","nd","od","pd","qd","Kh","rd","sd","ud","vd","wd","xd","Je","yd","zd","Ad","Bd","Cd","Dd","Ed","Fd","dynCall_iiij","Gd","Hd","Id","dynCall_iiiiii","Jd","dynCall_iiiii","Kd","dynCall_viii","Ld","dynCall_iiii","Md","dynCall_iiiiiii","Nd","dynCall_j","Od","dynCall_i","Pd","dynCall_iij","Qd","dynCall_iiiiij","Rd","dynCall_vij","Sd","dynCall_viiiii","Td","dynCall_viiii","Ud","dynCall_iiiiiiii","Vd","dynCall_fi","Wd","dynCall_ji","Xd","dynCall_di","Yd","dynCall_fii","Zd","dynCall_jii","_d","dynCall_dii","$d","dynCall_iiiiiiiii","ae","dynCall_viij","be","dynCall_viiiiii","ce","dynCall_vijj","de","dynCall_viiiiiii","ee","dynCall_iiiiiiiiii","fe","dynCall_viiiiiiii","ge","dynCall_iiiiijiiiii","he","dynCall_viiji","ie","dynCall_viijiii","je","dynCall_viiiij","ke","dynCall_viiiiij","le","dynCall_viiiiiiiii","me","dynCall_viid","ne","dynCall_iiiiiiiij","oe","dynCall_iiiiiiiiiiii","pe","dynCall_viiiiiiiiiiiii","qe","dynCall_viijjjiiiiii","re","dynCall_viiijiiiiiii","se","dynCall_viffiii","te","dynCall_viiijjjii","ue","dynCall_viifiii","ve","dynCall_viiiiidiidi","we","dynCall_viiiiiiiiidi","xe","dynCall_vjiiiiii","ye","dynCall_jiii","ze","dynCall_viiid","Ae","dynCall_viiiiiiiiiii","Be","dynCall_vijjjjjjjjjjjjji","Ce","dynCall_viiiji","De","dynCall_vijjjiiji","Ee","dynCall_iiiji","Fe","dynCall_iiijiiiiiiiiii","Ge","dynCall_vj","dynCall_jjj","dynCall_iiijiiiiii","dynCall_viiff","dynCall_viiiiiff","dynCall_vfiii","dynCall_viiiiff","dynCall_viiiiiiiiifiii","dynCall_viiiiiiiijj","dynCall_iiiiiiiiiiiiiifii","dynCall_viiiiiiiiiiii","dynCall_ij","dynCall_iiiiiiiiiiiiiiiiifii","dynCall_vijjiiiiii","dynCall_iiiijjj","dynCall_iiijjj","dynCall_fffffff","dynCall_viijj","dynCall_vjjjjjjffiifiiiiii","dynCall_viiiiiiffiifiiiii","_e","dynCall_viiiiiiffifiiiii","dynCall_viiiiiiffiiiiii","dynCall_vjjjjjjjjfffiifiiiiii","dynCall_vjjjjjjfffifiiiiiii","dynCall_vjjjjjjfffifiiiii","dynCall_vjjjjjjjjfffiifiiiii","dynCall_vijjfffiii","dynCall_vijiiiiiiii","dynCall_vijjjjjjifiiiii","dynCall_vjjjjjiiii","dynCall_vjjjjfiii","dynCall_viifi","dynCall_iiiiiji","dynCall_vijjii","dynCall_viiijiiiiii","dynCall_viiiiijjiiiii","dynCall_iiiiji","dynCall_viiiiijiiiiii","dynCall_viiiijii","dynCall_viijjiii","dynCall_ijii","dynCall_jjjjjjj","dynCall_jjjjjj","dynCall_vijjjjiij","dynCall_viiiiijij","dynCall_viiiiiijij","dynCall_vijiii","dynCall_viiiiiiiiifi","dynCall_viiijiiiiiiiii","dynCall_iiijiiii","dynCall_viiiiiijjiiiii","dynCall_viiiiiiijiiiiii","dynCall_vif","dynCall_viif","dynCall_viiiiiifii","dynCall_viiiiijiiiiiiiiiiiiiiiiiii","dynCall_viijji","dynCall_viifiifijjjii","dynCall_viiiiiiiiiiiiiiiiiiii","dynCall_iif","dynCall_viiiiifiiiiii","dynCall_vijiiiiiiijjii","dynCall_iiiiid","dynCall_viiiijjj","dynCall_viiiiiiiiii","dynCall_viiiiiiiiiiiiiiiiii","dynCall_viiiiiiiiiiiiiiii","dynCall_viiiiiiiiiiiiiiiiiii","dynCall_viiiiiiijjj","dynCall_iiiiiiiiiii","dynCall_iiiiiiiiiiiiiiiiiifi","dynCall_viiif","dynCall_iijjj","_f","dynCall_viiiiji","dynCall_iijjji","dynCall_ijijji","dynCall_iiiij","dynCall_viiijjiii","dynCall_iiiiijji","dynCall_viji","dynCall_iiiifi","dynCall_iiijii","dynCall_iiiiiiiiijii","dynCall_iiiijjii","dynCall_iiiiiijjjii","dynCall_iiijiii","dynCall_iiiiiiiijjjfi","dynCall_iijiiii","dynCall_iijjjii","dynCall_iiji","dynCall_viiijiiiii","dynCall_iid","dynCall_iiif","dynCall_vidi","dynCall_vjiii","dynCall_viiiiiiiiiiiiiii","dynCall_viiijii","dynCall_viijiiiiiiiii","dynCall_viiij","dynCall_fiiii","dynCall_jfi","dynCall_viiiiiiiiiiiiii","dynCall_jiij","dynCall_fiii","Mh","Lh","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","backends","backendsSortedByPriority","priority","currentBackend","backendHints","backendNames","errors","backendName","backendInfo","isInitializing","initPromise","backend_impl_js_1","version_js_1","logLevelValue","common","env_impl_js_1","__createBinding","k2","desc","getOwnPropertyDescriptor","__exportStar","tensor_js_1","isFetchesEmpty","isFetches","arg1Keys","results","returnValue","filePathOrUint8Array","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","pixels2DContext","tensorLayout","inputformat","norm","normMean","normBias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","fillStyle","fillRect","toDataURL","image","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromImage","bufferToTensor","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","img","tempCanvas","putImageData","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_utils_impl_js_1","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","checkBigInt","typedArrayConstructor","BigInt","firstElementType","calculateSize","toImageData","tensorReshape","tensor_impl_js_1","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}